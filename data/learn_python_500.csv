1,"if you are using a list with the intention of doing lookups, you are doing it wrong. Lists are dog slow with their linear search.  
Transform your data into a dictionary

    records = [{'id': 123, 'name': 'john', 'state': 'ca', 'city': 'los angeles'}, 
           {'id': 222, 'name': 'mary', 'state': 'tx', 'city': 'houston'}, 
           {'id': 234, 'name': 'karl', 'state': 'ny', 'city': 'new york city'},]
    records_dict = {d['id']: d for d in records}
    if rec_id in records_dict:
        record = records_dict[rec_id]
        print(...)
    else:
        print('nope')"
1,"    ask for a number  
    set not_prime flag to 0  
     for number in 2 (inclusive) ... num (exclusive) range  
        check if the remainder of num division by number is 0  
           if so, set the not_prime flag to 1  

    if not_prime, print 'not prime' else 'prime'  

never use eval() on user input. You are asking to get owned hard, like ""steal yo bitcoins and delete everything on the disk"" hard. If you expect ints, use int()  
also flag variable name is flat out bad. It tells nothing about what it is. `is_prime` would have been better, and if it's a de facto boolean, you are better off using `True`/`False` instead of `0`/`1` as values."
1,"care to show how the values are laid out in the html source?
I'd say it's better to scrape stuff in a way that preserves the associations between pieces of data found in the source instead of dumping it all into a one list and then trying to restore the initial associations by hand.

Your scraping should return tuples right off the bat."
1,"if/elif/else are not lined up. They have to have the same indentation. Also be consistent, these vertical lines tell you where standard indentation of 4 spaces is supposed to be, while you have places with 6 spaces because reasons?

Also it's `sinko in (a, b, c)`, not `sinko == (a, b, c)`. `in` checks if the value can be found among the provided values, `==` checks if the value is literally equal to the whole list of values, which will never happen, because string is not list/tuple and never will be.  
Membership check vs literal equality."
1,"? will make it optional all right. The problem here is that the trailing `.` is not the part of the match.

https://repl.it/repls/ExtrasmallCookedNotification

Also nobody said you have to do everything inside regexes. For example you can check with a run of the mill python code if the content of the third group is None and act accordingly.



Btw, this part: `(G+1|G+0+1|G+0|G+0+0)`. Do you really accept arbitrarily long sequences of Gs, followed by arbitralily long sequences of 0s? Anyway, if I am not mistaken it can be folded into `G+0*[01]`"
1,"without preserved intendation it's hard to say  
anyway `break outside loop` would mean that it's indented wrong. You need

    while True:
        ...
        break

or

    while True:
        ...
        if something:
            break

Long story short `break` has to be more to the right than the loop containing it.

also this won't work

    sinko == ""da"" or "" da"" or "" imam"" or "" imam ga"" or "" dap"" or "" yes"" or "" da bre"" or "" imam ga bre""

   because it will be interpreted as

    (sinko == ""da"") or ("" da"") or ("" imam"") or ("" imam ga"") or ("" dap"") or ("" yes"") or ("" da bre"") or ("" imam ga bre"")

which is a valid expression, but definitely not what you want.

if you want to list viable options, you either have to go with explicit `sinko ==` with every single one of them, or use `sinko in (""da"", ""imam"", ""imam ga"", ...)` construct."
1,"you can call it whatever you want, at the end of the day you can't get rid of indices and it is a downgrade. Unpacking was supposed to be a pythonic solution to the problem of lowlevelish, exposed indices."
1,"> when calling with a list or tuple, use a * before it.

how does one apply `*` to `key` argument of sorted/min/max?"
1,"your understanding is decent.

you are not overwriting the class per se, but you are reusing the `dot` handle to point to something else, by which you lose access to the class with its methods. Solution: don't reuse the `dot` handle."
1,"the general gist of your code with some liberal use of prints.   
https://repl.it/repls/InsecureContentDatabases  
see at which point `dot` stops referencing the class.

The problem is that when you declare a class, you are more or less doing

    dot = class_definition

that creates an entry in the namespace and your class is known as dot from there on.
But when you do

    for dot in dots:
        do stuff

you are more or less doing this with each iteration. 

    dot = dots[0]; do stuff
    dot = dots[1]; do stuff

what is the value of dot now? It's not a class.

dot in the namespace stops storing the class itself. Now it stores a reference to some instance of that class. Class = callable, instance = not callable.

pascal case is one of naming conventions. All words making a name are capitalized. MyClass, MyOtherClass, Dot.
If you stick to pascal case for classes and to the usual lowercase stuff for variables, the risk of overriding a class with some sloppy variable assignment should be reduced if not eliminated."
1,"don't you reuse the name `dot` in the inner for loop?
Never reuse class names for variables. Pep8 suggests PascalCase class names."
1,"Lambdas, man. They absolutely got shittier in py3 because of that change. 

    sorted(seq, key=lambda (x, y): x**2 + y**2)

vs new

    sorted(seq, key=lambda t: t[0]**2 +t[1]**2)

So much for expressiveness and getting rid of unpythonic magic number indices"
1,"I too am interested in your explanation, so better start typing the description of the biggest XY problem i've seen in my life. This is a learning sub and I want to learn something from this."
1,https://docs.python.org/3/library/stdtypes.html#str.translate
1,"well yeah, I assumed that your numbers are more or less in the same ballpark and you know the ballpark to push them into a territory where . I think scientific notation by default kicks in somewhere around e-5, so if you are within 5 orders of magnitude you should be fine without any shenanigans.

Other than that you could force scientific notation, split it on e to get matissa and exponent as separate things, and then manipulate them by hand, eg *1000 on the left means -3 on the right.
I don't think there is anything out of the box."
1,"> Either outputting as ""0.42e-12, 20e-12"" or as ""0.42, 20"" would be fine

so shift them there via multiplication by 10**12

    >>> 0.42e-12
    4.2e-13
    >>> 0.42e-12 * 10**12
    0.42
    >>> 20e-12
    2e-11
    >>> 20e-12 * 10**12
    20.0

add e-12 suffix and you are golden."
1,"random.choice() produces exactly one result at a time.
So here it returned 'Morrowind', making the variable assignment equivalent to 

    x = 'Morrowind'

given the above, it's not really surprising to get 'Morrowind' 20x in a row, is it.

Each act of randomization requires an explicit call of random.choice(), because it's not going to call itself magically, eg

    for _ in range(5):
        x = random.choice(list_of_games)
        print(x)"
1,"care to paste the syntax error itself verbatim?

Anyway, i hope it's not your actual formatting.
`continue` is not indented under `if`, the indentation of `with` makes 0 sense."
1,"dicts with a dash of recursion, no json   
https://repl.it/repls/OldShowyDecompiler"
1,"when you discover `global`, purge it from your memory immediately.

Beginners love to use `global` to cover for their lack of understanding how parameters and return statements of functions work.
It's a nasty, unmaintainable, unscalable hack. Avoid at all costs and instantly gain +2 programming skill."
1,"string to number mapping is a use case for a dictionary.

    rank_values = {""GOLD"": 100}
    rank = ""GOLD""
    LP = 40
    mmr = LP + rank_values[rank]"
1,"Sometimes order doesn't matter and duplicates make no sense, let's say lottery numbers. Do you care whether its {1, 12, 33, 35, 40} or {40, 1, 35, 12, 33}? And what would it mean to modify 3 item if order is irrelevant?
Or consider user permissions in some system. You won't have ""admin"" 3 times, and you don't care about the position. You care if it's there in the set of permissions.  
Operations supported by sets are also very convenient and optimized for the purpose (eg is in both A and B, is in either A or B, is in A but not in B, etc)

TL;DR: Sets are for membership checks (lightning fast compared to linear searches in lists) and do deduplication for free."
1,"fix indentation

blocks of code require 4 spaces before every line."
1,"> In case of ""and"" the number to right gets printed and incase of ""or"" the no on the left

not true.

    >>> 0 and 1
    0
    >>> 0 or 1
    1

anyway the result is decided by the truthiness of operands. Zero/empty values are usually considered falsy (0, 0.0, '', [], {}, you name it), and everything else is truthy.

`True or whatever` is always True, so there is no point checking the second operand.
But `False or whatever` is undecided after the left side alone, so you have to look at the right side as it's what decides the result.

On the other hand `False and whatever` is always False, so no point checking the right side. But if the left side is True, the result will be decided by the right side.

The final value is of the operand that determines the boolean value of the operation."
1,"thank you, sir fat cock."
1,"maybe something like this?

https://repl.it/repls/FrightenedNavyblueMainframe"
1,"when you do set(string), you tap into the mechanism of creating sets from other sequences/iterables. String is a sequence of characters, so it works just fine here. It gets deconstructed to individual chars and the result set gets populated with them.

On the other hand when you do `{'abracadabra'}`, you are saying ""I want a set with 'abracadabra' in it"". 

    len(a) # 1 distinct letter

not 1 distinct letter, 1 distinct element. That 1 represents the whole 'abracadabra'.

If you want to achieve the same effect as in the first approach, you could go with set comprehension

    {char for char in 'abracadabra'}"
1,try [0-9]+ instead of [0-9]
1,so remove Nones from your dict and then you will be able to use out of the box functionality?
1,and if the actual dict value is 0 it's going to take the default anyway?
1,"it's not, because it's going to fail with legit zeros

    x = {'a': 0}
    x.get('a') or 5   # 5"
1,"I don't think that's right.

(10,10)(10,100)(10, 200)(11, 11) are sorted and first three are plenty unique. (10,10) should be tested for similarity with (11,11) but it won't."
1,"> With setters, however, you can't do that - you can't easily assign a new behavior to p.greeting = ""anything you want""

there is a decorator for that too, `@propertyname.setter`"
1,"without preserved indentation it's hard to say what the scope of the print is  
That said, in python scopes are function-level and up, so `with` block doesn't constitute its own scope and all the variables initialized there continue to live.

https://stackoverflow.com/questions/291978/short-description-of-the-scoping-rules"
1,"ignoring the missing quotes around john and mary, it is a syntactically valid dictionary because it will not barf out an error. It's just that it will deduplicate by discarding all but one entry for each unique key. It's not what's OP is after, but it's valid.

    >>> {'John':[1], 'Mary':[2], 'John':[3]}
    {'John': [3], 'Mary': [2]}"
1,"you could try explaining him like this:

You are an instance of Person. You are known by the outside world as John (so your head is john.head), that guy in stupid hat (that_guy_in_stupid_hat.head), son (son.head), brother, father, whatever

but you have a different set of labels for yourself, that nobody else would use to describe you, ie ""I""/""me""/""myself"". `self` is exact same thing in python - 1st person from the individual object's point of view, the object's ""me"". The class is described from the 1st person, inside perspective.
self.hand translated to English is ""my hand"". self.head is my.head, etc etc.  
You can't get to any part of the object without getting through its identity first, so that's why everything in an object is prefixed with self.

and to touch methods a bit - when you call methods on objects, eg

    instance.method(arg) 

it's more or less a syntactic sugar around

    Class.method(instance, arg) 

how would that look in the class def?

    class Class:
        def method(self, arg):

do you see how Class.method(instance, arg) maps to Class.method(self, arg) ?

proof with builtin `dict` class, d being an instance

        >>> d = {1:2}
        >>> d.get(1)
        2
        >>> dict.get(d, 1)
        2"
1,"your `students` should be a dictionary instead of a list, given that you are after lookups. Lookups in lists are dog slow.

    students = {row[0]: dict(ID=row[0], firstname=row[1], lastname=row[2], phone=row[3], email=row[4]) for row in c.fetchall()}

then you can just get the right one directly

    student_data = students[student_id]

also you should think about writing a Student class, because barebone dicts are not exactly the most convenient form of handling data in the long run."
1,"if the cleaned up string of digits is '314', then c (or digit from my example) will be '3', then '1', then '4'  
running_sum will change like this:  
= 0       
0 * 10 + 3 = 3    
3 * 10 + 1 = 31    
31 * 10 + 4 = 314"
1,"damn, that's ridiculous. Looks like an academic excercise on how to avoid int() entirely with some extra functional swag.

    (-1 if s[0] == '-' else 1)

multiplier, depending on the first char (if -, multiply by -1, else by 1)

    s[s[0] == '-':]

skip `-` to get the sequence of digits: `s[1:]` if s[0] is - else `s[0:]`, because True == 1 and False == 0

    string.digits.index(c)

this is just to avoid `int(char)`. Retrieving index at which the char can be found in the `string.digits` constant yields a correct numerical value.

    reduce(func, sequence, start)
    reduce(accumulate_int_value, digits, 0)

lambda is used by reduce to accumulate the result by going left to right over digits, multiplying by 10 the previous value and adding current digit. Saner equivalent

    running_sum = 0
    sign = -1 if ... else 1
    for digit in digits:
        running_sum = running_sum * 10 + int(digit)
    result = running_sum * sign"
1,"%I instead of %H?
`8:33 pm` should not produce `datetime(2013, 1, 30, 8, 33)` but rather `datetime(2013, 1, 30, 20, 33)`"
1,"apparently %Z i barely useful as it recognizes very few timezone names out of the box https://bugs.python.org/issue22377

btw, I think you should use %I instead of %H, as %H is intended for 24-hour clock, while %I is 12-hour."
1,just a heads up: \`\`\` \`\`\` doesn't work in old.reddit and the code looks like hot garbage.
1,"separated from other text with empty lines, every line of code padded with 4 spaces

    text  
    <empty line>  
    <4 spaces>code  
    <4 spaces>more code  
    <4 spaces>    indented code   
    <empty line>  
    more text  

will be shown as

text

    code
    more code
        indented code

more text"
1,"> I know good programmers that dont know how or when to use functions properly so they end up repeating a lot of code.

I'd argue they are not good programmers pretty much by definition. I don't care if they can whip up code able to send a man to the moon. Programming becomes more and more collaborative over time and such an unmaintainable spaghetti gets one murdered by the people forced to interact with it."
1,"    def str_replace(x):
        for x in int_list:   # ignores argument, always iterates over int_list from the outside.
            if x < 5:
                x = ""small""
            else:
                x = ""large""

    str_replace(int_list)

this code is flat out wrong. You are passing a list, which inside the function is internally recognized as `x` according to the function definition, and then you iterate over a list from the outside anyway (that just happens to be the same list you tried to pass into the function), ignoring the argument `x`and reusing it for the iteration variable.

And if you want to preserve these derived string values, it's better to make a second list instead of modifying the original in place.

    def to_str_list(list_of_numbers):
        result = []
        for number in list_of_numbers:
            if x < 5:
                result.append(""small"")
            else:
                result.append(""large"")
        return result

        int_list = [1, 4, 3, 8, 9]
        print(int_list)
        str_list = to_str_list(int_list)
        print(str_list)"
1,"do you see another line with `b = `? it's where you set `b` to the result of the right side, replacing the old reference to a. You didn't do that in your first example after the initial `b = a`.

Modifying container in place is not equivalent and doesn't change the identity of the container. In other words just because you take something out of the box and put something else in its place doesn't mean the box itself has changed. Lists are boxes.

Feel free to `print(id(a), id(b))` to prove that they are in fact the same object in your first example."
1,"b = `a` doesn't clone `a`, it makes `b` point to the exact same thing `a` does. Modifying `b` means modifying `a`, because they are one and the same.

also it's generally better to simply avoid modifications in place.

    b = ['\t'.join(item) for item in test1]
 
list comprehensions explicitly create new lists by applying transformation to the original. Or going the longwinded way

    b = []
    for item in a:
        b.append('\t'.join(item))"
1,"the problem is that `self.level = self.experience/10` is not going to execute automagically whenever you set the `experience` value. That line runs once during __init__ and that's it.

you need a method to either control setting `experience` and have it update `level` too, or you need a method that will derive `level` from the actual, current `experience` value whenever its called.

using property and/or setter decorators optional."
1,"the problem here is that regardless of contents of `line`, you are always returning your list.  
You need to loop, skip all irrelevant empties and wait until the first non-empty line shows up to trigger collecting chunks of paragraph

fixed
https://repl.it/repls/LargeJuvenilePlots"
1,"Test_queries is supposed to be a **list** of separate query string. If provided a single string, it will be iterated over on a per char basis. In Python strings are kind of list of characters. 

If you want to go with a single input(), cu to the chase - ignore the loop and just run query() with your input directly."
1,"if by [0, 1, 4, 6] you mean [0, 1, 4, 9] then yes

      input                      output
    sequence         f(x)       sequence
        0                           0
        1         --  x*x  -->      1
        2                           4
        3                           9"
1,"like the other guy said you could iterate over the keys and do a `keyword in dict_key` check.  
That said it's a bit lame, because the search will be linear, which becomes a problem at non-trivial sizes. 2k might not be much of a problem, but it's a good opportunity to learn tricks.

For example one fancier way would be to derive a dict that map all words to sets of keys having them. It would a tradeoff of more memory consumption in exchange for superior performance, and you'd get combined searches for free courtesy of set operations.

proof of concept  
https://repl.it/repls/DeadWelltodoLeads"
1,"the general form of the generator expressions, list/dict/set comprehensions 
is

`f(x) for x in sequence_of_x`, x being arbitrary variable name.

collect (values derived from x) for (each x) in (sequence of x).

`x for x` means you don't transform elements, but taking them as is (or to put it another way - f(x) is an identity function f(x) = x)"
1,"don't throw random shit at the wall hoping something sticks.

the question is - in the scope of the numberOfPlayers() function, where does the value of `player` come from?
And the answer - from nowhere.
You have some `player` in turns() but it's a local variable to turns() and is not going to magically teleport and show up in numberOfPlayers.

read up on function arguments and return statements."
1,"overall pretty nice and clean

    for entry in c.fetchall():
        print(f""Name: {entry[0]}"")
        print(f""Surname: {entry[1]}"")
        print(f""Number: {entry[2]}"")

Avoid things like entry[1] in your code, alias them with names that convey context and meaning. Name, surname and number should be known as that, not as some_tuple[some_magic_number].
You can exploit the power of tuple unpacking here

    for entry in c.fetchall():
        name, surname, number = entry
        print(f""Name: {entry[0]}"")
        print(f""Surname: {entry[1]}"")
        print(f""Number: {entry[2]}"")


or even do it in the loop header itself

    for name, surname, number in c.fetchall():
        ...

----------

your add_entry() violates the principle of separation of concerns.  
Functions should do one thing, but add_entry does two:  
- interaction with db  
- user input handling  

user input handling does not belong here. It should be a separate function and add_entry() should accept a prepared entry via parameter, eg

    def prompt_user_for_entry_details():
        name = input()
        surname = input()
        number = input()  
        return name, surname, entry

    def add_entry(entry):
        ....

    entry = prompt_user_for_entry_details()
    add_entry(entry)
----------------
SQL injection is a risk because you are inserting unsanitized values into the SQL code by hand. What if someone provides you with a name = `x', 'y', 'z'); drop table contacts;`.  
Prepared statements are kosher.      
https://stackoverflow.com/questions/2092757/python-and-sqlite-insert-into-table"
1,"it's not if it misses forest for the trees and ignores where things are very likely going.

The obvious next step is going to be ""how to express Mars in Jupiter terms"", where Mars and Jupiter are arbitrarily chosen by the user, which means lookups, but then you have painted yourself into a corner with tuples."
1,"their ""running i=? y=?"" is after break/continue (which means it gets skipped when they get hit), yours is before which means it is always printed."
1,"overkill?

    for planet, orbit in planets.items():
        stuff

next to no difference in this specific case, and as a bonus you get lookups for free."
1,"> Nope I am using Python 3.7

you really don't and `print(sys.version_info)` will prove it

this is 3.x  
https://repl.it/repls/LiveStableMicrobsd  
type in 'five' and nothing happens  

this is 2.x  
https://repl.it/repls/EllipticalSoggyApplicationprogram  
type in 'five' and...

    Traceback (most recent call last):
      File ""main.py"", line 4, in <module>
        x = input('now type in five: ')
      File ""<string>"", line 1, in <module>
    NameError: name 'five' is not defined"
1,"split the string into unicode or utf8? what does that even mean?

anyway, `str.split('\\')` ?

I hope your strings are not literal with \n \t \r inside them, because good luck fixing that."
1,"you can also unpack them to variables directly, which imo is superior to using coords[0] and coords[1]

    coords = (46, 477)
    x, y = coords

as long as the number of variables matches the number of elements inside the list/tuple it will work."
1,"> Am I wrong in assuming that self.x is an int?

self-evidently

just above that line add something like

    print(type(self.x), self.x)

and see if you can figure out where it came from"
1,"> The password will be considered strong enough if its length is greater than or equal to 10 symbols, it has at least one digit, as well as containing one uppercase letter and one lowercase letter in it

the description leads us to 4 building blocks necessary to craft the solution. Divide and conquer them as they are independent of each other:

**condition for length**:  `len(pw) >= 10`

**condition for at least 1 digit...**
a few ways, but a pretty basic one is to iterate over a string and check chars one by one to see if you find a char that is in 0-9, eg

    def has_digits(pw):
        for ch in pw:
            if ch in '0123456789':
                return True
        return False

**condition for at least 1 uppercase...**
as above, just a different set of chars

**condition for at least 1 lowercase...**
as above

------

slap all 4 conditions together with `and`s

    def is_strong_pw(pw):
        return len(pw) >=10 and has_digits(pw) and has_uppercase(pw) and has_lowercase(pw)

voila.

From there you can think about optimizations like ""why iterate 3 times over the string if 1 time should be sufficient?"""
1,"> The password will be considered strong enough if its length is greater than or equal to 10 symbols, it has at least one digit, as well as containing one uppercase letter and one lowercase letter in it

the description leads us to 4 building blocks necessary to craft the solution:

**condition for length**:  `len(s) >= 10`

**condition for at least 1 digit...**
a few ways, but a pretty basic one is to iterate over a string and check chars one by one to see if you find a char that is in 0-9, eg

    def has_digits(s):
        for ch in s:
            if ch in '0123456789':
                return True
        return False

**condition for at least 1 uppercase...**
as above, just a different set of chars

**condition for at least 1 lowercase...**
as above

------

slap all 4 conditions together with `and`s

    def is_strong_pw(s):
        return len(s) >=10 and has_digits(s) and has_uppercase(s) and has_lowercase(s)

voila."
1,"decent start :-) The most important part is finding an itch to scratch and going to town, churning out code.

pleasantries aside, now it's time for some beating ;-) :

avoid variable names like `a`, because they don't mean anything, unless they are obvious loop variables or have a domain specific, generally understood meaning like in math or physics.   
Names are part of documentation for future you.

-----

if you have a variable called number, I'd expect it to store some kind of number, not a string. Names in the code should not mislead.   
Also convert stuff to final form as soon as you can, so instead of

    number = input()
    ....
    do stuff with int(number)

you should do

    number = int(input())
    do stuff with number 

---------------

if you have an exact number of times you need to do something, prefer `for` loop instead of `while`

    coins = []
    for n in range(times):
        coins.append(coin())
 
also there is a convenient idiom for that, called list comprehension

    coins = [coin() for _ in range(times)]
------------------

main is pretty messy and should not use recursion (functions calling themselves directly or indirectly).
main_menu() calls another main_menu(), and so on, similarly coin() calls coin() which calls coin() etc.
You are potentially creating a matrioshka of functions that never return, only spawning further functions. All these calls are held in memory contrary to what you might think.   
Nest them 1000 times or so and your program will crash.

instead of coin(coin(coin(coin()))) you need an approach with a flat loop, where utility functions doing actions can't call themselves."
1,"Are you running your code from the same directory the file is in?
If you do, your file should be accessible by name, without its full path.

Wha is your exact setup? What does this say

    import os
    print(os.getcwd())"
1,"https://docs.python.org/3/reference/expressions.html#operator-precedence

as you can see in the table `in` and `==` are logical operators of equal ""strength""

if they are combined like `A op1 B op2 C`, python unrolls the expression to `(A op1 B) and (B op2 C)`. It allows for things like `5 > x > 10` to work (translated to `5>x and x>10`).

if you wrote `(a in b) == False` it would work. Feel free to use parentheses to avoid ambiguous constructs."
1,"when developing, you should dump a couple of responses to files and load data from there, so you can improve upon the code to your heart's content, without hitting any quotas.

Develop core logic first using dummy files, then re-enable the true source of data."
1,"`'precipIntensity': hour.get('precipIntensity', 0)`"
1,"you could use `dict.get(key, default_value)` instead of `dict[key]` and avoid the exception problem entirely"
1,"slight improvement on top of that

https://repl.it/repls/YearlyUnsightlyBackground

instead of divide-and-conquering, it folds the calculation of both sides into the factorization itself, which cuts the amount of code in half."
1,"technically yes, because python is very malleable and exposes a lot of its internals, but it doesn't matter. Spawning variables at runtime is a dirty hack no matter how you slice it.

Dictionaries are the way to go."
1,https://repl.it/repls/BriskDarksalmonErrors
1,"> It uses a lot of memory and might make your program slow, especially in the case of huge libraries like numpy, pygame etc. 

there are no memory savings. The whole module gets imported anyway so the stuff you want has access to its dependencies."
1,because these are not variables and it's a perfectly legit syntax
1,"use glob with `**`

https://stackoverflow.com/questions/2186525/how-to-use-glob-to-find-files-recursively"
1,"    import blobby
    tom = blobby.Blobby()

or 

    from blobby import Blobby
    tom = Blobby()

just because you import a module doesn't mean you have its stuff in the local namespace."
1,data['data']['name']['id'] ?
1,"you can always use a temp variable to alias self.metrics_values_dict etc

    metrics = self.metrics_values_dict
    metrics['f1_score'] = 2* metrics['precision'] * ...

and helper functions, eg

    def f1_score(a, b):
        return 2*a*b/(a+b)

    metrics['f1_score'] = f1_score(metrics['precision'], metrics['recall'])

also variables for metrics['whatever'], dicts are generally very verbose and pretty unwieldy as far as expressing intent is concerned."
1,"try

    pattern = '''
        \[(.*)\]_(\w+)_\(_*(\d+)\):_
        for_host_(\d+\.\d+.\d+.\d+)_trying_to_([A-Z]+)_(/\S+),_
        [a-z-]+_reports:_(HTTP\d+):_
        (?:can't_find_)?(\S.*)_\((.+)\)
    '''.replace('_', r'\s')

https://repl.it/repls/TallIntentJava"
1,"> Unit_type[0:2] == ""mil""

what about millimeter? ;-)

honestly, I'd probably just require official symbols instead of words - km, m, cm, mm, mi, in, ft, you name it. Less typing, no ambiguity, no typos to account for."
1,"> Python 2.7.10 (default, May 23 2015) [MSC v.1500 **32 bit** (Intel)] on **win32**

24036 is 6000\*4 and change. 32-bit architecture is going to use 32 bits (ie 4 bytes) to represent references. 64 bit architecture will up the size to 8 bytes, which gives 6000\*8 = 48000 and change."
1,"accounting for typos is a somewhat advanced topic, because you have to account for transpositions, missing/superfluous chars etc.

usually it's done using  
https://en.wikipedia.org/wiki/Levenshtein_distance
if the number is small, assume that both strings are equal.

apparently there are modules for that, eg
https://pypi.org/project/strsim/

that said, it's a massive overkill for an otherwise pretty simple program :-)
Menu is just fine."
1,"what's inelegant about it?
Anyway, a possible alternative is to create a menu that allows to select a unit without typing it all by hand.

https://repl.it/repls/GorgeousModernVolcano"
1,"`if user_input in ('m', 'meter', 'meters'):` ?"
1,"imho it's supposed to be a text

""make sure that you have [cloned the repository](https://github.com/pandas-dev/pandas/blob/master/doc/source/development/contributing.rst#forking)"" 

where the last part is a link to the relevant section about how to fork code, in case you missed that step. It's just that it's malformed and you see funky shit."
1,"writerow() expects a **sequence** of fields. Given that you provide a string, that string is being treated as a sequence of characters.

anyway

    with open('file.log') as data, open('file.csv', 'w') as out_file:
        writer = csv.writer(out_file)
        writer.writerows(line.strip().split() for line in data)"
1,"\d is a single digit, you need to add a quantifier `+` after it. Also your `*` applies only to `,`


`\d+ \d+`  a pair of numbers of any non-zero length, but wait, there are negatives too

`-?\d+ -?\d+`  much better with optional minus signs, but that's only one pair

we need something like

`pair_regex(, pair_regex){2,}`  because assuming that triangle is the first legit polygon, you need at least 3 pairs.

add surrounding parens and you are golden."
1,"> r before a string in python means the string should be treated as a regular expression.

huh? it means **r**aw string"
1,https://repl.it/repls/LemonchiffonCurlyDecimals
1,"`split()` cuts provided input on whitespaces into a list.  
`name, *line` assigns first item to name, and the rest lands in  the list `line`  

`list(map(float, line))` creates a derivative list where each item from `line` is mapped/converted to float. Equivalent to `scores = [float(x) for x in line]`"
1,"sorry for the late reply:
I was already familiar with ast. It's mostly used for programmatic analysis and modification of python syntax.

The issue here was that your printouts were dumping representation of data to a string form in the console. In python terms it's all about the difference between bytes `b'stuff'` and string with bytes syntax inside `""b'stuff'""`

To reverse that you need to tell python to treat a string as if it were a line of legit python code, which should give you original bytes.  
You can achieve that  
- using builting `eval()` (pretty risky, as it will happily execute any code, possibly trashing your system no  fucks given)  
- using `ast.literal_eval()` which is much safer, because it allows only for literal values without any logic, preventing arbitrary code execution."
1,https://repl.it/repls/DroopyInfatuatedLicense
1,"if it helps you, you can consider `fido.bark()` to be something of a syntactic sugar for `Dog.bark(fido)`

    >>> class Dog:
    ...     def __init__(self, name, color):
    ...         self.name = name
    ...         self.color = color
    ...     def bark(self):
    ...         print(self.name, 'woof! woof!', sep=': ')
    ... 
    >>> fido = Dog('Fido', 'brown')
    >>> fido.bark()
    Fido: woof! woof!
    >>> Dog.bark(fido)
    Fido: woof! woof!

`Dog.bark(fido)` literally matches the signature of `def bark(self)` in the `Dog` namespace (ie `Dog.bark(self)`)"
1,"Considered bad practice by who? People who spent a lot of time in c++ and go out their way to avoid those expensive exceptions?

Hell, in Python for-loops run on them.
Also there is much value in simplicity. If you can piggyback on an existing codepath, why not do just that instead of creating another one for the sake of purity? Not to mention that it's somewhat easy to check if a string is a valid representation of an integer, why try/except value error then?"
1,"> One question, the Vector type is not a build in python class is it? I'm guessing it's part of bpy framework?

yes

mathutils.Vector

https://docs.blender.org/api/blender_python_api_current/mathutils.html#mathutils.Vector"
1,I tend to do the additional check in the `try` block and `raise ValueError()` by hand. That way every invalid value is funneled to the `except ValueError` block automatically.
1,"this documentation is shitty then because it obfuscates details and doesn't allow to pull on that string any further.

I installed blender 2.79 and by playing in the console and typing in `type(obj.location)` i found out that the coordinates are of the `Vector` type.  
It appears it can be only compared to other Vectors, so

    obj.location == Vector((1.0, 2.0, 3.0))

 but not 

    obj.location == (1.0, 2.0, 3.0)

It also supports slicing which retrieves a plain tuple, which can be convenient

    obj.location[:] == (1.0, 2.0, 3.0)

that said, given that everything is done with floats which are rife with tiny imprecisions, you are better off assuming a certain margin of error.

instead of `vector1 == vector2`, assume that a difference lower than some very small number is equivalent to equality and do something like eg.

    (vector1 - vector2).length < 0.000001"
1,"first things first - how do you define your ""array"" in a way that makes it have x y and z attributes? How do you instantiate it?"
1,"> ## Possibly should combine these into one? ##

possibly, for example

    def positive(n):
        if n <= 0:
            raise ValueError(""value must be greater than 0"")
        return n
    
    def get_number(prompt, context, n_type=int, validate=positive):
        while True:
            try:
                entry = n_type(input(prompt))
                return validate(entry)
            except ValueError:
                print(f""Invalid {context} input. Try again."")
    
    def getmiles():
        return get_number(""Enter miles: "", ""miles"")
    
    def getmph():
        return get_number(""Enter miles per hour: "", ""miles per hour"")

you could do similar thing with date and time, as they differ only on prompt and format, which can be trivially parametrized.

Other than that you probably are better off having date+time in a single entry instead of splitting it in two.
Full datetime and timedelta solve the problem pretty much automatically

    date_time_entry = input('departure time YYYY-MM-DD HH:MM AM/PM: ')
    departure = datetime.strptime(date_time_entry, '%Y-%m-%d %I:%M %p')
    travel_time = timedelta(hours=miles/mph)
    print(travel_time)
    print(departure + travel_time)
 

and timedelta"
1,"regex is doable, but the format here is simple enough that you can produce a working solution using only run of the mill string operations.

https://repl.it/repls/CookedFrighteningGraphicslibrary"
1,"something like this?

https://repl.it/repls/OrdinaryWhoppingLightweightprocess"
1,"> if ""ab"" and not ""abcd"" in Template[counter] will always be true

    >>> 'ab' and not 'abcd' in 'abc'
    True
    >>> 'ab' and not 'abcd' in 'abcd'
    False"
1,"let me check...

    $ python2
    Python 2.7.15rc1 (default, Nov 12 2018, 14:31:15) 
    [GCC 7.3.0] on linux2
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> print type(""Yes"")
    <type 'str'>
    >>> 
    $ python3
    Python 3.6.7 (default, Oct 22 2018, 11:32:17) 
    [GCC 8.2.0] on linux
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> print type(""Yes"")
      File ""<stdin>"", line 1
        print type(""Yes"")
                 ^
    SyntaxError: invalid syntax
    >>> print(type(""Yes""))
    <class 'str'>
    >>> 
    $ 

yep, looks like missing parens all right."
1,"using delimiter `,` and quotechar `""` it's a single record of 
`['a', 'b\nc', 'd, e', '""f""']`


    import io
    import csv

    fakecsv = io.StringIO('''a,""b
    c"",""d, e"",""""""f""""""''')

    reader = csv.reader(fakecsv)

    for record in reader:
        print(record)

out

    ['a', 'b\nc', 'd, e', '""f""']

"
1,is that invalid syntax or the missing parentheses in case of python3?
1,"isnt genfromtxt garbage for certain csv formats?
I don't think it would handle records like

    a,""b
    c"",""d, e"",""""""f"""""""
1,"https://repl.it/repls/DismalDimgreyCareware

if you can, always use YYYY > MM > DD format because that's the only one that sorts correctly out of the box. All the variants of  mm/dd/yyyy and dd/mm/yyyy are garbage."
1,"without seeing the whole pipeline from start to finish it's hard to say anything smart here.
If the chunks are sequential in the context of the source 12GB file, then it should be doable to do everything on the fly. What is the algo creating chunks of a specific # of lines?   
In principle, when you are dumping stuff to file, you could hold it in ram, and then use zip() to align the two components together.

"
1,"and the additional column with floats from comes from here? Are you calculating it on a per input line basis, dumping to file and then reading it to assemble?
"
1,care to produce some minimal example of these fhs and the expected output so some notion of correctness can be established?
1,"AI correct. Indentation gone, code not looking like this

    def some_func():
        some stuff

    while True:
        some stuff"
1,"if they are separated by space, it's trivial

    >>> 'a# c e'.split()
    ['a#', 'c', 'e']
    >>> for note in 'a# c e'.split():
    ...     print(note)
    ... 
    a#
    c
    e


"
1,"dictionaries can't do such range matching out of the box. If you roll let's say `5`, `5` is not literally equal to `(2,3,4,5,6,7)` so for all intents and purposes the entry for `5` does not exist. Btw, lists can't be keys because they are mutable. Tuples can.  
Dict lookups are fast, because they don't do series of custom conditions. They just do Given key X, fetch me the value under X and that's it.

Another caveat here is that there is no delayed execution, the value for 20 would evaluate once during dict creation and that's it."
1,"`separated_date_values[2][2:]`

what's that? I have no idea.   
Don't hide your stuff behind nebulous names and magic numbers. Label it explicitly with something meaningful.

also convert data to its convenient, usable form asap. If something has a meaning as an int, convert to int and stop touching the raw source. Currently you are repeating int() time and time again. Do it once, and for good.
You should forget that you had some list with 3 strings 3 lines of code later.

    # meh
    separated_date_values = date.split('/')
    day_code = int(separated_date_values[0])
    if 2000 <= int(separated_date_values[2]) <= 2099:
        ...

    # nice
    day_part, month_part, year_part = date.split('/')
    day_code = int(day_part)
    year = int(year_part)
    if 2000 <= year <= 2099:
        ...

    # nicer
    import datetime
    dt = datetime.datetime.strptime(date, '%d/%m/%Y')
    print(dt.day)
    print(dt.year)
    if 2000 <= dt.year <= 2099:
        ...

not to mention that datetime can give weekday directly

    >>> datetime.datetime.strptime('10/11/2011', '%d/%m/%Y').strftime('%A')
    'Thursday'

    
    
"
1,"> Prints one star and space

no wonder, you made it add space after each star. 

    print(""*"", end = "" "")

There is a difference between `"" ""` and `""""`

incorrect number of stars is probably caused by the fact that range(x, y) goes from x inclusive to y exclusive and you are off in your upper bounds somewhere.
"
1,"what if you need to build a string, but not for printing? How are you going to construct a parametrized filename for your .csv using print()?  
Also formatting gives you the most control over the layout of the text, while with print() you can tweak things just a bit with `sep=` and `end=`"
1,"and by[,,2] you mean [::2]?"
1,"`data_dict` stores data for a single row, meanwhile you feed it to writerow**s**()  
writerows() treats it as a **sequence** of row dicts.  
That means that keys of that single dict are treated as full dicts, being iterated over. Iterating over a key string as if it were a dict is going to produce individual chars.

tl;dr: for a single record use writerow(), not writerows() "
1,"the usual idiom is to zip() the sequence with sequence[1::] (without 1st elem). This gives you a sliding window of adjacent characters

    >>> sentence = 'this! is! sparta!'
    >>> for c1, c2 in zip(sentence, sentence[1:]):
    ...     print(c1, c2)
    ... 
    t h
    h i
    i s
    s !
    !  
      i
    i s
    s !
    !  
      s
    s p
    p a
    a r
    r t
    t a
    a !

lame approach to achieve the same is to play with indices by hand, but that's discouraged in python."
1,"you can't have s->Z in your dictionary.
You need to peek at the next char for spaces or punctuation/see if it's the end of string and apply this one specific change conditionally.  
The alternative would be to change `s `, `s.`, `s,` etc into `Z `, `Z.` etc right of the bat using replace, and then do the dict substitution part.   
Without punctuation messing things up you could just split(), replace last s in each word and join() to get the sentence back."
1,"personally I prefer doing things like these in 2 steps:  
- query for <tr> tags to locate record ""frames""  
- within each <tr> fish for fields with actual data (<td> and what not).  

May be a bit slower, but there is less risk that the data gets desynced compared to bulk lists that are supposed to be parallel but there is no guarantee of that. It takes 1 td being different or missing to break the data completely.
Focusing on 1 tr at a time means that some ""records"" can be broken, but you never risk full blown desyncing.

https://repl.it/repls/SlushySameAudacity
"
1,"because you asked it to find ""word characters"" (chars, digits, _, etc) , **followed** immediately by digits. 
You get ""1"" matching \w+ and the following ""7"" matching \d+

if you want alternative, you need to use `|` ie `re.findall('\w+|\d+', user_inp)`"
1,care to show an example of that tricky html?
1,"variables are not data. 

if you had

    c1 = BankAccount()
    x = c1
    y = c1
    z = c1

which one should go into json dump? c1? x? y? z? They are all equivalent."
1,change add() to append(). 
1,"results.append   
lists don't have `add()` method, sets do."
1,"but do you really need unspecified `except:` that defaults to BaseException, which includes things like SystemExit, KeyboardInterrupt?

I'd say that `except Exception:` is as low as one should go.

"
1,"> The problem with check is that a lot of code and checks would be mugged into class A.

why is that a problem if A alone is sufficient to do everything without flawed inheritance? 

if you feel fancy you can write decorators to enforce the roles for you.

https://repl.it/repls/WorthwhileCalmLaboratory
"
1,"static method seems a weird choice and a standar

    def convert(self):
        return Baseclass(self.name, self.standard) would do.

Even better idea would be to create a @classmethod on the parent class, eg 

    @classmethod
    def from_object(cls, obj):
        return cls(obj.name, obj.standard)

that said this design sounds flawed, because there is nothing stopping you from having Baseclass and Subclass representing exact same person simultaneously.
I'd probably go with a single class and adding the concept of roles to it. Allowing/disallowing action would be a question of adding/removing a role.


    class A:
        def __init__(self, a, b, roles=()):
            ...
            self.roles = set(roles)

        def remove_role(self, role):
            self.roles -= {role}

        def action(self):
            if 'monitor' in self.roles:
                do stuff







"
1,"decode('utf-8') works for me.

    >>> x = b'\n\xe0\xa4\xa8\xe0\xa5\x8d\xe0\xa4\xaf\xe0\xa4\xbe\xe0\xa4\xaf\xe0\xa4\xbe\xe0\xa4\xa7\xe0\xa5\x80\xe0\xa4\xb6 \xe0\xa4\xad\xe0\xa4\x9f\xe0\xa5\x8d\xe0\xa4\x9f\xe0\xa4\xb0\xe0\xa4\xbe\xe0\xa4\x88 \xe0\xa4\xb5\xe0\xa4\xbf\xe0\xa4\xb0\xe0\xa5\x81\xe0\xa4\xa6\xe0\xa5\x8d\xe0\xa4\xa7\xe0\xa4\x95\xe0\xa5\x8b \xe0\xa4\x89\xe0\xa4\x9c\xe0\xa5\x81\xe0\xa4\xb0\xe0\xa5\x80 \xe0\xa4\xa4\xe0\xa4\xbe\xe0\xa4\xae\xe0\xa5\x87\xe0\xa4\xb2\xe0\xa5\x80\xe0\xa4\xae\xe0\xa4\xbe\n'
    >>> x.decode('utf-8')
    '\nन्यायाधीश भट्टराई विरुद्धको उजुरी तामेलीमा\n'

that said, can you give the url to the site you are scraping so I can check why this roundabout way seems necessary?



"
1,https://github.com/python/mypy/issues/3661
1,"more context needed because it can't be as simple as 2000/100?

    >>> x = 2000
    >>> '{:.2f}'.format(x/100)
    '20.00'
"
1,"can't you keep it simple, ie extract the data row with regex and then process it using run of the mill `split()`?

https://repl.it/repls/ScentedPowerfulBacktick

People are seriously overdoing regexes.
"
1,"ok, so why do you need loads() which gives you dict/list structure from a string, if you have a dict in the first place?

show some code that will paint the picture you are seeing."
1,"> You copy the contents of x box and put them in y box

that's incorrect. There is no copy.

    y = x

What happens is that 'y' gets attached to the object labeled with 'x'.
Treat python variables as post-it notes slapped on top of an object box.
A box can have multiple such ""tags"" attached at any given time, but these tags can be removed and slapped on other boxes freely. These tags are variables.

    x = 0

remove the post-it 'x' from the box with the value of 123 and apply it to a different box, with a value of 0. Y stays on 123.
"
1,"it's not an iterator. 

    >>> range(0, 100, 3)[5]
    15
"
1,"i think not

https://repl.it/repls/MonstrousSpotlessDesigners


"
1,"    try:
        num = int(...)   # conversion possibly fails
    except ValueError:
        print('not a number')"
1,"> == True

o_O"
1,"    class Person:   # object represents 1 person, not plural ""people""
        ....

    persons = []
    for name, age, gender in people_list:
        persons.append(Person(name, age, gender))

or

    persons = [Person(name, age, gender) for name, age, gender in people_list]
    "
1,"enumerate merely bundles the elements with the counter value in the order produced by the original container. If the container doesn't guarantee a specific order, and even changes over time/between runs, that's exactly what's going to happen.  
Enumerate is just a wrapper around sequences and the behavior is determined by the sequence.

it's somewhat equivalent to `zip(itertools.count(), container)`"
1,"> counter = dict(zip(range(1, 7), (0 for i in range(6))))

zip? now that's some overkill :D (anyway [0]*6 is kinda more compact)

    counter = {i: 0 for i in range(1, 7)}
    counter = dict((i, 0) for i in range(1, 7))"
1,"dictionaries, mate.

press play in 
https://repl.it/repls/WhirlwindConcreteLivecd"
1,"    if strong == True:

Tautological expression is tautological. Keep it simple and use your boolean as the condition: `if strong:` / `if not strong:`

also instead of `== None` use `is None`, `is not None`.

`is` is an identity operator checking if both operands are literally the same object, which should be used with singleton objects like None, True, False (only 1 instance representing a given value ever). `==` is a value comparison that should be used for everything else as a rule of thumb."
1,"your restored `round()` has digits baked in and doesn't match the signature of the OG `round()`

Also what happens if you stack a bunch of `context_round()`s? 

"
1,"is there a reason why `string_proportions` has meaningless keys? 0 1 2 3 tell me exactly nothing.

Also given that you are doing membership checks, you shouldn't be using O(n) lists to store character classes, preferably in a dict

    self.usable_chars = {
			    'lower': set(string.ascii_lowercase),
			    'upper': set(string.ascii_uppercase),
			    'digits': set(string.digits),
			    'punctuation': set(string.punctuation),
    }

then you can programmatically derive string_proportions

    string_proportions = {k: sum(ch in v for ch in string_members) for k, v in self.usable_chars.items()}
        
I'd also think about allowing to configure these char sets, possibly via `**kwargs`, eg

    def __init__(self, **kwargs):
        if kwargs:
            usable_chars = kwargs
        else:
            self.usable_chars = {
			    'lower': set(string.ascii_lowercase),
			    'upper': set(string.ascii_uppercase),
			    'digits': set(string.digits),
			    'punctuation': set(string.punctuation),
            }
            
    PyPass(upper='ABC', digits='123', smileys='😉😋')    
"
1,"well, yeah, but the correct order of operations is not a programming problem per se, it's a business use case problem governed by real world rules.

That said at least the price, discount, tax part should be producing the same value regardless, as multiplication is commutative.

  10.00 * 0.70 * 1.05 = 10.00 * 1.05 * 0.70"
1,"why not use old.reddit.com then?

Also reddit exposes a pretty convenient API. API > scraping webpages.

> Additionally, is it possible to have multiple values on a single item?

you mean like in a list?"
1,"like the other guy said, recursion here is a bad idea. You could trivially crash the program by failing repeatedly in `second()`.  
You need to learn to use function parameters and returns to connect the pieces together. Currently you tie everything together by modifying the shared dictionary with pop() as a not-so-obvious side effect, which is as shoddy as it gets.

Anyway the usability itself seems to be flawed but without understanding the logic what it's about it's hard to tell. I can't really put my finger on the exact purpose of first(), second() and third().
For example if the question is not open-ended (it appears you ask for the keys from the dictionary) and the set of valid answers is limited, why not present a tidy menu 1-8 listing viable options? Typing in words means typos, which gets old really fast. Also the program should simply remember the ones already taken, instead of asking for that information."
1,"    fahrenheit = float(input(""What is the temp in Fahrenheit? ""))
    celsius = (fahrenheit-32) * 5 / 9
    print(f""{fahrenheit}ºF is {celsius:.1f}ºC"")

convert your inputs asap instead of in the middle of calculations. 3 decimal digits of precision is a massive overkill for temperatures. 1 is plenty enough, plus formatting can be done without round().    
Also it's Cel**s**ius and Fa**h**renheit
"
1,"because `*` is greedy by default. `.*` will gobble as much as it can while staying true to the constraints, which means that here it will stop only at the very last "" (inner ""s are matched by .)  
You'd have to replace `.` with not-"" `[^""]` or use `.*?` to modify `*` to be non-greedy."
1,"range(n) for n=0 is an empty sequence. It's a shorthand for range(0, n) - start 0 inclusive, end 0 **exclusive**. Obviously these are contradictory so 0 effectively skips the loop.

range(n) runs its body exactly n times, from the value 0 to the value n-1
Your condition is that it always prints out 'Exit' in the very first iteration, but hits the other branch in every other case.

so repeat=3 -> 'Exit' + 'you will be 100...' x2   
repeat=22 -> 'Exit' + 'you will be 100...' x21


> Is it even possible to print 'Exit' before the program ends?

you are printing exit if repeat >= 1  
But if you want to print it at the very end, you need `i == repeat-1` instead `i == 0`.
Or just put it outside of the loop, so it always executes."
1,"enclose while loops making sure that valid inputs are provided in functions. Nobody wants to look at 10 lines of boilerplate interleaved with meaningful logic of the program.

---- 

    tally = [0, 0, 0]

    tally[0] += 1       <-   what does [0] mean here?

The code doesn't document clearly what's what here.
If you interact with a data structures via indices which are nothing than magic numbers, chances are you are doing it wrong.  
Consider using a dictionary, where you can actually use meaningful keys like 'win', 'loss', 'draw', or even separate variables clearly labeled win, loss, draw.

----

    if win_decider(player_choice, computer_choice)[-2] == ""n"":

second last char of a message text defined somewhere is deciding the condition value?!
You can't possibly be serious here.  
How about you return actual, meaningful value like WIN/LOSS/DRAW to be used explicitly here and use a dictionary `message = {'WIN': 'you won the round', 'LOSS': 'computer won the round', 'DRAW': 'draw'}` to store pretty messages?

----

your if tree for the win check can be compressed to

    if (player, computer) in (('rock', 'scissors'), ('scissors', 'paper'), ('paper', 'rock')):
        return 'WIN'


"
1,"python doesn't have primitive types which directly interact with bits at specific addresses. Variables are merely labels slapped on top of existing object boxes.  
Given that full objects are significantly heavier, optimizations are made. Common ints are de facto singletons as an implementation detail and interaction with them happens through references (I think java does the same with common Integers). That means you don't want to mess with the internal values of the objects representing 0, 1, 2, ..., which means that ints must be immutable."
1,"yeah, combinatorial problems are a total bitch. They inflate *really* fast with the size, exponential growth has nothing on them. The size measured in low tens is literally the threshold of viability as far as computing the whole thing is concerned.

    >>> comb(10, 5)
    252
    >>> comb(20, 10)
    184756
    >>> comb(30, 15)
    155117520
    >>> comb(40, 20)
    137846528820

As you can see merely adding 10 to the size of the problem literally adds 3 digits to the outcome. Shit's brutal."
1,"I hope you have a lot of time because if my memory serves me right, 50 out of 150 gives

    >>> math.factorial(150)//math.factorial(100)//math.factorial(50)
    20128660909731932294240234380929315748140

combinations.  
That's 2 * 10^40. Assuming processing 1 billion/sec (a very tall order) you are down to 2*10^31 seconds, which translates to 6 * 10^23 years, which is 50000000000000x longer than the age of the universe."
1,"this code is a part of some class, how are you instantiating it/using its objects? Where is the player object coming from? There is not enough context.

A static variable? For what purpose?"
1,"you are probably right.  
As usual in these kinds of threads the line actually throwing the error, which would actually point to the problem, was not specified."
1,"[int(),int()] looks like a tuple which is not listed as a valid index in the error message."
1,"writerow expects an iterable like a list, or a tuple. Dict counts as iterables too, but only as sequences of keys. In this context it means only 'Ages' (the only key in d), which is not what you are after.  
You need to construct a flat list without any nesting to represent a row, like `['Ages', age1, age2, ..., age500]`. Assuming ages_dec is a list of 500 entries

    writer.writerow(['Ages']+ages_dec)   

that said, the column full of nothing but 'Ages' seems completely superfluous and useless. If it is, then

    writer.writerow(ages_dec)

should cut it."
1,"If you control what happens, then no biggie. The alternative of the function modifying the dict in a sneaky manner is certainly worse. Explicit behavior is easier to reason about.

That said, in this case it looks like you should step up your game and go with classes. These model dicts are nothing but glorified class instances, but with piss-poor usability because of the unwieldy [] syntax for de-facto attributes all over the place and the lack of methods."
1,care to show some code outlining the problem?
1,"    print(self.ui.lineEdit)

this prints out the whole widget object, not its text content.

http://doc.qt.io/qt-5/qlineedit.html

try to add .text() or .text at the end.
 "
1,"> I get it but when you do with open(“”,””) as test the test variable is a file object. Does __entry__ return this and it is automatically set as test?

https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/

there is a very simple example implementing a context manager for files wrapping around the default open() and f.close().    
It should make things clearer."
1,`print(element)` conditionally ?
1,"> I've managed to make try/except where one is being tested but not both. It seems like except or except (ValueError) only excepts for one ValueError but not two. I tried except(ValueError, IndexError) but that isn't working.

show your code
"
1,"len(args[0]), but that rests on the assumption that you do get any arguments in the first place (no args = crash), and that the argument itself is len()-capable (put 1 there = crash)

You need some checks and/or error handling to make it robust. And you probably want to look at isinstance()"
1,"    >>> def myfunc(*args):
    ...     print(str(args))
    ...     return len(str(args))
    ... 
    >>> myfunc('abc')
    ('abc',)         <- string representation of the args tuple is 8 chars long 
    8

if you want to know how many args are there,  use `len(args)`  
if you want to know how long first arg is, use `len(args[0])`"
1,"put this at the top of your file and make sure your editor can set the file encoding to utf-8

`# -*- encoding: UTF-8 -*-`

then you should be able to use `'“' + oldString + '”'` directly.


Consider making constant variables for these chars though, as they look ambiguous at a glance.
`QUOTE_LEFT + value + QUOTE_RIGHT` would make things clear.
"
1,"> Will this work even if the users adds a space in the beginning on accident or would i need to strip the string as well?

you need to strip(). It's a good idea for user inputs 99 times out of 100.

> So if i got this straight. If its doing something it should be a function and if it is something it should be a class?

pretty much, yes.

> So I should write this as a function that gets called with a single variable that can be changed later on if and when the storage changes?

in the quick and dirty example below, the logic of checks and management are divorced from the implementations of functions dealing with persistence. Functions just need to do what's advertised on the tin, and which specific solution was picked for storage is secondary. Divide and conquer, separation of concerns, etc, etc.

    def is_registered(name):
        check in a dict, csv, json, db, whatever
        return True/False

    def register_new_account(name, hash):
        write to a dict, csv, json, db, whatever

    def load_account(name):
        ...
        
    ....
    if is_registered(name):          <- this check doesn't care about specific implementation details of the function
        print('nuh-uh')
    else:
        register_new(name, hash)        <- this line, same story
    ...
    account = load_account(name)"
1,"    if ""lo"" in prompt.lower():

""hello"" would pass. Use `str.startswith()`

    if ""lo"" in prompt.lower():
            Login()

so this is a class that is used as a function?

classes generally represent Nouns. Login and AddAccount are not nouns, they are verbs/actions.

Instead of AddAccount  you should have Account with maybe   
`@classmethod Account.register_new(username, salted_pw_hash) -> Account`?

File access is slow so at the start you could just load all csvs to data structures held in memory.

Farm out your csv checks to dedicated functions with generic names. Consider them an abstraction over some kind of storage, so you can trivially switch to let's say proper db down the road by changing the specific function's body without touching anything else.


"
1,"dont use naked `except:`

generally speaking you should specify exceptions you actually expect to handle (`except KeyError:` here) instead of papering over possible bugs.

that said collections.Counter does counting occurences out of the box

    counter = collections.Counter(words) # done

another decent option is to use `collections.defaultdict(int)`, so you don't have to do the membership check by hand (manipulation creates provided key automatically and for ints sets the value of 0) so you can just do `counter[word] += 1` blindly and call it a day."
1,"https://repl.it/repls/StripedExhaustedOpensoundsystem
"
1,"in CSS selector lingo `>` means a direct child, but it's not strictly necessary.

    <div class=""section"">
      <span />          <-     ""div.section span"", ""div.section > span""
      <div>
        <span />        <-     ""div.section span""
      </div>             
    </div>

`div.section span` will catch both spans, because in this form it means any span descendants of class.section, but `div.section > span` will catch only the first one, because it's more specific and requires direct parent/child relation.

> Can I chain a bunch of these to identify something ""deep"" in some tags?

Yes, but don't go overboard with it. Just find the key components of the element path in the tag tree that would allow to specifically identify only the intended node(s).  
Usually you need up to 3 elements in the selector."
1,"what do you mean ""it will work""? What about floats.append(float(s)) doesn't work? Is a list of float numbers with None here and there not what you are after?"
1,"ok, so the problem expects you to pick only 1 route, which makes sense given you have only 1 truck. max(w1, w2)

also print only the final result."
1,"    weightone=min(a,b,c)
    print(weightone)
    weighttwo=min(d,e)
    print(weighttwo)

this is exactly right but then explain this

    print(weightone/weighttwo)

you are not supposed to calculate the ratio of the two, but how much you can push through both (+)


"
1,"show a self-contained snippet that is able to trigger the error and be more specific.  
""Something about line 317"" is as content-free as it gets."
1,"input[""Enter all Resistances ""]    <- square brackets?

whenever you get ""X is not subscriptable"" error, you are doing X[] on something that doesn't support []. `input` certainly does not."
1,"whining about self means that it's an instance method, ie one that works in the context of a class instance.
dropbox.dropbox.Dropbox is a class, I assume. Class is not the right context for this method. You need an object.

i'd expect that dbx.sharing_create_shared_link() should work."
1,"You should rather call next(reader) 4 times. It will gobble first 4 lines of the reader, leaving lines 5+ for the loop.  
Using list and then sublist can take tons of memory, especially for huge files, undoing one of the benefits of the reader - lazy mode processing 1 record at a time, one by one."
1,"If somebody is messy and dirty at parsing strings, their regexing is going to be literally shit tier, especially when reaching beyond hello world level of regexing.

Never met a person who is crap at basics but decent at regexes."
1,"regex is an overkill here, in a case with a very limited set of viable, fixed choices. Nothing a run of the mill membership check won't solve.

    def input_bool():
        while True:
            user_input = input().lower()
            if user_input in {'y', 'yes', 'yup'}:
                return True
            if user_input in {'n', 'no', 'nope'}:
                return False
            print('you suck')
"
1,"even if, you can easily process that somewhat-dirty-but-trivial-to-grab substring further using basic str methods, split, strip, you name it. Divide and conquer. It's certainly more sane than working around weird interactions of optional chars/groups etc in a massive regex, which never work exactly right. It's not like your budget to achieve the desired effect is only 1 line of code and that's it.   

Attempting to write huge, one-size-fits-all regexen is a useless exercise in massive frustration, firmly in the zone of 

*Some people, when confronted with a problem, think ""I know, I'll use regular expressions."" Now they have two problems.*

"
1,"I misread a bit, but still str(re.findall()).strip('[]') would kinda work

write a function instead of a lambda which not constrained to a single expression will give you the ability to handle the lack of results, eg something like

    def find_shit(x):
        matches = re.findall(r'\d{7,8}')
        if matches:
            return matches[0]
        else:
            return ''

    df[...].apply(find_shit)"
1,"> BS is even more unreliable. If one must, then just use regex. At least then you can juxtapose the relationships between class/id on tags.

elaborate on that, because it sounds like nonsense."
1,"yes, you got lucky. find gives you the first matching node, as opposed to find_all which produces a list of all matches. That first span node happens to be what you are looking for.

If you were to do it right, you'd have to find a combination of properties that uniquely identify required node, like `security.select('div.quote-price > span').text.strip()`
"
1,"the first case is [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop)

it's a special interactive mode in which every expression you provide gets evaluated, with the result intercepted and printed out. The function couldn't care less who runs it, it's the environment that takes care of the details.  
Normal programs don't work in REPL mode because that would be noisy.
 "
1,can't you just use `str.strip('[]')` to get rid of brackets at the ends?
1,"do you really need that many capturing groups?

also is it not enough to match nickname using non-colons pattern `[^:]+`? "
1,"assuming that keys match the attributes, you could use setattr  
https://docs.python.org/3/library/functions.html#setattr

    for key, value in row.items():
        wd = WeatherData()
        setattr(wd, key.lower(), value)"
1,number? it is a number after all
1,"write another loop, this time

    for number in cubes:
         print(number)

also your `cube` is a misnomer. It's a number to be cubed. Variables should not lie about their contents."
1,"4) lists are mostly intended to be collections of homogenous stuff in which adding and removing elements is perfectly logical, tuples on the other hand are meant to be used as lightweight representations of heterogenous ""records"", where each field can have a different meaning depending on position (think row in csv file) and insertion/deletion don't have sense."
1,"
    >>> [1]*11
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    >>> import numpy as np
    >>> np.ones(11)
    array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])


"
1,"using generators to produce a lazy sequence of ready-to-use names instead of noobing around with indices

https://repl.it/repls/LivelyAquamarineCustomer

"
1,"    B:8,Y-Low,110.74,110.74,110.74
        ^ no space

    B:337, Z-High
          ^ space

    {('B:337', ' Z-High'), ('B:338', ' Z-high')}
                ^ space               ^ space

also learn 2 format

    print('Max SF Temperature is {}, Face: {}, {}  DegC'.format(highest_cuboid, highest_face, highest_temp))

or in py3.6+

    print(f'Max SF Temperature is {highest_cuboid}, Face: {highest_face}, {highest_temp} DegC')
"
1,https://repl.it/repls/GratefulSlipperyMathematics
1,"yeah, it's a pretty bad API and I assume that this unintuitive behavior is because of legacy reasons. In python2 the distinction between bytes and human readable strings was pretty murky. 

effectively tostring() does an equivalent str(content).encode(encoding) under the hood, which means that indeed it produces bytes. You have to go out of your way to use encoding='unicode' to say ""nuh-uh, don't encode that plz, I want it as a str""

Given that you get bytes, you need to decode it first to get str, which is what write() wants.
 
                             ---- encode ---->
    Human-readable text         [encoding]       low level byte representation
                            <--- decode -----
"
1,"you can use isinstance

https://repl.it/repls/YummyFractalArgument

other than that, in many cases you want to take advantage of a common trait shared by accepted types. Eg if you want something to work with sequences in general sense, they all should be able to support iter(), so you check for that, instead of listing types one by one in isinstance()"
1,"internet says that lxc supports `--format json`, which should give you already structured data."
1,"probably he means something like

    result = """"
    result += line # in a loop
    return result

fancier and more pythonic solution would be to use `str.join()`"
1,"no need to hardcode the value of pi  
`from math import pi`"
1,"    def addFour(inVal, increment):

this is flat-out bad. You have 4 right in the name, yet you pass an argument that can be not-4. Functions should not lie with their names. If you want two args, then it should be `add(inval, increment)`

    a = 4
    def addFour(inVal):
        return inVal+a

arguably this is kinda bad. Why bother with external dependency on a variable that can be set to something else than 4 if `inVal + 4` is enough?

tl;dr: bad examples."
1,"I don't because it is inconsistent for falsy [] given as explicit argument value.
If the affected code depends on actual identity of the list, you have a bug right there, because in this specific corner case, you get a new instance unlike in all other cases where the original object is maintained.

It's an embodiment of ""penny-wise, pound-foolish"", all for inconsequential brevity.
"
1,"it will crash, because you can't convert '16.69' to int directly.

> ValueError: invalid literal for int() with base 10: '16.69'"
1,https://repl.it/repls/VastFarflungCompiler
1,"if you have straight True/False, don't bother with comparisons, the boolean alone will cut it.

and never compare booleans with `==`, unless you want to let 1 == True or 0 == False through.  
identity operator `is` should be used: is False, is True."
1,"i am 99% certain they have True/False under 'is_dynamic', which makes the comparison superfluous.  
Also even if there is a case for comparison against a boolean value, never do it with `==`, unless you want to get kicked in the teeth by `0 == False` or `1 == True`. `is` ftw."
1,"> I'm assuming this error is going to pop up for all of the files that had been already moved?

yes. Either check for existence eg with `os.path.isfile()` or wrap the move line in try/except block to ignore errors

    try:
        shutil.move()
    except Exception:
        print('this file could not be moved')

alternatively another approach could be used:    
read csv into a dictionary with file name being the key   
loop over files in the folder, retrieve necessary parameters from the dictionary using name.

    reader = csv.reader(f)
    next(reader)   # skip header
    
    file_data = dict(reader)

    for filename in glob.glob('*.*'):
        if filename in file_data:
            label = file_data[filename]
            ... do stuff
        "
1,"you are not supposed to reinitialize the writer in every iteration. It's 1 writer for the whole file.

    from urllib.request import urlopen as uReq
    from bs4 import BeautifulSoup as soup
    import csv
    
    my_url = 'https://www.newegg.com/Product/ProductList.aspx?Submit=ENE&N=100007709%2050001312%2050001314%2050001315%2050001402%2050001419%2050001471%2050001561%2050001944%2050012150%204814%20601201888%20601204369%20601301599%20601296379%20601296377%2050001669%20601321570%20601321572%20601323902&IsNodeId=1&cm_sp=Cat_video-Cards_1-_-Visnav-_-Gaming-Video-Cards_1'
    
    # open url, grab html page, add to variable, close object
    uClient = uReq(my_url)
    page_html = uClient.read().decode()
    uClient.close()
    
    #html parsing
    page_soup = soup(page_html, ""html.parser"")
    #page_soup.h1
    
    #grabs graphic card containers
    containers = page_soup.findAll(""div"", {""class"":""item-container""})
    
    filename = ""pyProducts2.csv""
    with open(filename, 'w') as f:
        writer = csv.writer(f, delimiter='|')
        headers = [""brand"", ""product"", ""shipping""]
        writer.writerow(headers)
    
        for container in containers:
            #grab info
            brand_container = container.findAll(""a"", {""class"":""item-brand""})
            brand = brand_container[0].img[""title""] #title of the image
    
            name_container = container.findAll(""a"", {""class"":""item-title""})
            name = name_container[0].text #plain text embedded
    
            shipping_container = container.findAll(""li"", {""class"":""price-ship""})
            ship = shipping_container[0].text.strip() #cleaned up plain text
    
            print(brand)
            print(name)
            print(ship)
            writer.writerow([brand, name, ship])"
1,"consider `-n` to be an alias for `len-n`  


     A   P   P   L   E
     0   1   2   3   4
    -5  -4  -3  -2  -1

[0:-1] is [0:4]

without declaring a negative step you can't go backwards.

"
1,print() accepts comma-separated arguments. What is this /n between 2 strings?
1,"> int, float, list, dict, set, tuple, boolean, None, and str. 

one of these things is not like the other ;-)  
`type(None)`"
1,`import csv` -_-
1,"again not really fair, as numpy doesn't even bother with builtin python mechanics so all it shows is that C/fortran is faster than python, not to mention this example calls a specialized code only for that while other cases have to deal with the overhead of a generic generator expression around range() which is going to destroy all advantages range() could possible have.  
Gobbling range() directly is faster than previous examples, but of course numpy is going to win hands down no matter what.

    $ python3 -m timeit -n 100000 ""[x for x in range(1000)]""
    100000 loops, best of 3: 21.4 usec per loop
    $ python3 -m timeit -n 100000 ""list(range(1000))""
    100000 loops, best of 3: 10.5 usec per loop
    $ python3 -m timeit -n 100000 ""tuple(range(1000))""
    100000 loops, best of 3: 10.1 usec per loop


"
1,he should rather use csv module to create file.
1,"don't reinvent the wheel. Use csv.writer instead of crafting strings by hand.

    writer = csv.writer(f)
    writer.writerow([brand, name, ship])

https://docs.python.org/3/library/csv.html#writer-objects"
1,"it's not entirely fair to tuple, because [] is a shortcut with serious optimizations, while tuple() is not. list() would see a similar slowdown. 

    $ python3 -m timeit -n 100000 ""tuple(x for x in range(1000))""
    100000 loops, best of 3: 36.7 usec per loop
    $ python3 -m timeit -n 100000 ""list(x for x in range(1000))""
    100000 loops, best of 3: 36.5 usec per loop
    $ python3 -m timeit -n 100000 ""[x for x in range(1000)]""
    100000 loops, best of 3: 21.4 usec per loop
"
1,"individual prints are pretty slow and expensive, so under the hood they get buffered and processed in batches. You can override this default behavior by adding `flush=True`, which forces the buffer to dump its current content to screen."
1,"break it down further then.  
Your main is supposed to be an overview of the program logic on a high level of abstraction. I'd say that in case of a somewhat trivial program like this, if it's longer than half a page it's too big.

Consider this example pulled out my lower lower back.

    def main():
        flag1, flag2, flag3 = read_configuration()
        if hi_scores_exist():
            load_hi_scores_table()

        while True:
            play_game()
            if not play_again():
               print('kthxbye')
               break 

seeing something like this, do you have a general idea what the program does and certain expectations about where to look for specific chunks of code?  
Low level implementation details have no business being in main()"
1,"> I thought the main function my have been a bit too long but it allows me to restart the game if the user wants to play again. Is there any other way I could achieve the same thing ?

put the actual game code in a function   
wrap the function call in a play again? loop."
1,"    import os
    import glob

    cwd = os.getcwd()
    print('current working directory:', cwd)
    for item in glob.glob('*'):
        print(item)

use something like this to see if you are where you think you are and if there are files you think there are."
1,"yeah, concatenation of strings thousands of times means a lot of memory allocation and garbage collection for huge objects down the road. I could see it bogging the computer down just because

anyway, give something like this a spin. `out.txt` stores the output.

https://repl.it/repls/ImpoliteFrontTitle

it's a lazy approach, so it doesn't store everything in RAM. Even a potato with modest amounts of memory would be able to run it."
1,"care to produce a minimal example of a few lines of input, with dummy data if needed, and expected output for it?
What kind of hash?

> I am currently putting the processed data into one massive string and writing it out at the end.

wut?"
1,"    sorted(name_grades, key=lambda x: (x[0], x[1]))

if your key matches the order of items in the lists/tuples you have, you may skip the key. Tuples/lists are sorted by fields by default and your key is equivalent to the original element anyway.

    name_grades = [['C', 'Ron'], ['C', 'Bob'], ['B', 'Pete'], ['B', 'Alice'], ['A', 'Jim'], ['A', 'Jane']]

    grade2num = dict(zip('FDCBA', range(5)))
    print(grade2num)

    for grade, name in sorted(name_grades, key=lambda x: (grade2num[x[0]], x[1]), reverse=True):
        print(grade, name)

  "
1,"honestly using regex for this is bs.

> Some people, when confronted with a problem, think ""I know, I'll use regular expressions."" Now they have two problems.

You should rather exploit the fact that the structure is pretty predictable and parse that crap into something resembling a proper data structure.

a somewhat quick and dirty example (press play)

https://repl.it/repls/SnarlingVainShell



"
1,"to skip header line you can do

    reader = csv.reader(f)
    next(reader)    # gobbles first line and does nothing with it
"
1,"he means this, like in my snippet

    file_name, label = record[:2]     #  takes [a, b] from [a, b, c, d, e, f, ....]

[:2] means ""take first 2 elements"". When you provide 2 variables on the left side, that sublist of two elements will be automatically unpacked, so you can set two variables at once."
1,"use os.makedirs() to create the path.

"
1,"your understanding of pemdas is wrong. It's (p)(e)(md)(as)

`*` and `/` have the same precedence (`/` is nothing but multiplication by inverse number) and are performed left to right.
"
1,"you need something like this

    import csv
    import shutil

    with open('files.csv') as f:
        reader = csv.reader(f)
        
        for record in reader:
            print(record)
            file_name, label = record[:2]    # no idea about the data layout
            dest_path = path(label)       # specify correct path based on label here
            print('[{}] ""file_name""\n    -> {}'.format(label, file_name, dest_path))
            # shutil.move(file_name, dest_path)

test it first without actually moving, you wouldn't want to end up with files scattered all over the filesystem if something is off.

> Also if I've moved some of the files out and they no longer show up in the folder would that cause issues for the process?

No. Single copy/move failing is not a problem. Anyway you can check for existence before attempting to manipulate the file if you don't feel comfortable trying to move.


    "
1,"ever heard of ""second class citizen"", which means somebody not enjoying the full scope of privileges, somebody discriminated against?  
First class means it has access to exact same perks as other top tier shit.  
In this context functions are objects as any other, they don't require special treatment to move them around, to interact with them, etc. They don't have less functionality than the real thing. They are the real thing."
1,"you are doing it wrong. Just make a list.

    n_list = [
        (a,b,c,d,e,f),
        (b,c),
        (a,b,e,d),
        (a,b,c,d,g),
        (f,g,b,c),
        (a,f,g,c,d),
        (a,f,g,c,d,e),
        (a,b,c),
        (a,b,c,d,e,f,g),
        (a,b,c,d,f,g)
    ]

    while True:
        for n in n_list:
            print(n)
            for x in n:
                print(x)
            "
1,"no he does not. Whenever you are making index suffixes in variables, you need a goddamned list or a dict."
1,"then I choke on the ""roundabout"", then on another, then become completely frustrated and just shut my piehole -_-
"
1,"`type` is similarly self-referencing

    >>> isinstance(type, type)
    True

so type/type, type/object, object/type and object/object are all true :-) yeah, this is a magical part of python's oop"
1,"    >>> isinstance([], object)
    True
    >>> isinstance(list, object)
    True
    >>> isinstance(str.upper, object)
    True
    >>> isinstance(type, object)
    True
    >>> isinstance(zip, object)
    True
    >>> isinstance(id, object)
    True
    >>> isinstance(lambda x: x, object)
    True

`object` is the top level class everything inherits from."
1,"my biggest problem is when I can't recall a crucial word or idiom I know and choke hard. It's game over right there.  
Retrieving words from memory on the fly to push them through vocal cords is a skill in itself."
1,"I prefer the names class attribute vs instance attribute. Static might imply constant, which it is not necessarily the case.

In python OOP Larva.id  and Kelly.id are seen by all instances of their type until the attribute gets shadowed by instance-specific .id with `some_instance.id = value`. That object has its own local .id and the link to Class.id is severed.  
You cannot update the class level .id through instance. `Class.id = new_value` is a must.

I am strict about accessing class attributes. I never depend on obj.attr to fall back to class.attr.
If I want class attr, I always use Class.attr explicitly, not obj.attr.

"
1,"when running `print(x)`, you are effectively calling `print(str(x))` which is pretty much `print(x.__str__())`. It doesn't matter what `x` is. It works for all objects as it's a part of the standard object interface in python.

Classes can customize what it means to ""print an object"" by writing `__str__` method to return a crafted string. Bam, all objects of that type can be pretty-printed now. If you don't have `__str__` defined, you will get the default one from the `object` type

repr() is the same story. It's the one used in interactive prompt, eg

    >>> L = [1, 2, 3]
    >>> L
    [1, 2, 3]      <-    repr(L), calling L.__repr__()

 In the class craft a string inside `__repr__`, you have a working `repr()` for all objects of that type.

double underscore methods, aka dunder methods aka magic methods are used to customize the behavior of objects and there are many.  
What it means to add `x + y`? `x.__add__(y)` defines that."
1,"> How would you do that?

os.path.join()?

> I want each file copied in the same folder as the source.

then both arguments to copy() need both folder and file name"
1,"it doesn't have much to do with model. It's python itself.
`__str__` is a mechanism of creating a text representation of an object that builtin str() taps into.
If your object has it, you can ""stringify"" an object. If your object has `__repr__`, you can get another text representation using repr() and it's what interactive interpreter shows you here.   
When you do things like print(obj), one of these methods is called under the hood to produce something that can be printed to screen. It works for every single object, at worst you fall back to some default implementation.

What you have here is that let's say repr() of QuerySet, seeing it has some items to show, requests repr() of each element and slaps it together to build full representation of itself.


maybe runnable example will shed some more light on this

https://repl.it/repls/HightechBoldMethod"
1,"technically speaking ""class method"" is something different. It's a method that works with the type itself, not with an instance. In python it would have a @classmethod decorator above it and used `cls` instead of `self` (by convention). And it would use Class.method(args) format

What you have here is an instance method and jimmy.say(""hello"") is preferred. "
1,"what do `str(new)` and `repr(new)` show?

Anyway Item inherits from models.Model which probably has a few methods already defined, and QuerySet is customized too.

"
1,"word-based approach?
split string into a list of words, have a sliding window (sublist) and check if elements inside it match (pattern split into a list of words)"
1,"is it python3? If so, you should compare sb to '1', '2', '3'. 

to update the value you need to explicitly assign new value to the variable
`two = two + 2`, or `two += 2`  
also if you are counting 2-pointers, why +2 not +1? 

continues are unnecessary if all you got inside the loop is mutually exclusive if/elif/else

your loop is infinite because there is no `break` 

bonus points: consider adding attempts, eg with -1 meaning missed ft (+1 fta, +0 ft), -2 meaning missed 2 (+1 fga, +1 fg2a, +0 two), same thing for -3 for 3-pointers."
1,"build full paths, ie folder/file"
1,`searchString.isnumeric` misses parens. Method object is always truthy.
1,"
 If your CSV is key,value then

    import csv

    with open('file.csv') as f:
        codes = dict(csv.reader(f))

    print(codes)"
1,"CSV itself doesn't know anything about types. It's a plaintext format. That said software reading it can make assumptions, eg if it looks like a float, maybe it's a number. That other system might expect dates formatted in a very specific way."
1,did you name your file numpy? It clashes with *the* numpy. Rename your file.
1,how about you elaborate a bit what this function does exactly? Reverse engineering the logic is not exactly fun.
1,why eval() if getattr() will do the job? :-)
1,"L[n:m] is a slice, it gives you a sublist from index n inclusive to index m exclusive, eg L[0:2] gives you 2 first elements.
In other words in the code you posted you get a sliding window of two adjacent elements. Given that you look for 2 consecutive 3s, if the slice gives you [3,3] you get what you are after."
1,"if it were in let's say murican format month/day/year or a format used in some other countries dd-mm-yyyy, you'd have to, because dictionary order by which strings are sorted would produce nonsense, eg

'12/01/18' > '11/30/19' because in strings '12...' > '11...' no matter what follows after

'20181231' < '20190101'  because '2018....' < '2019...'

descending `yyyy->mm->dd(->HH->MM->SS)` order is the only one that sorts just right in the text form, ie chronological order and dictionary order are the same.

Use ISO8601 or its approximations whenever you can.  
https://en.wikipedia.org/wiki/ISO_8601
"
1,"    file_name, _ = max(lst, key=lambda t: t[1])

I didn't bother with converting to legit datetime, as date strings in iso format maintain the chronology anyway."
1,"rename sum to `__add__` and difference to `__sub__`. This will give you nice `t1+t2`, `t1 - t2` syntax instead of unwieldy methods.

Add `__mul__`/`__rmul__` if you want to be able multiply by a number `t1 * n`."
1,"human_1 vs self is like the difference between your name used by others and ""me"" used by you. 2 different words to describe exact same person.
Class definition describes the behavior of objects from the ""me"" perspective.  

self.height = height binds the value of height passed as an argument to the instance. If you don't do that, there will be no persistence and height will be nothing more than a temporary value without any use.
"
1,at the very least show your variables and your button code.
1,"> It’s called using a button command in tkinter.

well command requires parameterless functions, so submitData being defined with 4 is not going to work.
Without seeing more code/context there is not much to say. 

> I see you’ve filled the values in there as an example however all of the values must be variables as depending on the users input, they can all change.

    submitData(var1, var2, var3, var4)

then.  
But like I said, you can't use it that way in button's `command`, so I need to see your variables - where they are, how they are getting their values/inputs etc.

[SSCCE]( http://sscce.org/) Keep your code Short, Self Contained, Correct (Compilable) and provide Example
"
1,"how do you call submitData?

the signature requires 4 explicit arguments, eg

    submitData(1, 2, 'january', 24)"
1,"my post will be very superficial, because deeper analysis takes more time than I can afford at the moment.

don't rely on indices as much.  
If you have tuples, representing points and lines, use tuple unpacking to meaningfully named variables.


    p1x, p1y = p1
    (s1ax, s1ay), (s1bx, s1by) = s1

stuff like `p2[1]` or `s1[0][0]` means nothing at a glance. 

even better, consider creating specialized types by either using namedtuples or full blown classes to get that sweet access to attributes using `.` , eg

    Point = namedtuple('Point', ('x', 'y'))
    p1, p2 = Point(1, 2), Point(2, 3)
    print(p1.x, p1.y)

    Segment = namedtuple('Segment', ('A', 'B'))
    s1 = Segment(p1, p2)
    print(s1.A.x, s1.A.y, s1.B.x, s1.B.y)

this snippet below is not ""pythonic"", as index is put in the limelight again.

    n = len(tupleList)
    eq = []  
    for i in range(0,n):
        if np.allclose(checkTuple,tupleList[i]):
            eq.append(i)

generally enumerate is preferred over iterating over range(len(L))

    for i, tuple_elem in enumerate(tuple_list):
        if np.allclose(checkTuple, tuple_elem):
            eq.append(i)

or using list comprehension

    return [i for i, t in enumerate(tuple_list) if np.allclose(checkTuple, t)]


"
1,I mean padding code with 4 spaces in each line has been *the* markup for code blocks since forever. ``` is some newfangled bs. 
1,"> Wrap your code in triple backticks (`)

nuh-uh. Some people are using old desktop reddit and that shit doesn't work there."
1,"> I would have expected there to be three outputs of booleans...

too bad that in any given function call you can hit `return` only once, and the function is killed in that very moment.
Given that you always hit return in the very first iteration, because both branches have return, your function never gets to see the iterations number 2+."
1,"your problem is that the second pattern `.*` is greedy and gobbles everything till the very end which it can do, because the 3rd group is allowed to be empty.  
Try using `*?` for the middle part (non-greedy match), which should allow for wiggle room for the 3rd group

also str.strip() allows for multiple characters, eg strip('abc'), so you better use the [abc] format in your regex, not to mention that you don't need to repeat yourself in format(), given that placeholders can be labeled.

    r'(^[{chars}]*)(.*?)([{chars}]*)$'.format(chars=chars)"
1,"choice() requires sequences that are indexed with ints, like lists or tuples. Dictionaries do not belong in that category, so you need to wrap them in list to be able to call choice on their contents.

Also your randints will be evaluated at dictionary creation time, so you will always get the same result.

you need to defer randint execution until later, eg

    enemy_moves = {
        'rip': (20, 40),
        'tear': (25, 30),
        'strangle': (40, 50)
    }

    move, dmg_range = random.choice(list(enemy_moves.items()))
    dmg = random.randint(*dmg_range)
    print(move, dmg_range, '->', dmg)"
1,"not going to address your main problem, as others are on it already, but what I am about to say is still important in a decent code.

You shouldn't be duplicating stuff from your menu_items in the print calls for that menu printout.  
The principle of ""single source of truth"" says that you should have only 1 authoritative source of your data instead of having duplicates hardcoded all over the place. These can easily desync during refactors and you get nasty bugs.  
The menu printout should take entries from the list being your ""truth"".

    for number, name, price in menu_items:
        print('{}. {} - ${:.2f}'.format(number, name, price))"
1,fix those unicode quotes ;-)
1,"my point is that somebody looking at the code should not require a dictionary of magical abbreviations to understand the logic behind the code. This obfuscation is actively harmful because code is read way more than it is written. What happens when you come back to this code in a month? In a year? Will it be that obvious then?

Why not name these `temp_list`, `correct_list`, `max_values` if that's what they are?"
1,"Surprising if you don't know how containers work. Lists store references to other objects, not the objects themselves. When you copy a list, you copy references to some objects, dicts in this case. Given that the values of the references do not change, the objects they point to stay the same.

Deep copying is not the default behavior, because it's a potentially very expensive operation. You are expected to explicitly opt into it

You either have to do some variant of [dict(d) for d in list_of_dicts], assuming there are only 2 levels,
or look at copy.deepcopy()"
1,"4 spaces in front of every line of code, code being separated from text by at least 1 empty line.

Let me guess - you have a list of dictionaries?

    t = list(i for i in li).copy()[:]     <---- lol :D

yeah, this line in copied the content of the list, 3 times even to make sure :-)

    t = list(li)  # sufficient
    t = [i for i in li]  # sufficient
    t = li.copy()  # sufficient
    t = li[:]   # sufficient

The problem is that the content of the list are references of dictionaries (at least i think it's a list of dictionaries, 95% of the code here only obfuscates the issue). Did you make copies of dictionaries too? 
What does `li[0] is t[0]` say?

Btw, stop using atrocious, meaningless 1-2 letter variable names. Ain't nobody got time figuring out what l/li/m/t are."
1,"edited, every line with a dictionary needs another closing }"
1,"scientific notation is suited for significant digits and you get this feature out of the box 

    >>> '{:.1e}'.format(0.001233453)
    '1.2e-03'

and if you really don't like this format, some hackery is in order - extract the exponent and use round() with it or otherwise manipulate the number.

proof of concept   
https://repl.it/repls/TrivialBustlingEngines
"
1,"    for key1, value1 in data.items():
        for key2, value2 in value1.items():
            print(value2)

?

> cities = [(d['name'], d['sys']['country']) for d in data['list']]

it creates (name, country) tuples and I assume that the structure of the source is like

    data = {'list': [
        {'name': ..., 'sys': {'country': ...}},
        {'name': ..., 'sys': {'country': ...}},
        {'name': ..., 'sys': {'country': ...}},
    ]}"
1,"defaultdict is arguably superior as it doesn't waste time instantiating an empty list like setdefault() every time it has to be updated.

    values_dict = defaultdict(list)
    for node, values in nodes_dict.items():
        for value in values:
            values_dict[value].append(node)


"
1,"https://repl.it/repls/LargeRosybrownAgents

your code with tweaked has_duplicates(), shows numbers around 50.

set-based approach as a bonus."
1,"has_duplicates() is flawed. You are always returning in the very first iteration because both branches of that if return.  

return False should be placed after the loop."
1,"    from itertools import combinations

    nodes_dict = {
        'node1': [1234, 5695, 3222],
        'node2': [4332, 6654, 4532],
        'node3': [2222, 1111, 5695],
        'node4': [2222, 2323, 7777],
    }

    for (key1, value1), (key2, value2) in combinations(nodes_dict.items(), 2):
        if set(value1) & set(value2):
            print(key1, key2)"
1,"> I collected the worldwide gross value, the main value which was shown in the homepage of each movie for Box Office Mojo. I think it includes the inflation factor. 

I think it does not. For example Avatar shows ""domestic gross"" $760,507,625
and in the ""worldwide gross"" the same figure of 760M is used.
Meanwhile when you go to   

https://www.boxofficemojo.com/alltime/adjusted.htm

it shows   

15 	Avatar 	Fox 	**$859,243,500** 	$760,507,625 	2009^  

with 859M being marked as adjusted gross.
Adjusted domestic alone for The Star Wars '77 is over 1.5 gigadollars. I don't see it anywhere on the left side of the chart :-)

They go with average price of tickets over time for adjustments and there is a list of prices they used.
`adjusted_gross = latest_price/price_at_release * unadjusted_gross`?


> If you are into data viz, you can fork the notebook in Kaggle and do it, maybe :) 

 I am, kinda, but I thoroughly lack the skills ;-)

"
1,"it would be nice if you accounted for inflation, at least optionally, because in the current form your list is overly biased towards the present, as if the gdp growth, population growth and globalization increasing the consumer base were not enough of a bias.

Let's assume a constant 2% inflation  
1.02^10 is ~1.22 - a 200M movie from 2009 is roughly equivalent to a 244M one in 2019  
1.02^20 is ~1.49 - a 200M movie from 1999 is roughly equivalent to a 300M one in 2019  "
1,"can you produce a minimal [SSCCE](http://sscce.org/)?
I don't feel like spending time to write necessary boilerplate you have already, just so I can play with the problem."
1,"> I like your solution using a namedtuple. 

Yeah, I like my domain objects as they are flat-out superior to a dict soup. Normally I'd write a full blown class because I like to customize the shit out of `__str__`, `__repr__` etc."
1,"so you didn't bother to look at my code in that other thread after all.

    from collections import namedtuple
    from functools import partial

    Station = namedtuple('Station', ('name', 'x', 'y', 'z', 'items'))

    def make_station(d):
        name = d['name']
        x, y, z = float(d['x']), float(d['y']), float(d['z'])
        items = d['items']
        return name, Station(name, x, y, z, items)

    def distance(s1, s2):
        return ((s1.x-s2.x)**2 + (s1.y-s2.y)**2 + (s1.z-s2.z)**2)**0.5


    json_data = [{'name':'angus', 'x':'56.754', 'y':'-238.54', 'z':'46.3', 'items':'gold'},{'name':'eko', 'x':'12.3', 'y':'98', 'z':'-14.7', 'items':'bronze'},{'name':'wym', 'x':'-143.6', 'y':'89', 'z':'-78.6', 'items':'gold'}]
    stations = dict(make_station(d) for d in json_data)
    print(stations)
    print()

    current_station_name = 'eko'
    current_station = stations[current_station_name]
    print('Current station:', current_station)
    print()

    print('All sorted by distance to', current_station)
    for s in sorted(stations.values(), key=partial(distance, current_station)):
        print(f'{distance(s, current_station):10.3f}', s)
    print()

    print('Closest to', current_station)
    other_stations = (s for s in stations.values() if s is not current_station)
    closest = min(other_stations, key=partial(distance, current_station))
    print(closest)
"
1,"did you bother to click my link?
**I literally start WITH YOUR GODDAMNED JSON**

"
1,"People are frequently affected by the XY problem and honestly you look like one of them.
Just because something was served via an external api, doesn't mean you are bound by its structure for eternity. You are the master of your code and can do whatever you want once the data from the outside finds the way inside.

You can trivially derive structures that are 10 times more convenient and easier to use to calculate whatever you are calculating. You don't have to jump through the flaming hoops to do your stuff with a list full of dictionaries.

and to prove that I am not spewing off-topic bullshit, here

https://repl.it/repls/FakePapayawhipTaskscheduling

I shaped the data right off the bat the way I like it. Dict gives me fast lookups of stations, my custom record type gives me attributes in covenient form.  
And in case you need to send json, it's not like the conversion in the opposite direction would be any more problem.

"
1,"Do you control the shape of `stations`?
You should rather have a dictionary for faster lookups.

in order to find coords given name in the current setup, you have to go through the whole list.   
Dictionary would allow you to call stations['eko'] to extract the needed coordinates.

    distance = ((float(station[""x""]) - current_station_x)**2 + (float(station[""y""]) - current_station_y)**2 + (float(station['z']) - current_station_z)**2)**0.5

this line is fugly. Lines of code are cheap so separate conversions from the formula itself. You don't want unnecessary garbage in your formulas,

    x, y, z = float(station['x']), float(station['y']), float(station['z'])
    distance = ((x - current_x)**2 + (y - current_y)**2 + (z - current_z)**2)**0.5

You shouldn't be holding coordinates as strings in the first place because now you get to enjoy jumping through flaming hoops to make use of them. Your data should serve you, not the other way around.

"
1,"I'll add that sqrt is superfluous when looking for closest point, not the number for shortest distance specifically.
Minimum distance translates to minimum distance^2 .

Premature optimization, I know."
1,"data() shouldn't be parameterless. You shouldn't make your code dependent on the current state of some external variable.
You want it inside, you pass it.

    def data(item):
        ....
 
       if search in item['name']:
            data(item)

Anyway, to find the closest point, you need to apply `min()` to point list with custom key that will calculate `delta_x**2 + delta_y**2 + delta_z**2` between your position and a point in the list.
    "
1,"`__init__` is not a constructor. It does not create an instance, because the instance is already there and passed as first arg. It's an initializer filling that already existing instance with stuff.  
`__new__` is a constructor and is capable of customizing the process of object creation itself, like making it a true singleton (only 1 instance at a time) or whatever. You can't achieve a singleton pattern with only `__init__`

The confusion stems from the fact that the default constructor just giving you a fresh instance of a class + `__init__` doing the heavy lifting is plenty enough for 99% of cases. In other languages you write constructors that also fill objects with stuff, so this label got applied incorrectly to `__init__`"
1,"instead of deleting from dictionary, create another, proper data structure representing what you need

    from collections import namedtuple

    # custom record type inheriting from tuple
    Entry = namedtuple('Entry', ('item_id', 'location_id', 'quantity'))

    for item in loaded_json:
        item_id, location_id, quantity = item['item_id'], item['location_id'], item['quantity']
        entry = Entry(item_id, location_id, quantity)
        dd[location_id].append(entry)
        # print(entry, entry.item_id, entry.location_id, entry.quantity)

even a second dictionary instance with 3 copied values would do.
"
1,"> There are obviously some places where it makes sense: html return code and the received request, anything that's just clearly n-valued in general returning a tuple of n things, etc. But in general, this is not an important or desirable feature, to me.

isn't that enough? Ain't nobody got time for writing boilerplate, especially when you work daily with scenarios biased that way.     
What about generators wrapping around sequences to augment values (think enumerate being equivalent to one with `yield i, value`) and unpacking directly in for loops? This is an extension of the same idea: return, yield - same shit.

It's like saying that comprehensions are not an important feature, because you can always fall back to a run of the mill loop. Sure, you can, but people *hate* writing boilerplate for the sake of it."
1,"second bonus round:
you can use * to gobble remaining elements into a list during unpacking

    >>> a, b, *c = range(10)
    >>> print(a, b, c)
    0 1 [2, 3, 4, 5, 6, 7, 8, 9]
    >>> a, b, *c, d, e = range(10)
    >>> print(a, b, c, d, e)
    0 1 [2, 3, 4, 5, 6, 7] 8 9

you can also unpack nested structures if both sides have the same ""shape""

    a, b = (1, (2, 3))
    # but also
    a, (b, c) = (1, (2, 3))
"
1,"use str.translate

    bad = r'/\:*?<>|'
    trans_table = str.maketrans(bad, '_'*len(bad))
    print('a/b:c>d'.translate(trans_table))

out

    a_b_c_d"
1,"genfromtxt doesn't seem capable of handling the full scope of csv capabilities.

try using csv.reader with proper settings to populate your stuff, which means a couple lines of boilerplate   
or maybe pandas read_csv()"
1,"because running user input as code opens up ""steal yo' data, wipe yo' drive"" scenarios."
1,"> What I don't understand is how the match object is passed to matchcase(), because I'm already trying to pass the argument 'word' to matchcase()

`matchcase()` is not the function passed as repl to re.sub. The inner one, replace() is.
`matchcase()` is a function factory building other functions based on the given argument.
It returns the inner function, after customizing some details, in this case hardcoding given word in the body.

`matchcase('snake')` is effectively equivalent to

    def replace(m):    # accepts match object
        text = m.group()
        if text.isupper():
            return 'snake'.upper()
        elif text.islower():
            return 'snake'.lower()
        elif text[0].isupper():
            return 'snake'.capitalize()
        else:
            return 'snake'

    re.sub('python', replace, ...)

and this is the repl function
    
    "
1,"if these values are necessary for the ""do things"" part, pass them explicitly as arguments. If you want something from the inside of the function to get out to the outer scope, use `return` statement.

    def whatever(a, b, c, d):
        #do things
        return a, some_value

    int1, int2, int3, int4 = 1, 2, 3, 4
    int1, saved_value = whatever(int1, int2, int3, int4)"
1,"whenever you are putting some kind of indexing in the variable name, it's a sign you need a list or a dictionary.  
Assuming it's a 9x9 grid, I'd go with a dict with (x,y) as keys.

    grid = {}
    for i, (row, column) in enumerate(itertools.product(range(9), repeat=2), start=1):
        cell = Cell(cell_id=i, value=0)
        grid[(row, column)] = cell

bam, 81 cells created."
1,"spaceship prefix in every attribute is superfluous too. The context is in the class name and hopefully meaningful names of variables used to store instances anyway  

eg `enemy_spaceship.spaceship_health` looks redundant compared to  `enemy_spaceship.health`"
1,"> I don't think theres a raw_input() function

python2, mate."
1,"if you are using py3, you should be able to simply use pretty much any unicode char itself out of the box, instead of typing in its code number.

    >>> x = '显ⱼ'
    >>> print(x)
    显ⱼ
"
1,"is this an exercise for regexes?
Because a regex covering full email address spec is like a half a page long and I am not kidding. People who deal with this shit daily suggest simply sending an email to check if it goes through or bounces."
1,"what is the expected behavior for 23:59:59.999999?

24:00:00? Are there days involved or should it end with hours, so even 100:00:00 is allowed?
"
1,https://old.reddit.com/r/learnpython/wiki/faq#wiki_variable_is_one_of_two_choices.3F
1,"it also tells you the line (why do people never post the full error message?), look for `+` in it. Left and right side are int and list respectively. You can't do 1 + [1], because it makes no sense.    
I can't say more, because I can't be bothered to figure out the correct indentation."
1,"git gud ;-)

    from sympy.physics.units import convert_to
    from sympy.physics.units import meter, kilometer
    from sympy.physics.units import second, hour

    mps = meter/second
    kph = kilometer/hour

    converted = convert_to(5*mps, kph)
    value, unit = converted.as_two_terms()
    print(value)

"
1,yes
1,"> One of my goals is to lure people in my field away from using Excel spreadsheets to work with data, and I know that having cells recalculate on any change in your data is a big benefit of spreadsheet analyses.

that's a noble goal indeed. The usage of excel in the wild is too damn high.

> I'd like the user to be able to get attributes like skewness or mean grainsize from the GrainDistribution object and have them be certain that the values are in agreement with the current state of the dict.

how is the data presented to them that it's a reasonable expectation to see the change immediately? How are they interacting with your stuff in theory? REPL? Script? With magical autoprinting to terminal on every operation? Some gui? 

Generally speaking spreadsheets and ""true"" programming follow different paradigms. Autoupdating along the whole data chains is not how one usually writes code. Usually you ""pull"" exactly what you need, when you need it, and capture it in variables for further use, instead of having everything ""pushed"" onto you whether you need it all or not.  
Sometimes operations are expensive in time/memory and you only want them done once, at the end of the long chain of manipulations so it's better to have full control over when something is being recalculated.


> Are there any documents you'd recommend to read up on best practices for setting the scope of classes?

not really. Google is your friend, the single responsibility principle, the sense of aesthetics and subjective value judgments. Minimum self-contained class able to represent X in its name is preferable to everything and the kitchen sink. Unnecessary coupling with superfluous crap makes code harder to maintain and refactor.   
There is not much else to be said on the topic :-)"
1,"yeah, pass is a no-op to make the block non-empty.

Now useless trivia - you could use any value to achieve somewhat similar effect. 

For example a function with only a docstring is valid because the body is technically not empty.

    def only_docstring():
        ''''''

and now for the fanboys of braces in python:

    def lul_braces(): {}

:-)"
1,"I hope you will figure something out.

Mutation with updates is still a bit iffy. For example I don't think there is a way to detect `del dict[k]` so you still have a hole that can lead to inconsistent state. That's why my first idea was to go with immutable dict.  As the other guy said, there is an implementation at PyPI. I checked it a second ago and indeed it disallows deletion.

Why exactly do you need your additional calculations to be performed on each change, not when they are required for something?

Also plotting part should be done outside to leave the distribution class purely math-related. A matter of taste, I know."
1,"yeah, I googled later for it out of curiosity and found it, and a few other implementations scattered over github.  
Would be nice to have a canonical implementation though, it's a shame that PEPs advocating for it were rejected."
1,"pretty much. Granted, I don't know the problem in depth, but at a glance GrainDistribution looks like a run of the mill wrapper around dict + one additional method and subclassing should be plenty enough for the job.

example

https://repl.it/repls/SnivelingNavajowhiteGenerics

"
1,"i played a bit with this problem and it kinda works

https://repl.it/repls/AlertOpenSearchengine

that said, assuming that your stuff seems to be nothing but a dict + stats, wouldn't subclassing `dict` for that stats method suffice? Then you wouldn't have to jump through the hoops to synchronize 2 objects, you'd have only one to worry about and a full control over setitem and getitem."
1,"maybe use frozendict internally to save the snapshot of the dict arg, prevent modification of internal data in place and to force providing a whole dict every time the distribution dict is supposed to change?

edit: I assumed frozendict exists like frozenset, I was wrong :-)"
1,"array.append() modifies array in place and returns None. Split that line in two, first append part, then + part"
1,"my guess would be that random produces numbers in 0..1 range, so multiply by 2 gives you 0..2, then -1 means shifting it down, so you get symmetrical -1..1"
1,"print line didn't solve the problem? You don't say. But if you actually read it, you'd see something like `xmax(5[:mid])` which literally says that you are about to index into an integer because a is an integer.

once again

    a = xmax(a[mid:])   # goes down recursively, reaches return a[0] being eg 5, passes it up the call chain

in your own words: WHAT IS THE VALUE OF **A** NOW

    b = xmax(a[:mid])   # what is the value of a here, once you have overwritten it?


"
1,"I understand the reasoning about sublists, but your first line already reached the end, returns lets say 5.

I am asking what is going to happen in b= if you already replaced your original list passed to a function as an arg with 5?

above the `b = xmax()` line put `print('xmax({}[:mid])'.format(a))`

    a = xmax(...)
    print('xmax({}[:mid])'.format(a))
    b = xmax(...)

and run your code. You should be able to recognize the problem immediately."
1,"It's not merely confusing. If you asked me what *should* happen here, I wouldn't even know how to answer. *How does python solve what looks like a paradox?*

If you see shit like this in a tutorial, run for the hills."
1,"    a = xmax(a[mid:])
    b = xmax(a[:mid])     # a[] ?

if you return 5 from a = xmax(), what's going to happen when you do 5[...] in b = xmax()?"
1,For titles in titles? Why are both names the same?
1,u'serial'? py3 icon yet running `python` in cli? I can't even ;-)
1,"re.findall() returns a list. Get [0]-th item of it to get '98'

also use format() or f-strings for formatting, instead of the oldschool %-based way."
1,"`/` don't need escaping in regex, `ca` is never going to match `www` and switch your search arguments around (pattern, text)"
1,"`with open() as f:` instead of `try: f = open(); f.close(); except ...`

informative variable names - s, x, f don't mean anything

if integers, why `val = float(...)`?

"
1,"how are you building your json exactly?
'w' opens for rewrite 
'a' opens for appending at the end

why are you opening and closing the file for each write anyway, instead of opening once, writing all, and closing?

also you should be using json.dump() to do the work for you, aint nobody got time for manual json writes."
1,"use dict/tuples/whatever to create the representation of the table in a way that allows you to find approximate weight, then lifts

for example consider this quick and dirty, somewhat functional example

    # https://www.youtube.com/watch?v=7kbSfFFEvxw ;-)
    ranks = ('ooze', 'tadpole', 'brotégé', 'gymbro', 'gymrat', 'monster', 'freak beast')
    table = {
        100: (200, 250, 300, 350, 400, 450, 500),
        125: (225, 275, 325, 375, 425, 475, 525),
        150: (250, 300, 350, 400, 450, 500, 550)
    }

    user_weight = 127
    user_lift = 395
    category_weight = max(w for w in table.keys() if w <= user_weight)
    print('category', category_weight)
    category_lifts = table[category_weight]

    for lift, rank in zip(category_lifts, ranks):
        print(lift, rank)
        if user_lift >= lift:
            user_rank = rank

    print('{} @ {} -> {}'.format(user_lift, user_weight, user_rank))

out

    category 125
    225 ooze
    275 tadpole
    325 brotégé
    375 gymbro
    425 gymrat
    475 monster
    525 freak beast
    395 @ 127 -> gymbro

there are many ways one could lay out the data to make it somewhat readable and easy to iterate over/search in. And yes, reading data from a file into your data structure is a good idea. This way you can update the source should the need arise without having to touch the program file.


"
1,an example of asian characters in json would be nice too.
1,"yeah, I assumed it will yield tidy coordinates without checking, and I didn't know unique already gives you sorted stuff.
That said, nice coords should be plenty doable with trivial divmod() seeing that subarrays are glued together into 1 sequence.

    >>> a = np.array([[1,2,1,2,1,1],[3,0,1,2,2,1], [2,3,4,3,1,1]])
    >>> a.shape
    (3, 6)
    >>> np.unique(a, return_index=True)
    (array([0, 1, 2, 3, 4]), array([ 7,  0,  1,  6, 14]))
    >>> value, pos = list(zip(*np.unique(a, return_index=True)))[4]
    >>> value, pos
    (4, 14)
    >>> divmod(pos, a.shape[1])
    (2, 2)


Doesn't matter though, as you got a nice solution, though I am kinda interested in performance for nontrivial sizes. On one hand, I used python toys to which are inherently slower to reach the result because I don't know any better, on the other hand the better solution has to go through the array twice, 1. to calculate uniques, 2. to sift through all cells with specific value in hand which smells kinda wasteful.

Maybe there is a zip equivalent in np. Stack overflow mentions dstack and column_stack for zip-like purposes?
"
1,"try np.unique(return_index=True). You should get a second array with indices matching the flattened array. 

    array([1, 2, 1, 2, 1, 3, 1, 4, 5, 2, 2, 3])
    >>> np.unique(a, return_index=True)
    (array([1, 2, 3, 4, 5]), array([0, 1, 5, 7, 8]))
    >>> list(zip(*np.unique(a, return_index=True)))
    [(1, 0), (2, 1), (3, 5), (4, 7), (5, 8)]
    >>> sorted(zip(*np.unique(a, return_index=True)))
    [(1, 0), (2, 1), (3, 5), (4, 7), (5, 8)]
    >>> sorted(zip(*np.unique(a, return_index=True)))[3]
    (4, 7)

I don't have much experience with np though, so maybe there is some np-specific shortcut to this."
1,"yeah, it's a bit of pick your poison kind of thing.
Personally I tend to consider readability of structures defining associations to be more important than some fugliness on the access side. Business logic bugs can easily hide in opaque data structures.   
Access fugliness can always be swept under the rug with a wrapper function or 2, with interface as pretty as you can make it.

    "
1,"it's not a syntax, really. `type` is a run-of-the-mill, builtin function that returns the class of the object (not really, but it's a good approximation for all intents and purposes here). You could think of it as a function that does something like this.

    def type(obj):
        return obj.__class__

You can call it with every object, everywhere. `type(1)`, `type(int)`, you name it.
Everywhere means everywhere, so that includes calling it with `self` inside the class, in methods.

Once you get the class object you can access its attributes, as if you typed the class explicitly

    class LolWut:
        x = 1
    
        def __init__(self):
            self.x = 2
            print(type(self))
            print('type(self) is LolWut: ', type(self) is LolWut)
            print(LolWut.x, type(self).x)
            print('type(self).x == LolWut.x: ', type(self).x == LolWut.x)

    obj = LolWut()



"
1,`type(self).class_attr` ?
1,"ClassName.class_attr has the drawback that it duplicates the class name, which might prove annoying during refactors.

wouldn't `type(self).class_attr` be more elegant?"
1,"wouldn't tuple as key be more convenient? nested dicts are a pain in the ass to read.

    files = {
        (1, 1): 'file1_1.txt',
        (1, 2): 'file1_2.txt',
        ...
    }"
1,"> I'll need to create 60 separate functions in order to properly utilize each text file

color me sceptical.   
How about you give more details about the scope of your project instead of extracting pieces of information that might work in small scope, but might prove suboptimal when put together.

how these pairs of numbers are supposed to translate to file outputs? Is there any rhyme and reason to it?"
1,why oldschool `%s%s%s` if f-strings are closer to and trivially translate to good ol' format()?
1,"yeah, it's very badly redundant. Not that I understand the intent much, but it looks like it should have been a page of code tops.

All your akXX() functions are 99% identical and should be taken care of with one generic function.

    def ak(dx, dy):
        global scoreNum
        scoreNum = int(scoreNum) + scoreAdd
        x_pos, y_pos = pygame.mouse.get_pos()
        pygame.mouse.set_pos([x - dx, y - dy])
        time.sleep(.13)

The if blocks can similarly be reduced to one generic piece of code with different parameters in a loop, for example

    some_settings = (
        (250, 550), (150, 450), functools.partial(ak, 10, 10),
        (250, 550), (250, 550), functools.partial(ak, 20, 20),
        ....             
    )

    for x_min, x_max, y_min, y_max, func in some_settings:
        if (x_min >= x_xpos >= x_max) and (y_min >= y_pos >= y_max):
            for event in pygame.event.get():
                pygame.mouse.get_pos()
                button('', 250, 150, 300, 300, green, bright_green, func)

  "
1,"remove `.__init__` from self.consequences, just [StateSeek, StateMeet]"
1,"> Further, do you ever create functions that are only called within other functions?

of course.

Functions are tools that allow you to manage complexity. If your complexity can be tiered then that's what will be reflected in your functions.

Let's say your main is half a page of code. It's the general overview with high level concepts on the same level of abstraction, that even a layman could understand

    read_config_and_inputs()
    do_stuff()
    do_other_stuff()
    generate_output()

ok, but now, what read_input() means?

    parse_file(f1)  
    parse_file(f2)

still pretty generic, but less so. What parse_file does?  
Let's say the file is in some custom format, that stores records but they are a bit hairy and need more than a couple of lines to produce a correct in-program representation of these records. Surely a function hiding nasty implementation details, like some regex soup or a huge if elif tree will be nice

    get_record(line)  # here be dragons, but it gets us a tidy object

get_record() is useless outside of parse_file() context, parse_file() is useless outside of the read_config_and_inputs() context. They still are useful in that they hide the details that are not immediately necessary when reasoning at a given level of abstraction. You just accept that they do what's advertised on the tin.

It's like when you plan building a house, you don't need 'take 1 plank, take 1 hammer, take 1 nail, put nail on plank, hammer the nail into plank' as every other line of the plan. It's going to be buried somewhere on the nth level in generic 'build a wall', scattered among its subtasks.


"
1,"> I feel there must be a simpler way... 

and indeed there is

    import datetime

    date_str ='12/16/2018 6:01:42 PM'

    dt = datetime.datetime.strptime(date_str, '%m/%d/%Y %I:%M:%S %p')
    print(repr(dt))
    print(dt.strftime('%Y-%m-%d %H:%M:%S.%f'))

out

    datetime.datetime(2018, 12, 16, 18, 1, 42)
    2018-12-16 18:01:42.000000

I have no experience with django, but I'd expect it to be able to work with datetime objects directly."
1,"the code is broken so I have trouble parsing out the intent 


    one = print(random.choices)    <-- what?
    ""Reply hazy try again"",
    ""Ask again later"",             <--
    ""Better not tell you now"",     <-- these lines look like options, but where is the start of this tuple?
    ""Cannot predict now"",          <--
    ""Concentrate and ask again,""
    )                    <- what does this parenthesis close exactly?


random.choice() requires **1 container** with all options, not multiple arguments representing them.  
random.choices() is a superset of choice() functionality, which allows to define how many choices and with custom weights.

when in doubt, read the docs  
https://docs.python.org/3/library/random.html#functions-for-sequences  
examples and recipes are at the bottom of that page.
"
1,"it complains about '27.5,' with both . and ,? Yeah, that's going to fail because it's not a proper float. Why you get a trailing comma is the question here."
1,"you are apparently passing None to your function. Do you do something with your dicts before calling displayInventory? I am smelling something like update(), eg

    dict1 = dict1.update(dict2)
    # dict1 is None now, because update() method modifies instance in place and RETURNS NONE

insert a `print(dict)` line above `displayInventory(dict)` call to actually see what's getting passed to the function, and then trace back to see where the value of that dict is set/changed."
1,"`csv.DictReader` would actually give you email in `row['Email']`. Can't get simpler than that.
Regular expressions are ok for situations where you have a text soup and need to fish out something following a pattern, but CSV file has a well defined structure, so it's better to exploit that angle before reaching to moody regexes.

The format of email column looks a bit funky though, but like another poster said, that might be caused by reddit doing bad things to what looks like a valid email."
1,"and by <..., ...> you actually mean (..., ...) ?

sounds like python2 (where `print` is not a function), thinking you want to print a tuple `('time difference:', '1.2345')`

best idea - switch to python3  
second best idea - at the top of your code put `from __future__ import print_function` to get the print behavior from python3  
third best idea - omit ()

"
1,"*Some people, when confronted with a problem, think “I know, I'll use regular expressions.”  Now they have two problems.*

you got `csv` module specifically for reading csv files.  
You could show an example of the format you are dealing with, with fake data if you don't feel like leaking secrets."
1,"    for a, b, c in itertools.product(range(1000), repeat=3):

that said, it's a suboptimal approach. There is a ton of reduncancy, as you will get 345, 354, 435, 453, 534, 543. Every triplet is repeated 6 times. You can also assume that c is always greater than a and b, so you can cut down the search space drastically.  
out of the box itertools.combinations_with_replacement() should improve the run time.


"
1,"there is not much to say. `__str__` needs to return a string and is what is being used under the hood whenever you print() or str() to produce text representation of the object. It's intended for pretty version for human eyes, as opposed to `__repr__` used by repr() that is supposed to produce a version that would produce identical object if put into code, eg ""City('california', '12 million, ...)""

your .info() was pretty much it.

anyway googling for 'python magic methods' or 'dunder methods' should give you plenty sources.
"
1,"if you see something like <builtin method> that means you forgot parentheses and instead of calling the method for its result you used the method itself.  
Check line 6

btw, take advantage of `__str__` and superior `format()`

    class City:
        ...

        def __str__(self):
            return '{obj.state}, {obj.attraction}'.format(obj=self)
            # or in 3.6+
            return f'{self.state}, {self.attraction}'

    los_angeles = City(""california"", ""12 million"", ""87 ASL"", ""beaches"")
    print(los_angeles)"
1,"    operation is ""destroy""

don't use identity check with strings. As a rule of thumb, `is` suits situations where you compare things against singletons like `None`, `True`, `False`. Strings do have some deduplication optimizations that make `is` work sometimes, but it's not a guaranteed behavior. Use `==`


I don't like that even 2 param functions get a multiline signature. And don't butcher signatures with comments about params. You have docstrings, explain param caveats there.


    dryrun = is_dryrun(dryrun)

I assume it does something with sense, but it reads like ass."
1,"> I haven't seen that syntax yet in the declaration for schedule_rows. Does that essentially mean that you're selecting each tr from the named table?

google said that beautifulsoup is able to use css selectors so I went with them.  
This specific one means ""<tr> tags which are direct children of <table> of team-schedule class"". Long story short - target one specific table, take its rows.

> How do you return the two other td values which don't have classes declared like game time and attendance?

I didn't bother with td classes at all. I just assumed here that there are always 5 values in specific order and wrote a comprehension that extracts .text for every td.   
Then I unpack the list of 5 values to variables. `_` is just a garbage variable name meaning I don't care about this value by convention, but if you do need time and attendance, replace underscores with proper variable names and you are good to go.

    date, opponent, result, game_time, attendance = td_values

the approach is always page specific, gotta figure out the data layout which allows for solution that is simple, yet meets the requirements. Sometimes it's classes, sometimes it's selectors, sometimes it's some assumption about the data structure, or any combination of the above."
1,"the file seems csv-compatible with `|` separator instead of ',', so you could use the standard `csv` module to read/write files. csv.DictReader would even handle the header for you.

avoid meaningless names and indices, which are glorified magic numbers, to get stuff from a ""record"", eg

    if user_freq in range(int(entry[0]), int(entry[1]))

Also you shouldn't be doing the type conversion here, that late to the game. When you do extract data from a source, you should transform it to convenient form as soon as possible, for example here during parsing you should convert column 1 and 2 to ints as soon as possible, instead of splitting the row to strings and calling it a day. The separation of concerns principle says that chunks of code should be specialized and shouldn't mix responsibility. Core logic shouldn't be doing type conversions of source data, it should be given ready-to-use values. That task of preparation of convenient form should happen at the boundary, where the data enters the picture.


At a glance I have no idea what entry[0], entry[1] mean, so unpack things like these to variables with informative names, eg

    # assuming that the records store ints for min and max
    for entry in data:
        abs_min, abs_max = entry[:2]
        if user_freq in range(abs_min, abs_max)


add support for commandline arguments. `program 1111 2222 3333 4444` is often more convenient that dealing with interactive prompts. Ain't nobody got time for that."
1,"    import requests
    from bs4 import BeautifulSoup

    url = 'http://www.cfbstats.com/2018/team/234/index.html'
    page = requests.get(url).content
    soup = BeautifulSoup(page, 'html.parser')

    schedule_rows = soup.select('table.team-schedule > tr')

    for tr in schedule_rows:
        td_values = [tag.text for tag in tr.find_all('td')]
        if td_values:
            date, opponent, result, _, _ = td_values
            print('{}, vs {}\n\tresult: {}'.format(date, opponent, result))"
1,"> i'm using the int() function anyway to each one of the x and y variables so why aren't they stored as integers???

it seems you are confusing index of a list with value stored under an index. Value can be whatever, but index has to be an int, because index is an ordinal and it makes no sense to have nth.5 item in a sequence.

`list[2]` is legit and means 3rd value, but `list[2.0]` and `list[2.5]` are illegal because 2.0 or 2.5 are floats. i/2 is producing floats, which are not allowed for index. // or int() inside [] will indeed fix the problem.  
That you wrap whole `list[2.5]` in int() is too little, too late. List[] explodes and you don't even get to the int() conversion stage.  
It was always about getting an integer inside []

"
1,"> at line10 i tried using // instead of / just in case

which is a proper course of action, but the program fails even earlier than that, at line 7 with `list1[i/2]`

The number inside [] has to be an integer. `i//2` is, but `i/2` is not."
1,"add `print(expected10)` before the if to see it's not what you expect it to be, trace back to the variable assignment, find your problem there."
1,"you are indexing into a function itself, as opposed to its result, ie equivalent of this: `function[i]`,  not this: `function()[i]`"
1,"> You use it when you print an instance.  
>  print(p)

of course that will work as described only if `__str__` is not defined. `__str__` being the default makes sense because 9 times out of 10 you want to print a pretty version for human eyes (which is what str is supposed to be), as opposed to fugly, eval()able repr."
1,provide an example of the relevant parts of html
1,"a bit late, but set is mutable, unlike more obscure frozenset 

As a rule of thumb, things like augmented addition += modify existing object if mutable, but will create a new one for immutables.

In other words 

    if type(x) == int:
        x = x * 2

doesn't even pretend to test the issue, because in such an expression the right hand side is guaranteed to first create a new object no matter the underlying type: 1. Evaluate right side to an object, 2. assign that new object to the variable.

    elif type(x) == set:
        x = {1}

try `|=` to see that sets are mutable and behave the same as dicts and lists.
"
1,"which types are not passed by reference?

    def f(x):
        print(id(x))
        return x

    for x in (1, ""1"", (1,), {1:1}, {1}, [1]):
        print(x, type(x))
        print(id(x))
        print(id(f(x)))

out

    1 <class 'int'>
    140147904775936
    140147904775936
    140147904775936
    1 <class 'str'>
    140147881535000
    140147881535000
    140147881535000
    (1,) <class 'tuple'>
    140147866271472
    140147866271472
    140147866271472
    {1: 1} <class 'dict'>
    140139715102688
    140139715102688
    140139715102688
    {1} <class 'set'>
    140139712208008
    140139712208008
    140139712208008
    [1] <class 'list'>
    140139699764424
    140139699764424
    140139699764424"
1,It's **floor** division and -2.5 rounded down is -3. 
1,"In many languages variables are identifiers for static locations in memory, but variables in python are like post-it notes slapped on top of the object box. You can have multiple attached to exact same box and they can be removed and applied to other boxes at will.

when you do `a = 1` you get the object representing the value of 1 and slap `a` label on it.  
when you do `b = a`, you merely slap another post-it with `b` on the box that already has `a` attached  
`a` and `b` are labels of the same object, so `is` yields True  
when you do b += 1 on an immutable integer object representing 1, you get a new instance/box with the value 2 and label that box with `b`.
a and b are not the same object, so `is` -> False 


"
1,"unless shadowed locally, outer scope variables are available in the inner scope.  
The caveat is that you can update **contents** of these mutable containers because the criterium is that the underlying reference/object id stays the same.  
Only if you reassigned the variable locally to something else, you'd sever the link and stop seeing the changes ""propagate back"" to the outer scopes.
"
1,"your functions always end at the very first character, because they don't avoid `return`."
1,"    def is_palindromic(number):
        ???
        return True/False

    def is_prime(number):
        ???
        return True/False

make them work and use them in your master loop.

btw, you don't have to iterate up to the number when checking for primality. If it's divisible by some number, it's going to happen between 2 and sqrt(number) - no point going higher than that. Also you can use the step of 2 and only check odds after 2. There is no point in checking number%4 number%6, %8 and so on, as number%2 would already answer the question."
1,"use the value equality operator `==`. The identity operator `is`  checks if both operands are exact same object in memory, which strings of equal value are certainly not guaranteed to be.  "
1,"you could use random.choice() instead, or random.choices(k=1000)     
random.sample() has a bit different purpose of creating random subsets without repetitions."
1,"`collections.Counter`. Just feed the sequence to it and then you can call .most_common(6) on it.

    count = collections.Counter(['1', '2', '3', '4', '29', '48', '21', '27', '40', '41', '42', '45', '46', '20', '16', '17', '35', '43', '44', '46', '49'])

    print(count)
    print(count.most_common(6))

by digits you mean digits (like 46 being 4 and 6), or numbers?"
1,"why does your program deal with tuples in string form in the first place?
Anyway

    import ast

    result = ast.literal_eval('((1, 2, 3),(4, 5, 6))')

    print(result, type(result))
    print(len(result) == 2)
    print(all(len(t) == 3 for t in result))"
1,exact same error complaining about string?
1,"try converting these strings to datetime. Strings don't have the property of being equivalent to numbers that are good for x axis, dates do (eg days from 1970-01-01).

datetime.strptime(string, '%Y-%m-%d')

also google for some 'date as x axis' examples. "
1,"heh, partial did cross my mind, but I failed to notice now obvious application for it :D"
1,"I'll add another solution to the pile, using reduce

    from functools import reduce

    def repeat(fun, n):
        def inner(x):
            return reduce(lambda a, _: fun(a), range(n), x)
        return inner

    for i in range(1, 4):
        print(f'r(x+1, {i})(5) =', repeat(lambda x: x+1, i)(5))
    for i in range(1, 4):
        print(f'r(2**x, {i})(2) =', repeat(lambda x: 2**x, i)(2))

out

    r(x+1, 1)(5) = 6
    r(x+1, 2)(5) = 7
    r(x+1, 3)(5) = 8
    r(2**x, 1)(2) = 4
    r(2**x, 2)(2) = 16
    r(2**x, 3)(2) = 65536"
1,"general idea is sound, `a` is a shitty name though. Always name your stuff to be meaningful, maybe with the exception of painfully obvious loop variables like `i`, or `k`, `v` for key/value. Use `good_numbers` to collect or whatever.

- Iterate over range(x, y+1) with variable `i`
- if conditions %5 and %7 are met, append `i` to `good_numbers` (`good_numbers.append(i)`)
- combine the above into list comprehension `[ i for i in range(...) if i%.... ]`
- return random.choice(good_numbers)
"
1,"your random.choice doesn't do anything, also describe with words what is the purpose of `list_nums` and `a`. Why is `list_nums` starting with 2 strings in it and why is a empty `a` appended to num_list every time `i` fits the criteria?

"
1,"this code is redundant (printout is exact same 3x) and needs some cleanup, but to solve this specific problem you can do something like this, assuming only 1 result.


    found = False
    for name, phone, email in contacts:
        if ... and name == command[...]:
            found = True
            break
        elif ... and email == command[...]:
            found = True
            break
        elif ... and phone == command[...]
            found = True
            break
            
    if found:
        print(""{}'s contact info:"".format(name))
        print('  email:', email)
        print('  phone:', phone)
    else:
        print('nope')


on a sidenote your command is very unwieldy. Either cut it down to relevant information that can be used directly in conditions or extract relevant pieces from it, eg

    if command.startswith('show contacts with'):
        search_by, search_value = command.split(None, 4)[3:] # get rid of show contacts with, take first chunk as search by, remainder as search_value
        print(search_by, search_value)

    for name, email, phone in persons:
        if search_by == 'phone' and search_value == phone:
            do stuff

much more readable.


"
1,"    def extend(self, other):
        if not isinstance(other, (tuple, list, set)):
            raise AttributeError('Iterable must be a list, tuple, or set')

seems overly constricting, as it rules out generators, range, dict.keys, dict.values, a bunch of types from itertools, etc. 
I'd just assume that any iterable is good to go with extend(), unless proven otherwise when it barfs an exception or something."
1,"if you don't control both ends, a bit of hackery is probably unavoidable.

you could try playing with `inspect` to extract the defaults from the other function automatically

    def f1(*, x=1, y=2, z=3):
        print((x, y, z))

    def f2(**kwargs):
        argspec = inspect.getfullargspec(f1)
        kwdefaults = argspec.kwonlydefaults
        f1(**{**kwdefaults, **kwargs})

    f2(x=11)
    f2(y=22, z=33)

but then it's as ""pretty"" as your original idea.

... but can't you write the function you control with `**kwargs` and call the other one with `**kwargs` as is? The problem stems from the fact that you enforce 3 values with your signature, but is it actually necessary? The external function will do it for you anyway."
1,"    from collections import defaultdict

    daily_values = {
    '2018-11-26': 5,
    '2018-11-27': 4,
    '2018-10-28': 2,
    '2018-10-29': 6,
    '2018-09-30': 3,
    '2018-07-31': 5,
    }

    grouped_by_month = defaultdict(list)
    for k, v in daily_values.items():
        grouped_by_month[k.rsplit('-', 1)[0]].append(v)
    print(grouped_by_month)

    avg_per_month = {k: sum(v)/len(v) for k, v in grouped_by_month.items()}
    print(avg_per_month)

result

    defaultdict(<class 'list'>, {'2018-11': [5, 4], '2018-10': [2, 6], '2018-09': [3], '2018-07': [5]})
    {'2018-11': 4.5, '2018-10': 4.0, '2018-09': 3.0, '2018-07': 5.0}"
1,"can't you just pass args as is and in second_function start with ternary `x if x is not None else default_x`?

    def nvl(val, nullval):
        return nullval if val is None else val
    
    def second_function(*, x=None, y=None, z=None):
        x, y, z = nvl(x, 0.2), nvl(y, 'toto'), nvl(z, [])
        print(x, y, z)

    def first_function(*, x=None, y=None, z=None):
        second_function(x=x, y=y, z=z)

btw, are you sure you want [] as default arg? Mutable defaults in function signatures are a bad idea.

"
1,    sys.stdout.write('{:6.2f}%\r'.format(100.0*i/x))
1,"inner wrap() needs to match the args of the decorated function. Currently you are replacing a 1-arg function with a 0-arg one.  
The original takes 1 arg, so wrap() has to do the same.
And your `return wrap` is badly indented, I hope it's not the case in your real code.

simplified:

    def dec2(fun):
        def wrap(str):
            print('lol')
            fun(str)
            print(""wut"")
        return wrap

    @dec2
    def func(str):
        print(str)

    func(""xoxo"")"
1,"    print(solution(""VIIVIIVV""))
    print(solution(""IIIIIIIIIII""))
    print(solution(""IM""))
    print(solution(""XXXXXXXIIIIIXXXXIIIIXXX""))

gives

    20
    11
    1000
    145

your constraints are not strong enough. Symbols representing 5 \* 10^n can appear only once. Any symbol can appear max 4 times. Descending order accounting for 4s and 9s is a must. These should be automatic ValueError exceptions if violated.  
Arguably your initial check should throw it too, instead of returning 0. If you can't make sense of the provided value, don't try to be overly helpful and come up with a BS value that is otherwise valid. 

`s = """".join(list(s.upper()))` is equivalent to `s = s.upper()`. Keep it simple."
1,"arguably you should convert a and b to ints way earlier. 
If you have to wrap numbers in int() everywhere to do any math on them, you are doing it wrong.

    a = int(input())
    b = int(input())
    answer = int(round(a**(1/b)))
    print(f'{a} to the root of {b} is {answer}')"
1,"read about re.split() and use it to cut the string to pieces  
take the resulting list and iterate over it  
for each piece of the compound name apply regex checking if it's at least two letters  
    if you hit a piece violating the constraint, signal failure (return false, throw an exception, whatever)

"
1,"what about apostrophes like in D'Angelo?

anyway you could try the divide and conquer approach. If you re.split() with [\s-]+ you should get a list of chunks. Each individual chunk should be matched by much simpler [A-Za-z]+.

`all(re.match(..., x) for x in re.split(..., text))` should do the trick."
1,"python has the builtin type definitions loaded already, and compared to user classes they are privileged in that they have certain syntax level shortcuts for object instantiation.  
[] is owned by lists so you don't have to write list(), {} by dicts (and sets to a degree), so you don't have to write dict(), same thing with ints, floats and strings owning certain formats of literals."
1,"I'd use a dictionary for the ""cells"", indexed by (y, x) of the scaled down grid

y position is `index // row_len`, x position is `index % row_len`
in this case row_len is W//F

    numbers = [random.randrange(100) for _ in range(L)]
    cells = collections.defaultdict(list)    # convenience: values default to empty lists, so appending is possible immediately.
    for i, x in enumerate(numbers):
        cells[i//W//F, i%W//F].append(x)

    for coord, cell in sorted(cells.items()):
        print(coord, cell)

`sorted(cells.items())` should give you stuff in the correct order thanks to (y, x) tuples as keys: it will go (0,0) -> (0,1) -> (0,2) -> (1, 0) -> (1, 1) -> (1, 2) -> .... which means you don't have to calculate new index by hand."
1,"    scores = int(input('Enter the test score:')

there is something missing in this line.

protip: if you get a weird syntax error, check the previous line. 9 times out of 10 it's going to solve the problem. "
1,"> And that being your, apparent, hum drum reality doesn't make you the arbiter of what is worthwhile to learn. 

It's the reality of the vast majority of programmers. Shittons of boring-ass code, and even more shittons of boring-ass test code.  
There is borderline infinite amount of shit to learn in ""programming"". One lifetime is certainly not enough and I don't feel wasting it on some algorithmic trivia one can find on wikipedia is worth it.

What makes your opinion more relevant then? You said exactly zero about your reality and about your novel, groundbreaking, gamechanging software pushing the envelope of the programming art, that would make you somebody worthwhile of paying attention to.   

> Wait... you're 30-something and you speak like a child? 

Is that a lame ad hominem? ""I have qualms about a single word, therefore it's all BS""? I could do the same: ""the guy has problems with reading comprehension, therefore it's BS"". Also you said 20-something before, now child? Make up your mind.


"
1,"first of all, drop getX and getY, it's not java.  
.x .y are fine in python and if you need more, there is always the @property decorator.

are you guaranteed to get rectangles described as (a, b, c, d)? What should happen if the points don't produce a legit rectangle?


> TODO: Calculate the distances between all points using distanceFromPoint. There will be six of these.
> TODO: Determine which two distances will be used for the area and calculate the area.    

there should be 3 unique values: width (2x), height (2x), diagonal (2x). 2 uniques if square.
`sorted(width, height, diagonal)[:2]` should be your sides, but you need to account for possible errors introduced by the finite precision of floats to get 3 numbers instead of 6. If you can't be bothered then just pick let's say 0-th and 2-nd item from `sorted(six_distances)`

another approach that would work with any convex 4-gon: Draw a diagonal from let's say A. You get two triangles ABC, ADC. Area of a triangle with given 3 sides can be calculated using Heron's formula https://www.mathopenref.com/heronsformula.html   Add areas of both triangles to get the area of the given 4-gon."
1,"> Yes, this is why everyone everywhere only ever uses libraries and never ever codes anything novel.

95% of people are in fact not writing anything novel and entry level programmers certainly don't. Most people are churning enterprise java beans for years. That's the reality of the industry.

> Did you .... did you just say ""Nigga?"" Nothing screams white 20-something suburban dork more than that does. 

Indeed I did finish my polytech at the ripe age of 10 or so. Also your, I assume, 'Murican stereotypes about lifestyles and demographics are not of my concern. Also not everybody shares your hangups about forbidden words on the internet.

> Let us agree that OP specifically asked for a non-recursive solution, though

I would say they asked for the logical alternative: understanding the recursive solution OR building a non-recursive solution


"
1,"15 years in programming for money told me that learning shit for the sake of it is a waste of time. Not once in my life I needed iterative solution for things like that - not at the polytech, not at work - and once I need it, which won't happen with 99% probability, I will look it up. There is also the opportunity cost of spending time writing boilerplate instead of creating actual value somewhere else. There are always better things to do.

I know the recursion drawbacks perfectly well. If let's say I have a binary tree capable of hitting the depth limit, I am doing it wrong. A binary tree 1000 levels deep, which is capable of storing 2**1001-1 nodes? Nigga, you'd fit a whole universe in it and then some, you need to rotate that shit hard for the sake of lookup times (excellent learning opportunity, don't you think?). A billion elements can fit in only 30 levels and most people will never see a billion elements in a single data structure."
1,code that does not exist is the code you don't have to debug
1,isn't that reimplementing shit the call stack gives you for free?
1,"root is an object of the Node class, so it has .left and .right

stick to recursion. You don't want to keep track of your position in a tree by hand.  
The recursive solution is simple - ask left and right node for their heights, return the bigger value + 1. This will propagate down to leaves without children, and then back up with partial values that allow to calculate the end result.
"
1,"Strings are whatever, but do they actually tell you to use Dutch names for variables and functions too? Ridiculous. I'd write code in English and maybe add comments.   
When looking for help on a forum, at the very least produce a variant in English showcasing the crux of the problem. Might be only a snippet with the relevant part. It's in your interest to make the code understandable to as many people as possible. "
1,"try doing it byte by byte

    bytearray(b1 | b2 for b1, b2 in zip(warnings, candevice.data))"
1,"it's the escaping character. If you use the same quote to open/close the string and inside its value eg `'what's up'`, the parser gets confused, thinking that it needs to close the string prematurely on the very first matching quote it sees, which leads to syntax error. `\'` here means literal `'` inside string value, ie ignore this quote as far as syntax is concerned.   
usually it's more convenient to mix single and double quotes to avoid the problem entirely. `"" ' ' ' ""` or `' "" "" "" '` are not ambiguous - outer quotes make the string, inner quotes are just characters in a string."
1,What's wrong with leading +? Also scientific notation
1,"When the problem itself is linear, yeah there is not much benefit. But try any problem with branching, like binary trees. Iterative solution: jump through flaming hoops in order to not get lost in the tree. Recursive solution: in f(node) call f for the left subnode, call f for the right subnode, slap results together, done."
1,"`or` and `and` are not set operators, they are for boolean logic. Sets support |, &, -, ^

https://docs.python.org/3/library/stdtypes.html#set

"
1,"long story short literals are bound to the specific class definitions implemented in C. Same applies to builtin strings which own """", dicts which own {}, lists [] etc.
You cannot sever that link by renaming and/or shadowing builtin types.

yes, it's unfortunate. For example in ruby there is no such limitation."
1,"> Is it possible to override the Int class?

if you mean monkey-patching in-place so literals work and what not, then no, not fully.

There is a module called `forbiddenfruit` that does dirty hacks to modify builtin classes. Adding normal methods is a piece of cake with it. `curse(int, ""method_name"", function_to_be_plugged_in)`, done.

With it you can bind a custom function into `__add__` slot of the int class. There is one problem - according to bug reports on forbiddenfruit's github it works just fine when called as `(2).__add__(3)` but it does not work with expression form of `2+3`. It appears that many/most magic methods for basic types have an ""unofficial"", heavily optimized solutions in C and expressions don't go the magic method route at all."
1,"it does not because it doesn't solve the issue with literals. int(2) + int(3) is not the same as 2+3

"
1,"> strftime() to format a string into a datetime object

surely you mean ""format a datetime object into a string""?"
1,"`#!` go together and have to be on the very first line. The stuff afterwards is the declaration of which interpreter should be used to run the code and it is recognized by the OS. OS passes the file to the interpreter.

`#!/usr/bin/python` means that `/usr/bin/python` should be used.

`#!/usr/bin/env python` means that you let the system decide. `env` simply goes through directories listed in $PATH and returns first location in which python can be found, which is more flexible than hardcoding the exact path.

also, use `python2` or `python3` to be explicit about the version. System even can have multiple versions and symlinks, eg you can get even more specific if for example `python2.7` or `python3.6` exist too.
On my ubuntu box I have these in system directory /usr/bin:

    $ ls /usr/bin/python*
    /usr/bin/python  /usr/bin/python2  /usr/bin/python2.7  /usr/bin/python3  /usr/bin/python3.5  /usr/bin /python3.5m  /usr/bin/python3m
"
1,"input() !=int:

that's not how you check if a valid integer was entered. The condition asks the question: ""is entered string not equal to the object defining the integer type itself?"", which is and always will be true, so your loop will spin forever.

In python we tend to simply attempt conversion and handle errors, eg

    while True:
        try:
            input_as_int = int(input())
            break
        except ValueError:
            print('not a valid integer')"
1,"by doing ::4 you are throwing away everything inbetween, there is no 14 or 19 anymore.

range(0, 100, 4) is equivalent to:  
[0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96]

Then you apply every-5th on that already filtered data.

[0, ~~4~~, ~~8~~, ~~12~~, ~~16~~, 20, ~~24~~, ~~28~~, ~~32~~, ~~36~~, 40, ~~44~~, ~~48~~, ~~52~~, ~~56~~, 60, ~~64~~, ~~68~~, ~~72~~, ~~76~~, 80, ~~84~~, ~~88~~, ~~92~~, ~~96~~]

which gives us [0, 20, 40, 60, 80]

long story short every 5th of every 4th is multiplicative and means every 20th, not the additive every 9th.

"
1,"str.translate()

    >>> text = '1351#%!@#%136 asdgws dgssw @$^'
    >>> table = str.maketrans('@#$%!', '=-_--')
    >>> print(text.translate(table))
    1351---=--136 asdgws dgssw =_^

"
1,"\#2 has nothing to do with dict/OD methods so ""no shit"". The value behind the 'root' key, to which you want to add shit, is a run of the mill, plain `list` [ ]. That's all there is to know."
1,"1. what API is retarded enough to demand OrderedDicts because it will be unable to make sense of `key`, `value` keys otherwise?   
2. your problem is not about updating a dict, it's about appending to a list

this is what you want

    d1 = { 'root' : [ OD(A/1), OD(B/2), OD(C/3) ] }

clearly the solution is to `d1['root'].append(OrderedDict([('key', 'C), ('value', 3)]))`"
1,"Do you log in or what?  
I just open `repl.it/languages/python3` anonymously, I have never logged in to repl.it to use it.

whatever generated address is there in the adress bar of the webbrowser, it is a valid link for me if I copypaste it."
1,"hmm? I just copypaste the link from the address bar, check in another browser if it indeed has the shit I wrote and works."
1,"Strip works only at the ends. You need to replace('-', '')"
1,"give it a spin
https://repl.it/repls/LivelyAchingTrapezoid"
1,"once you assign another list/tuple to list variable, it ceases to point to the original loop variable. In other words you don't modify your original data structure.

Create a new list for sc_pp_statement stuff and append your newly built lines to it."
1,"if you search for shit in a sequence of N elements (eg chars in a string) there is no way around taking each item one by one. That means that your best case is hitting the jackpot immediately at index 0, but your worst case is the very last item, at index N-1. On average you need to check N/2 items to find the right one and that's assuming the item you look for is actually there, if not you have guaranteed N checks for nothing.     
O(N) indicates that the size of the input N determines the time necessary to perform the operation

On the other hand sets are tailored for fast membership checks. If you check some value against them, they calculate hash and can answer pretty much immediately if they have seen the hash before, and if the exact value can be found under it.
That means that it doesn't matter if they store 1, 10, 1000 or 1000000 items. The answer is fast, borderline instant.
if it's instant, then the complexity is constant, not dependent on the input size. O(1) indicates the constant being the dominant/only part of the equation.

O(1) is best, then things like O(log n), then O(n), then O(n log n), then O(n^2), etc etc.

This graph should make it pretty clear why

https://cdn-images-1.medium.com/max/2000/1*HwLR-DKk0lYNEMpkH475kg.png"
1,"sets are superior for membership checks compared to linear search in str/list/tuple, though it matters little in case of trivial sizes"
1,"no, unless you can actually guarantee that only 1-char strings are involved. `'ae' in 'aeiou'` will pass, `'ae' in {'a', 'e', 'i', 'o', 'u'}` not so much.
Often people need to make things driven by user input and user input can't be trusted, so the latter approach is what actually works 100% of the time.

""saving keystrokes"" here is a case of ""penny wise, pound foolish"".
"
1,"Dig deeper, kid."
1,"what's wrong with takewhile?

accumulate + takewhile + reduce
https://repl.it/repls/CelebratedRawOpensource"
1,"You don't get to decide how much of the float representation is ""enough"".
If your so called approach doesn't cover the whole float space and can actually **introduce additional errors**, it's better you shut your piehole."
1,"Not only you are spreading bad information and dismissing superior approach to the problem at hand that avoids possible gotchas, but now fly off the handle because you were proven wrong and had the opportunity to learn something? What a chode.

And I sure hope I won the internet, there are too many fucking tards who spread unadulterated bullshit on it as it is."
1,"my example had ""only"" 15 digits and even though repr seems fine (repl returned exact same digits) py2 decided to round str() to 0.1"
1,"    $ python2
    Python 2.7.12 (default, Dec  4 2017, 14:50:18) 
    [GCC 5.4.0 20160609] on linux2
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> 0.09999999999997
    0.09999999999997
    >>> str(0.09999999999997)
    '0.1'
 
    $ python3
    Python 3.5.2 (default, Nov 23 2017, 16:37:01) 
    [GCC 5.4.0 20160609] on linux
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> 0.09999999999997
    0.09999999999997
    >>> str(0.09999999999997)
    '0.09999999999997'

Decimal('...') guarantees accurate representation of what's in the string. Str(float) involves a bit of heuristics to figure out what's actually relevant and what's error and even if it works 99.9999% of the time, I wouldn't bet my life on it."
1,"it is possible that py3 is not installed, but it's also possible that you just explicitly or implicitly force py2.  
How do you run your prog?

Running with `python3 prog.py` or having `#!/usr/bin/env python3` in the very first line of the program when run as `./prog.py` should do the trick."
1,"This is wrong. You are assuming that str(float) will do the right thing. In reality you don't have a guarantee that the imprecision of float won't show up in stringified version.

 Long story short with Decimal you have to use string with exact value you want in order to eliminate float errors from the picture"
1,"why not bundle full names with their abbreviations? Looks like your prog is doing some sports data and there are only so many stats.

    L = [('Possession %', 'Pos%'),
         ('Time In Possession', 'TimInPos'),
         ('Completion Rate', 'ComRat')]

    for full, abbrev in L:
        print(full, abbrev)"
1,"you could make it more convenient if you went from a list/tuple and indices to a dictionary and keys. Numbers are not exactly informative about the contents they point to.

    story = '''Some story with {name} and {color} in it'''
    data = {'name': 'Joe', 'color': 'red'}
    result = story.format(**data)
"
1,"use \`code\` for `code`, your attempt at xml markup made it even more unreadable ;-) 

That said you answered yourself. Default args are evaluated immediately, when the function def is being registered, and saved with the function def. [] is translated to a specific object reference/instance stored with a function and that's it.  
The alternative would require special-casing the default args so the expressions are not evaluated, unlike literally everywhere else, but copypasted as ""code string"" for deferred eval() or something equivalent.   
On one hand it can be seen as a wart, on another it's keeping it simple.


    def f(x = g())

x is not a function, but a value returned by a function, again evaluated immediately. If you want to achieve what you are describing, you should rather do

    def f(x = g):
        x()

"
1,"it should have effect all right. It does here

https://repl.it/repls/OverjoyedRecklessServer

btw, my if was flawed, it should be correct in the linked page"
1,"    def get_radian_of(angle_string: str) -> float:
        if angle_string.strip().lower().endswith('d'):   <- only checks for trailing d and does nothing else
            e = angle_string * int((pi/180))    <- angle_string is still a string, multiplication makes no sense and what's up with the int()
            return float(angle_string)     <- angle_string is still a string, with trailing d which was not removed anywhere, will fail
        else:
            print(""true"")

long story short, nope, that can't work.
This on the other hand should.

        if angle_string.strip().lower().endswith('d'):
            angle_string = angle_string[:-1]    # remove last char (d)
            angle_float = float(angle_string)    # convert cleaned up string to a math-ready number
            radians = angle_float / 180 * pi     # do math
            return radians
        

    "
1,"can't you just read the file and treat it as a template string for str.format()?

    result = file_content.format(*answer_list)"
1,"pad your code with 4 spaces before every line, because your current post doesn't preserve indentation and makes it hard to read.

you have to remove trailing r/d from the string or `float()` won't work. It expects a number, not number with units.

    if ""D"" or ""d"" in get_radian_of(angle_string):

this doesn't do what you think it does.

    if (""D"") or (""d"" in get_radian_of(angle_string)):

makes no sense, right? not to mention that get_radian_of() is supposed to return a float, so why on earth would there be a letter? Shouldn't you be checking angle_string?  
I assume you want

    if angle_string.strip().lower().endswith('d'):
    





"
1,"there is a difference between creating variables and creating keys for some dictionary. The former violates the separation between code and data which is why its considered bad. 

anyway contextlib.ExitStack sounds like something that should prove useful here. It allows to achieve the with context manager functionality for a dynamic number of objects

give it a spin
https://repl.it/repls/FruitfulGrumpyActivecell

"
1,"Not related to your problem, but you should stop overusing indices and meaningless variable names 

`i` outside of run of the mill loop counters is bad. It tells me nothing about the contents.
i[0] tells me absolutely nothing, again. 

You can unpack, eg.  
 x, y = self.coords[:2]   
for x,y in list_of_xy_coords:  

If you want to turn series of x,y into lists of xs and us, use `zip(*list_of_xy_coords)`

Tuple(j for j in i) is tuple(i)"
1,"`sum(eucl_dist(p1, p2) for p1, p2 in zip(path, path[1:]))`"
1,"yeah, defaultdict targets the setdefault() use case of plain dicts directly."
1,"give it a spin

https://repl.it/repls/QuietShortDeveloper

    
    

"
1,"ordereddict doesn't offer anything to help you with unification of multiple entries.
Defaultdict can be made to default values to lists, so you can blindly append   from individual lines to a list behind a date key.

    d = defaultdict(list)
    for key, crap, *items in file:
        d[key].extend(items)

done"
1,"you are getting empty string in leftKey after a few iterations. Add some prints to show what's going on, eg

    for i in round_shifts:
        print(i, repr(leftKey))
        ...

Empty string being converted to int is going to fail.
Assuming empty string is not a flaw of the implementation, either check for it and have a special case, or catch the ValueError exception and handle it.



"
1,"> I think it works out quite well with just 30 questions (although debugging would be a PitA if it got de-synced lol)

always have scalability in mind. If you see how 30 records would pose a problem if something desynced, program yourself out of that hole immediately. 

https://en.wikipedia.org/wiki/Zero_one_infinity_rule   
*""Allow none of foo, one of foo, or any number of foo.""*

if you have 30, it falls under ""any number of foo"". Act accordingly.

As you can see in provided example making it nice and tidy is not that much more work, in fact usually 5 minutes of thinking about correct approach will spare you hours of pain down the road.  
Also assuming that it would be nice to have a trivially editable qa list or an ability to load a different set of questions, you should think about storing your data in a file, eg csv. Loading a csv or json in python is trivial, google for examples.  
Separation of code and data means that working and tested code can remain untouched, and then you just edit your data source (file, db, whatever) and things still just work."
1,"your data is structured in a bad way. You implicitly depend on specific order between seemingly unrelated lists. It's very brittle and can easily desync.

you should have an explicit connection between question and answers

a quick and dirty example

https://repl.it/repls/SiennaFrigidRegression

for the time being forget that `global` exists, it has some uses but it's actively detrimental to learning sound programming practices.
"
1,"    if not line or line.startswith('#'):

this would catch empty lines if only `\n` was not a part of every line, thus failing the emptiness check. Feel free to confirm it with `print(repr(line))`. You need to strip() before the check
eg

    for line in file:
        line = line.strip()
        if not line:"
1,"well, it's you who writes the try block, so you should have reasonable assumptions about what's happening there. If you can't locate all possible points of failure, what's the guarantee you don't have a showstopper bugs buried somewhere?
If you do conversions on data from user input/external sources you don't control, ValueError is probably going to happen. Lookup beyond the end of the list is going to hit you with IndexError, missing entry in some dict is KeyError. Experience will help with that, and reading docs about stuff you are using.  
Anyway pay as much if not more attention to your corner cases. The happy path is the easy part, it's the corner cases that make or break your shit.

Personally I am a fan of ""fail early, fail often"", ie letting the program crash fast, so I can quickly identify corner cases I failed to account for in the design phase and iterate fast to fix the code and possibly recover from uncovered noncritical failures.
If the program is supposed to be long lived, maybe I'd have an additional catch-all Exception there for logging purposes for a good measure, so I can check back if something new popped up in need of taking care of.  
At the very least log the errors so you have a thread to pull if shit goes south badly and you have no idea what's going on"
1,"`except (ValueError, KeyError):` or whatever you get there.

Unspecified `except:` is an extremely bad practice as it's disguises ALL exceptions, not only the ones you think you have foreseen, making you chase bugs for hours down the road. It even intercepts KeyboardInterrupt allowing to stop the program with Ctrl+C. 

Be specific."
1,"it smells a lot like a case of *“Some people, when confronted with a problem, think ‘I know, I’ll use regular expressions.’ Now they have two problems.”*

the page markup is structured, so you could target specific html tags without bullshit heuristics.

`id=""bylineInfo""` gives you the manufacturer  
`id=""priceblock_ourprice""` gives you the price    
`id=""regularprice_savings""/td[2]` gives you the savings"
1,"you need to work with newtext to accumulate changes, not with text that is fixed

    newtext = text
    for letter in newtext:
        if letter not in alphabet:
            newtext = newtext.replace(...)"
1,"`"""".join(password)` builds a string, but you don't save it anywhere. It's a de-facto no-op in your code.
Assign the result to some variable and print that (or just `print("""".join(password))` directly)"
1,"this regex looks like a massive overkill.
I'd rather go with something like

    import glob
    import itertools

    pattern = '/etc/ansible/playbooks/backup/10.1.1.*_config.????-??-??@??:??:??'

    for f in glob.glob(pattern):
        new = f.rsplit('@', 1)[0]
        new_full = new + '.txt'
        os.rename(f, new)

i winged it directly here, so it's untested.   "
1,"> Why are we putting () after the guests.items? Is this so we can pass it an argument if we need? What would that situation look like?

there is a difference between a function x and actually calling it with x(). 

    >>> print
    <built-in function print>
    >>> print()
    <empty line>



If you want it to run, you need parens. Function is like a vending machine, it doesn't do anything until you press some button on it. () is function's ""GO!"". Some functions don't accept arguments and items is one of them, but () is still needed.

> -How is Python looking at guests.items() in the first place? This is really the confusing line for me. Is it referencing the arguments that are passed in the totalBrought function? I guess the syntax is whats throwing me.

when you pass a dict object into your function as first arg, that dict gets aliased as `guests`.
dict.items is a method (a function bound to a datatype) of the dict class that acts upon an instance. Any dict object will have it and when you call it, it will give you a sequence of (key, value) tuples. So if you do guests.items() you will get the pairs of the object you provided.

> -v.get(item, 0) is singular, where its plural everywhere else in the code. Can python tell the difference?

programming languages dont care about grammar of human language. They just ""see"" unique identifiers. `item` has to be defined elsewhere or it is an error - `item` is not defined anywhere in the provided code, so on its own it would crash."
1,I'd probably look at bindings to qt (pyqt or pyside). Layouts in qt are pretty standard.
1,"can you provide some link that causes failure? and which py version?
"
1,"reword the problem. I have no idea what ""timestamp works for the insert"", ""the ordering of the insert data rotates between all the data fields"" mean.

post an example of multiline input that showcases the problem/corner cases and the expected output for it."
1,"kind of, but I'd argue that in this specific case they are very misleading in what they do. 

functions should do what's advertised on their tin.
Nothing in `ticketType` says ""I calculate prices, and for multiple tickets at that"". ticketType sounds like something that should return child/adult/senior. similarly `movieType` => 2d/3d

I'd trim ticketType and movieType only to the user input part, and then let 3rd function lets say `ticketPrice(type, movie)` or `ticketPrice(type, is3d=True/False)` take these sanitized values to produce a final dollar figure.

btw, use dictionaries.

    ticket_types = {""child"": 16, ""adult"": 22, ""senior"": 14}

    user_choice = input('type: ').lower()
    ticket_price_by_type = ticket_types[user_choice]

"
1,"you got your answers so I'll just repeat that you should rework your approach.
Strings having multiple pieces of information embedded in them are simply unwieldy and you either have to parse them, or list them by hand everywhere.

I'd suggest normalizing your inputs to tuples of (solid, liquid, gas), which given the properties of tuples and the predictable format would allow you to trivially extract individual numbers.

I allowed myself to reformulate your code to showcase the benefits

https://repl.it/repls/UnequaledMediumpurpleFile"
1,"because your if asks the question

    if (matter_phase == '...') or ('...') or ('....') or ('...')

Is it what you wanted to ask? No. And it's true because non-empty strings are considered truthy.

you are better of using `in` operator

    if matter_phase in ('...', '....', '....', '....'):

that said, your current approach is not too viable. You should rather parse the string using regex."
1,"never save seconds of time writing the code. The code is read more often than it is written, so by taking assumed shortcuts you are undermining your future self really hard. Let's say you add 10 more units. How can you be sure that (1, 7) translates to something like 3.657468547?
If it's annoying to work with with 3 units, you can bet your ass it will become an unmainainable mess when you scale it up. As Mr Hettinger says ""there must be a better way"" and look your way out asap or else any code refactor can easily destroy the consistency of the data.

You save way more time writing proper code according to DRY, and this is also a strong argument for clear cut data ""tables"" in a prominent spot.


By the way, the most space efficient representation of ratios would be to pick one standard unit and express all the others in it, eg in meters. This cuts the required number of ratios by a lot. Assuming 10 units you go from 90 (from, to) entries down to only 10.

The math needs one additional operation to represent the transition `from_unit -> meter -> to_unit`.

    m_in = {
        'm': 1.0000,
        'ft': 3.6....,
        'yd': 1.2.....
    }

    # convert 15.0 yd to ft:
    result = 15.0 / m_in['ft'] * m_in['yd'] = 15.0 / 3.6... * 1.2... = 5.0
"
1,"just FYI: your `__repr__` should be `__str__`    
the former is intended for a specific kind of representation of the object, ideally one that should create identical object if copypasted into code.
Given the `__init__` signature I'd expect `__repr__` to return a string in the format of `Numbers({1,2}, {3,4}, {5,6})` or something like that.   

Meaningful ""business"" values intended for human eyes like `$22` should come from `__str__`
"
1,"     if From == 1 and To == 2:

1, 2 are magic numbers. It's not immediately obvious what logic these ints represent. One shouldn't get that information from some print lines somewhere in the code. There should be an explicit mapping to some human-readable values describing business logic.  
something like `if (From, To) == ('meters', 'feet')` makes it much more obvious what's going on

Anyway choose_print() has tons of reduncancy and there should be only 1 printing line, parametrized with relevant unit names and amounts.

The ratios themselves should be stored in a dictionary not scattered all over the redundant code. It's much easier to miss incorrectly defined values if they are not conveniently exposed in 1 place.

rough idea

https://repl.it/repls/FumblingEmptyProfile"
1,"if something like

    randint(1,6) + randint(1, 6) for _ in range(1000)

     2 |||| 27
     3 ||||||||| 66
     4 ||||||||| 70
     5 ||||||||||||||| 111
     6 |||||||||||||||||||| 150
     7 ||||||||||||||||||| 146
     8 |||||||||||||||||||| 149
     9 ||||||||||||| 95
    10 ||||||||||||| 96
    11 |||||||| 58
    12 |||| 32

is enough for you then it's pretty trivial to do by hand

https://repl.it/repls/FoolhardyScarceClient"
1,"fix your code by padding every line with 4 spaces for the reddit gods.   
Also your variable names in dutch are unfortunate. Variable names help with understanding and using ""obscure"" language doesn't work too well on an international forum.

    f_cijfer(1) ; f_cijfer(2) ; f_cijfer(3) ; f_cijfer(4) ; f_cijfer(5) ; f_cijfer(6)
    f_cijfer(7) ; f_cijfer(8) ; f_cijfer(9) ; f_cijfer(10)

this sounds like a loop

    for i in range(1, 11):
        f_cijfer(i)

\ 

    deelfactor = v_gewicht[0] + v_gewicht[1] + v_gewicht[2] + v_gewicht[3] + v_gewicht[4] + v_gewicht[5] + v_gewicht[6] + v_gewicht[7] + v_gewicht[8] + v_gewicht[9]

this on the other hand sounds like sum()

    deelfactor = sum(v_gewicht)"
1,"use `//`. it should consistently work as floor division regardless of version

    $ python2
    Python 2.7.12 (default, Dec  4 2017, 14:50:18) 
    [GCC 5.4.0 20160609] on linux2
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> 3//2
    1
    >>> 
    $ python3
    Python 3.5.2 (default, Nov 23 2017, 16:37:01) 
    [GCC 5.4.0 20160609] on linux
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> 3//2
    1

for bonus points in math related programs you can use `from __future__ import division` at the top of your file to make division 100% consistent and reduce the hassle of differing behavior across versions to 0 (/ always float div, // always floor div).  
This line backports the new py3 behavior to py2, so you can write version agnostic math.

"
1,"    word = 'onomatopoeia'
    guesses = {'o', 't', 'e', 'p', 'i'}
    print(' '.join(ch if ch in guesses else '_' for ch in word))"
1,"give an example of your data structure so we can make educated guesses as to what the best course of action is.

Also comparing list to another list, assuming you actually compare items to items in order to find common/missing ones, smells like quadratic behavior which is dog slow. What exactly you are doing with those lists?"
1,"you can't make dictreader magically group columns. It just applies labels to what's there.  
In other words list id1, id2, id3, date1, date2, date3 as fields and reorganize them by hand to suit your needs

example 

https://repl.it/repls/FrostyDecisiveDevice

edit: and if the number of id/dates is not fixed, that's a bit more complicated. Expanded the example.

"
1,"mimicking user actions using mouse and keyboard is the shoddiest approach possible as far as scraping is concerned. It should be used only if other means were exhausted.

Examine the page source. Chances are you can target the data directly using let's say beautifulsoup. If the page is dynamically generated, you might need to pass it through selenium first.  
Then the data that is used to populate dynamic page tends to come as let's say separate json under the hood, and you can often sniff it out using webtools built into the webbrowser in the network tab. If you succeed, chances are you can request that resource file directly and call it a day.

"
1,"> I had assumed that all methods returned a value

that is correct, all functions and methods return a value. It's just that `None` is a value too, and it's returned implicitly by default, unless overriden by explicit `return` statement"
1,"your approach seems wasteful, for example if your number is 1000001 you will do as many square root checks but if you iterate over 1 -> int(sqrt(N)) instead you will do only 1000.

    for i in range(1, int(n**0.5)+1):
        num = i**2

anyway you could just square root the number, int and square it and there is your number

12  
-> sqrt(12) = 3.46...  
-> int(3.46...) = 3  
-> 3**2 = 9, there is your perfect square  

repeat for remaining 3 to get 1  
repeat for remaining 2 to get 1  
repeat for remaining 1 to get 1  


"
1,"> You can't unpack dictionaries in assignment expressions.

you can, they just effectively degrade to sets of keys.

    >>> a, *b, c = {1:11, 2:22, 3:33, 4:44, 5:55}
    >>> a, b, c
    (1, [2, 3, 4], 5)"
1,"long story short `name()` usually is a generic function  not related to any specific class/instance of a class (ie not a method), that taps into the internal implementation ( `__name__`) inside the class.  
`str(obj)` taps into `obj.__str__`, `len(obj)` taps into `obj.__len__`, you name it.

> Edit: The formatting turns the dunder methods into bold. Everything that is bold above is a dunder method

you can use \`\` to wrap shit in inline code boxes, like \`\_\_this\_\_\` -> `__this__`, or escape \_\_ responsible for bold with `\` : \\\_\\\_this__ -> \_\_this__"
1,"`*` is greedy by default, so it will gobble everything up to the very last period given the catch-all `.`. Try non-greedy `*?` or specify the non-dot character class `[^.]` instead of `.` "
1,"when you run them, visually the difference is between standard

    >>> print('3')
    3

and ipython's

    In [2]: print(3)
    Out[2]: 3

anyway the names of the binary files are probably python and ipython respectively"
1,"5x4x3 would work only if your individual ranges were fully independent of each other (eg range(5), range(4), range(3)), effectively giving you the cartesian product, but your loops put additional constraints on their child loops by putting their own state in the dependent range()'s which cuts down the number of viable combinations significantly."
1,"is:  
`[(k, a, b) for a, b in v.items() for k, v in input.items()]`  
should be:   
`[(k, a, b) for k, v in input.items() for a, b in v.items()]`"
1,switch fors around. The order of fors in a comprehension is the same as if you wrote them as longwinded nested loops.
1,"`sorted(result)[2:]` would drop two lowest  
`sorted(result)[-3:]` would keep three highest

as for how to parse the complicated string, re is a decent solution I guess

    import re

    test = '3d6 + 2d10k1+3d6d1 +10'

    test = test.replace(' ', '')
    dice = re.findall(r'[+]?[0-9dk]+', test)

    for d in dice:
        print(d)
        m = re.match(r'(?P<n>[+]?[0-9]+)d(?P<sides>[0-9]+)(?:k(?P<keep>[0-9]+)|d(?P<drop>[0-9]+))?|(?P<add>^[+-][0-9]+$)', d)
        print(m)
        extracted = m.groupdict('0')
        print(extracted)
        numbers = {k: int(v) for k, v in extracted.items()}
        print(numbers)
"
1,"None is a unique object/singleton.
The lists are going to store the reference to it, so yes the amount of memory used by a list with 1000 Nones is going to to be 10x of a list with 100 Nones."
1,"after some thinking, generating combinations, eg with `itertools.combinations(numbers, 2)`, should be better than depending on raw volume to paper over the luck aspect.

Assuming that every combination is equally likely, you can generate all of them and traverse the whole probability tree without having to do tons of runs."
1,"assuming it's about bruteforce solution:

get 2 different random numbers between 1 and N-1 inclusive, using random.randrange() or random.randint()

`smaller_number`, `bigger_number-smaller_ number`, `N-higher_number` are the lenghts of the rope pieces

`max()` them to get the longest piece

repeat the above, given the new value of N.

run the algo a shitton of times to collect enough results to have your mean converge to something meaningful.

"
1,"> a rope of length N with points at interior integer coordinates (1,…,N−1)(1,…,N−1).

is the rope two-dimensional or what? I have trouble parsing the text of the exercise."
1,is the isinstance check necessary? given auto() i'd assume singleton references and would rather use `c is QuestCondition.ACTIVE`. Even without it I'd assume that == in Enum is defined to be false for all other values.
1,"no, auto assigns the underlying value to the code magically. The point of enums is that you don't need to know/assign the exact underlying values. auto() picks one for you.

ACTIVE/COMPLETED/DORMANT/STAGE/STARTED might have actual values of 0/1/2/3/4, or A/B/C/D/E, or 'hurr'/'durr'/'lol/'wut'. The point is it doesn't matter, because you **always** use the pretty name of the enum entry and python figures details under the hood.

given the question ""am I looking at the value of desired kind in variable c"", `c == QuestCondition.ACTIVE` answers that (arguably it should be `is`,  not `==`)"
1,"itertools.product can replace loops where sequences being iterated over are independent. Think battleship game grid. A-J on one axis is fully independent from 1-10 on the other and the grid itself is the product of A-J and 1-10.   

That's not the case here, your top level sequence influences the content of the nested sequences. Maybe there is some way to itertoolize it, but I can't be bothered to fully understand the use case :-)"
1,"another approach would be to use patterns

    import re

    L =  ['+1½-105-1½-115',  '+1½-210-1½+175',  '+1½-125-1½+105',  '-1½-120+1½+100',  '+1½-135-1½+115',  '+1½-175-1½+155',  '+1½-130-1½+110',  '-1½-125+1½+105',  '+1½-200-1½+170',  '+1½-190-1½+165',  '-1½+120+1½-140',  '-1½-115+1½-105',  '-1½-145+1½+125',  '+1½-185-1½+160',  '-1½+150+1½-170',  '+1½+100-1½-120'] 

    for item in L:
        # match + or -, 1 1/2, + or -, a 1+ sequence of digits
        print(re.findall(r'[+-]1½[+-][0-9]+', item))
"
1,"even shorter

    chacracter_c = sum(ch.isalpha() for ch in input_string)
    digit_c = sum(ch.isdigit() for ch in input_string)"
1,"yes, it's valid, I guessed the missing parts of the class structure wrong.

that said, you could also look into `__str__`, which would allow you to simply go with `print(obj)` to get any representation you want.
"
1,"yield is a bit like return capable of returning multiple values. Normal return produces 1 value and kills the function instantly. Function with yield lives on and for the outer world presents itself a bit like a one-time list that disappears as you consume its contents.

    def gen():
        yield 1
        yield 2
        yield 3
        for i in range(4, 25):
            yield i  
      # once you get here, the generator is done with its job

    sequence = gen()   # it's one time use, it's depleted when it's consumed...

    for n in sequence:    # ... eg by this loop
        print(n)

there is no list that has [1, 2, 3, 4, ...] in it, the yielding function only knows its position in the code and spits out a value whenever it stumbles upon `yield` statement. This makes the generators memory efficient, but also 1-time-use as you cannot go back in time without instantiating a new instance of this generator.


I used `groupby` for shits and giggles to play with itertools toys, while the normal enumeration of brackets would do fine. `groupby` groups continuous sequences of values for which the given function returns identical value.
 
`groupby(sequence, func)` means that for each `x` in the sequence `func` is being applied, ie `func(x)`to find the grouping value.

    import itertools as it

    L = ['1', '22', '33', '44', '555', '666', '77']
    # group continuous sequences of items with the same len(item)
    for len_x, group_x in it.groupby(L, len):
        print('len:', len_x, list(group_x))

out

    len: 1 ['1']
    len: 2 ['22', '33', '44']
    len: 3 ['555', '666']
    len: 2 ['77']

Given that in the program all combinations go size 1, then size 2, then 3, asking the tuples for their `len()` lenght gives us blocks grouped by the size of the combination.   
It was unnecessary because I could have as well preserved the `size` I had earlier.
"
1,"methods of a class are defined before a single object of the class even exists, so there is no context for which `self` is meaningful. You need to set the default to some trivially recognizable sentinel value, like None.

    def display(self, meth=None):
        if meth is None:
            meth = self.meth

        if meth == 'string':
            print self.results
        elif meth == 'lines':
            for n in self.results:
                print n

the design itself is a bit shoddy. Why would you have the same attribute used for either strings or lists? Just because python allows you to do that doesn't mean you should. There is a great value in predictability and uniformity of your code/structures.  
Can't you let's say treat the string case as a special case of the second scenario with 1 elem list, eg `self.results = [string]` instead of `self.result = string`? Then the for loop would manage it just fine and no branching would be needed.



"
1,"functions with `return` produce meaningful values that can be captured and reused which is how programs are being built. `Print` returns nothing useful and the fact of characters showing up in a console window is just its side effect.

"
1,"well, there is no way around nested loops here, directly or indirectly. You have batches, you have tuples in a batch, you have items in a tuple. 3 loops right there.

it's not necessary to have a precomputed list of rows in order to generate a csv 

https://repl.it/repls/WornImmaterialForce

there is no list used to hold intermediary values and the output data is flattened to one continuous, memory efficient sequence that can be passed to writerows()  directly.
Generator functions are awesome. If you wrapped your loops in a function and yielded instead of printed, you'd be good to go :-)
"
1,"    for line in input_file:
        line = line.strip()
        if not line:
            continue

        <do stuff with line here>
"
1,"Maybe it's messed up line endings, like windowsy `\r\n` vs `\n`?

> as well as any general comments on the script.

it's a hot mess.

    types = ['10202010','10202110','10203145','10204550','10205130','10206110']

    #Create posible combinations of types (lists in lists).
    for i in range(1,len(types)+1):
        print ((i / (len(types)+1)) * 100)
        combs.append(["","".join(map(str, comb)) for comb in combinations(types, 2)])

I assume the division is percentage of work done. Two problems here:  
1) the list comprehension doesn't depend on `i` in any way, so you just repeat exact same comprehension 6 times for shits and giggles. What is the reason for that redundancy?  
2) of-by-one error: you have 6 items, but divide by 7 so it never reaches 100%

The comment line lies, because you are creating and collecting strings '111111,222222' in a list.   
Why do you bother with strings? You are splitting them in into chunks in the very next loop anyway.  Tuples created by combinations are directly useful.

    combs = list(combinations(types, 2))  # wham, bam, thank you, ma'am

next loop:

    lists = len(combs)

    for i in range(lists):
        index = 0
        while index < len(combs[i]):
            string = combs[i][index]
            no = str((i+1) * 1000 + index)
            lst = string.split(',')
            for st in lst:
                val=[no,st]
                dbList.append(val)
            index += 1
        i += 1

Again messy and the main takeaway I get is that it takes 6 identical lists of strings and cuts them using , which could be directly avoided by leaving the result of `combinations()` as a list of tuples.
Not only the loop looks superfluous, it also uses the antipattern of iterating over indices. As a rule of thumb assume that there is almost no valid reason to iterate over range(length) to get indices. Get items directly, and if you want their index/number, wrap your shit in `enumerate()`

    for item in list_of_items:
        print(item)

    for i, item in enumerate(list_of_items):
        print(i, item)

I suspect this whole program can be reduced to 

    types = ['10202010', '10202110', '10203145', '10204550', '10205130', '10206110']

    with open('out.csv', 'w') as output:
        writer = csv.writer(output)
        writer.writerows(itertools.combinations(types, 2))
"
1,"if you can get the current state of of column identifiers as a list from your sheet then it should be trivial to produce matching rows as lists.

i updated the linked code with relevant parts"
2,"Cryptographic hashes (like the ones used for passwords) are designed to ensure that they cannot be unhashed. That's the entire point of them. If a hacker steals a database of password hashes they have useless data. 

The ""do not store passwords as plain text"" mantra basically means ""do not store passwords in any form; only store the information needed to verify the password"". As a very basic example, if you set your password to ""hunter123"" the website only stores the hash ""starts with 'h' and ends with '3'"". When you come back and enter the same password, the website gets the same hash out and knows it's authentic. However if someone steals the hash they still don't know your password. Of course a real hashing algorithm is designed so that if you have the hash it's extremely hard to find a string that will create that exact hash, among other things by adding salt."
2,"It happens to be named ""step"" in the documentation for `range()`: 

    >>> help(range)
    class range(object)
     |  range(stop) -> range object
     |  range(start, stop[, step]) -> range object
    
But there's no reason for you to stick to that. You can use whatever name you want. You can usually assume that the ""other programmer"" is you in the future, so if it makes sense to you it's probably fine."
2,"You mean ANSI escape codes. Yes, absolutely you can, if your terminal supports it. The standard Windows command line and the IDLE shell do not, otherwise most of them do. You can use the [`curses`](https://docs.python.org/3/library/curses.html) module to make it easier."
2,"Ok, well that's the same error that's preventing the double click from working. I don't know anything about windows permissions but maybe someone else can help you further, maybe here or some windows help forum. You'll probably have more luck if you show the actual error.

I still think it would be much easier for you if your users install the official python and any needed modules instead of Anaconda's version."
2,"Ok, great. What's the error?"
2,">     print(type(arg)  #prints 'None' if nothing is passed 

No, it wouldn't do that. You've gotten your names mixed up. 
    
    >>> def f(*arg):
    ...   print(type(arg))
    ... 
    >>> f()
    <class 'tuple'>
    

Try it like this: 

    def get_orders(self, *args):
        headers = {
            'authorization': f'Bearer {self.access_token}'
        }
        if args:
            for arg in args: 
                if isinstance(arg, int):
                    print(arg, 'is an integer!')
        else:
            endpoint = f'/Order.json?load_relations=all'
            url = f'{self.base_url}{self.account_id}{endpoint}'
            response = requests.request('GET', url, headers=headers).json()
            return response"
2,"I thought you said it was working in the command line? Try this. Make this program and run it: 

    import sys
    print(sys.executable)

That will print out the location of python.exe. Is that the same location you used to set the file association? If so, start the command line (Win-R > ""cmd"") and type

    <location from above> ""<path to file>/<name>.py""

And show us the error message."
2,"Yeah, it's a tough concept. But once you get it it's amazingly useful. 

One of the things that made it click for me is understanding that *everything* in python is a class. Integers, lists, dictionaries, strings, file objects, etc are all class instances. Doing this: 

    life = 42

Is creating an instance of the `int()` class. 

The only thing different from what you are learning is that now you will use classes that you defined, instead of classes that someone else wrote."
2,What command are you using in the command line?
2,"Your question has nothing to do with python. You need to set up your windows file associations. The official installer from python.org sets an association with the ""python launcher"" by default, but I think you have to do it manually with Anaconda's python. Just right click on a python file > Choose ""Open With..."" > select the python.exe in your Anaconda installation > check the ""Always use this program"" checkbox.

What packages do you need? Seems a lot easier to just include an import check and install command and let the user use the official python. Anaconda is huge and your user won't need most of it.

Edit: quick and dirty example:
    
    try: 
        import numpy
    except ImportError:
        print(""ERROR: numpy is not installed. Install it now?"")
        if input().lower().startswith('y'):
            import os
            os.system('py -m pip install numpy')
        print('Press enter to quit')
        input()
        raise SystemExit

You could also import pip to do this."
2,"If you want space in between the lines it would be much better to simply add a step to the range function. 

    STEP = 9 # every 9th line
    for x in range(0,HEIGHT+1, STEP):
        canvas.create_line(0,x,WIDTH,x, fill = '#000000'"
2,"Coordinates are always x1, y1, x2, y2. Try this:

    canvas.create_line(0,x,WIDTH,x, fill = '#000000'"
2,"Assuming you installed the official python from python.org as well, maybe try the command ""py"" instead of ""python""."
2,"You need to apply all image changes *before* converting to a PhotoImage. Try like this: 

    image = Image.open(""heartvines.png"")
    image = ImageOps.fit(image, (2256, 1504))
    image = ImageTk.PhotoImage(image)
    test = Label(root, image = image, bg=""#ffb8e1"")
    test.pack(side=""top"")"
2,"The 'During the handling of the above exception, another exception occurred' error means that you created an Exception inside the `except:` block. You'll need to show us a complete, runnable example showing this behavior for us to give specific help, but in general you need a second catch: 

    try:
        do_things()
        success = True
    except (ConnectionError, ProtocolError, RemoteDisconnect) as do_things_err:
        try:
            tricky_exception_handling(do_things_err)
            print('recovered')
        except:
            print(f'ModuleName: Unable to do_things(), due to {do_things_err}')
            success = False
    finally:
        return success"
2,Tkinter won't resize an image. PIL's `ImageOps.fit` or  `Image.resize` method should work just fine. Can you show us your code?
2,"Thanks. I finally got around to looking at it. [Here it is using grid and place so that you don't have to calculate the positions yourself](https://github.com/socal-nerdtastic/behaviour_chart/tree/f8d2655fcd04e429a3361634106d5f2e293ded8c).

As others mentioned, it would be best to use some classes here. [Here's how I would do that](https://github.com/socal-nerdtastic/behaviour_chart/tree/d4f6f17c9c146a6494b19f63b716e857c3fe4c06). Note how neat the code is because I am not repeating code so much.  

I can take this further and more dynamic by using Text widgets instead of Frames. [Here you can resize the entire window on the fly and the window dynamically places widgets where they need to go](https://github.com/socal-nerdtastic/behaviour_chart/tree/4c47d7f40f9a32b787b7c0e460d309ccde345ff3). 

Yes, this takes a little more learning than just calculating out the positions, but I hope you can see how much neater the code and end product are, not to mention how much faster it is to code."
2,"Ok, a Text widget like I showed would work, but to keep all that aligned the best option is just a normal Frame in grid mode."
2,"You can't put anything into a listbox besides text, which is why all your frames are ""converted"" to text. Why do you want a Listbox? Would a Text widget do? 


    from tkinter import *
    from tkinter.scrolledtext import ScrolledText
    root = Tk()

    box = ScrolledText(root, width=15)
    box.pack()

    for i in range(20):
        frame = Frame()
        label = Label(frame, text=f""item {i}"")
        label.pack(side=LEFT)
        button = Button(frame, text=""click"")
        button.pack(side=LEFT)
        box.window_create(END, window=frame)
        box.insert(END, '\n')

    root.mainloop()"
2,These are called ansi escape codes.
2,"I'm afraid your experience is very small. Nearly everything in python is done with classes (aka ""object oriented programming"" or ""OOP""). All of those objects that you are used to using (datetime object, praw objects, file objects, even integers, lists, dictionaries, etc) are all class instances. 

For quick procedural scripts a class isn't really needed, so that's where most tutorials start. But since GUIs are event-driven using a class is extremely useful. Therefore most GUI libraries rely heavily on classes."
2,"Absolutely, yes. The only reason I didn't is because I try to be minimally invasive when answering questions, so that OP does not get overwhelmed with black magic code."
2,"Yes, its possible. If you are using Linux or Mac terminal (not IDLE) you can simply sub in the ANSI escape code. 


    my_word = 'billy'
    searched_word = 'bill'

    if searched_word in my_word:
        output = my_word.replace(searched_word, f'\x1b[1m{searched_word}\x1b[0m') # make it bold
        print(output)

You can change that to make it any effect ASNI supports, foe example: 

    output = my_word.replace(searched_word, f'\x1b[31m{searched_word}\x1b[0m') # make it red

On windows the normal command line does not support ANSI by default. You will have to install, import and initialize something like the colorama module first, or use a terminal that supports ANSI."
2,"The third line needs to be 

    z=random.choice(w)

If you include the `print()` like you have it then z is set to `None`. If you want to print the computer's randomly chosen value you need to add another line below that one like this: 

    print(z)"
2,"The dictionary `get()` method allows you to get data from a dictionary or a default value if the key is not there: 

    print(data.get('comment', 'no comment found'))"
2,"No I mean using `pack()` and `grid()` to define relationships, like ""place this image to the right of this thing"", and then let tkinter figure out what number that means in terms of pixels. It means you can move to a bigger font or different WM or even different sized images and you don't have to worry about changing any numbers anywhere. 

> Learning how to github is definitely on my todo list, but I haven't hit that spot yet, ha.

Do it right now! Go to github, make an account, make a new repository for this project, and then just click and drag all the files you need to make your program work into the new repository. Done! That's really all there is to getting started. Yes there's an enormous amount more you can and should learn about git and github, but if you do that simple start then I can already download your whole program with one command (""clone"" it) and send you any improvements I make to it (""pull requests""). It makes life a LOT easier for people trying to help you."
2,My biggest comment is that you made a lot of extra work for yourself by using `place` instead of letting tkinter figure out where to put things. Can you make a github repo that includes all the images? Then I could refactor it to show you how I would have written it.
2,"Before you run anything, be sure to back up your folder! This is the kinda thing that can easily destroy a lot of data!

You're nearly there. You just need to add this at the end:

    for i, old_filename in enumerate(fileList):
        new_filename = str(i).zfill(4) + '.jpg' # assuming they are all jpgs
        os.rename(old_filename, new_filename)"
2,"The last line needs to be 

    return self.move()

However, looping via recursion is not great practice. You should make this a real loop."
2,"Is this tkinter? You can tie listbox widget to the scrollbar so that the scrollbar always knows how many items are in the listbox. There's plenty of tutorials showing this, eg: http://effbot.org/zone/tkinter-scrollbar-patterns.htm#listbox If you need help implementing that you need to show us your code."
2,"I don't understand your question, do you have another example?"
2,"Oh you mean highest and lowest index. I had assumed highest and lowest value. Ok, no problem: 

    difference = data_list[-1] - data_list[0]

That also will work for lists of any size, but not for empty lists."
2,"First set your heading. This will probably be 45 degrees. Then enter the zigzag loop with 90 degree turns. 

    zigzag.right(45) # set the heading
    for count in range(8):
         zigzag.left(90)
         zigzag.forward(50)
         zigzag.right(90)
         zigzag.forward(50)"
2,"You mean just the maximum minus the minimum right? 

    difference = max(data_list) - min(data_list)

That will work for lists of any size, but not for empty lists."
2,"> can I not use | to compare string inputs ?

You can. This is an operator precedence problem. `|` has a higher order than `==`, so python is evaluating `'r' | direc` first and throwing the error. You need to add some parenthesis: 

    if (direc == 'r') | (direc =='l') | (direc =='d'):

Or, much better, use a logical `or`, which is higher precedence than `==`: 

    if direc == 'r' or direc =='l' or direc =='d':

Or, even better still, use a contains check: 

    if direc in 'rld':"
2,I don't see how that's possible. I think you are getting the iterations mixed up. Try removing the outer for loop and finding a single file that causes this.
2,"The first for loop resets the counter at the start of every iteration. If you want to get the total count you need to initialize it outside of the loop. 

    def parse_files(self):
        insert_error_counter = 0
        for file in self.file_list:"
2,"Pretty much any gui framework will do those things. I think most people start with tkinter or pyqt. If you are comfortable with oop, go for pyqt. Otherwise start with tkinter."
2,Check out the `pexpect` module.
2,You need to be a LOT more specific about what you are trying to do before we can help.
2,"Yes, I mean async. That will work for you; use it if you know it. You could also use threading or multiprocessing. To give you specifics of how to use it we obviously need to know the specifics of your problem, at the very least show us the code you are trying to run asynchronously."
2,Does this not do what you want? It looks like it would.
2,"This isn't really python related ... Same rules would apply for any file. First: did you email the file at some point? use a flash drive to move it? checkout in a version control system like git?  save it in a COW folder ie dropbox? Checked your trash folder? No luck? Then quick, make an image of your disk, every moment you don't is an opportunity for the filesystem to overwrite the data and then it's gone for good. Then your only shot is a file recovery program ie photorec. Or make a quick python script that can search for some words you remember in a filesystem image."
2,"No. Are you typing exactly what I posted? This has 2 escape codes in it. The first is ""make the text red"" and it's this entire string: `\x1b[31m`. The second is ""reset the text to normal color"" and it's this entire string: `\x1b[0m`. You can't change anything in those strings. The error message sounds like you did. 

    >>> print(""\xhello"")
      File ""<stdin>"", line 1
    SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 0-1: truncated \xXX escape
    
If not, show me a screenshot of the error."
2,"How to use ANSI escape codes? Just print them like usual. 

    print(""\x1b[31mThis is red!\x1b[0m"")

https://en.wikipedia.org/wiki/ANSI_escape_code#Colors"
2,"In Linux / Mac, yes, just use ANSI escape codes. 

In windows, no. You need to enable the color with something like the colorama module or use a terminal emulator that supports ANSI."
2,"As an aside, that link is about *running* software, not installing it. I installed my webbrower with sudo; I do not run it with sudo. The same applies to all software, including python packages."
2,"> You should be giving apps / programs / web pages the minimum privileges that they need in order to do their jobs.

Agreed. However, python packages are software. Software is nearly always installed system-wide, in all OSes. Why do you think that packages like pyperclip should be treated like local macros? All other software on my machine is installed with sudo after all (including python itself and pip3), why are python packages different? Or, why don't you tell people to install python locally? 


To bring this back to OP, they will make a nice program, schedule it with cron, and oh shit; cron fails and the newbie is now trying to find out how to debug a program from a cron log. 

> what you're recommending is simply not [how] software packages are intended to be used.

Is that right? I've never heard that before. Where did you read that? --user mode just recently became default in ubuntu, so it must be a recent thing."
2,Go on then. I've never had it answered ... I'm dying to know.
2,Can you answer my question?
2,"Use the command 

    python3 -m site

to see all the locations that python looks for libraries."
2,"Sigh ... yeah I have this fight now and then. So far no one has been able to tell me why not to use sudo on a single user machine. So go ahead and give it a try. Given a single user machine, if Al Sweigart turned evil and put malicious code into the pyperclip package, what damage could Al do in sudo mode that would be impossible in user mode? 

I'll start by giving a big pro of sudo: The big warning and password requirement tells the user they are doing something dangerous. Without it people think they are safe, and that's not true. Installing anything is dangerous. 

[Relevant XKCD](https://xkcd.com/1200/)."
2,"Pyperclip needs those to run. You were installing the requirements for pyperclip, you just never installed pyperclip itself."
2,"To install pyperclip use the command 

    sudo python3 -m pip install pyperclip

In the terminal (not IDLE). Pyperclip will use xclip for you, so you don't need to touch that again.

Edit: if you are using python2, don't. Move to python3. If for some reason you have no choice, replace ""python3"" in the above command with ""python""."
2,"Can you be more specific about what you want? If you just want to pass the name into the second class you can do that just like any other argument. 
    
    # have the class accept a name_var argument
    class ATMAction(tk.Frame):
        def __init__(self, name_var, master=None, **kwargs): 
    
    # send the name_var when calling it
    ATMAction(name_var, self.master).pack()"
2,"You can't combine conditionals like that. You have to make 2 distinct checks. Try it like this: 

    if sign(f(a)) == 21 or sign(f(b)) == 21:

However in your case, since python interprets 0 as False and all numbers that are not 0 as True, you could simply do: 

    if not f(a) or not f(b):"
2,"Use a library that gives you access to true encryption, for example https://pypi.org/project/simple-crypt/"
2,"Just like any other tkinter widget, you need to use the `config` method: 

    TSeparator = ttk.Separator(screen)
    TSeparator.config(orient = ""vertical"")
    TSeparator.place(relx=0.5, rely=0.178, relheight=0.689)"
2,"Sorry I can't make sense of that either. You'll need to find a programmers guide for it since they didn't include program instructions in the manual. Or maybe first set all the serial parameters and use the barcodes in the manual to make sure they match (baudrate, parity, etc)."
2,Your code looks ok. We'd need to see the documentation for the scanner to see if your code is right for it.
2,"`allow_pickle` needs to be an argument of the `np.load` function, but you have it as an argument of the `print` function. Try like this: 

    print(np.load(outfile,allow_pickle=True).shape)

In general try to use more lines. Especially as a beginner you will avoid a lot of simple mistakes if you just don't try to cram code into one line. If you had written it like this from the start you probably would not have made this mistake. 

    arr = np.load(outfile,allow_pickle=True)
    print(arr.shape)"
2,"Serialization using `pickle` is kinda rare nowadays, we usually prefer something like `json` that's human readable. That is, a human can directly edit the data file. Since you import json anyway I suggest you get rid of pickle."
2,"When people ask this question they usually want to use user input to create or recall the name, which means interpreting user input as code. A user could, for instance, accidentally provide the name ""sum"" which would override the function name and break the system. Or a smarter user could provide input designed to run malicious code."
2,"
Once you get comfortable with slicing it will feel very intuitive. It's probably the most common way because it does not require a loop, which makes it a little faster and cleaner."
2,"PEP8 basically says ""whatever"". https://www.python.org/dev/peps/pep-0008/#indentation"
2,"> should I really care about this? 

Yeah, but only to the extent that **you** like it. I wouldn't worry about trying to make it look pleasant to other people. Do whatever you want. (until you join a company that has style requirements.)"
2,"If you rely on using `index()` then you are forced to use 2 loops. 

The most common way to do this is to shift the entire alphabet string with string slicing instead of a loop. You'd still need to do it twice, once for lower and again for upper. Like this: 

    def build_shift_dict(shift):
        lower = string.ascii_lowercase
        upper = string.ascii_uppercase

        lower_shifted = lower[shift:] + lower[:shift]
        upper_shifted = lower_shifted.upper()

        finalDict = dict(zip(lower+upper, lower_shifted+upper_shifted))
        return finalDict"
2,"> i want the class instances named off the keys

I promise you this is a terrible idea. What you really need is another dictionary, which is what I showed. Some other not-terrible options are a data class or Enum."
2,"I'm assuming you want to create 2 class *instances*, not 2 classes. 

It's technically possible, but you really don't want your programs to create variable names. It's a security risk, it's tricky to do, it's impossible for your IDE to track, and it makes calling the variable hard. I promise it's much better to make another dictionary with the class instances as values: 

    old_data = {key1:value1, key2:value2}
    data = {}
    for key in old_data:
        data[key] = Class()
    
Which you could compress to one neat line: 

    data = {key:Class() for key in old_data}"
2,"So you want to list all the instances with the same owner as the current instance? 

    print(Tiles.instances[self.owner])"
2,"> aquring official certification

There is no such thing as official python certification. Don't be fooled by anyone trying to sell you one. In the programming world, certifications are pretty useless."
2,"The hypotenuse needs to be the sum of the **diameters** squared, not the radius. 

    if (rad1*2+rad2*2)**2 > width**2 + height**2:"
2,I don't understand. Can you give an example of what you want to do?
2,"Like many things in life, ""better"" is in the eye of the beholder. You're just gonna have to try them both and see which one you grok. They are both very popular."
2,"Use `pprint.pformat` instead of `pprint.pprint`. Since you are working with a dictionary the `json.dumps` method would work very well too. 

    import json
    self.lab.config(text=json.dumps(saves, indent=2))"
2,Isn't codecademy still using python2? If so you need to drop them. Python2 will be end of life in a few months.
2,"But don't buy anything that's not officially from a famous author, because it's probably some scammer that just posted a free youtube series."
2,"Yes, that's fine. It's so common we don't even have a name for it. It's just normal. 

You have to remember that *everything* is a class. If you do this: 

    self.meaning_of_life = 42

You are creating an instance (object) of the `int` class and saving the reference to a name. The only difference between my code and yours is that I used classes that someone else wrote, while you used classes that you wrote."
2,"Yes, you could, but `if __name__ == ""__main__"":` is the traditional entry point. It's there to allow you or someone else to write a bigger GUI later and import these widgets without changing this file. That may never happen for this code, but in order to be consistent experienced programmers will always use it as an entry point."
2,"You create Exceptions, you don't pick one from a predefined list. 

    class NoWriteAccessError(Exception):
        pass

    def write(self, value):
        if self.write_auth is None:
            raise NoWriteAccessError(""Optional error message: You tried to write in read mode, you dolt!"")"
2,"I have no idea what you are asking, but this specifically

> I WANT TO GET IT AS A COMMAND LINE ARGUMENT, SO WHEN I TYPE ""create 09846"" THE PROGRAM SETS IT AS ""selection""

Can be done like this: 

    selection = sys.argv[1]"
2,"Ahh I see your problem. You used `Tk()` twice in your code. Once on line 97 and again on line 56. tk.Variables work in the first instance of tcl by default, so they are disabled in other windows. 

There's several ways to hack this to make it work, but I think you are ready to learn the proper way: make subclasses of Frame. We'll also ditch 2 bad habits: don't use wildcard imports and never use `place()`. 

    import tkinter as tk
    import pickle

    SAVE_FILE = 'saves_firstpass.pickle'
    try:
        save_check = open(SAVE_FILE, 'rb')
        saves = pickle.load(save_check)
        save_check.close()
    except FileNotFoundError:
        saves = {}
    print(saves)


    class LoginWindow(tk.Frame):
        def __init__(self, master=None, **kwargs):
            super().__init__(master, bg='gray', **kwargs)

            # SET WINDOW OPTIONS
            master.title('FP')
            master.config(bg='gray')
            master.resizable(False, False)

            # VARIABLES
            self.pin_var = tk.IntVar()
            self.pin_var.set('')

            # MAIN GUI
            self.in_lab = tk.Label(self, text='ENTER PIN HERE', bg='gray', font='Calibri 12')
            self.in_lab.pack()

            self.in_ent = tk.Entry(self, bg='light gray', width=7, justify='center', show='*', textvariable=self.pin_var)
            self.in_ent.pack()

            self.btn = tk.Button(self, text='Login', relief=tk.FLAT, command=self.entry)
            self.btn.pack()

            self.lel = tk.Label(self, text='', bg='gray')
            self.lel.pack()

        def entry(self):
            in_var = self.pin_var.get()  # GETTING PIN

            # CHECKING AUTHENTICITY
            if in_var == 3825:
                self.destroy()
                MainWindow(self.master).pack()
            else:
                self.lel.config(text='Incorrect Pin')

    class MainWindow(tk.Frame):
        def __init__(self, master=None, **kwargs):
            super().__init__(master, bg='light blue', **kwargs)

            # SET WINDOW OPTIONS
            master.title('Pass')
            master.config(bg='light blue')
            master.resizable(False, False)

            # VARIABLES
            self.em = tk.StringVar()
            self.ps = tk.StringVar()
            self.wb = tk.StringVar()

            self.welcome = tk.Label(self, text='WELCOME AMMAR!', bg='light blue')
            self.welcome.grid(row=0, column=0, columnspan=2, pady=15)

            # LABELS AND ENTRIES
            self.email = tk.Label(self, text='Email', bg='light blue')
            self.email.grid(row=1, column=0, sticky='e')
            self.box1 = tk.Entry(self, width=30, textvariable=self.em)
            self.box1.grid(row=1, column=1)

            self.passcode = tk.Label(self, text='Pass', bg='light blue')
            self.passcode.grid(row=2, column=0, sticky='e')
            self.box2 = tk.Entry(self, width=30, textvariable=self.ps)
            self.box2.grid(row=2, column=1)

            self.web = tk.Label(self, text='Website', bg='light blue')
            self.web.grid(row=3, column=0, sticky='e')
            self.box3 = tk.Entry(self, width=30, textvariable=self.wb)
            self.box3.grid(row=3, column=1)

            self.save = tk.Button(self, text='SAVE', bg='light green', width=25, relief=tk.FLAT, command=self.saving)
            self.save.grid(row=4, column=0, columnspan=2)

            self.out = tk.Label(self, text='', bg='light blue')
            self.out.grid(row=5, column=0, columnspan=2)

        def saving(self):
            web_save = self.wb.get()
            email_save = self.em.get()
            pass_save = self.ps.get()
            saves.update({web_save: {'email': email_save, 'password': pass_save}})
            self.out.config(text='SAVED')

            self.save_updates = open(SAVE_FILE, 'wb')
            pickle.dump(saves, self.save_updates)
            self.save_updates.close()

    def main():
        root = tk.Tk()
        run = LoginWindow(root)
        run.pack()
        root.mainloop()

    if __name__ == ""__main__"":
        main()"
2,"I notice you have the update code in the saving function, and the saving code in the updating function. That means your user must enter the data, then press ""save"" and then ""update"", in that specific order. Are you doing that? I think the update and save should be combined into one button and one function. Don't try to be efficient and save the computer work until you need to.

You may also want to look into `shelve`, which is a pickle-based persistent dictionary just like yours, but written by professionals. It's also included in python."
2,"Last time I looked the codecademy course was still in python2. Find something more modern. ""Automate the boring stuff with python"" seems to be well liked around here."
2,"This is borderline bad code, but here you go: 

    while True:
        input('press enter for next status report')
        for x in projects:
            effort = 20 if getattr(x,x.phase) > 20 else getattr(x,x.phase)
            setattr(portfolio[0],f""total_{x.phase}_effort"",getattr(portfolio[0],f""total_{x.phase}_effort"")-effort)
            setattr(x,x.phase,getattr(x,x.phase)-effort)

Be sure to add some comments to make it not so code-golfy."
2,"From the computer's point of view there is no difference. Use whatever syntax makes the most sense to you. If you don't care either, use `concurrent.futures`; that's the modern and high level way to do this."
2,"For me? Absolutely, Python is my goto for things like that. For you? Elefino; I don't know you. If you have experience in VB it's probably easier to use that rather than learning something new."
2,"Test the actual boolean:

    if heartbeat_result['result']['update']:
         fileRevNr = heartbeat_result['result']['update']['updateInfo']['fileRevNr']"
2,"Ok. By ""subscript"" python means the `[]`. A boolean followed by `['updateInfo']` makes no sense to python, so it raises the error. 

    >>> update = True
    >>> update['updateInfo']
    Traceback (most recent call last):
      File ""<stdin>"", line 1, in <module>
    TypeError: 'bool' object is not subscriptable"
2,"We often make class attributes for things like that.

Edit: something like this: 


    from collections import defaultdict
    class Tiles:
        instances = defaultdict(list)
        def __init__(self, owner):
            self.instances[owner].append(self)
            
    # to see all instances with the owner shinydewott
    print(Tiles.instances['shinydewott'])"
2,"That means that either `heartbeat_result['result']`, `heartbeat_result['result']['update']`, or `heartbeat_result['result']['update']['updateInfo']`, is a boolean, not a dictionary as you think it is (in at least one point in your json data)."
2,"It seems to me that OP is asking about the benefits of certification, not the benefits of following a certification path."
2,"You didn't give an example of what you need, so no, I can't help you with any code. Without more info from you all I can do is give a thousand mile overview of what to do."
2,It looks like you are trying to insert a pandas DataFrame into a database? Databases only support certain datatypes; you need to serialize (convert to a supported datatype) the DataFrame first.
2,"Absolutely not. Anyone that wants to quantify your skill will look at your portfolio, not your certificates."
2,"Oh I see. Ok. Well finding if the derivative is 0 is easy, just check if one point is equal to the next. 

    for i, (a, b) in enumerate(zip(data, data[1:])):
        if a == b:
            yield i

Of course that will capture your leading data too, as well as the peak of the curve. So maybe it's better to look for a very big value instead."
2,"I see the image ... what do you want out? I don't know what you mean with ""corner of an X,y plot""."
2,"In order to do an action like sleep you need a function. A dictionary just stores data. However, the dictionary could store the function if you are willing to call it (add `()` to it): 

    import time

    def ddm50():
        time.sleep(10)

    test = {""Hello"": {""response"": ""Hi man."", ""sleep"": ddm50}, ""Hi"": ""yoo""}

    test[""Hello""][""sleep""]()

Otherwise you will need a custom object instead of a dictionary that will run functions for you."
2,"Do something that's relevant to your work or hobbies. What do you do? 

I have python programs to backup my computers, fill out purchase orders and expense forms, download porn, edit various xml files, analyze data, get wall papers from reddit subs I like, etc etc. Only time waster in my life is waiting for the coffee machine, but I hear [someone scripted that too](https://www.jitbit.com/alexblog/249-now-thats-what-i-call-a-hacker/)."
2,"For python? There is no real difference, no."
2,"Got an example? The corners are just the max and min of the data, right? 

    top_right = max(x_data), max(y_data)"
2,"You are assuming we all got our jobs because of python skills? FWIW my business card says ""Mechanical Engineer"". I use python every day at my job and its part of why I'm very good at what I do, but python had nothing to do with my career choices. Knowing python and coding in general will be very helpful in any industry."
2,"While old-school solutions like `os.path` will work, I think you will benefit a lot from becoming good friends with the modern and very powerful `pathlib` module. As an example: 
    
    from pathlib import Path
    for f in Path('.').iterdir():
        print(f""file {f!r} has the extension {f.suffix!r}"")"
2,"That's a list of lists of dictionaries. An array is a different type of object and json is not an object at all, it's a protocol. 

Python includes a `filter()` function that can do that but for something this simple I'd just use list comprehension. 

    new_data = [d for s in data for d in s if int(d['field_amt']) > 0]"
2,"Even though the install has the name ""pillow"", the import uses the old name. Try `import PIL` or more commonly `from PIL import Image`."
2,"The csv module will do this for you with the `skipinitialspace` option, or can map to `str.strip`, or you can use the string `split()` method: 
    
    def read_data(fn):
        with open(fn) as f:
            return [' '.join(line.split()).title() for line in f]
    
    list_one = read_data('csv_one.csv')
    list_two = read_data('csv_two.csv')

    print('These are the matches')
    # Goes through the first list and compares the values against the second list
    # if it matches a value it prints it out
    for x in list_one:
        if x in list_two:
            print(x)"
2,"Tell us about your project. What do you want to play,and what is are you using?"
2,Yes.
2,"You are missing the code editor. The python3 installer includes a program named IDLE. You can open that and go to File > New File to open a code editor, where you can create a program, save it, and run it (Module > Run Module). After it runs you can go back to edit the file to make changes and run it again. You can also run the saved file from the terminal if you want, and you can also use any of a huge number of other code editors to make the files, for example Geany, Atom, or Sublime Text."
2,"Yes, there's a number of modules that allow you to play music with python. [Here's a list](https://wiki.python.org/moin/Audio/). Pygame or winsound are probably the most popular."
2,"That is not an option in IDLE. Many other code editors have this feature, usually called something like ""auto close"" or ""auto completion"". Python is not limited to the IDLE code editor, most of us use something like Geany, Atom, Sublime Text or a full featured IDE like Pycharm or Sublime to write code. 

Just a warning: Don't try to save individual keystrokes when programming. I promise using code like `x = 42` will end up wasting a lot more time than `meaning_of_life = 42`."
2,"Show us the output of these 2 terminal commands: 

    which python3
    sudo which python3

The output of those commands should match, most likely ""/usr/bin/python3"". If not, you probably fucked up your path variable, most likely in your .bashrc or .profile file."
2,"First, you need to open the output file once only, not every time you need to append. You are setting yourself up for data corruption the way you have it. 

If the email structure is always exactly 5 lines long you can use `next()` to get the rest of the lines too: 

    with open(""output.txt"", ""a"") as f:
        for line in fh:
            count=(count+1)
            if re.match(""(.*)(F|l)rom(.*)"", line):
                from_line = line
                sent_line = next(fh)
                to_line = next(fh)
                cc_line = next(fh)
                subject_line = next(fh)
                print(from_line, to_line, subject_line, file=f)"
2,"This probably means that you named your file ""turtle.py"", or another file in the same folder, and python is trying to import itself instead of the real turtle module. If so, rename your file to something else."
2,"I know it's possible, but I think most people just have everyone download all versions, and then have the code running decide what to do. For example the very popular [pyscreeze module](https://github.com/asweigart/pyscreeze/blob/master/pyscreeze/__init__.py#L69). IMO much neater than trying to control what gets downloaded."
2,"BTW your question is a very common question in interviews, although the interview question usually uses lambda functions to confuse you more. They will ask you to predict the outcome from this code: 

    def multipliers():
        return [lambda x: i * x for i in range(4)]

    funcs = multipliers()
    for func in funcs:
        print(func(2))



Stolen from [here.](https://www.toptal.com/python/interview-questions)"
2,"It's builtin and official, therefore a lot of people know what it does and are comfortable with it. It's not a real closure, so it saves memory. It's clean. Using a default value like this is **abusing** the point of a default value, which will confuse people later on. Using a default value can cause signature problems later. I'll probably think of more reasons later."
2,"OP's triple backtick style works for new reddit and the official reddit app, but not for all of us on old reddit or other mobile apps."
2,"Functions are ""late binding"". That means the value of n is calculated when the function is run, not when the function is defined. 

To get what you want you have to make a ""closure"":

    def make_foo(n):
        def foo():
            return n
        return foo

    funcs = []
    for n in range(4):
        funcs.append(make_foo(n))

    for func in funcs:
        print(func())

A common way to do that in fewer lines is to abuse the default value: 

    funcs = []
    for n in range(4):
        def foo(x = n):
            return x
        funcs.append(foo)

    for func in funcs:
        print(func())

Or (best option IMO) use `functools.partial`:

    from functools import partial

    def foo(x):
        return x

    funcs = []
    for n in range(4):
        funcs.append(partial(foo, n))

    for func in funcs:
        print(func())"
2,"That error means you copied the code from one editor to another, and one of them is using literal tabs and the other is using spaces. Real code editors (IDLE, Geany, Sublime etc) default to spaces while text editors (notepad, wordpad, etc) use literal tabs. To fix this you need to retype the indentation or use the tabs-to-spaces feature of a code editor. To prevent it from happening again you need to always use a real code editor, never a text editor.

> also can you use the 'else' syntax with for loops?

Yes. Also with while loops and try blocks. But it's pretty rare to use them there, certainly not at a beginner level."
2,"It's not a string you are getting back, it's a bytes type. To convert from bytes to string you need the `decode()` method: 

    decoded_Username = base64.b64decode(encoded_Username).decode()"
2,"Just google ""interprocess communication"". There's tons of choices. My goto is a named pipe, but that won't work very cleanly on Windows."
2,"Use the `chr()` command. 
    
    >>> chr(116)
    't'"
2,"You can get the unicode value for a character with the `ord()` command. 

    >>> ord('t')
    116

This only works on a single character. To convert an entire string you'll need to invent a way to combine the numbers in a way that allows you to extract the string again. One common way is to simply shift the number. If you know you'll only be using ASCII you can always shift by 8, otherwise you'll need to add a test for the unicode value width or shift by the max unicode width (6 bytes). Python can do that for you too: 




    >>> m = 'message'
    >>> int.from_bytes(m.encode('utf8'), 'big')
    30792318992869221
    >>> (30792318992869221).to_bytes(7, 'big').decode()
    'message'
    >>>"
2,"You have HOST defined somewhere? Then you can use this: 

    with open(f""router{HOST}.txt"", ""w"") as saveoutput:
        saveoutput.write(readoutput) 

This is the modern version of the old code you have."
2,"You must be working with regular expressions. You need to use the multiline (`re.M`) or the dotall (`re.S`) flag, depending on what you are trying to do.
    
    >>> re.split('data.*data', 'blah blah data\ndata meh mah', flags=re.S)
    ['blah blah ', ' meh mah']"
2,"I don't know what you expect me to say; I've done nothing but tell you not to do that. FWIW: 

* You have slowed your boot time by a lot by forcing a version check before launch. You should do the check in a new thread. 
* If someone hacks into your github or an executes an injection attack, they could have your users run malicious code without the users having any choice. As I keep telling you, downloading and executing internet code without the user's permission is very scammy. I wouldn't trust software that does that. Many antivirus programs will flag it too. 
* Your program now requires an internet connection to run. If that's a requirement for the program anyway then you should be using a website, as I said in the beginning. 
* You have a very heavy dependence on windows only features, meaning you are locking yourself out of other OSes. 
* Your version check will fail if you have any double digit version numbers. (version 1.10.0.0 will test bigger than version 2.0.0.0). You should compare tuples, not integers.
* Build versions are generally not released. If the improvement is big enough to require a release it needs to be a micro version at least. 
* If your program has a bug in it that causes it to fail (I know, that happens to every developer except you) your users have no way to go back to a previous version that works."
2,"Yes ... Kinda. All python software requires the python interpreter, frozen or not. I assume what you are asking about is how the user gets it. The freezing process bundles the python interpreter into the folder or file with your program. If you want to pass out the .py file the user will need to get python on their own (if it's not installed by default). If you make an installer you can have the installer install python and whatever else you want (like git) as well or simply drop a copy of python into the program folder like freezing does (this is what pynsist does).

Again I should warn you against forced updates. 
https://xkcd.com/1172/
Best solution is to just pop up a warning and let the user do it they want to."
2,"Why would you code in the unicode escapes when it's so much easier just to paste in the actual characters? 

    chess_set = '♔ ♕ ♖ ♗ ♘ ♙\n♚ ♛ ♜ ♝ ♞ ♟'"
2,"Yeah you pretty much nailed it. The bitwise ops are just the integer version of string slicing. I could have done the string slicing instead, but that would have required 3 integer conversions instead of 1. 

    def fore_fromhex(text, hexcode):
        """"""print in a hex defined color""""""
        hexcode = cleanhex(hexcode)
        red = int(hexcode[0:2], 16)
        green = int(hexcode[2:4], 16)
        blue = int(hexcode[4:6], 16)
        print(""\x1B[38;2;{};{};{}m{}\x1B[0m"".format(red, green, blue, text))"
2,"Somehow or another your function needs to know if the element is a list, because it needs to recurse if it is. I suppose you could do that check with a try block or a `hasattr` call or probably a million other ways, but `isinstance` is by far the neatest. Why don't you want to use it?"
2,There's a lot going on there. Any specific part that you are confused about? Do you understand the ANSI code layout? Do you understand hex color codes?
2,"You DO have the source code. The way JS works is that you send the source code to the browser to be executed. It may be distributed over several files, but it's all there."
2,"JS is a scripting language. The JS source code is available for you to inspect in the html source code. All you need to do is read it to find out where the request goes to. Or, probably much easier, use the inspect tools of your webbrowser to monitor what connections are being made. In Chrome it's Ctrl-Shift-I and then the ""Network"" tab. It's usually pretty obvious where the data is coming from, people generally don't have any reason to hide that data."
2,"Why regex? Vanilla python would be much easier: 

    date, user, message = data.split("":"", 2)
    minutes, user = user.split(' - ')
    date = f""{date}:{minutes}"" # remake the date
    
Edit: Fixed code because it turns out you want the **second** `:`, not the first, since the date also contains one. Example:
    
    >>> data = '2/17/20, 17:44 - Mario K: here is the list: - one list - some other example'
    >>> date, user, message = data.split("":"", 2)
    >>> minutes, user = user.split(' - ')
    >>> date = f""{date}:{minutes}""
    >>> date
    '2/17/20, 17:44'
    >>> user
    'Mario K'
    >>> message
    ' here is the list: - one list - some other example'"
2,Many times the JS is getting the data it uses from a json request. It's often much easier to just make that same json request from python and skip the JS altogether.
2,"LOL yeah, welcome to the world of software development. Getting people to update their software is a challenge that all of us face. Sorry, but there's no simple answer. 

One modern trick is to use a website instead of a program. Can your program be rewritten to make the UI a website? 

Another often used solution is to make the install process easy using a different installer program like nsist. This would provide your users with an executable file they can use to install the latest version. If you are going this route you could use pynsist and just skip the freezing (convert to .exe) step, which will make your software faster to boot. 

Another option is to add your program to a software app store which handles the updates automatically. 

Otherwise you simply have to create a new ""updater"" program which hard codes in the location of your program. Then your program can launch it and kill itself before the updater overwrites it and restarts it. 

Or, as I said before, skip the freezing step and just pass out the .py file. Then the update becomes a one-liner. As a bonus it's also by far the fastest and most efficient option. 

    os.system(""git pull"") # get any available software updates"
2,"If by ""executable"" you mean a .exe then it becomes very hard. It would be best to simply pop up a warning and let the user do it (like most software does). 

If you are distributing the py file then it's very easy. Just download and overwrite `__file__`. However make sure you warn the user first, it's very scammy to download and run code from the internet without the user's permission."
2,"The call does not change. 

    print(getSum([5])) # should print 5
    print(getSum([5,1,5,1,5])) # should print 15"
2,"The builtin csv module will handle all of that for you. 

    >>> routes = ['line 1 test', 'line 2 test', 'line 3 test', 'line 4 test']
    >>> list(csv.reader(routes, delimiter=' ', skipinitialspace=True))
    [['line', '1', 'test'], ['line', '2', 'test'], ['line', '3', 'test'], ['line', '4', 'test']]
    
It can handle the list like above or directly read a file object: 

    import csv
    with open('routertable.txt') as f:
        data = list(csv.reader(f, delimiter=' ', skipinitialspace=True))"
2,"I don't know what you mean with ""as a dictionary"". In general you can just make a py file with the data in it, eg: 

    # data.py
    data = {'one': 1, 'two':2}

And then in your main program remove all the json nonsense and just write 

    from data import data

Again, I have no idea if this will work *for you* since you aren't showing us your code."
2,"What do you mean with ""new window""? You mean a new terminal window? If so you need to launch that and ask it to launch your program (python or otherwise): 

    import os
    os.system(""x-terminal-emulator -e python3 new_program.py"")"
2,"Whelp, that's pretty clear. You didn't include the json file. https://pyinstaller.readthedocs.io/en/stable/spec-files.html#adding-data-files

As I asked before, is there a reason you are using .json instead of .py? Because pyinstaller will automatically include an imported .py file."
2,"Open the command window first (hold shift, right click, ""open cmd here""), then type the name of your program. Now the error will stay on the screen."
2,"OP is trying to use [pathlib](https://docs.python.org/3/library/pathlib.html), which does allow you to ""divide"" paths."
2,"You need to use paths, not strings, for all your path declarations: 

    usb = Path('E:')
    backup = Path('C:/Video Backup/')"
2,Can you use a USB thumbdirve? WinPython is a portable version of python that lives on a thumbdrive; you don't need to install it to the PC.
2,"The easy way: install and use `pexpect`. 

The builtin way: Set up a `subprocess` pipe and use the `communicate()` method."
2,That's far to broad for us to help you. You'll need to give us much more specific information if you want help. Try it without any options and tell us the exact error. It would also help if you showed us your code or at least an example that causes the same symptoms.
2,What's the error? If it has to do with the json file is there a reason you don't use a python file instead?
2,"Two problems here. 

First, you need the base case to return something that the general case can deal with. Your general case does addition, so the base case needs to return something that can be added. `return 0` is the obvious choice. 

Second, the slice (`[::2]`) needs to slice the data that the general case did not deal with. Since the first element is used in the general case, and the second element is meant to be ignored, the recursive call needs to get the list minus the first 2 elements: `[2:]`. 

Try this: 

    def getSum(elem):
        if len(elem)==0:
            return 0
        else:
            return elem[0] + getSum(elem[2:])

Edit: Third, read PEP8 to learn naming conventions. You should name this in snake_case, eg ""get_sum()"". Also ""elem"" is a very misleading name for a list. Remember that variable names are basically tiny comments. They need to be descriptive."
2,The `truncate()` method will shorten the file. In your example just add `f.truncate()`.
2,"That is not true, using `r+` mode and the `seek` method you could in theory move data around in a file. If the file is too big to store 2 copies of this may become the important. I started to show OP how to do this but they deleted their question (as they have in the past)."
2,"Much easier to use `next()` to consume and dump the first line: 

     with open('input.txt') as f_in, open('output.txt', 'w') as f_out:
        next(f_in)
        for line in f_in:
            f_out.write(line)"
2,I help you out and instead of an upvote you delete the post? WTH?
2,"You need to pass the location into the function, like this: 

    def grab_key(location):
      f = open(location, ""r"")
      key = f.readline()
      return key
    
    key = grab_key(""example.txt"")"
2,"You will need to keep the image object as a global variable, not the filename. Like this:
    
    def save():
        global im
        files = [('All files', '*.*'),
                 ('.jpg', '*.py'),
                 ('Text Document', '*.txt')]
        save_filename = filedialog.asksaveasfile(filetypes=files, defaultextension=files)
        im.save(save_filename)
    
    def browse_file():
        global im
        filename = filedialog.askopenfilename()
        im = Image.open(fp=filename)
        im.show()
    
        statusbar['text']="">>> Chosen image: "" + '' + os.path.basename(filename)"
2,"The big difference is the ""lexicographically"" part, meaning ""first compare the first digit, and if they are equal compare the next digit, etc"". This makes comparing strings of different lengths very different from comparing numbers of different length. 

    >>> ""ab"" < ""b""
    True
    >>> 12 < 2
    False"
2,Please fix your formatting and tell us what the problem is.
2,"The modern python command on Windows is ""py"", not ""python"". Anyone telling you to muck around with the PATH variable is trying to force python on windows to behave like python on linux."
2,"You put that command in the command line, not in the python REPL. Run the program ""cmd"" and type: 

    py -m pip install requests

BTW that link is complete clickbait; python for windows comes with pip, you didn't have to do anything extra."
2,"Is x and y the data you want to plot? They you need to use the `add_subplot()` method, not `add_axes`, and plot the data with the `plot()` method. Something like this (untested):

    ax = figure.add_subplot(111)
    ax.plot(x, y)"
2,It would help us a lot if you showed a complete example.
2,"You would have to write your own. Here is an example for 2D indexes; you would have define the rules for nD before we can help with that. 

    def ndindex(x, y):
        """"""snake style, 2D ndindex""""""
        for i in range(x):
            if i%2:
                for j in range(y-1,-1,-1):
                    yield i, j
            else:
                for j in range(y):
                    yield i, j"
2,"The modern way to use python on windows is with the ""py"" command, not ""python"". The ""py"" command does not require you to muck around with PATH, and it always points to the newest version of python available."
2,"Ctrl-C is a great way to do this. Just catch KeyboardInterrupt. 


    data = ''
    try:
        while True:
            data += input("">"") + '\n'
    except KeyboardInterrupt:
        pass
    print()
    print('done collecting data')
    print(data)

However that will only work on some terminals, because some of them catch the Ctrl-C key combination themselves and don't pass it on to python. 

Why a CLI? This application seems like it should be a GUI."
2,This means you were using the python IDLE shell. To edit the code you need to go to File > New File and a new window will pop up to edit code. Once you are done editing you can go to Run > Run module to run the code in the shell window.
2,Exactly. It would be best to run the code on your local machine. If not possible I recommend repl.it or pythontutor.com
2,"That is not a problem with your code, it means that the codingground environment didn't expect to give an input."
2,"And I'm pointing out that you are wrong about my being wrong. Spaces in file paths is a problem of yesteryear, modern computer systems are fine with spaces. Hell many of the default folders on your computer ie ""Program Files"" contain spaces, and have for many years."
2,"That answer is 10 years old, and even then they were debating it. Yes, many years ago I too was limited to 8+3 with no spaces, but times have changed man. You can use spaces and unicode too!"
2,"Why not? In your post you called them ""File 1"", ""File 2"" etc so I just stuck with that. No reason not to."
2,"Wild, untested guess: 

    from collections import defaultdict
    
    with open('original file.txt') as f:
        original_data = f.read()
    
    datablocks = defaultdict(list)
    for block in original_data.split('\n\n'):
        if '\n' in block:
            header, data = block.split('\n', 1)
        else:
            header, data = block, ''
        datablocks[header].append(data)
    
    for i, (header, data) in enumerate(datablocks.items()):
        with open(f""File {i}.txt"", 'w') as f:
            f.write(header+'\n')
            for block in data:
                f.write(block+'\n')

Edit: Code update to deal with header only blocks that have no data."
2,"It's not that hard, just use `after` instead of `while True:` ... `sleep` and convert seconds to milliseconds. Here's a quick guess. I just updated the last function and entry point: 

    def print_looks():
        if read_last() != parseinstagram():
            fark_follower = parseinstagram()-read_last()
            lbl.config(text = str(fark_follower)+' follower, total followers: '+str(parseinstagram()) + ', last check: ' + get_date_time_screen())
            prepend_txt_doc()
        lbl.after(600*1000, print_looks)

    import tkinter as tk
    lbl = tk.Label()
    lbl.pack()
    print_looks()
    lbl.mainloop()"
2,"When you run you should be using the ""python3"" command. When you install you should be using the ""pip3"" or ""python3 -m pip"" command. Are you doing those? 

    python3 -m pip install bs4
    python3 my_file.py"
2,"I wouldn't use numpy operations on python lists. If you need numpy operators you need to use numpy arrays. Try the all-python version: 

    if all(abs(x-y) < 1e-05 for x,y in zip(list1, list2)) and all(abs(x-y) < 1e-05 for x,y in zip(list3, list4)):

If this code fails a lot then this will save a lot of time due to python's short-circuit."
2,What version of python are you using? What IDE are you using? How are you running your code? What module(s) specifically are you having trouble with?
2,"The builtin python zipfile module can read and create those files. However you cannot edit them (this is a side effect of the zipping process). That means to save your changes you will need to create a new pk3 file in a temporary location, and then copy the new file to the old location to overwrite the old file."
2,"> my chat client it stops at sock.recv(1024) 

That command means ""wait for 1024 bytes of data"", which is what your code is doing. What did you want it to do there?"
2,Sounds like it would have been a lot easier to swap the view in the window you already have rather than destroy and remake a window.
2,"OP is not asking about precision, they are asking about very small numbers. Floats are limited to ~15 digits of precision, but those 15 can be up to 308 digits away from the decimal point.

IOW 0.00000000042 counts as 2 digits of precision."
2,"This is python trying to guess what you want to print; it has nothing to do with abs. You just need to define the precision you want printed instead of letting python guess.

    print(f""{abs(x-y):.10f}"")

Or ask to print in scientific notation.

See pyformat.info for formatting help"
2,"Other languages encourage or require using getter and setter methods. In Python getters and setters are only used when there's extra work to do, like input validation."
2,"It's not uncommon to have several. I regularly work in 2.7, 3.6, 3.7 and 3.8. In Linux we use shebangs to run the proper version. In windows the python launcher (the ""py"" command) allows you to use Linux style shebangs."
2,    from __future__ import braces
2,"This means you are using pip the ancient way. The modern way to run pip on Windows is `py -m pip install module`. This is called the ""python launcher"" and always points to the latest version available by default. Or you can specify what version to use with `py -2.6 -m pip install module`."
2,"You pretty much nailed it. Only thing I'd add is that the instance variables can be changed with code external to the class; they don't have to be changed by an instance method. (Other languages discourage this, but python encourages it.)"
2,"Ok, that makes a little more sense. An ""rf outlet"" is like a radio controlled light? Any reason you want to use a log file instead of just keeping the value in memory? 

To update the image you can use `btnname.configure(image=new_image)`. As before, make sure the new_image is a PhotoImage object, not a filename. 

I can show you much of this. Do you want to jump in the deep end and use subclasses or do you want to keep it procedural for now?"
2,"Sure. I'm still completely lost about what you are trying to do. I think you'd get a lot better answers if you described what you are trying to make, not how you are trying to make it."
2,"The modulo operator has the same operator priority as division. Try it like this: 

            if (TotalDays+4) % 6 == 0 or (TotalDays+4) % 7 == 0: #skips sat and sun"
2,"The easiest solution is to move to python3, where everything is unicode by default. Python2 is dead in a few months anyway."
2,"That depends a lot on your wifi camera. If it has a web interface that will grab screenshots you could just grab them continuously, calculate the difference from the previous screenshot with numpy or opencv, and if the value is above some threshold, save the image."
2,`place()` is the method for making it visible. `place_forget()` is used to make it invisible.
2,"The only difference is that you made a separate function for check_username? Yes it's usually better to put code that logically works as a unit into it's own container like a function. So I think your code is better practice. You should note though that programming is often more of an art than a science. There's very often no right way. Both of these will run just as effectively; so the only metric is how easy is it to read / maintain, which is of course the opinion of the guy reading / maintaining the code."
2,"Advice from a tkinter expert: 

* Don't use wildcard imports. 
* Never declare globals.
* Use `itertools.cycle` to loop through things. 
* Use a subclass if possible.

-

    import tkinter as tk
    from itertools import cycle

    root = tk.Tk()
    colors = cycle(['red', 'blue'])
    def change():
        btn.configure(bg=next(colors))

    btn = tk.Button(root, bg=next(colors), command=change)
    btn.configure(width='3')
    btn.pack()

    root.mainloop()

Or using a subclass to make it easy to make multiple instances: 

    import tkinter as tk
    from itertools import cycle

    class ColorSwapButton(tk.Button):
        def __init__(self, master, colors, **kwargs):
            self.command = kwargs.pop('command', None)
            self.colors = cycle(colors)
            super().__init__(master, command=self._on_click, **kwargs)
        def _on_click(self):
            self.configure(bg=next(self.colors))
            if self.command: self.command()

    ## test code:
    if __name__ == ""__main__"":
        root = tk.Tk()
        for _ in range(6):
            btn = ColorSwapButton(root, ['red', 'blue'], text=""click me!"", width='6')
            btn.pack()
        root.mainloop()"
2,So you want to continuously check the files for '0' or '1' and reflect that in the button colors?
2,"Don't type ""py"" on its own line before you put in the long command."
2,"You should google ""<your OS here> Loudness Equalization""."
2,"You could use pickle for this if you want but instead of making code to create pickle files, it would probably be a lot easier to just use the code. Show us what you have so far so we can give you an example."
2,"The only security issue with pickle is that you can embed code into pickle files. Therefore it's dangerous to unpickle files from unknown sources. If you only unpickle files that you pickled yourself it's fine to use.

Excel macros etc have the same ""issue"". Are you going to tell people to stop using Excel?"
2,"First you need to know that ""Two's complement"" is just a type of signed integer. 

To do bitwise operations the data must have a length. Since the python internals use unsigned, infinite length integers, python must lie to you to do bitwise operations. Therefore for the purposes of bitwise operators, all integers are treated as if they were two's complement. 

You need to understand the general CS concepts of two's complement and casting signed integers to unsigned integers before you can understand how python does it. If you like hardware, I recommend Ben Eater's youtube series where he shows you how to build a CPU from components. You will learn a lot, including how integers work."
2,You want to have a button that swaps the image on click? You could jump in the deep end and make a small subclass to do that. Describe what you are trying to make.
2,"> my understanding is that in Python, integers are stored at 32-bit signed integers. 

This is not true. Python integers are stored as unsigned integers, and either 1 or an array of them. The array allows python integers to be any size; they are not limited by the hardware. The sign is kept as a separate variable. 

Python is unique in this respect. Nearly all other languages use fixed width integers. The standard bitwise operators like `&` that people have used for generations assume a fixed width. Therefore when you ask python to do a bitwise operation it treats the integer as a signed (two's compliment) integer. 

Using &MASK *when MASK is all 1's* is casting a signed integer to an unsigned integer. The 32-bit part is defined by the length of the mask, not by python."
2,"    allsubs = ['Industry', 'Fed Civilian & Healthcare', 'Defense and Intelligence', 'HLS, State, Justice (HSJ)', 'Federal Healthcare', 'Industry', 'NISC', 'HQ Use Only', 'Unknown']
    partialsubs = ['Industry', 'Federal Healthcare']
    newsubs = allsubs.copy()
    for sub in partialsubs:
        newsubs.remove(sub) # remove the first occurance"
2,"Very simple fix. Use `Toplevel` instead of `Tk` to create popups. 

    popup = tk.Toplevel()

And remove the `mainloop()` call from the popup functions. (This is the part that's causing the failure). 

You should only ever have a single call to `Tk()` in a tkinter program.

Alternatively use the popups that come with your OS instead of making your own: 

    from tkinter import messagebox

    try:
        cursor.execute(""{CALL DBA_Enter_TE_AdjustmentSean (?,?,?,?,?)}"", e1.get(), e2.get(), e3.get(), int(e4.get()),
                   int(e5.get()))
        conn.commit()
        messagebox.showinfo(""Sucess!"", success)
    except Exception as e:
        messagebox.showerror(""Error!"", e)"
2,"No, just jump in. Best way to learn. And just ask us if you need help. You can even PM me if you want."
2,"That error means you have to call `Tk()` first, and then make the image objects. Again a side effect of how tcl works."
2,"Try sending a bytes object. 

    theMessage = b""This should be an ASCII message."""
2,"You never opened the images. Tkinter widgets need to have a PhotoImage object passed in, not a filename. Yes, that's a terrible confusing error message that is a result of how tcl keeps track of objects, but what it's saying is that it can't find the object (because you never created it), not that it can't find the file. 

Try this: 

    Aimg = PhotoImage(file=""/home/lamarca/Pictures/dev/RF/Aoff.png"")

For all of the image files."
2,Fair point. Then initializing as ints will work too.
2,"That means you are using python2. You can solve this by dividing by a float: 

    avgd4 = d4 / 50000000.0"
2,"You could use some math to get ideal answers and check your results: 

    >>> from itertools import product
    >>> three_d4 = list(sum(x) for x in product(range(1,5), repeat=3))
    >>> sum(three_d4) / len(three_d4)
    7.5
    >>> two_d6 = list(sum(x) for x in product(range(1,7), repeat=2))
    >>> sum(two_d6) / len(two_d6)
    7.0
    >>> one_d12 = list(range(1,13))
    >>> sum(one_d12) / len(one_d12)
    6.5
    
Yep. You did it right."
2,"Your logic looks fine. Your program should work perfectly. 

A style note: initialize your variables as literals: 

    d4 = 0.0"
2,"Your code does not work because if `findall` fails it returns an empty **list**, not an empty string. You need to check that the result is not equal to an empty list. Or better yet, just check if it's truthy (works for lists and strings): 

    if len(test)>=8 and lower and upper and num:

Other than that, your code looks fine. I can only remind you that a shortcut for `[0-9]` is `\d`, and that the `+` is not needed since matching 1 character is enough to pass, we don't need to match one or more. 

    regExNum=re.compile(r'\d')"
2,"Just move that line out of the for loop. You also need to get rid of that inner for loop, and you don't need `f.close()` when you use `with`. Try this: 

    if count.isdigit():
        result = []
        for submission in reddit.subreddit(sub).hot(limit=int(count)):
            result.append(submission.url)
            with open(""/Users/user/Documents/test/reddit.txt"", ""a+"") as f:
                f.write(time)
                f.write(""%s\n"" % submission.url)
        messagebox.showinfo(""Window"", ""Finished"")"
2,Did you read the question? Those do not install python.
2,"Thonny. I don't think any others will. There are some bundles like Anaconda that will install python and an IDE along with a lot of other stuff. 

Why do you ask? What's your goal? It's not that hard to have 2 installs to get the version of python and the IDE you want."
2,"Yep. When I look back at old code I constantly find things I thought were amazingly clever back then but are so much simpler now. Even when you think you found a neat solution like you did there's often a neater one.

    >>> long_word = ""juxtaposition""
    >>> print(f""t{long_word.split('t')[1]}t"")
    taposit
    
The key is don't overanalyze it. If you have old code that works, use it, don't go back and refactor it for no reason. If you find new code that works but it's a nonsense jumble of characters to you, don't use it. Use what makes sense to you, no matter how long or ugly, and the rest will come."
2,"This error means whatever method you are using to run this code is sending an EOF character to the input() function. You can replicate this with Ctrl-D in Linux/Mac terminal or Ctrl-Z in Windows cmd / powershell. 

How are you running this code? If it's an online grader kinda thing it's probably not expecting an input() call."
2,How did you change those variables?
2,The pixel count is pretty much the definition of image quality. You can't reduce the pixel count without reducing the quality.
2,"For windows you need to install pywin32 and then: 

    from win32api import GetKeyState
    from win32con import VK_CAPITAL
    
    def capslock_on():
        return bool(GetKeyState(VK_CAPITAL))"
2,That depends on your OS.
2,"This defines how to print out the details. This method is not used until you call `print(c)`, and since you only do that for cars that pass the isOld test, only those cars are printed. 

Another way to do it is to use the displayInfo method you already have instead of `print()`. 

    
    for c in carList:
        if c.isOld() == True:
            c.displayInfo()"
2,"You need to tell python *how* to print a car's info. We do that with a `__str__` method. Add this method to your class: 

    def __str__(self):
        return f""A {self.color} {self.model} from {self.year}."""
2,"That's easy to test. Open a terminal and type 

    python3 /full/path/to/your/file.py

That will run in the system interpreter, ie a non-virtual environment.

If that works we'll work on getting that to work from pycharm. Not me; I don't use pycharm, but someone will.

BTW it's very important when asking questions to let people know what python version and OS you are using. I am assuming you are using python3 and OS X. It would also help if you showed us your code."
2,"You need to use `return` to get the data back from your recursive calls, not a global variable. 

Do you have to use a class? It really does not add anything; a normal function would do best here."
2,"If you are using Windows or Mac go to python.org and get the latest version of python. 

Then try to think of something that you might want to program. Try to make it, and when you get stuck, ask us."
2,"> I found that I have to run Python in a non-Virtual Environment for it to work

I highly doubt that's true. What IDE are you using? What is the error you are seeing?"
2,"The unicode in python is not a problem. The encoding may be, eg if you are using different encoding to write the characters than reading them. Try some random encodings when writing the file. Can you show us enough code that we can reproduce the issue?"
2,"That warning means that you have code after a return. Since a return stops the function, the warning is telling you that any code after a return will never be run."
2,"1 process = 1 processor *core*. You can start more Processes than cores, but then they have to wait on each other and you haven't gained anything. 

multiprocessing is used for CPU bound programs. http calls are IO bound; you should use threading for that. You can start hundreds of threads."
2,"What's the workload? Are you sure you want processes, not threads? Do you even have 6 processors?

> reports me information of the program to telegram every 5 mins.

This very much sounds like it's IO bound and should be a thread, not a process."
2,"Yes, exactly. For directories remember that if they contain spaces you have to put them in quotes. 

    py MyPythonApp.py ""C:\dir with spaces"" FamilyPhoto_1_A70_California.jpg"
2,"If those are really threads, not processes as the name implies, you can make them daemons: 

    p = Process(target=fn)
    p.daemon = True
    p.start()

This will make them die when the main thread dies."
2,">  Is it possible to add a numpy array to a Python set?

No. A set needs an object's hash to be able to store it, and there is no way to calculate a hash for a mutable object like a numpy array. 

Could you use a tuple instead of an array? 
    
    >>> import numpy as np
    >>> foo = set()
    >>> fubar = np.array([2,3,4], dtype = np.uint8)
    >>> futuple = tuple(fubar)
    >>> foo.add(futuple)
    >>> foo
    {(2, 3, 4)}"
2,"> I'm using machine code to mean the set of instructions which will the cpu can directly read and process.

Ok. Can my computer run Minecraft or Firefox? I tried, it said ""operating system not found"". Because those programs are not compiled for my i5, they are compiled *for my OS*. 

If you are old enough you will remember the good old days when starting a game meant choosing what brand and model of sound card and video card you had installed. Those games included several versions of machine code written by [real programmers](http://catb.org/jargon/html/story-of-mel.html). 

But then the OS got better, so now you can make one call to the OS and the OS will translate that into the appropriate instruction for your hardware, or emulate it if the hardware does not support it. No more need to be ""IBM compatible"", etc. Of course, since then instruction sets have become somewhat standardized, so many instructions are actual machine code. And I don't know of an official definition of the term ""machine code"" or ""byte code"", so those definitions are probably evolving, and I should probably stop being so old. Point of my rant: what you call ""machine code"" is very similar to what python calls ""byte code"", semantically speaking."
2,You want it fast to program? Tkinter. You want it pretty? PyQt.
2,"I said programs, not programming languages. 

My point very few people write programs to run on bare metal, they are all written to go through the operating system. These programs (including PVM) use the OS as an interpreter.

I'm basically saying you are using the the term ""machine code"" in a common, but technically incorrect way, and the way you are using it makes it very analogous to python's byte code."
2,"I'll bet you can't name more than 3 programs that are compiled to machine code. 

Nearly all programs are compiled to a language that the OS it's designed to run on knows how to interpret. Otherwise if I want to download Python I'd have to enter in the details of my hardware."
2,YouTube is banned in China....
2,I can later.
2,"Don't ever lie to your students. One lie will be a focus point for internet hate and destroy your credibility.  

Just say ""python acts like an interpreted language"" or ""the python interpreter is required"" or similar. Or leave it off, it's not like requiring the interpreter is unique to python."
2,"All of them. The process of bundling the compiled python code, it's dependencies and the python interpreter is called ""freezing"". The standard resource: https://docs.python-guide.org/shipping/freezing/

I also recommend you add some bullet points for alternatives to freezing, such as packaging with pynsist or similar."
2,"I think it's important to be clear that this process is called ""freezing"", and that ""compiling"" is something else. apropros:

> Python is an interpreted language

That is wrong. Python is compiled."
2,"Why not? People use unicode in code all the time these days. 

    >>> π = 3.14
    >>> print(π)
    3.14"
2,"    for dict in data:
        key = dict['key']
        value = dict['value']
        print(""key is "", key, ""and the value is "",value)

Instead of printing the result you could make a new dictionary with a more intuitive data structure: 

    better_data = {d['key']:d['value'] for d in data}
    # creates {'test-key-1': 'test-value-1', 'test-key-2': 'test-value-2', 'test-key-3': 'test-value-3', 'test-key-4': 'test-value-4'}"
2,"Can't you just put in the actual character? 

    :math:μ"
2,">  I was assuming virtualenv would complement the site-wide modules.

Nope. You can think of a virtualenv as a new installation."
2,Are these all python scripts? If you used a normal import instead of subprocess a freezing program like pyinstaller would find them and include them automatically.
2,"Any parameters that you pass in are available in `sys.argv`. 

    import sys
    print(sys.argv) # print out command line arguments"
2,"Good luck. I've been interviewing people for a jobs (unrelated to programming) for the past few months, and every college grad's resume lists ""python"". Basic is scripting is becoming as essential as basic math used to be. If you want a job doing it you will need to find a specialty or 10 to put on your resume. Like a web framework, for instance."
2,"Python is the most popular programming language in the world right now. There's a million ways to make money using python. Websites and webapps are by far the majority (Reddit for instance is written in Python). 

Python is not designed to be distributed as compiled executables. Therefore it's not used very much for installable apps like games, mobile apps, desktop programs etc. It can be, it's just not very common.

That said, no professional programmer knows only one language. And very few projects use only one language. Python is a great starting place, but you will need to expand into other languages if you want this to be a profession."
2,"Most of the projects we get pitched on this subreddit are best suited to be a website, not an app. Once you have the website it's pretty trivial to make it a ""webapp"", iow a website optimized for mobile that the user can ""install"" as an icon. Plus it's truly cross platform, you don't need to deal with updates and supporting obsolete versions, and python is a great language to write the backend of a website in. If your project falls into that category look into a python ""web framework"" like Django or Flask."
2,We use `is` when checking for singletons like None. It's much faster.
2,"Yes, python is a high level language that tries to abstract the hardware and even the OS. 

There are low level languages available too. Why did you spend your time ranting about something you don't want instead of just using the thing you do want?"
2,"A serial connection supports a single data channel. You cannot run these simultaneously. 

However you could make a single loop and alternately call these two commands. Would that work? 


    def DMM_ask_volt(self):
        self.write(""VOLT?\n"".encode())
        ser_bytes = self.readline()
        decoded_bytes = float(ser_bytes[0:len(ser_bytes)-2].decode())
        return decoded_bytes

    def DMM_ask_curr(self):
        self.write(""CURR?\n"".encode())
        ser_bytes = self.readline()
        decoded_bytes = float(ser_bytes[0:len(ser_bytes)-2].decode())
        return decoded_bytes
            
    def DMM_loop():
        with open(""Current_readloop.txt"",""a"") as curr_f, open(""Current_readloop.txt"",""a"") as volt_f:
            curr_writer = csv.writer(curr_f,delimiter="","")
            volt_writer = csv.writer(volt_f,delimiter="","")
            while True:
                try:
                    curr_writer.writerow([time.time()-start_time, DMM_ask_curr(ser))
                    volt_writer.writerow([time.time()-start_time, DMM_ask_volt(ser))
                except:
                    break

    DMM_loop()

BTW, ""self"" has a special meaning in python when using classes, I recommend you do not use it for anything else."
2,"Oh I see now. You don't want to check if the string is in the list, you want to check if the string is in a string in the list. In other words you need another loop: 

    updatedList = []

    for i in range(0, len(proxyList) - 1):
        for datastring in proxyList[i]:
            if 'onmicrosoft' in datastring:
                updatedList.append(proxyList[i])

Or the pythonic way that does not use indexes (which you should always try to avoid):

    updatedList = []

    for sublist in proxyList:
        if any('onmicrosoft' in datastring for datastring in sublist):
            updatedList.append(sublist)

Which you could condense to a single line if you want to write cryptic code that impresses sophomores: 

    updatedList = [sublist for sublist in proxyList if any('onmicrosoft' in datastring for datastring in sublist)]
    print(updatedList)"
2,This comment really sums up what makes python different from other programming languages.
2,"I don't understand ... that's not a list of lists or a string ... where are you using that? Show us an example that's complete, in other words enough code that I can just copy it and run it."
2,"Looks ok, what's the problem with that? Got any example data? 

That last line isn't doing anything; you could remove that."
2,IMO it would be odder to require parenthesis for some operators and not others.
2,"In Windows the pip command needs to start with `py -m`, like this: 

    py -m pip install python-docx"
2,"These are all command line? So just use curly braces instead of angle brackets and you are 80% done. All that's left is to assign values (presumably programatically) and send the commands to be executed. As a guess: 


    import os

    data = dict(
        Photo_Directory = 'TopNFalvors',
        Photo_Group = 'Reddit_pix',
        Photo_Size = '500',
        Backup_Folder = 'backup',
        Base_Folder = 'base',
        Sub_Folder = 'sub',
    )

    commands = """"""\
    gsutil -m rsync -d -r {Photo_Directory} gs://{Photo_Group}/{Photo_Size}/{Photo_Directory}
    tcopy -f -x {Base_Folder}/{Sub_Folder}/{Photo_Group}/*.* {Backup_Folder}/{Photo_Group}
    rget -g -h {Photo_Group}/{Photo_Size}/{Photo_Directory}
    itransform -f -w {Photo_Group}/{Photo_Size}/{Photo_Directory}
    zcombine dualpath {Photo_Group}/{Photo_Size}/{Photo_Directory}
    uiswitch -d {Photo_Group}/{Photo_Size}/{Photo_Directory}
    jjgrab -hgr -rgb {Photo_Group}/{Photo_Size}/{Photo_Directory}
    """"""

    for command in commands.splitlines():
        command = command.format(**data) # populate command
        os.system(command) # execute command
        print(command)"
2,>     SyntaxError: cannot use named assignment with operator
2,Yes you do. https://www.python.org/dev/peps/pep-0572/#id7
2,"Who's super excited for 3.8?

    while not (name := input(""Enter a character name:"")):
        print(""You didn't enter anything, try again"")"
2,"To see any hidden characters in there like spaces or `\r` use

    print(repr(popular_shelves[1]))"
2,"Yes, very easy. 

    commmads = '''
    command1 {filename}
    command2 {filename}
    command3 {filename} -flag arg1 arg2
    '''

    filename = ""FamilyPhoto_1_A70_California.jpg""

    print(commmads.format(filename = filename))


Also, you could send the commands to your program via python, so you don't even need to copy / paste. Can you tell us what the program is and what the commands are?"
2,"I don't see how putting it inside a tkinter window changes anything. In fact the default matplotlib display is tkinter (called ""TkAgg""), the only difference is you would be using your tkinter code instead of the tkinter code that comes with matplotlib."
2,"OP is asking about numpy arrays, not lists.

> Tip: if you are using ( ), this is called a tuple.

This is completely wrong. The key to making a tuple is the comma. The parenthesis are just a container, and a set of parenthesis with only one object inside are ignored. 
    
    >>> data = 1,2
    >>> type(data)
    <class 'tuple'>
    >>> data = ('spam and eggs')
    >>> type(data)
    <class 'str'>

> You will need to loop through each element of the list and increase it with 5.

Again, OP wants to work with numpy arrays, not lists, so they do not need a loop."
2,"I would assume so, but I'd also check."
2,"It looks like google has changed the format of their website since this tutorial was written, so the scraping code does not work anymore. Paging /u/alsweigart, here's another one!!"
2,"It looks like google has changed the format of their website since this tutorial was written. Paging /u/alsweigart, time to update!!"
2,Give each thread it's own output Queue and cycle through them.
2,Show us your code and the exact command you are typing into the run dialog.
2,"Oh oops set the header to initialize at 1 instead of 0.

    header = 1"
2,"> Note that char = f.read(1) is to be changed to some substantial % of the total amount of RAM possible

Not needed; reading 1 byte at a time is fine."
2,You may also be interested in the counterpart to that function: `setattr()`.
2,"Oh I see. I would recommend a series of `deque` objects. 



    from collections import Counter, deque
    import os

    N = 3

    count = Counter()
    buffers = [deque(['_']*i, maxlen=i+1) for i in range(N)]

    filename = input(""Path: "")
    f = open(filename)
    file_size = os.stat(filename).st_size # in bytes; we are assuming ASCII data

    # read until '.' is encountered.
    header = 0
    while f.read(1) != '.':
        header += 1

    for _ in range(file_size-header):
        current_byte = f.read(1)
        for buffer in buffers:
            buffer.append(current_byte)
            count[''.join(buffer)] += 1

    # delete the edge cases from the start of the file
    for k in set(count):
        if k.startswith('_'):
            del count[k]
            
    print(count)

It may be faster to have a single deque object and slice it, probably does not matter because as you mentioned the disk IO will be by far the slowest part of the operation."
2,Well you'll have to explain it if you want help with it.
2,"Now I'm even more lost. What are you looking for? Repeating digits? What would your program output from this example? 

    0.91596559"
2,"    print(getattr(cat1, attribute_str))"
2,Do you have a small example input? Is this text data delimited?
2,"Good, because that it one of the weirdest errors I have ever heard of."
2,"And this file runs fine from Geany? Is the 
'<unprintable file name>' the name of the python file, or a file that your python program is trying to open? Remember that when hardcoding filenames in Windows, you have to use raw strings. 

    filename = r'C:\script\datafile'"
2,Use double quotes.
2,"Yay progress!! 

I'm guessing that means you have a space in your filename. Try adding quotes around the filename: 

    @python ""C:\script\folder name contains spaces\location\file.py"""
2,"You aren't trying to run .bat files from Geany are you? Batch files are for stupid windows processes like the scheduler that don't realize .py files are programs, and that's it. Geany runs the python file directly. 

What is your execute command in Geany? Go to build > set build commands > and set the command under ""Execute"" to 

    py ""%f""

or 

    python ""%f"""
2,"Try downloading the latest one and reinstalling it. That should fix your launcher. 

As a backup plan, check the ""add python to path"" checkbox during the install. That will allow you to bypass the launcher and use the ""python"" command instead of ""py"". 

    @python C:\script\location 
    @pause"
2,"Your batch file looks fine, if I assume that it's actually on 2 lines. There's something wrong with your python launcher. I haven't seen this error in many years ... did you install an old version of python or did you install it from somewhere besides python.org? My first thought is to grab the latest version of python from python.org and install it, which will also upgrade your python launcher."
2,"Oh ok. So similar idea then, keep the last line seen in a variable and tack it onto a list when you see the ""stationary point"" text.

    substr = 'SCF Done'
    save_point = ""Stationary point found""
    scfEnergy = []  #List for SCF energies
    last_scf_line = ''
    with open ('01063-1-dh.log', 'r') as text_file:
        for line in text_file:
            if substr in line:
                last_scf_line = line # store for later
            if save_point in line:
                scfEnergy.append(last_scf_line[25:38])

    scfEnergy = [float(i) for i in scfEnergy]"
2,"To get the index use the `enumerate` function: 

    a=""this is the file""
    for index, char in enumerate(a):
        print(char)
        if char == 't':
            print(index)"
2,"You can post code the same way you posted the example, or if it's long you can use a codesharing site like github or pastebin. 

By ""example"" I didn't really mean an actual snippet of your data, I meant something short that we can work with that demonstrates the same problems as your actual data. Tell me if this is a representative example: 

    SCF Done:  E(RB3LYP) = 1     A.U. after   19 cycles
    other garbage data
    SCF Done:  E(RB3LYP) =  2     A.U. after   20 cycles
    SCF Done:  E(RB3LYP) = 3     A.U. after   21 cycles
    SCF Done:  E(RB3LYP) = 4     A.U. after   22 cycles
    more garbage data


And you want to have only the last line? So the output of that should be: 

    SCF Done:  E(RB3LYP) = 4     A.U. after   22 cycles

A common way to do this is to use the fact that dictionaries have unique keys. That means if you add data to a dictionary when the key already exists, the previous data is overwritten. So something like this: 
    
    data = {}
    with open(filename) as f:
        for line in f:
            if ""SCF"" in line:
                data[""SCF""] = line

Now the data dictionary contains the last line that included the term ""SCF""; all previous lines that included that term were overwritten."
2,I am very confused about what you want. It would be best if you showed a small example of your data and what result you expect from that example. As well as any code you have already.
2,"Not quite sure what you are asking, something like this perhaps? 

    from datetime import datetime

    the_offspring = {
        ""Bill"": datetime(2020, 5, 10), # Bill graduates on May 5, 2020
        ""Lisa"": datetime(2025, 11, 15),
        }"
2,That is not complete. You are expecting me to write a ton of boilerplate code just to test your problem and I don't feel like doing that.
2,"You start by providing a minimal, complete, and verifiable example when asking for help."
2,"Because tcl (tkinter backend) draws the Text field, but your OS is responsible for drawing the menu. You need to encode the text in whatever encoding the OS expects."
2,"Do not use 3.8. It's still in beta. 

I would not recommend upgrading from 3.6 unless you really need one of the new features. The only big new feature is the addition of dataclasses.

That said, if you really want to upgrade, you should do it in a way that your system python is unaffected. If you do that it will be safe."
2,Why do you want to work from the terminal?
2,"Your choices are 1. make a new list of dictionaries containing only the data you want or 2. delete the data you don't want from the original list. 

    # strategy 1 - make a new list: 
    old_data = users['data']['rows']
    new_data = [{""Player"":player[""Player""], ""team"": player[""team""]} for player in old_data]
    print(new_data)
    
    # strategy 2 - delete unwanted data: 
    for player in users['data']['rows']:
        del player[""id""]
        del player[""cat""]
    print(users['data']['rows'])"
2,What is `json2`? There is a `json` module built into python. You don't need to install it.
2,"    import numpy as np
    my_array = np.array([10, 20, 30])

Your function already exists, you just need to import it. 

    from math import sqrt"
2,"Yes, kinda. Use lists for irregularly shaped data, or data that you can't know the shape of in advance. Use numpy for purely numerical data that needs a lot of math. Use pandas for everything else. 

Definitely learn all 3. 

There are premade functions to load a csv into any of them."
2,"We need a lot more information from you. Are you working with python lists, numpy arrays, or pandas dataframes? 

Assuming you are working with dataframes, and that your dataframe is named ""df"", and that you want to apply this to the entire sheet (not just the first row), and that your columns are named ""a"", ""b"", ""c"", and ""d"": 

    df.d = df.b * df.c"
2,"Use the `int()` function. 

    >>> int(91.666666667)
    91

Note this will always round *toward zero*. So it rounds down for positive numbers and up for negative numbers. You can use `math.floor` if you need to always round down."
2,"Several bundles exist that combine python and the most popular packages into a single install. Some of the more popular bundles are Anaconda, python(x,y) and winpython. 

Why do you want to do this? If you have a specific list of packages you want there's a common 2-step process: install python, and then use pip to install all the packages listed in a requirements file."
2,"Yes, pyplot in matplotlib can make animations. So can nearly every GUI module. You'll need to explain what you want to do in a lot more detail to get a solid recommendation."
2,Ah. I'm in a Linux terminal. You seem to have figured out that this has nothing to do with python. You need to fix your cmd or use a different terminal emulator. Sadly I can't help you with that.
2,Being iterable is just one feature. Lets compare it to a car with cruise control. Just because a car has cruise control does not make it equivalent to every car that has cruise control.
2,"I don't understand. You can't print those strings? It looks fine for me: 

    >>> print(""\u0646\u0627\u0628\u0644\r"")
    نابل

Are you getting an error from that command?"
2,"    file1 = set(open('file1.txt'))
    file2 = set()
    
    with open('file2.txt') as f, open('file3.txt', 'w') as fp:
        for line in f:
            if line.strip() and line in file1 and line not in file2:
                fp.write(line)
                file2.add(line) # prevent duplicates"
2,"py.exe is a separate program called the ""[python launcher](https://www.python.org/dev/peps/pep-0397/)"" that's been bundled with the Windows installer for the past 5ish years. py.exe is installed to C:\Windows; removing the need to modify PATH. You should use it instead of modifying PATH since it respects shebangs."
2,"In Windows, you need to add `py -m` to every pip command you see. Try this: 

    py -m pip install scrython"
2,"Presumably board is a list **of lists**. Therefore 'space' is a sublist, and will never equal a string like 'X'. 

We usually use `join` to do something like this. 
    
    def render(board):
        for row in board:
            print('  ', '|'.join(row))"
2,"There is an object in python called a ""slice"". We rarely actually type that into python, but you could: 

    >>> slice(4)
    slice(None, 4, None)

A slice is used to selectively filter lists and the like. The reason we rarely type that is because there is a shortcut. Square brackets behind a variable name that contain a `:` automatically create a slice object, which the list knows how to interpret. Here is the common and uncommon way to do the same thing: 
    
    >>> data = [1,2,3,4,5,6]
    >>> data[2:4]
    [3, 4]
    >>> data[slice(2,4)]
    [3, 4]

See the problem now? A dictionary uses a similar syntax to lists, however a dictionary can't use a slice object as a key. Therefore the error. 

    >>> data = {1:2, 3:4, 5:6}
    >>> data[2:4]
    Traceback (most recent call last):
      File ""<stdin>"", line 1, in <module>
    TypeError: unhashable type: 'slice'
    >>> data[slice(2,4)]
    Traceback (most recent call last):
      File ""<stdin>"", line 1, in <module>
    TypeError: unhashable type: 'slice'"
2,"If you did it without numpy it wouldn't be an array. Did you mean a python list? 

    q_table = [[[1] * total_action for _ in range(x_of_map)] for _ in range(y_of_map)]

As you see, numpy is much easier."
2,"I don't really understand what you are trying to do. You want to create (declare) an array of size 5, 5, 4 filled with ones? Do it like this: 

    import numpy as np

    y_of_map = 5
    x_of_map = 5
    total_action = 4

    q_table = np.ones((y_of_map, x_of_map, total_action))"
2,"That's not what it's actually sending, that's the escaped representation. IOW your sniffer expects you to know that `\""` is a literal `""`."
2,"No. You need to package the code up as a function. Then you can send the function as an argument. 

    import matplotlib.pyplot as plt
    
    def function(line):
      plt.figure()
      line()
      plt.show()
      plt.close()
    
    def func1():
        plt.bar(range(5), range(5))
    
    def func2():
        plt.plot(range(5, 10)

    function(func1)
    function(func2)

You can use lambda functions if you want to keep it to 1 line and make your code unmaintainable."
2,"No reliable way, no. You can get a somewhat decent approximation with `sys.getsizeof()`, but you have to account for containerized objects and cached objects yourself. [Here's an example of doing that](http://code.activestate.com/recipes/577504-compute-memory-footprint-of-an-object-and-its-cont/)."
2,"It's not the spaces causing the errors, it's the quote characters. You are sending a list which gets automatically converted to a string. You need to send the json serialization of a list. Try this: 

    import json
    # ...
    response = session.post('https://www.test.com', json=json.dumps(data) )"
2,"
Did you have a question for us?"
2,"I would not recommend that a beginner uses a newer version of python than the repos provide. There are a lot of problems down that road that you need experience with building software to solve. 

Is it out of the question to upgrade your linux?"
2,"The Radiobutton is selected when the variable's value is the same as the value you pass as the `value` argument. The variable does not have to be an IntVar, but it does need to be some type of tkinter Variable. 

A tkinter Variable is similar to a python variable like an integer, string or boolean, but it allows various widgets to react to changes. This means that multiple Radiobuttons that have the same variable and same value will act in together. This also means you could tie an Entry into the same variable, and then changing the Entry would change the Radiobuttons and vie versa, or maybe a function via a Button. 

Here's an example: 



    import tkinter as tk
    from tkinter import ttk

    root = tk.Tk()
    var = tk.IntVar()

    rad1 = tk.Radiobutton(root, variable=var, value=1, text='value is 1')
    rad1.pack()
    rad2 = tk.Radiobutton(root, variable=var, value=2, text='value is 2')
    rad2.pack()
    rad3 = tk.Radiobutton(root, variable=var, value=3, text='value is 3')
    rad3.pack()
    rad4 = tk.Radiobutton(root, variable=var, value=1, text='value is 1')
    rad4.pack()

    ent = tk.Entry(root, textvariable=var)
    ent.pack()

    def set_to_2():
        ""A function that sets the value of var to 2""
        var.set(2)

    btn = ttk.Button(root, text=""Set to 2"", command=set_to_2)
    btn.pack()

    root.mainloop()


It would be a lot easier to help you if you showed us your code and asked a very specific question."
2,"Or, if you use a normal webbrowser, install the RES browser extension, which adds a ""<>"" button to the comment box that indents all selected lines."
2,FYI triple backtick code blocks do not work in old reddit or unofficial reddit apps. Use 4-space indentation if you can.
2,"There are several folders on your computer where you can store modules for universal import. To see this list use the command 

    py -m site # windows
    python3 -m site # linux / mac

in the terminal / command line. 

I recommend using the location named ""user base"", since that will be unaffected when you upgrade python. 

If you don't like any of those locations you can add to that list by modifying the PYTHONPATH environmental variable."
2,"To use the csv module you need to extract the values ahead of time, like this: 

    def fanentr():
        data = [fent.get() for fent in fanent]
        with open('fanlevel.csv', 'w', newline='') as f:
                writer = csv.writer(f)
                writer.writerow(data)"
2,"> one line and as Pythonic

One line is in no way related to pythonic. I cannot stress that enough."
2,"FWIW I would suggest you make a list of the labels, rather than the entries, and let python build that into your entry list. Like this: 

    labels = [""63"", ""125"", ""250"", ""500"", ""1000"", ""2000"", ""4000"", ""8000""]
    def fan():
        fann = tkr.LabelFrame(tk, text=""Fan Noise"")
        fann.pack()
        fanent = []
        for label in labels:
            lbl = tkr.Label(fann, text=label)
            lbl.pack(side='left')
            ent = tkr.Entry(fann, width=3)
            ent.pack(side='left')
            fanent.append(ent)

        def fanentr():
            with open('fanlevel.csv', 'w') as f:
                for fent in fanent:
                    print(fent.get(), file=f)

        salf = tkr.Button(fann, text=""Submit"", command=fanentr)
        salf.pack()

    import tkinter as tkr
    tk = tkr.Tk()
    fan()
    tk.mainloop()"
2,"Use a code sharing site like github or pastebin to share long code. 

The way you wrote your code should work just fine and it works for me. Did you remember to type something in the entry boxes before pressing Submit?"
2,"Oh you were so close! You need to use `fent.get()`, not `fent.get`.

    with open('datafile.csv', 'w') as f:
        for fent in fanent:
            print(fent.get(), file=f)

Remember to put all of that in a separate function that is called from a Button or something, because if you call it right away all the Entry widgets will be empty. To do that your lists will need to be global. 

We could help more if you showed us your entire code."
2,"Anytime, glad I could help. A submerged ROV, huh? I've always wanted to build one of those. I guess now I kinda have lol."
2,"That means that your computer is not fast enough to count every millisecond. Your monitor and for that matter your brain isn't fast enough to see it either. I would never time anything faster than about 30 milliseconds, and for this I'd have the fastest setting at about 100."
2,Looks pretty good. Is that not accurate enough? Seems like it would only be off by a few percent.
2,"No, use time to calculate the value for after.  How much precision do you need? Can you show us the code you have?"
2,"Milliseconds. But it's a minimum, not an exact amount, so code will run after a minimum of x milliseconds. In practice it will be off by 2-10 milliseconds every time depending on your computer and os. If it's important to get the timing exact you'll need to compare to time.time() with every loop."
2,"Well, obviously you can't use just one byte, because a single byte only has 256 possible values and you need at least 400. So you have to use 2 bytes at least. For a beginner it's probably easier to send and receive the values 0-400 and just know that both sides need to adjust by 100. (The non beginner friendly alternative is learning about two's complement). 

So first you need to determine if the number you are sending is bigger than 255. If it is not, send a 0. If it is, send a 1 AND subtract 255 from your number. Then send the number, which is now guaranteed to be less than 255. 

On the Pi do the same thing but backwards. As a wild guess:

    data = ser.read(2) # read 2 bytes
    result = data[1]
    if data[0] == 1: # check the overflow byte
        result += 255 
    result -= 100 # adjust to fit our range

This is doing by hand what computers do automatically when casting between a string to an integer. You could use those automatic conversions if you wanted to:

    result = int.from_bytes(ser.read(2), 'big') # where's the fun in that? 


I also note that with 5 bytes, you could just send a string with a line terminator. Honestly this is the best route. It's by far the easiest, and you don't really need to save 3 bytes, do you?

    result = int(ser.readline())"
2,"Good answer, I will add that f-strings will add the appropriate quotes for you in repr (`!r`) mode: 
    
    groot = ""I am Groot""
    print(f'All he says is {groot!r}')"
2,"These are called ""constants"", and usually have ALL_UPPERCASE names."
2,"You can still set any parameters the same as you would a normal Entry. Or you can bake it into your subclass if you want like this: 

    class CustomEntry(tk.Entry):
        def __init__(self, master=None, **kwargs): 
            super().__init__(master, **kwargs)

            self.config(width=30) # set custom properties

I get the feeling that this is an XY problem. Why don't you show us all of your code and describe the big picture problem that you are trying to solve?"
2,"> But, while I managed to install the package (with conda), somehow my IDE can't find and load it (I'm using Pycharm)

This just means you need to install it within pycharm's virtual environment, not with conda."
2,"Playsound ""blocks"" by default, that is it forces the computer to wait until it's done playing the sound before any more code can execute. To change that add a `block=False` argument. 

    playsound('/path/to/a/sound/file/you/want/to/play.mp3', block=False)"
2,"This is part of old school subclassing. This is the line that calls the init method of the superclass, in your case the Entry class. Basically this is the line that sets up a default Entry, and presumably the rest of the code will customize the entry. 

The modern way of writing this uses the `super()` function. Also, I think it's a lot neater to use `master` instead of `*args` in tkinter. Like this:  

    class CustomEntry(tk.Entry):
        def __init__(self, master=None, **kwargs): 
            super().__init__(master, **kwargs)"
2,"That's not a problem. 

Sorry, I'm out of ideas. But this is certainly a sublime text problem, not a python problem. Maybe ask over in /r/sublimetext."
2,"Hmm well, that was a problem, so we at least got that fixed, even if it turns out it wasn't the problem that was causing this error. 

How did you install python? Did you use the official installer from python.org? If not, download and use that.

And what exactly are you doing to get this error?"
2,"Or, if you want a fun and interesting challenge, you could write a python program that finds the opening symbol (bracket, brace, or quote) and searches the file for the closing symbol. This kind of ""balanced parenthesis"" problem is a common problem in CS classes when teaching about the stack structure, so there's lots of tutorials and solved examples out there."
2,"Somehow your sublime text settings are in Linux settings. You need to change the python command in the sublime text settings from `python3` to `py`. I don't use sublime text but some quick googling says you need to open the “Python.sublime-build” file and look for this line: 

	""cmd"": ""python3"", ""-u"", ""$file""],

And change it to this: 

	""cmd"": ""py"", ""-u"", ""$file""],"
2,"    # myCustomModule.py
    class myCustomError(Exception):
        pass
    
    def myCustomFunction(): 
        raise myCustomError(""Something is very wrong"")"
2,"Why do you want to do this on one line? It's much neater and more pythonic to use 2 lines: 

    for val,count in next(freqs)[1]:
        print(val)"
2,"The term you need to google is a ""lazy"" json parser or ""lazy"" json load. There is no builtin way to do this in python, but there are several modules that other people have written that can do this."
2,"Like all operators, what it does depends on what it's doing it to. When the operand is a numpy array `@` is an alias for the [`numpy.matmul`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.matmul.html) function."
2,"I don't think I understand your problem. You run the code by pressing F5 in Geany, the command line window pops up and displays your output, but only the newest 16 lines are displayed?"
2,"The code you posted looks ok. The problem is that somewhere else in the file you named one of your lists ""list"". Look for code somewhere that looks like this:

    list = []

Now every time you use the word ""list"" python is using that list object, instead of the list constructor that it should be using."
2,That means that the site you are trying to connect to refused to connect to you. More than likely you triggered their anti-bot protections and now they have blacklisted you.
2,No loop required. First pivot the table so that you have columns of towns and rows of years (or the other way around). Then use `pandas.rolling_mean` to make a new dataframe with the rolling mean for each town. Then slice out every fifth row.
2,"Cheers, and thank you for all of the advise you have given out here."
2,"You do if you want to see the error, but you don't need to normally. A default python install associates .py files with the python launcher, so double clicking them will run them."
2,"Hold shift and right click on your desktop. Select the option ""open command window here"". Now type the name of your file. This way you can see what the error is that's causing your program to crash."
2,"Make it a lambda function: 

    squirrel=lambda h,H,S:round((H**2+(H*S/h)**2)**.5,4)"
2,"Other markdown works, it's just the triple backtick block that doesn't work."
2,"Ah interesting it works in new Reddit, but I'm in old Reddit."
2,"There is a way to do without changing the function, but it's really hacky and ugly. It would be better if you told us the big picture. Why can't you change the function?"
2,That formatting works in the official reddit mobile app only. Everywhere else it looks like shit.
2,[This guy](https://www.youtube.com/watch?v=0ZGbIKd0XrM) beat you to it. His github is in the video description.
2,"You named your file ""random.py"". Now python is trying to import your file instead of the random module. Name your file something else."
2,"This looks ok, although for a linear plot you don't need 356 datapoints; I'd just use 2. 

    x = np.array([2430000,max(allx)])
    y = b + m*x
    plt.plot(x,y,'-',label='Linear Fit', color = 'black')



We'd have to see the rest of your code and your data to see the problem."
2,"    from bs4 import BeautifulSoup as bs

    soup = bs('''
    <span class=""fixed-class"">
    This is inside the fixed-class but outside the some-other-class.
            <span class=""some-other-class1"">
                This is inside the some-other-class.
                </span>
        </span>''', 'html.parser')

    fixed_class = soup.find('span', class_=""fixed-class"")
    for subclass in fixed_class.find_all('span'):
        print('found inner span of class', subclass['class'])"
2,"Your workflow sounds fine. 

You can start with the builtin [`difflib`](https://docs.python.org/3/library/difflib.html) module, but I don't know if that will work for you without seeing your data and knowing what you want out."
2,Sounds like a fun and easy project. Did you have a question for us?
2,"You are confusing yourself by giving the sorted list of 2-tuples the same name as the original dictionary. Those are completely different objects; they deserve different names. You should think of variable names as little comments; they need to describe what the object is. To that effect, you shouldn't use names like ""keys"" and ""values"" ... name those things what they are. 


    scoreboard = {""Steve"":5, ""Lucy"":54,""Arlo"":25, ""Mandy"":14, ""Isaac"":67, ""Miller"":12}
    sorted_scoreboard = sorted(scoreboard.items(), key = lambda x : x[1], reverse=True)

    for name, score in sorted_scoreboard:
        print(""{}: {}"".format(name, score))

Also, I notice you are using python2. Python2 will be officially unsupported at the end of the year. 

And I added `reverse=True` since I assume you want your scoreboard to show highest to lowest."
2,"The error is saying that a comma is expected at line 22 column 5 **in the json data**, not in your python source code. I'd guess the problem is in your config.json file."
2,"* Use a linux-comptible shebang
* use a docstring to describe your code, not a comment
* imports go on separate lines (see pep8)
* use snake_case names (see pep8)
* Use the prompt feature of the `input()` function instead of a separate print call.
* When checking for `None` (and only then) use `is`, not `==`. 
* Use `if <condition>` ... `else` if you can, instead of `if <condition>` ... `elif <!condition>`. 
* There's no advantage to `pw=''` when you are going to quit the program on the next line. 

Most of that applied: 


    #!/usr/bin/env python3

    """"""
    Password strength checker:
    Passwords must have 8+ chars, at least
    an upper & lower char, and at least one num.
    """"""

    import re
    import sys

    # Take user p/w:
    pw = input('Please enter a new password: ')

    # Check length requirements
    if len(pw) < 8:
        print('Passwords must be at least 8 characters long. Entry erased.')
        sys.exit(0)

    # Create regex objects for pw
    pwRegexNum = re.compile(r'\d')
    pwRegexUpper = re.compile(r'[a-z]')
    pwRegexLower = re.compile(r'[A-Z]')

    searchNum = pwRegexNum.search(pw)
    searchUpper = pwRegexUpper.search(pw)
    searchLower = pwRegexLower.search(pw)

    # Check regex requirements
    if searchNum is None:
        print('Numeric requirement not satisfied. Entry erased.')
        sys.exit(0)
    else:
        print('Numeric character requirement satisfied.')

    if searchUpper is None:
        print('Uppercase letter requirement not satisfied. Entry erased.')
        sys.exit(0)
    else:
        print('Uppercase letter character requirement satisfied.')

    if searchLower is None:
        print('Lowercase letter requirement not satisfied. Entry erased.')
        sys.exit(0)
    else:
        print('Lowercase letter character requirement satisfied. \nPassword saved.')"
2,Add `pause` as the last line of the bat file. This will keep the window open so you can see what the python error is. I'll bet its a filennotfound error due to the working directory being different.
2,Geany. It's in the repos.
2,"I've never used twitter in my life but I'd guess it uses standard html formatting. Try sending `<a href=""http://learnpython.reddit.com"">click here</a>`."
2,"It's not `len(ls)` causing the error, it's `num`. That needs to be an integer too. Use floor division to prevent `number` from becoming a float: 

                number = linecount // 5"
2,Install pip from the repos. Be sure to install for python 2 and for python 3.
2,My response was tailored to match the effort that was put into the question.
2,"The confidence value defaults to 0.999. You can set it with a kewword argument. 

    x, y = pyautogui.locateCenterOnScreen('calc7key.png', confidence=0.8)"
2,"
    x, y = pyautogui.locateCenterOnScreen('calc7key.png')
    pyautogui.click(x, y)"
2,"No, it would have to be written unescaped for it to do that. IOW the source must be encoded in unicode for that to happen. The unicode escape does nothing in python2 strings. 

    
    >>> print '\u0111.txt'
    \u0111.txt
    >>> print repr('\u0111.txt')
    '\\u0111.txt'"
2,If it was python2 the encoding keyword would raise an error; so op is certainly using python3.
2,I can't reproduce that error. What filesystem are you using?
2,"Ah I see. I will tag you as a ""tkinter expert"". Cheers, comrade."
2,"/u/desertfish_ needs to learn about the `after` method, which takes over their while True loop in a much neater and more responsive way. However their answer is much better than mine from a learning perspective."
2,"What are you simulating? For things like graphs you can use the matplotlib animation functions, which are very easy.

I don't know why you say it's flickery; I've never had that problem. It may be you are just programming it wrong, for instance clearing and redrawing the canvas rather than moving the widgets around."
2,Google.
2,"GUI's in vanilla python are not a beginner topic. You should ideally have a solid grasp of OOP before starting. Perhaps you want to teach the python version of processing.org instead.

EDIT: I don't mean that it's hard. In fact it's very easy to do, in tkinter for example: 

    import tkinter as tk
    from math import sin

    canvas = tk.Canvas()
    sprite = canvas.create_rectangle(0, 0, 60, 60, fill=""#ff0000"")
    def step(x=0):
        canvas.coords(sprite, 50+30*sin(x), 0, 60, 60)
        canvas.after(10, step, x+0.01)
    step()
    canvas.pack()
    canvas.mainloop()

However, I don't think that copy pasting that will advance a beginner's skill at all."
2,"Right. So you have several Frames layed out and you want one of them to switch? Yes, then you need to add another Frame to be the switching container."
2,"No, but since there's 0 space between labels you can simply place a bunch next to each other."
2,"Nest what? Each ""window"" should be its own frame already."
2,"`grid()` is used because it allows you to stack frames on top of each other, so that you can choose which frame to put on top. `pack()` does not have that option. 

What's the big picture here? Why do you want to use `pack()`?"
2,"You mean change the font? Use the font argument. 

    tk.Label(text='hello world', font=('bold', 45))"
2,This sounds a lot like an xy problem. What's the big picture here? Why do you want this hash? I strongly suspect that a hash is not the right solution to your problem.
2,"That looks like already almost a dictionary. Its just missing the braces. So if you add those you can read it like a literal. 

    from ast import literal_eval
    with open(datafile) as f:
        data = literal_eval('{'+f.read()+'}')"
2,"Cheers, but I wish you wouldn't blame tkinter just because you found a bunch of bad guides."
2,That error means you misspelled one of the variable names. Glad you fixed it.
2,"Python is very similar to Java (well, more similar than to other languages). All you need to do is try to forget about integer types and semicolons. For someone that knows Java already I think a few hours with the official python docs is all you need."
2,Yes. Anything that accepts a literal can also accept an argument. Show us your code.
2,"First, don't listen to those other guys that tell you not to do something just because *they* don't know how to do it.

In tkinter you should use `pack()` and `grid()`, and make little sub frames to build the look you want. You should nearly never use `place()`. If you are using `place()` that means you are doing the grunt work that tkinter should be doing for you, and you will never be as good or as dynamic as tkinter can be. 

Your question is extremely vauge. I wish you had included your code so far so that I could adapt it. Since you didn't I can only show you how I would do this. But keep in mind there's about a million ways to skin this cat. 


    import tkinter as tk
    from tkinter import ttk
    from tkinter.scrolledtext import ScrolledText

    class GUI(tk.Frame):
        def __init__(self, master=None, **kwargs):
            super().__init__(master, **kwargs)
            self.style1 = False
            self.b1 = ttk.Button(self, text=""Swap Layout"", command=self.swap)
            self.textarea = ScrolledText(self)
            self.bottom_buttons = tk.Frame(self)
            btn2 = ttk.Button(self.bottom_buttons, text='b2')
            btn2.pack(side=tk.LEFT)
            btn3 = ttk.Button(self.bottom_buttons, text='b3')
            btn3.pack(side=tk.RIGHT)
            self.swap()

        def swap(self):
            self.bottom_buttons.grid_forget()
            if self.style1:
                # layout style 2
                self.columnconfigure(1, weight=1)
                self.textarea.grid(row=0, column=0, rowspan=2)
                self.b1.grid(row=0, column=1, sticky='ne')
                self.bottom_buttons.grid(row=1, column=1, sticky='sew')
            else:
                # layout style 1
                self.b1.grid(row=0, column=0, sticky='w')
                self.textarea.grid(row=1, column=0)
                self.bottom_buttons.grid(row=2, column=0, sticky='sew')
            self.style1 = not self.style1

    def main():
        root = tk.Tk()
        win = GUI(root)
        win.pack(fill=tk.BOTH, expand=True)
        root.mainloop()

    if __name__ == '__main__':
        main()

Let me know if you have any questions about this."
2,[This has been well studied.](https://xkcd.com/323/)
2,It would be a lot easier to help you with this if you showed us your code.
2,That is not at all true. Lambdas are for **anonymous** functions. It's important to note that an anonymous function is rarely a good thing.
2,What's the point of lambda? Just make a normal function. Much neater and more pythonic.
2,"You can just set any shape you want. 

    Data.shape = (3417,442)"
2,"Insert the text at the end, rather than the beginning.

       txt1.insert('end', (row[9]) + ""   \n"")"
2,What are you asking? You can use any type of serialization to save settings. If you like ini you should know about the built-in configparser module which manages ini files for you.
2,"Looks like you named your python program ""pil.py"", or maybe another file in that same folder, and python is trying to import that instead of the real pil module."
2,Nope :) Just make a cheatsheet to keep by your computer for the next few months until it becomes habit.
2,"> If I understood freezing correctly, it would make installation, particularly the modules, into another computer easier, too, right?
> 
> 

Only if you use the onefile option. Otherwise you have to make an installer (like nearly every other program in the world), which is just as hard as making an installer without freezing."
2,"All of those modules are available in all OS's. Most modules are. However they must be compiled for that OS. Part of the freezing process is to include the compiled version of the module that fits the target OS. 

I don't see how freezing a program will make it easier for the user. The end result will be a shortcut on the desktop or in the program menu to start it; the user will not know or care if they are starting an .exe, .bat, or .py file.

However it will make it easier for you to distribute if you use the onefile option because you won't have to make an installer. On the flipside your code will be a lot slower because it has to unzip itself every time the user runs it."
2,"Because unlike a module or class, the line `a=2` is not executed until the function is called. The function object holds code in suspended animation. You can access that code through the `__code__` attribute if you want, but in general that's pretty useless to us."
2,"This is called ""freezing"". There's many tools to do it. I think pyinstaller is the most popular. 

> It needs to be able to run in any OS (particularly Windows and Ubuntu)

This is not possible. Have you seen any other program that runs on more than one OS? You need to make both a 32 bit and 64 bit version of your frozen program for every OS.

What's the reason you want to do this? Python was designed to be distributed as .py files; unlike other languages python is not meant to be packaged into an executable."
2,"Too small to worry about. You can use the timeit module to find those things out: 

    In [1]: def a(): 
       ...:     ""processing data..."" 
       ...:     return ""result"" 
       ...:                                                                         
    
    In [2]: def b(): 
       ...:     return a() 
       ...:                                                                         
    
    In [3]: %timeit a() # direct call                                               
    152 ns ± 1.2 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
    
    In [4]: %timeit b() # call through another function                             
    241 ns ± 2.46 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

So a performance impact of about 100 nanoseconds (on my old, slow computer). For comparison, human reaction time is 80,000 nanoseconds. 

If you want to make performance improvements there's much lower hanging fruit. Don't bother with consolidating functions."
2,"Yes, absolutely. BTW a function that's part of a class is called a ""method""."
2,"/u/TheZvlz has a good way to do it. Another way is to make more functions. Remember there's nothing wrong with small functions. Professional code has lots of functions that are one line only. 
    
    def codepart1():
        return
    
    def codepart2():
        return
    
    def codepart3():
        return
    
    def functionA():
        codepart1()
        for loop:
            codepart2()
            codepart3()
    
    def functionB():
        codepart1()
        for loop:
            codepart3()
    
We're just guessing really. To give you a real answer we need to see your real code."
2,"Depends on your terminal emulator. Select what you want and press enter in powershell, I think. Not really sure, and I don't have a windows machine handy rn. Or use sftp. Or whatever google cloud provides. I assume they have some kind of dashboard."
2,"Dunno, I've never used Google cloud. For something this size I'd say copy / paste. 

What version of Debian and what version of python is it running now? I think Debian 9 comes with python3.5, and it's not trivial to install 3.6. I would not recommend it unless you have experience with building software from source. Note you have to install cpython 3.6, other interpreters do not have ordered dictionaries until 3.7."
2,"> I always find bad code is way larger is size 

Yes, that's often true when you are starting out, but don't make that a rule. Short code that's only short for the sake of saving lines is usually bad code."
2,"The problem is not windows / linux, it's a python version problem. You are assuming python will loop over your licenses dictionary in the order that you wrote it, but that's only true in python version 3.7 and greater. In older versions you have to use an OrderedDict instead. 


    from collections import OrderedDict
    licenses = OrderedDict([
        (""Sub Legend"", {""css"": ""sub-legend"", ""threshold"": 1500.0}),
        (""Sub Icon"", {""css"": ""sub-icon"", ""threshold"": 750.0}),
        (""Sub Favourite"", {""css"": ""sub-favourite"", ""threshold"": 500.0}),
        (""Continental Pro License"", {""css"": ""cont-pro-license"", ""threshold"": 250.0}),
        (""Continental A License"", {""css"": ""cont-a-license"", ""threshold"": 100.0}),
        (""Continental B License"", {""css"": ""cont-b-license"", ""threshold"": 75.0}),
        (""Continental C License"", {""css"": ""cont-c-license"", ""threshold"": 50.0}),
        (""National A License"", {""css"": ""nat-a-license"", ""threshold"": 25.0}),
        (""National B License"", {""css"": ""nat-b-license"", ""threshold"": 10.0}),
        (""National C License"", {""css"": ""nat-c-license"", ""threshold"": 5.0}),
        (""None"",{""css"": ""no-license"", ""threshold"":  0.1})])"
2,"You need to call `random.sample()` every time you want a new random values made. Or better: `random.choice`, which returns a single value. 

You add a space by using modern string formatting with an `f` before the string. 

    import random

    plants = ['tulip', 'sunflower', 'rose']
    pots = ['green pot', 'metal container', 'clay pot']

    print (f'{random.choice(pots)} {random.choice(plants)}')
    print (f'{random.choice(pots)} {random.choice(plants)}')"
2,Can you show us an example of result and what you would like as output?
2,"Real protection or fake protection? 

Fake protection is easy, just rename the excutable to something obscure, something that the python file knows how to launch. Then map the old excutable name to your python file. 

Real protection would involve protecting the *data*, not the app. A program that encrypts the outlook data files / folders. You have to run the program to decrypt the files before outlook will run.

If this is serious, not a toy, I would look into one of the many disk encryption options."
2,"I agree with everyone else that direct looping is better. My comment was directed at OPs comparison of `for i in range(len(l)): e = l[i]` vs `for i, e in enumerate(l)`. 

    In [1]: l = list(range(10**5))                                                  
    
    In [2]: %timeit for i in range(len(l)): l[i]                                    
    15.3 ms ± 290 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
    
    In [3]: %timeit for i, e in enumerate(l): e                                     
    14 ms ± 133 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)"
2,"Where did you need help? You have most of the work done, all that's left is to pass the data to `csv.writer` to write it to a file. And you want to set an endpoint on the last element as well to cut off the newline character."
2,"> Where do I begin in debugging this?

By realizing that this is a python2 vs python3 question, not a Ubuntu vs Windows question.

https://stackoverflow.com/a/12173406/2229945"
2,"You can keep both if you want, it won't hurt as long as you remember which one you are using. The ""py"" version is probably the official python.org install. You can remove it with the remove programs dialog, look for ""python 3.7""."
2,Huh. Whelp i'm out of ideas. Maybe try this guys idea: https://stackoverflow.com/a/46615852/2229945
2,Which one do you want to keep?
2,"You are getting that error after freezing when you try to run the .exe file? And the program works before freezing? In that case I will guess that pyinstaller is too stupid to realize it needs to pack the fonts file. Add this to the imports:

    import pyfiglet.fonts

Or use the hidden-imports argument."
2,">  apparently that isn't as efficient as enumerate

It's just as efficient; we use enumerate because it's neater and easier to read."
2,"It seems your files are encoded in a different encoding than your computer's default. If you don't know what encoding was used to make the file you can try a few common ones. 
    
    with open('inputfile', encoding='utf8') as f:
    with open('inputfile', encoding='cp1252') as f:
    with open('inputfile', encoding='latin-1') as f:
    
Alternatively you can just ignore the offending characters: 

    with open('inputfile', errors='ignore') as f:"
2,March. Why?
2,"Oh I can give you that easily. 
    
    import re
    import csv
    
    with open('inputfile') as f:
        chunks = re.split(r'(^M\d$)', f.read(), flags=re.M)

    with open('outputfile', 'w', newline='') as f:
        writer = csv.writer(f)
        for a, b in [chunks[i:i+2] for i in range(1, len(chunks), 2)]:
            chunk = [a.strip()] + list(filter(None, (e.strip() for e in b.splitlines())))
            writer.writerow(chunk)"
2,"`re.split` can split it for you, and the `csv` module can convert it to comma delimited. 


    import re
    import csv
    from io import StringIO

    data = '''M1

    X-ray not taken within the past 12 months or near enough to the start of treatment.

    Start: 01/01/1997

    M2

    Not paid separately when the patient is an inpatient.

    Start: 01/01/1997

    M3

    Equipment is the same or similar to equipment already being used.

    Start: 01/01/1997

    M4

    Alert: This is the last monthly installment payment for this durable medical equipment.

    Start: 01/01/1997 | Last Modified: 04/01/2007

    Notes: (Modified 4/1/07)

    M5

    Monthly rental payments can continue until the earlier of the 15th month from the first rental month, or the month when the equipment is no longer needed.

    Start: 01/01/1997'''

    f = StringIO()
    writer = csv.writer(f)
    chunks = re.split(r'(^M\d$)', data, flags=re.M)
    for a, b in [chunks[i:i+2] for i in range(1, len(chunks), 2)]:
        chunk = [a.strip()] + list(filter(None, (e.strip() for e in b.splitlines())))
        writer.writerow(chunk)
    print(f.getvalue())"
2,It would help if you gave an example of the output you want from this.
2,"The guide is old, and things change quickly. Python on windows has used the ""python launcher"" (aka py.exe) for a few years now, and the command I gave you points geany to that."
2,"And you are using the 3.6 version of IDLE? Try this install command: 

    py -3.6 -m pip install discord"
2,"The execute command should be 

    py ""%f"""
2,How are you running the code? How did you install discord? What OS are you using?
2,"That's a different, unrelated problem. Sounds like your csv file is empty."
2,Try removing line 10.
2,"> should I start being more GUI-oriented when creating something like that?

No. CLI seems appropriate to me."
2,"This means you are running python2 code in python3. Either use python2 to run this code or change line 5 to be python3 compatible: 

    print(row)"
2,"Technically it's possible. You can check out pygame. However python is designed to be fast to program, and the tradeoff is that it's often slow to run compared to languages like C. Since games often require very fast calculations Python is generally not a good choice for game development. I'd look into learning C / C++ / C#."
2,"Yes, eventually you will need to be comfortable in the command prompt. But it's not necessary right now."
2,"Hold down Shift and right click somewhere in your python101 folder. The menu that pops up will have an option to ""Open Command window here"" or maybe ""Open Powershell window here"". If you use this method you will not need to use cd."
2,"findall returns the ""group"", which is defined by the parenthesis. Since the only parenthesis in your expression are defining the (<comma><3 digits>) group, that's what is returned. You need to wrap the entire thing you want to match in parenthesis too: 

    >>> import re
    >>> digitRegex = re.compile(r'(\d{1,3}(,\d{3})*)')
    >>> digitRegex.findall('34 X 2,235 Y 456,234,342')
    [('34', ''), ('2,235', ',235'), ('456,234,342', ',342')]"
2,"> I would like to create a decorator class that is used for functions of another class 

Why? This sounds a lot like an XY problem. What's the big picture you are trying to solve?"
2,"Just name it. 

    def __call__(self, func, *args, **kwargs):
        def wrapper(wself, *args, **kwargs):
            print('Print before ' + wself.name)
            func(wself, *args, **kwargs)
            print('Hello after' + func.__name__)
        return wrapper"
2,"I picked the first 2 as they are very similar to itertools recipes. The third is also easy, a 3 method class using `tee` that I don't feel like writing on mobile, but I know you can. 

Why do so? Because it's a lot easier than vetting a library, especially for a beginner. It's repeatedly pointed out that pypi has no protection against malware, much less unstable, poorly written code. The flip side to your argument is that you encourage readers to trust pypi, which imo is very dangerous."
2,"You are very close: 

    data = [1,5,2,0,4,2,7]

    for i in range(1, len(data)):
        sub_list = data[i:]
        print(sub_list)"
2,"Yes, you are correct, but we tend to ignore that since python handles it neatly in the background. Which is why we usually don't worry with generators vs iterators and only talk about if an object is ""iterable""."
2,"> the iterator is not computing/generating values, it is iterating them.

Yeah, to me that's a pretty fuzzy line. I suppose you consider a file object as an iterator and not a generator? But it does modify the data, converting newlines and unicode encoding etc, it does not solely iterate. 

IMO a ""generator"" can be as simple as fetching the data from elsewhere, therefore an iterator counts.   

> You've given out lots of good advice in this subreddit, but in this case you are just being woefully misleading

We are well into the realm of personal opinion here; this has nothing to do with python expertise."
2,"My comment is directed at the examples OP gave, which *are* trivial. ""chunked"" is a one-liner for lists. ""windowed"" and ""chunked"" are in the itertools recipes with a few tweaks.


    # slightly modified ""pairwise"" recipe
    from itertools import tee
    def windowed(it, num):
        data = tee(it, num)
        [next(i, None) for i in range(1, num) for i in data[i:]]
        return zip(*data)

    # slightly modified ""grouper"" recipe
    from itertools import zip_longest
    def chunked(iterable, n, fillvalue=None):
        ""Collect data into fixed-length chunks or blocks""
        args = [iter(iterable)] * n
        for result in zip_longest(*args, fillvalue=fillvalue):
            yield list(filter(None, result))"
2,"Left-pad is a famous example of people installing libraries that they could have easily written. Left-pad was a module that padded text to the left. It was literally 10 lines of code. When the developer of left-pad got his panties in a twist over something he deleted the repo, and thousands of programs that depended on it broke. 

The moral of the story is: don't install packages that you can easily write or copy into your code. Rely on as little outside code as possible."
2,Those examples are all extremely easy to make yourself. Did left-pad teach you nothing?
2,You defined the generator type. The concept of a generator is simply any object that generates the values as needed instead of storing all of the values in RAM.
2,"> So I really shouldn't be worried until the text files enter the GBs?

Just forget about until your code starts acting slow, then check the amount of free RAM you have when running. Python and your OS have many memory management tricks they will automatically employ so the actual usage may be a smaller than you think. 

>  I would still love to know the best way to approach this for my own curiosity.

That will heavily depend on what you are doing. There is no cure all, if there was we'd build it into python. As a rule keep the interactions with the HDD to an absolute minimum (your OS and HDD firmware does this automatically to a small extent). And we usually try to find a way to process incoming data in chunks, such as the line-by-line method you showed. Depending on the data we will sometimes convert the data to smaller representations called ""hashes"" so that we don't have to keep the actual data. And there's many more tricks."
2,"There's many ways. My simple choice would be to unpack the list: 

    list1 = [['Apple', 'banana', 'peach'],['Grapes', 'Strawberry']]
    for sublist in list1:
        print(*sublist)"
2,"> I'm loading fairly large text files (~50mb total) in as strings

That's not large. That's tiny. Your computer has hundreds of times that much memory. And you want to USE your memory. The entire reason you have memory in addition to a hard drive is that the memory is thousands of times faster. The only reason to modify your code to use less memory is if you are running out of it. 

> I haven't seen any issue yet, but I would like to be able to accommodate for the size of these text files potentially becoming an issue in future.

This is a well-known curse called ""pre-optimization"". Let me repeat: it's a CURSE. Drop it, walk away now. Come back when the size of your files is on the same order as the amount of RAM you have in your computer."
2,"`isgenerator` just checks if it's an instance of a Generator type, in other words if it contains a `yield` keyword or a for loop in parenthesis. It does not check the actual capabilities. The simplest generator fails: 
    
    >>> class A:
    ...     def __next__(self):
    ...         return 42
    ... 
    >>> a = A()
    >>> print(next(a))
    42
    >>> from inspect import isgenerator
    >>> print(isgenerator(a))
    False


I'll show you a different proof: 

    >>> a = [1,2,3]
    >>> i = iter(a)
    >>> a.append(4)
    >>> list(i)
    [1, 2, 3, 4]
    
The iterator is clearly generating the values as needed, as is proven since it includes values that are appended *after* the generator is created."
2,"Either do this: 

    if response.upper() == ""Y"": # don't forget the ()!
    
Or do this: 

    if response == ""Y"" or response == ""y"":

I recommend the first one."
2,"Yes. You can write it out the long way if you want: 

    >>> a = range(5)
    >>> b = iter(a)
    >>> c = list(b)
    >>> c
    [0, 1, 2, 3, 4]
    
But in python this is all handled in C so it's much faster."
2,"> Note, not all iterators are generators. 

Technically true I suppose, but I'd be very surprised to see one that isn't. In fact the link you shared says this: 

> Central idea: a lazy factory  
> From the outside, the iterator is like a lazy factory that is idle until you ask it for a value, which is when it starts to buzz and produce a single value, after which it turns idle again."
2,This sounds a lot like an XY question. Why do you want to do this in the first place? Why are you using xxd instead of python? Why would you want a hexdump of a big file at all? If you are trying to serialize a file for email etc base64 is smaller and is the standard way.
2,"Exactly. `list(range(5))`, `set(range(5))`, `dict.fromkeys(range(5))`, a `for` loop, etc, etc. There's probably hundreds of places in the standard library that will consume a generator."
2,"Explicitly creating an iterator is another way to do it, yes."
2,"Can you show us that section of your file? Show us the output from this code: 

    with open(filename, 'rb') as f:
        print(f.read(100)) # print the first 100 bytes"
2,"They are generators. A generator does not store values, so you have to exhaust them (loop over them) to see the values. A `list()` call is one way to do that. 

The rules for these things are very hand wavy. `range` objects for instance allow indexing, which is something most generators can't do. The important part is that they all calculate the next value on request, they do not store all the values in memory."
2,"You are just remapping to list methods? Why are you doing this? I can reproduce your code much easier like this: 

    class Queue(list):
        push = list.append # rename the ""append"" method to ""push""

Also note that a queue is not just a list with some methods, it's fundamentally different in how it works under the hood. In technical terms, a list is a ""pointer array"" and a deque is a ""linked list"". This affects how fast or slow each one is for various operations.

Also note that python has a `queue.Queue` class built in."
2,"Probably you are using python3, therefore you need to use `print()` with parenthesis. 

    print(""[*]Sending GET request to "" + target_host + "":"" + str(target_port))

I think this would be a lot neater with string formatting: 

    print(""[*]Sending GET request to {}: {}"".format(target_host, target_port))"
2,"Reddit is limiting the default python user agent. To get around this simply make up your own user agent. 
    
    import requests
    headers = {'user-agent': 'rememberthesemicolon'}
    url = ""https://www.reddit.com/r/learnpython/about.json""
    response = requests.get(url, headers=headers)
    print(response.json())

If you read the python API docs this is discussed in detail."
2,"You forgot to close the parenthesis on line 5. Anytime you see a syntaxerror and the line looks ok, you should check the line above it. Also your indentation is off. It should look like this: 


    import random
    num = random.randrange(1,101)
    guess = int(input(""What is your guess?""))
    if guess > num:
        new_num = int(input(""Your guess is too high""))
    elif (guess) < num:
        new_num = int(input(""Your guess is too low""))
    else:
        print(""You are right!"")"
2,"It looks like you followed a 15 year old tutorial. There's a lot of very old style code in there. The modern way to do this is like this:

    class Sentdex(tk.Tk):
        def __init__(self, **kwargs):
            super().__init__(**kwargs)

            self.iconbitmap(default='got.ico')
            self.title('Sentdex')
            self.config(menu=menubar)

etc."
2,"It's not that it's hard ... it's just a lot. And it can be very frustrating to beginners when, for instance, an IDE helpfully and by default makes a virtual environment when the beginner does not even know what a virtual environment is. An IDE assumes you can google how to turn off that feature if you don't want it, but that's not true if you don't know what to google. And then the beginner thinks it's a python problem and wastes days trying to google python solutions. We see that problem every day around here.

An IDE basically assumes you know python already and that you can tell the difference between IDE features and warning and python ones."
2,"The error is telling you that `int(.0025)` is the same as 0. 

    >>> int(.0025)
    0

I see you already found out `range()` requires an int. The fix is not to convert your numbers to int, the fix is to use a version of range that that can handle floats. This is not built into python, but if you have numpy installed you could use `numpy.arange`. 

    import numpy as np
    print(np.arange(.1, -.1, -.0025))

Or you could make your own loop by calculating the number of steps needed and calculating each point manually: 

    start = 0.10
    end = -0.10
    step = 0.0025
    
    for i in range(int((start-end)/step)):
        print(start-step*i)"
2,"I use Geany. I haven't used a lot of editors, so I can't really tell you which is best. 

If you like VSCode you can [disable pylint](https://code.visualstudio.com/docs/python/linting) or just ignore those warnings."
2,"? Those are not python errors. Are those IDE warnings? Maybe it's time for a better IDE. 

For me your code runs fine and all of those attributes load without a problem. 

    >>> import pygame
    >>> pygame.K_LEFT
    276

Edit: Apparently it's a pylint bug: https://stackoverflow.com/questions/28437071/pylint-1-4-reports-e1101no-member-on-all-c-extensions

Either ignore it or learn to modify pylint rules."
2,"Dude, I already told you. Just delete line 5 (line 6 according to your error message) and you are golden."
2,Just copy your old home folder to your new install.
2,"Yes. Spyder is an ""IDE"" which basically just means it's a code editor that has a lot of intelligence about python built in, so that it can help you write and debug your code. IDEs are kinda hard to learn, so as a rule I recommend beginners stay away so that they aren't trying to learn 2 things at once. However if you already know and like spyder and you are comfortable with it, then by all means use it. 

BTW, for me anyway, a ""text editor"" is something like Notepad, which you should NEVER use for coding. Beginners need a CODE editor, like Geany, Thonny, IDLE, Notepad++, Atom, VSCode, etc."
2,"> but there are dictionaries inside the object City as well so this wouldn't work

Why do you say that? json can handle dictionaries."
2,"The example you showed works fine. 
    
    >>> bytes.fromhex('ff3c53')
    b'\xff<S'
    
According to your error message, there's something wrong with your data at position 1. Remember a ""non-hexadecimal number"" means any character that's not in 0-9 and a-f. So a quotation mark or a ""g"" could cause this error. 
    
    >>> bytes.fromhex('fg3c53')
    Traceback (most recent call last):
      File ""<stdin>"", line 1, in <module>
    ValueError: non-hexadecimal number found in fromhex() arg at position 1"
2,"A linked list is included in python as `collections.deque`. A normal list is a stack. There is no BST, but between the binary search function `bisect.bisect`, `heapq`, and sets and dictionaries (hashmaps) we generally find we don't need them.

> Maybe python is not used for high-performance programming, 

It's not, but that has nothing to do with the lack of these data structures."
2,"Yes in this example, but if you make a subclass those do different things. Unless you really know what's going on I would not recommend it. To modify an immutable class variable use `self.__class__.variable = 42`."
2,"pyautogui will use opencv if you have it installed, and that will be a lot faster. If you don't have it pyautogui uses a much slower python based locate function."
2,"Open the file in binary mode, then you won't have to decode it.


with open('Energy Indicators.xls','rb') as f:"
2,"We call them ""instance variables"". Your symptoms tell me you made a ""class variable"" by mistake. 

    class SchartzchildRadius:
        class_variable = {}
        def __init__(self):
            self.instance_variable = {}

A class variable is shared between all instances of the class. An instance variable is unique to each instance. Confusingly, they are both accessed with the `self.` prefix. `self.variable` checks for the instance variable first, and returns the class variable if there is no instance variable of that name. 

Class variables are very rare; it's highly unlikely that you need one. As a rule, don't put any code outside of a function or method."
2,"The issue with complicated IDEs like Pycharm and Spyder and vim is that they are basically a programming language all to themselves. This is very confusing to a beginner when you don't know if an error is due to the python code or your IDE. That's why I always recommend a beginner start with a simple code editor like Geany, Notepad++, or thonny, and run your code in the terminal. Once you are comfortable in python you can try some IDEs and see if you like the shortcuts they provide."
2,"Look at the actual object. 
    
    >>> re.search(r""TRANSACTION REQUEST AD\s|C"", Text)
    <_sre.SRE_Match object; span=(15, 16), match='C'>
    
It's matching ""C"", since your re is searching for ""TRANSACTION REQUEST AD\s"" or ""C"". 

I assume you wanted space or ""C"", so your re needs to be `r""TRANSACTION REQUEST AD[\sC]""`."
2,"Oh I see. You need to swap lines 21 and 22, so that you get the score before you try to use it."
2,So where are you stuck? What's next in the todo list?
2,"> what to do!

Start somewhere, I suppose. Do you have a barcode scanner and a raspberry pi? I'd say buying those would be a good starting place. 

Overall it sounds like a fun and easy project. I've made similar things with an R Pi and touchscreen in a case."
2,https://dateutil.readthedocs.io/en/stable/parser.html
2,What's the problem with it? At first glance it looks fine.
2,"Imagine you have 2 threads, and they both use the same list. Now they both want to append to that list and just by chance they do the `append()` operation at the exact same time. This type of bug is called a ""race condition"", and the end result it one of the threads will win the race and append the data, and the other thread will lose and that data will vanish. 

The fix to a race condition is a ""Lock"". Its basically a flag that shows if a thread is using an object. A requirement for a thread doing the append operation is to first check the lock and if some other thread is currently doing something, wait for the lock to be cleared. The global interpreter lock (aka ""GIL"") is a lock that operates on all of the python core (including lists). Due to the GIL, operations like list.append are now ""thread safe"", iow many threads can use the same list. Note that the GIL does NOT affect code written in python. So if you make your own List object you will have to implement a lock manually.

When people complain about the GIL they are complaining that it can't be disabled. Like many safety systems, there are times when you know better than the computer, and if you won't have a race condition maybe you'd rather have the speed improvement from not checking a lock every time you want to do something. (IMHO python is about ease of programming, not speed, and the GIL fits perfectly into that. You could make a similar argument about typed integers.) 

I assume from your question that you are a beginner. In your case the almost-not-quite threading that python provides is more than good enough. You don't need to think about the GIL."
3,"Are there any packages or strategies y'all have used to give users of a flask web interface the ability to run (read only) queries on a table inb a fairly flexible way?  Do I just need to make a form with every possible field (including fields on joinable tables), logic for validating these fields, and then a function to construct a query set based on that?"
3,"I just had an interesting little algorithm problem for work (which I've solved) and I thought I'd post it as a challenge for anyone interested.

Write a function `none_slice` which takes a list, a start and a stop and returns the the slice but with None for anything outside the range of the list.

for instance, `none_slice(list(range(10)), -2, 2)` should return `[None, None, 0, 1]`

I made mine raise a ValueError if stop is less that start, but an empty list works too.

Include the function and a proof of it's correctness in all edge cases (basically unit tests, but it doesn't have to be actual python unittests)

Since spoiler markdown seems to have disappeared, I'll post my solution in the comments as a pastebin link."
3,"I don't understand how ginput is supposed to work.  The example in the matplotlib docs is:

    from __future__ import print_function

    import matplotlib.pyplot as plt
    import numpy as np
    t = np.arange(10)
    plt.plot(t, np.sin(t))
    print(""Please click"")
    x = plt.ginput(3)
    print(""clicked"", x)
    plt.show()

there is no plot to interact with until plt.show is called.  Both show and ginput are blocking...  So ginput blocks until it times out, since there's nothing to click, and then it prints `clicked []` and the plot comes up.

Python 2.7 on Debian with Ipython version 5.4.2, matplotlib version 2.1.0 and the tk backend.  I've tried running the above script from the commandline, and also starting ipython shell with `--matplotlib tk` or `--pyplot tk` and using the run command to run it.  I can't find anything on the Internet that says much more about this than that demo.

Any ideas?"
3,Strings are immutable
3,"Use underscores when they aid readability, which I don't think it does here"
3,"When you say there's 1000's of phrases an assistant understands, 99.999% of the work is implementing 1000's of features. Writing a look up table mapping keywords to those functions is extremely trivial. You're stuck on a problem that doesn't seem to exist"
3,"Can you give me an example? All the commands I can think of are like ""set an alarm for"", ""look up directions to"", etc where you have to say something very specific"
3,I should learn about meta classes.
3,"A subclass would be ideal, factory creation of classes or insyances second, and dynamically modifying instances an arbitrary amount of time after I've never seen a use for"
3,"Ewww. Adding methods up front like in a factory is one thing, but throughout the life of the instance as part of its state sounds hideous"
3,"You're tripping yourself up by being to vague. You want your function to be called but don't want to define what would cause it to be called because ""that would be hard coding"".

At the end of the day you need code that takes your input and classifies it as ""yes call the function"" or ""no, dont"". That can be matching a key word, intersection with a set of key words, some trained machine learning model... But you *do* have to be very specific about what you do or do not want to call the function. Training a ml model requires you ""hard coding"" thousands of labeled examples for training."
3,"In the future, to answer questions like this for yourself, use print to see if it gets to that point in your code, or what the values were before the if that caused it to be false."
3,csv.DictReader
3,"If you had a list of sensors:

    pir_sensors = [s for s in sensors if s.type == ""PIR""]"
3,Write your own validator that tries those three and returns one of three different type of objects. Then your view can if/elif isinstance to perform the correct account lookup
3,It's not that python isn't designed for it (iirc Guido had an implementation working back in the early days) but that web browsers aren't designed for it
3,It's the exact same api
3,Read what numpy.resize returns: https://docs.scipy.org/doc/numpy/reference/generated/numpy.resize.html
3,www.google.com/search?q=requests+library
3,"Download the files, manually or if it needs to be automated use requests library"
3,">I know dictionary is unordered. Does this mean the print result of a dictionary is arbitrary? 

Yes"
3,"Just experience. I spent a lot of time for a while profiling code with cProfile and timeit, and seeing what is really taking up the execution time. From that I have a strong intuition about what the interpreter is doing. Couple that with running into the occasional person that knows more than me spreading their knowledge."
3,Function calls are relatively expensive
3,"You definately need to be in no-python mode, and it's mostly only helpful for algos that can't be succinctly implemented with built in vectorized operations and masks. It's limited but extremely useful when it is useful."
3,"Yes, numpy **using numpy idioms**, and using numba where numpy falls short."
3,"    def estimate_timeline(orig_estimate):
        return estimate_timeline (2*orig_estimate)"
3,"You are correct so long as you are talking about numpy arrays and not lists.  Your second statement is just assigning a new value to the variable, and your original array isn't even considered by the python interpreter."
3,"Yeah my guess when you said ""all the cases I've profiled"" was that you were intuitively only testing cases where numpy makes sense. But newbs are used to iterating and appending and working with small sequences of numbers so I usually stress don't use numpy until 1) you have a need for it that lists aren't meeting well and 2) you're willing to commit to using numpy idioms rather than the usual python ones."
3,"No, numpy functions are implemented in C. The conversion is between python float objects and raw bytes whenever an element goes into or out of an array"
3,"Sure.

Creating arrays is expensive, so if you have a list you need to have a fair amount of vectorizeable stuff you want to do with it to overcome that overhead.

Calling numpy functions has a lot of overhead. It often doesn't really matter how long an array is, a function call will take about the same amount of time because the matg that C is doing is small in comparison. So, for instance, sum on a list is faster than np.sum on an array if the sequence is short.

Iteration over arrays is extremely slow because you're constructing a new python object for each element you touch. If your algo involves a for loop or other form of iteration, definately don't use an array.

The size of an array isn't changeable, so append creates a new array. Building an array through appending should absolutely be avoided.

Uh, serialization of an array can be really slow depending on the case, which the above points basically covered.

There's lots of little cases too that all go back to the sources of overhead listed above.

In general, unless your data is large and your algo is completely vectorizeable, just stick with a list. Plus, numpy and pandas are heavy dependencies to add to a project, so you should probably have a good reason for doing so."
3,"Numpy is implemented in C, and operates on C data types. So be aware that putting numbers into or taking them out of arrays involves a data type translation under the hood. A for loop over a numpy array will be extremely slow for that reason.

Arrays and lists are very different data structures and both have their uses. If you need a list (iteration, appending, popping, element wise access) use a list."
3,">In general, `numpy` functions will be much faster than native Python. So if it exists in `numpy`, use it.

This is not true. In general, using numpy will be incredibly slow. In specific situations, numpy will be blazing fast.  ""Always use numpy"" is the absolute worst python ""tip"" I see people naively throw around."
3,Sometimes you just gotta write some code. You'll learn a ton and have a lot of possibilities open up
3,"Start with a program where you type in their moves and see if the results are helpful.  Then you can work on automating recording their moves if there's enough of a benefit.

Start with the most simple thing that is useful and add the next most useful thing and so on"
3,I've installed debian dozens of times over the past 10 years and apt-get install vim is always the first command I run
3,Which is confusing as fuck if you're used to vim. I'd q! and use nano personally
3,"Eh, I use vim everyday, but it's never available by default. You gotta install it"
3,"I don't see a sleep. I also don't see how this interacts with the game. I'm guessing you have some super heavy function call in there. How big are you're arrays? Np.dot can be slow on huge arrays if you have an unoptimized back end.

I'd use cProfile to profile your code and see if any functions take longer or are called more often  than you'd expect."
3,They're the same
3,Depends on what sort of field you're wanting to go into
3,Hahaha
3,Look up exponential backoff. There are simple decorators you can copy and paste for it
3,"Its very good for what it is. It can be pretty rough in spots but if you really just want to do operations on numbers then it's great. It interfaces with cffi well for calling external c code it.

I've gotten stuck with it many times because it lacks basic things like supporting strings, so I get big ideas and then have to walk it back."
3,Collections.namedtuple
3,"Not sure if it's n**2 exactly but it's basically 

    cnt=0
    for i, start in enumerate(range(num)):
        for end in range(num)[i:]:
            for val in range(num)[start:end]:
                cnt+=1
    
So, worse than n*log(n) because of the third loop. N squared would be the first two loops without i. You could look at the graph of num vs cnt and see."
3,"    python -m cProfile -o {out_file_name} {your_script.py}

your going to have to work harder than googling an exact phrase that includes dummy variable names.  maybe look up what cProfile is.  What is the -o argument it takes, etc."
3,"You don't just let it, you re-architecture it. Using a more efficient algorithm will be much better."
3,Your program is single core so it can definately be pegging one core at 100% but overall cpu usage is far less than 100%
3,"    python -m cProfile -o v1.stats myscript.py

Then open up a repl, import pstats, and use it to open v1.stats. sort by cumtime  (cumulative time) and print the 50 worst is usually a good start"
3,You should learn how to look stuff up on the internet. Learning to program is going to be extremely slow and tedious if you have to ask Reddit every single question
3,Have you looked at all? There's tools for sql alchemy too and all kinds of things
3,"Yeah, special casing certain data types to not be objects would break or at least severely complicate the dynamic-ness of Python, and would probably make it slower.  And, just to save a few bytes?  The ints between -5 and 255 are already optimized, so that saves a lot.  If you need more efficient integer math, numpy blows python out of the water."
3,What's strange about it?
3,"No, a+=1 just assigns a new value to a. You aren't mutating the int object. It's the same as if a was a string. Also, integers are objects just like everything else, and they are passed by reference same as everything else."
3,"You can't mutate 1. You can't change 1 to mean something else.

    a=1
    b=a
    b+=1

What are the values of a and b? What would their values be if int was mutable?"
3,And you can unzip again with zip using star args. It's so gracefully it's own inverse I love it
3,"    {str(x): x**2 for x in range(10)}

    {x.upper() for x in 'aabbcdecde'}

Not useful code but that's the syntax"
3,"And generator, dict and set comprehensions!"
3,"That's an interpreter optimization for literal strings (ie, evaluated at compile time rather than run time). Probably depends on python version and repl vs .py file. 

Try

    ""all lower"" is ""All lower"".lower()

Or some other string that results from running code."
3,Default dict is rarely what you want. The setdefault method of a conventional dict is almost always the more appropriate idiom. Do you really want a dict that will never give you a key error? Usually you want to have a default while filling it but have bugs raise a key error later.
3,Just wait till you realize that the digital world is a game and python is the interface
3,What's wrong with break?
3,"If it's on a computer, there'll definately by input and output, so make sure you know the csv and json built in libraries and what exceptions you might get. Basic string operations, converting strings to ints, floats, etc.

If it's whiteboarding it'll be some algorithm, so know what big O complexity is at least, and how to choose between a list, dict, set, etc for the task"
3,"    objs = []
    for r_id, r_name in zip(repo_ids, repo_names):
        objs.append(Repo(r_id, r_name))
    Repo.objects.bulk_create(objs)

Or something like that. Excuse the short hand, I'm on a phone"
3,Why would it Not? What do you think the limitation is?
3,"It's just cludgy too. Pickle already exists, or writing to json or a database is just so much more common and versatile"
3,"Uh, not exec. What are you trying to do?"
3,Why use two gui libs? Just use one
3,"Just don't eval strings from users, networks, etc. If you don't have 100% control of the string then it's probably exploitable"
3,"We put the dunder version in a `__meta__.py` file along with author info, etc. `__init__.py` imports that. Setup.py execs it to avoid the circular problem of importing the package and needing the deps already installed. Your Makefile or whatever could use `python -c ""import mylib; print(mylib.__version__)""` or exec dunder meta.py. does that make sense?"
3,"The data for that post request come from somewhere. Find out where. Or use selenium. It's much much heavier and clunkier but it does solve that problem for you. They might use js to calculate those requests just to make it difficult, though intentional obfuscation seems unlikely from a gov site"
3,Does the same file always cause the crash?
3,"Do you have more detail about what you'll be working on? NGS is mostly orchestrating non python tools (ie, writing pipelines), where with qPCR or PCR/CE you'd be doing signal analysis, or microarrays you've got a totally different set of problems and tools.

What you've asked is like what do you need to know to make a game. Is it 3d, 2d, text based? Physics based? Real time or turn based? Multiplayer on-line? There's no general answer to the question of preparing to make a game."
3,"Op said they understood and could replicate the code they found. They're just having an existential crisis about ""what is programming really?"" At some point there will be a weird edge case and they'll have to dig deeper. Or it'll be too slow. 

Pat yourself on the back all you want (I'm sure you deserve it) but it doesn't mean your path is the only path. I was promoted three times in 2.5 years from entry level to the point that I need a PhD to go further because I know how pieces fit together and how to work on large projects with technical debt in mind. Yes I know a lot of details too: it all comes from practice. Bang your head on details when you need to and import the solution when you can."
3,I disagree that just using a few lines of code that you read and understand and then focusing in the bigger issue is not learning. Writing everything from scratch in a clean room is how you end up with 5 years of experience and have never finished a project of reasonable size.
3,Assuming a string is a list would be a mistake. I'd guess that a list of characters would take much more memory than two strings
3,"My understanding is that it's hard to break out of testing/QA into a development role. If you want to do development, shoot for that"
3,Copy and paste (and understand) and move on. Don't make your problems more difficult than they need to be.
3,"Well, for one, OP has a list of 3 numbers, not 1000. For another, OP is mostly iterating over the arrays, accessing my index, and appending, all of which are extremely inefficient in Numpy.  Finally, OP doesn't know what a list comprehension is, so encouraging them to install 100 MB of C and Fortran code to address what core python does just fine is unhelpful."
3,"Oh I misread because you chose the terrible variable name of lowercase L. Look, this code isn't related to what OP asked.  This is way too salty for a programming thread so good luck!"
3,"That's not the code the OP posted.  Yes I agree numpy would be good for solving problems other than what the OP is asking, haha

Edit: Bahahaha your code doesn't even make sense!"
3,"I am a huge fan of Numpy, so that would be awesome but unfortunately not.  I use Numpy daily and am considered the expert on it in my department (bioinformatics).

I think you misunderstood ""use numpy where it makes sense and this ain't it"" for ""numpy is bad"".

I've profiled a *lot* of code, optimized many algorithms that use numpy, and am very familiar with the idioms and paradigm of numpy."
3,The only sane answer in this thread so far
3,Absolutely not. Numpy would be much slower for this. It has tremendous overhead and requires you to commit to it's idioms/paradigm. Please don't recommend it to beginners who don't even know what a list comprehension is
3,"Dont start with machine learning. Dont touch numpy, pandas, scikit-learn or keras for at least a year.

Edit: 90% of ML is data massaging. Work on data collection, organizing, csv parsing, web scraping, and various other data science tasks if anything"
3,"Oh sorry, venv is built into python 3 isn't it. Sure use that. My job is stuck in python 2/3 compatibility and python 2 habits. I just meant don't listen to anyone who says you need to use virtualenv-wrapper or some other non standard thing. There used to be only virtualenv, but looks like python 3 absorbed that (Like it did with multiprocessing, Async, and other things that used to be third party)."
3,"> 1. Install venv

Just virtualenv is good. Anything else is a wrapper around that or some unorthodox alternate solution.

> 2. Create an environment (named env here)

Yep. Use `-p python3` so you're developing with a modern version

I make my envs inside the project dir and name them all "".env-projname"" so I can type .env, tab complete, and not bother remember what I named any particular thing.

> 3. Start a shell in the env environment

Yep (Well, just activate the env in your current shell.

> 4. Pip install flask, sqlalchemy, (pylint?)

Yes, but not pylint

> 5. If not through pip, install pylint globally (since last time I tried I couldn't get pip pylent to pick up in vim)

Method depends on OS but yes install pylint globally

> 6. Add env/bin to the python sys path (?) (need more detail)

Nope! Activating the environment does this.

> 7. When app has testable methods, flask run from within env

Yes. You probably want to add a boilerplate setup.py and `pip install -e .` in that directory so your tests will have your project installed when they run.
"
3,">stimulating a forest fire

The title of this post concerns me"
3,"Basically, there is an api, it's just not documented and you have to discover it"
3,"Nice. I do think that some sort of data processing/modeling, simulation, or game would exercise what you're asking for better. But, being interested is the most important. Django is awesome"
3,"Just work on a project. A game, making pretty visuals, just anything"
3,"A slice makes a whole new list, but most other operations dont"
3,"    import numpy as np
    a = np.array([np.array([1,2,3]),np.array([2,3,4]),np.array([6,7,8])])
    print(a.shape)"
3,"Doesn't make sense in the slightest? It's showing you that you can't do closures with a lambda. Is that a bug? I dunno, do you see documentation saying that you should be able to?"
3,You're passing instances of Test into the process which have images as attributes. 
3,Torch is already highly parallelized. What are you trying to do?
3,Because every process is importing torch on its own and it probably takes a long time to load
3,It's really inefficient to append to numpy arrays. Why not use a list?
3,"There's a lot of overhead to multiprocessing. It spins up seperate interpreters that serialize their communication over sockets and then deserialize it into objects again. Your function has to be pretty heavy for multiprocessing to help. Try doing something that takes 1 second per iteration

Edit: also, 50 processes are going to fight for the cpu. Use the concurrent futures process pool"
3,range(width_of_image//width_of_slice) and same for height. A nested for loop 
3,"You can make a slice object and store it in a list.

    myslice = slice(2, 5, None)"
3,"You don't need to make it a list. There's a from array method or something. Also, just iterate over the indices and slice which doesn't even copy the array.

    this_arr = arr[x*width: (1+x)*width, y*height: (1+y)*height, :]

Sorry for non complete answer. Am on phone."
3,Not really. Everything worth imspecting would be out of scope
3,"I think that's because you need to pip install it, not mangle your sys.path.  Can you link to the module you're trying to install?"
3,Huh? What feature in 3.4 isn't supported in 3.7? I thought 3.x code was all backwards compatible with other python 3 versions
3,The 3.4 code will run in the 3.7 interpreter. What's the problem?
3,"Install git. Clone the repo. Cd into the directory with setup.py in it and `pip install .` the period means ""this directory""."
3,"You're in luck.  Google doesn't have anything but I remembered a talk I went to at Scipy 2018 that covered this.

the talk: https://www.youtube.com/watch?v=KTbd_oUkP4Q

related info:

https://github.com/pyviz/EarthSim

http://earthsim.pyviz.org/
  "
3,"I'm pretty sure follium is just a way for python to display on a javascript map. I don't think there's any javascript to python call backs. If you want to make a program that runs python functions when a user interacts with a map, you'll need some python ui to display the map, like tkinter or pygame or something. Or, if it needs to be in a browser, you need to write the function in javascript.

What are you trying to accomplish?"
3,"That looks like 4 spaces or a tab? Can't you debug by iterating through the elements and print the classes, maybe use startswith so it doesn't print a million things? Then use whatever string bs actually finds"
3,It's the console scripts entry point specifically. Entry points in general do something else.
3,"That's not a valid array. You must have an array of python objects, not integers like you want. Check the dtype attribute of your array.  

Also, show the actual code you used. We should be able to just run exactly what you did and get the same result"
3,"In a notebook, you could plot them as colored dots in matplotlib and follow a matplotlib animation tutorial"
3,"As far as data structures in python, learn which ones are mutable vs immutable.  What can be a key in a dict, what can be a value?  what is a list in python? Lists, sets, frozen sets, dicts, strings, byte arrays, tuples, named tuples, deques, numpy arrays..."
3,You could also start with conventional machine learning algos in scikit learn like random forest and svm. 
3,"Honestly this seems like a waste of time.  Know what data structure to use when and then learn about something else.

Do you know decorators and the factory pattern? Do you know what the GIL is and when to use Async vs threading vs multiprocessing? Do you know when (and how) to use numpy arrays vs python lists? How would you write an extension in a compiled language? Can you write a basic raw sql query?"
3,"Go for it. Either it's interesting and you learn the math because it matters to you, or you find it awful and move to something else. Could be that meaningless math exercises in school convinced you you're bad at math when really you're just bad at doing stuff you find meaningless, which is a perfectly reasonable reaction to have."
3,"I work in scientific computing with genetics.

Vim and ipython. Code checked into git, tagging commits that produced a result. Data files in git-lfs. Development on a mac laptop and ssh+tmux into our in house linux hpc for heavy compute stuff. As we get more into deep learning and gpu heavy stuff we'll probably use amazon."
3,"Mmm, you were kind of right. Defined literally, the repl makes that optimization. I've edited my answer to work. Note that between like -5 and 256 you'd get different behaviour. "
3,"Fyi, that's what `is` checks.

    1001 == (1000 + 1)  #True
    1001 is (1000 + 1)   # False

Edited to work"
3,"That's what pickle does, except not json."
3,"Just run the same code in python 2 and 3 and take out the input and print calls.  If the difference is still dramatic, use cProfile to diagnose "
3,Pretty sure any database is going to do its own memory management
3,"https://stackoverflow.com/questions/3382849/create-sql-table-with-the-data-from-another-table

https://stackoverflow.com/questions/21794133/sum-sql-rows-and-add-to-a-new-column

Do those two together solve your issue?

But I'd think you don't really want a new table because it will get out of sync"
3,"The file is over written no matter what. If you load it first at least you are overwriting it with all the old data plus the new.  You can't just add data to json in a file because it's just text representing the json structure so what's in the file needs to be modified.  That is

    [1,2,3]

To append another number you need to delete the last bracket and insert 

    ,4]

And no library I know of does this."
3,"I'm a beginning data scientist in bioinformatics. I don't have any resources but I'd recommend just picking a question to answer and going at it. There's tons of open datasets and papers that use them.

Edit: feel free to ask me anything"
3,"You can specify them in setup.py

Install_requires is the key I believe"
3,Huh? Functions are all the same
3,Doesn't github support git-lfs?
3,I don't think this will work because you're making your columns have different lengths. 
3,With a for loop
3,Use cProfile and see what takes the most time. Optimization without profiling is always premature
3,"Somehow use a set and you can easily test for one being a subset of the other, or compare the number of non-equal members to number of equal members

Caveat: equality with floating point values is hard"
3,"You can make your commands keys in a dictionary and the functions to call the values

    cmd_dict[command](*args)"
3,"No it would be much slower. You failed because array.append returns a new array rather than mutating the original one like list.append does.

You only need arrays for vectorized operations. They are really slow for iterating over, appending, and other common list tasks. Just use a list."
3,"You want to print a blank line?

You can add \\n to any string and that's a new line. or you can print an empty string if you prefer"
3,Why not just name?
3,"Its much slower than iterating over a python list because the raw pieces of data need to be converted into python objects, one at a time.

Edit: http://elliothallmark.com/2016/06/08/some-points-about-numpy-performance/"
3,What do you mean implement the arguments your function takes?
3,MongoDB vs Hadoop for something something big data!
3,"Learned something new!

    a = 5
    print(a.numerator)

Integers happen to have these attributes already"
3,"What? No. Profiling is measuring how long it takes to run the different parts of your code, instead of just guessing."
3,"Something like

    python -m cProfile -o stat_file.prof myscript.py

Then load stat_file.prof in an interactive session  (ipython) with the pstats library"
3,"You should profile it if you want to make it faster, but I'd expect that the api call and the print statement take up 99% of the run time as is"
3,"How about don't print the answer before asking the question? Like, is this a memory game? But really, did you try googling ""python print overwrite same line""? Do those answers not work for you?"
3,"Yes you can definately import models. Maybe what you heard involved importing pre-trained models and partially re-training them, which is by far more interesting. Here: https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html"
3,"It leads to code that is difficult to reason about. Global state is being implicitly changed, and you can't track the flow of data/logic.

Ideally, functions should be pure (same input leads to same output every time, and external state is not a factor) or solely deal with state  (and that be state encapsulated in a class/object). Stuff can get really messy really fast otherwise. "
3,Honest question: why do you want to use mongodb? 
3,"It's a sanity check during development. It should never happen and your program should not rely on it being executed since asserts can be disabled by the user. It's not like an IOError when a file doesn't exist, which is something that might happen and you need to be able to handle."
3,"You read all the data into n_rows, so you can get out of the with right there. No need to nest"
3,They don't need different ports if the webserver is what's receiving requests. It forwards based on url
3,"Nginx (or apache) can forward requests to either, living side by side, based on url"
3,"I think people are just too lazy to find, anonymize and find a place to host their resumes"
3,"There's zero chance that any python to javascript anything is going to handle pygame, which relies on old C graphics libraries. 3.5 vs 2.7 is not anywhere near what your issue is.

You don't build a house and then ask ""how do I make this a boat?""  You need to think about the massive ""what is it that I want to make"" questions first, not last."
3,Work on projects that are interesting to you
3,"I'd keep a local copy and keep note of it's last accessed timestamp. On search, check the remote file's time stamp. If it's more recent, you gotta copy the file again and it'll be slow. Otherwise, searching the local file should be plenty fast.

You might also have a regular task that keeps the local file up to date, minimizing how often you need to transfer when someone runs a query. IO is certainly the bottleneck here"
3,"    grep ""my phrase"" myfile.csv

As others have said, processing the text from a remote machine on you machine requires transferring all the bytes across the network. No matter what. That's probably all of your runtime"
3,After a quick Google I found this https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.convolve1d.html which takes an axis kwarg (similar to sum or max)
3,"Pip is the standard python package manager. It comes with python 3. If typing pip in your os command prompt doesn't work, `python -m pip install X` will. It installs from pypi (a website) or if you have code with a setup.py then you can install that. It works system wide or in a virtualenv if you are in an activated virtual environment. Anything like enthought or anaconda has to play nice with it because it is the standard way to install python packages.

It pretty much just copies code into a folder called site-packages that is in your path if python is.  But there's other things like entry points (don't worry about it) that it handles too."
3,"Oh, can't help with notebooks, sorry "
3,No need for enthought then. Can't you just pip install ipython?
3,"I think you're thinking of jupyter notebook. Ipython is a repl.

And notebooks are dramatically less useful since you can't write reusable modules in them. They're just for presentations and beginner classes"
3,Just gotta find that exe or however the enthought distribution intends it to be run. It's not in your path for some reason. Windows is notorious for being a PITA for programming
3,"This. I see that implied `Return None` and think ""I don't ever want that"". Even if, as is, the program will never get there, I think it's more explicit to say that returning None is not an option."
3,"    b.calculaRaizes(valorEntrada) == (valorEsperado)

You call your function here with only one argument, but it requires 3"
3,"You'd probably be done by now if you had just done it the ""less easy"" way. What's difficult about a for loop over a list of models? Or, maybe I still don't understand the problem."
3,Migrate your db to be just one table?
3,Calling either of those functions on your object will (potentially) give you more information 
3,Did you check dir or help?
3,"Code compiled to machine instructions  (binary) like C defines an ABI and python has tools like cffi that make it easy for the programmer to access that interface.
 https://en.m.wikipedia.org/wiki/Application_binary_interface

This ability comes from python being high level and dynamic, with a philosophy of programmers shouldn't have to worry about those details. I.e. people can and have written very dynamic tools to abstract this stuff away for us"
3,Programming 8+ years and I literally still 3 finger type!
3,    help(list.sort)
3,"What happens if you call str on it?

Edit: like str(interfaces[interface][""duplex""])"
3,"IIRC you don't inherit from ABCMeta, you make it the meta class (which is different)"
3,">I don't know exactly what I need for the data and headers part of a post request.


Right, which is why you look at the request the website is sending and reverse engineer it"
3,Lol if you don't know what you're looking for then how the hell should I know?
3,"Having worked with flask a lot I am currently working in django and it's great, especially testing. An automatic testing database, data loaded per test class via fixtures, a client that gives you the context the template is rendered in (as opposed to having to scrape the rendered page or worse, use selenium)... I totally recommend it"
3,"On my phone, but the data probably comes from an Ajax request after load. Open up your network tab, reload the page, and see what requests are made. One will have the data you want, probably as json, as the payload. Look at the request and the POST parameters and you can probably deduce their api. Then you can just make a post request with the requests lib and get your data with no scraping."
3,My point is there's no good reason to do what OP is saying. 
3,It's exactly the same as any attribute with the addition of the ability to implicitly assign it
3,"You can assign them explicitly if you're metaprogramming, i.e. functools.wraps. or I do it when creating unit tests via a factory pattern. Otherwise your point seems to be that `__doc__` is too useful because it's a widely held standard. But I think there really are no good examples of what OP is doing that aren't already covered by standard python idioms."
3,Yeah but docstrings are built into python
3,"""Automate the boring stuff"" is a good hands on book"
3,That's bad practice. Just return a named tuple or something.
3,"Lol, you mean `__doc__`?"
3,Why not just keep the same number of workers?
3,Neither copy the objects in the list. But obviously the array referencing the list elements is copied in both cases. Is it less expensive to build a list or a generator? They're probably about the same because python has to create the same thing: an array of references to the list elements.
3,"I agree (that it works), so the list is being copied. You just get it as an iterator instead of a list. No memory or cpu savings"
3,"Super simple. There's just two parts. One where you do an operation and one where you filter. So it's map and filter in one:

    newlst = [func(x) for x in lst if condition(x)]

Also, you can make generators, dictionaries or sets instead of a list"
3,"If it's not mutating the list, it copies the entire list"
3,Just use a list comp and filter out the ones you don't want. Being clever will probably bite you and won't be as efficient as you think.
3,Does that work? Are you still modifying the list you're iterating over since iter returns a generator?
3,Dunder variable names get name mangled when exporting modules and in inheritance 
3,"Source? You have to renew letsencrypt certs every 90 days, so they would have to be continually owned, not just hacked once."
3,Is https not what you want? Just make nginx do the work and not worry about it in python land.
3,There's also numba
3,It's called A foreign key. It's an sqlalchemy field type
3,Boooo
3,Why not try to do it on one line using built in functions?  Seems like a better exercise to practice performance and elegance rather than avoiding good solutions
3,"No, if you want the job to run every hour, have the thread target function loop and sleep for an hour each iteration.

For the Queue, have your thread wait for a new task to show up in the queue. The main thread triggers the thread by adding something to the queue. The queue is the signaling mechanism"
3,">why it's designed to just used once & strictly cannot be reused.

It can be reused, but starting it is not the way.  You can have the thread sleep, or you can ""trigger"" it by having it consume from a Queue, and adding to the Queue when you want it to do something."
3,Sounds like you just want a queue
3,"Your thread can loop if you want, or you can have your threads take tasks from a Queue, or just keep making new threads...

What are you trying to do?"
3,You're doing something wrong if you're trying to start a thread more than once.
3,"A numpy array is just a chunk of data. You could serialize it in a number of ways. Deserialize it when you get it out.

The cheap answer now is just dump a list of (pk, hash) into python for every request and do your calcs in python. 

Better is do that but be smarter about how you use numpy maybe  numba.

Most scaleable is use postgres with C or python/Numba or maybe pypy as a procedural language and write your own in database comparison function.

Get it working with the first option first.

"
3,"Huh? Both java and python are compiled to byte code that is interpreted by a virtual machine. 

Edit: you can compare to pypy instead of cPython if you like. It's not jitting that makes java faster than python "
3,No. Java is interpreted and it's way faster than python (similar to c). It's because python is very dynamic
3,"Just step by step. Set up django to respond to a request at a url with ""hello world"". Confirm you can access this data through your browser by going to that url. Then set up vue to go to that url and confirm that it gets the ""hello world"". Use the developer network and console screens, and back end web server logs, to debug if not.  The send more complex data, etc."
3,"I used it to seperate rendering and physics/game logic in a game framework I never did anything with.

For your purposes look at the processpool.map in concurrent.futures. super convinient!"
3,Why not use Pillow? It's a python library
3,"It's a pain to precompile it because it has to be compiled for the target system. So, you'll have to cross compile distributions for Mac, multiple versions of Windows, multiple linuxes, bsds...

Huge projects like pandas and scipy are just starting to get this right and it's a big lift. Pillow has already solved this distribution problem for you. If you don't use it, you'll spend 95% of your time on non programming problems. If this Mozilla tool is such an improvement over what pillow uses, maybe they're open to a pull request. If not, heed their reasons"
3,"What's your bottleneck? I imagine it's that you're slamming third party apis. If not, why can one machine not handle it?"
3,"One button press would kick off one job with one worker that would run an Async function that does 300 requests. If you have 100 simultaneous button presses you probably don't want 100 workers doing 3000 requests all at once (for your server's sake and for the sake of the api servers), so you'd limit the number of workers."
3,This is the correct answer. Don't know why op said celery is not asynchronous.
3,"If you modified the python interpreter to run obfuscated, encrypted byte code, and distributed that, you could still dump the RAM as you say.  But, short of that, all anyone is going to have to do is look at the code.  Any competent python programmer could do it, and then they can share the decrypted key with whomever they want.  It only takes one competent ""hacker""."
3,"what /u/w1282 said: **If at any point in time you provide an end-user with software that requires access to a secret, the end-user will have access to the secret.**

That's all there is to it"
3,Yeah don't distribute your api keys. I wouldn't be surprised if that was against their tos
3,"For github or whatever, Git ignore secrets.py and add secrets.py.example that has broken keys and instructions at the top to rename the file.  Users of your exe should do the same or have a ui that helps them do it"
3,"Set blocking to false. I assume you'll just get whatever samples have appeared since the last call, process them, then get more samples.

Though I'm confused because your post title says array but the body says list. They are very different."
3,"If you either return the list, or mutate it within the function, your function will behave unexpectedly. If you aren't doing those things, someone might make a change later and thus introduce that bug. Returning the list would be very difficult to debug because it could be somewhere else in the program that you mutate it, and it's at that point that you change how the function will behave next time it is called.

Just always do the first even if you think it isn't necessary because it is more robust and idiomatic."
3,The first way is correct and idiomatic. The second way is either already a bug or will likely lead to a bug when someone later makes an unrelated change.
3,It doesn't work like that. There aren't random methods that don't work in jupyter notebooks. You're probably not using the pandas version you think you are. You should debug this issue 
3,Doesn't work in jupyter notebooks?
3,Whats your job and why are you interested in databases specifically?
3,"""Automate the boring stuff"" is a bunch of pretty good beginner projects."
3,"There is nothing that will just identify arbitrary objects, logos and actions in photos.

If you have a finite set of things to identify, and you have hundreds of labeled training examples for each element of that set, then you can retrain an existing, pretrained, world class, neural net. "
3,"I disagree with all of these. Numpy is a tool for doing efficient vectorized math on large data sets. Sure you can make a currency converter, but where do you have 10,000-1,000,000,000 items you want to convert? And then the trick is continuing to use the arrays throughout a whole process. Just putting 1 billion values in an array and taking them out again will take longer than doing a for loop on a list"
3,"I'd say in general, managing state like that should be towards to top of the call stack, not deep inside. Not related to robots, but the clean architecture in python is a good video: https://youtu.be/DJtef410XaM"
3,"I thought even browsers don't have java anymore.  Do you mean enable javascript? If so, use selenium which can be run in headless mode with phantom.js, but watching it drive chrome or Firefox is helpful while developing."
3,"Anaconda is great on Windows where everything sucks, but I wouldn't say it's the obvious choice on Linux which is a much better programming environment."
3,I'd have functions that return python objects and a view that just maybe checks authentication and then wraps the python object in a response. That way your tests mostly don't have to deal with network responses: you can just test the functions directly.
3,"If you make A2 that just has your new method, then making C1, etc would be just one line each using multiple inheritance. 

    class C1(A2, B1): pass

Note, order of inheritance may be flipped.

If you had hundreds then I'm sure you could make them programmatically through metaprogramming."
3,"Aww come on. You have one expression. Defining the variables would be four lines.  You should have already isolated this code as part of your debugging process and be playing with it in the repl. If you can't break down your own question into its essential pieces, why would i?"
3,Could you make this a small runnable example of the problem please?
3,N dimensional arrays. Broadcasting into more than one dimension is extremely useful
3,"The first comment to mention n-dimensional arrays is down here at the bottom. Also pandas api is more complicated, so why use it if you don't need anything it provides?"
3,"It's the new line character. You have an array of strings?

    mistake = list (""""""
    start with a new line
    And end with one
    """""")"
3,"Solve this yourself by putting print statements in your loop. Keep printing the shape. When it changes, put more print statements in there to investigate the operation that changed it."
3,What? 
3,"R, matlab and Julia are languages with 1 based indexing.  0 is more common for sure though"
3,</thread>
3,Not true. An annoying number of languages are 1 based indexed
3,"Fyi, you can't just throw math at data and get legitimate answers. Your two example questions are good examples."
3,"Why is a view on the matrix too inefficient, but creating a new array and copying the data better?"
3,Why would What? I'm just telling you what is being put into the dictionary: it's keyed by the index and contains a list of values found at different nodes at that index
3,"First they store a list, then they append to it after it exists. More pythonic than checking if the key exists would be

    mydict.setdefault(key, []).append(new_val)

Treat the existence or absence of the key the same."
3,Popping a tuple out from the left side. The tuple contains a node (object) and an index 
3,"It's called unpacking:

    x, y = (1, 2)

Or

    for index, val in enumerate(mylist):
        ..."
3,"    parsers = {
        'txt': text_parser,
        'fsa': fsa_parser,
        'pdf': pdf_parser
    }
    
    parsers[get_extension(fname)](open(fname))"
3,"No, it's just spawning a thread within the single interpreter instance, not an interpreter.

Async in py3 is like what you thought threads were, where python manages all the context switching within a single OS thread "
3,"Actually, a python thread **is** an OS thread. It's just that GIL prevents them from running concurrently (ie, the thread requests permission to run). If a thread releases the GIL then they run concurrently as usual until one attempts to re-acquire the GIL."
3,"But training an svm in sklearn is literally that easy. Not sure what your complaint is. You learn by completing projects, not by micro-optimizing code that already works.

Develop reusable code around cross validation, not the time complexity of reshaping vectors."
3,"I'm going to disagree with the majority opinion ITT.

>even if I copy it from somewhere, understand underlying concepts, try to code the right way on my own, using less memory, less time, etc

This is mostly a waste of time. Understand what you need to in order to get your answer. Read through a solution you find to get a rough idea, but do not rewrite it to make it ""better"".

Is your code running so slowly it's interfering with your discovery process? Then sure, *profile it* and tweak whatever needs tweaking. But you don't gain anything pushing if statements around in code that already works when your goal depends on its execution.

Do I read enough about an optimizer in scipy to have expectations about what it will do, the big O time and space complexities, etc? Sometimes. Do I look at the source Code? Never, unless it's my last, tiny hope.

Using code others have written is 100% good practice. Your peers may not be doing things in the absolute best manner, but they are being successful because they are doing something right."
3,Relevant: https://github.com/python/cpython/blob/master/Lib/this.py
3,"I think you mean 10:35

But, just notice how you do it with pencil and paper and then base the script off that"
3,"Can you explain how you got the value for id 1, session 1 (for instance)?"
3,Huh? Ipython is a superior repl to the basic one. Why are you saying not to use it?
3,You use a queue to organize what is ready to be worked on
3,"Not at all. Just fit a line to the continuous points.  Seems like your analysis might be meaningless without that correction, no?  Like the camera is tilted 20 degrees in your image so the error is like sin(20 degrees) ~ 35%"
3,Sure you don't need the distance perpendicular to the lines?
3,"    arr = np.arange(6)
    print arr[0:100].shape

some of your slices are out of bounds but numpy lets you do that."
3,"K but names[3] is not the offset to the 4th name, it's the offset to the address of the 4th name. A list is an array of addresses. You're using an index to get the value. Also https://docs.python.org/3/tutorial/datastructures.html doesn't use the word offset once and consistently uses ""index"""
3,"You say you have it but haven't posted the code.  so, in general, like

    while True:
        var = stream.read(512)
        if 'mybytes' in var:
            break

But you'd have to do something a little more complicated than that because 512 bytes might get you ""blahblah(...)blahmybyt' and the next 512 starts with 'es'.  so you could have an overflow like

    overflow = ''
    stop = 'mybytes'
    while True:
        var = stream.read(512)
        if stop in overflow+var:
            break
        overflow = var[-len(stop):]
"
3,Why is that not an index? They're called indicies in the python docs. You even have a list.index method. In numpy too.
3,"Is it useful to, or the end result is interesting to you, then yes"
3,Offer on the mailing list and create a pull request if people are all opposed
3,"I think people are just using subprocess.popen to run the cli. You can pass any args you want, and communicate with it through pipes."
3,You posted this question yesterday 
3,"Did you try googling ""minimodem python""? I suggest you dig into those and post again when you have some code and are stuck. Then post through information about where you are stuck."
3,I'm going to guess people won't like your title
3,"You generally don't loop over numpy arrays. Just use a list, or learn how to use numpy vectorized operations"
3,"I don't understand. You aren't updating focalLength in the for loop so of course it doesn't chamge. There's no trick to it, just update it to be whatever you want in the loop"
3,"`ipdb`

you're welcome"
3,Not even in py3? Man... multiprocessing made it
3,My answer too. Also functools.wraps
3,"The purpose of a relational database is knowing what you're putting in. It's structured. Complex queries can be fast. With mongo you can stick anything in there, but you have to sort out what it is later. You can be disciplined about it, but If you were disciplined enough to know what it was at insert time you'd use postgres.

Postgres has arrays, json, jsonb, and 2GB text fields that are all very very performant. Full text search is fast too. I believe all of those are indexable as well.

Edit: Postgres also has views and inheritance which are both amazing. I dunno what that's like in orm land."
3,"With json in postgres and sqlalchemy , you have to mark the field as dirty when changing nested structures. It picks up on top level changes automatically "
3,"We'll sqlite3 would replace pickle. I'm assuming your remote database is what it is. Also, mysql probably has remote access off the shelf.

You'll just read your sql data out as a list of dictionaries or tuples and pickle that"
3,"json would be better than pickle.  Also, you might as well use sqlite3 if you're interacting with a database anyways."
3,"Are you going to be there to type in a password to kick off your program? If not, encryption doesn't matter. Your program can access the passwords and so can an attacker with your password. "
3,They have an api and I assume there's one or more python libraries that wrap it
3,There's several bundlers like cxfreeze and pyinstaller
3,What are you trying to do? 
3,"Everyone is suggesting specific features, but with machine learning you take a bunch of features and feed them into a model like RandomForest. 

Do they get comments? do they get upvotes? To they submit posts? Are their posts clustered in periods of activity or are they spread out? Just think of features you can calculate. 

The hard part will be getting labeled data. You'll need hundreds or thousands of examples of known bots and known real users to train a model"
3,"What do you mean ""isn't doing anything""? What are you expecting?"
3,the first answer on google for your question looks pretty solid: https://stackoverflow.com/questions/44887576/how-make-drag-and-drop-interface
3,https://docs.python.org/2/library/itertools.html#itertools.groupby
3,That's not a run length encoding though
3,"Multiprocessing is a weird sliver of space between threads and native, gilless, code. I've only ever had one reason to use it, in coordinating two mostly separate processes that shared memory. Every other time (maybe a couple hundred), the other routes were superior.

But it was awesome that it was there!"
3,"Numpy, numba, cython, etc are much better than mulrprocessing because they aren't subject to the gil, are 100x + faster than python anyways, and don't have the overhead of multiple processes.  Multiprocessing would be the last thing I look at for performance improvement. "
3,I've only used selenium for integration testing and once with a site that intentionally obfuscated their api and was also looking for bots.
3,">Hardly. Client side javascript frameworks are not trivial to untangle in the Developer Tools. 

Akchually they usually are because the use an api, even if they don't advertise it. Then knowing the api is way more powerful than clicking buttons that might not have loaded yet. "
3,"The exact answer to your question: http://elliothallmark.com/2016/12/23/requests-with-concurrent-futures-in-python-2-7/

But other answers are probably better. Python 3 Async is where it's at"
3,"Oops, edited a typo in my comment. Load returns an array, but you aren't using that value"
3,"Load doesn't make y not a string anymore.  The type of y is str, before and after load. Load returns an array, but you aren't using that value."
3,"You keep saying ""it"" is a numpy array but as I said, y is a string.  It is not a numpy array."
3,"What do you mean ""The value in np.square (...""? What you're asking is very unclear. Can you show the code you're trying to run?"
3,"You absolutely do not need classes for this. Just put them into a csv, read in with csv.reader or csv.dictreader and do your math with functions

People might recommend pandas but that's serious overkill"
3,"What is the type of the argument you are passing to librosa.display.waveplot?  (hint, look at my previous comment if you're stuck)"
3,What didn't work?
3,Limit of 1 gb per string. https://www.postgresql.org/docs/9.1/static/datatype-character.html
3,An O (1) lookup (dictionary) rather than an O (n) lookup
3,What interests You? What do you do for work? What would you like to study in your free time?
3,Hint. Str.count has to traverse the entire string
3,"Postgres can shard. Having a fixed schema and firm relationships is invaluable. Mongo is overblown and deserves a small niche

Redis seems superior to mongo too"
3,"Postgres has awesome full text search. Use a relational database, not mongo."
3,Doing stuff that interests you
3,No just work on a project. Those algorithms will come up but they'll have meaning when it matters to you. You'll think about them when you wake up in the morning
3,Y is a filename
3,Pick a project and finish it
3,Can't you just pass arrays in the way you used to do the fit? Element by element is very wrong.
3,"That's just a generic way of saying check something and maybe do something.  I'd use dict.items though, and not just iterate over the keys as they did"
3,"A task is one element of work. A chunk puts multiple items into one element of work.

Put 4 apples in a box and give everyone two boxes. Great, now everyone has to whittle 8 weird apple sculptures for you."
3,Recursion is one way. Can you solve it iteratively? This will almost always be superior in python
3,"Start with the smallest possible thing you can do to realize a little useful piece of this. Then iterate adding the next small piece.

What do you think is a good small step?"
3,"No. If you want to read audio python has to capture the bytes as they come in. 20kHz you need to sample at 40kHz (nyquist) which is once every 25 *microseconds*. And if you want to be playing it back? That's another operation just as often. And you want to blend tracks? Also be listening for midi signals? It adds up. Python is slow but most importantly is not the best at doing things concurrently with low latency.  Threads have a lot of latency and Async  (the right way) is fairly new and maybe hasn't fully reached audio, I don't know. Just saying it won't be without challenges.

Check out supercollider and I think python interfaces with it."
3,React native seems pretty cool! I've only touched on react and only did a react native hello world
3,Json is probably better suited
3,Performance will be an issue with real time audio processing. Start with sequencing and learn the techniques of performance after you have that solid.
3,This is perhaps worse.
3,"You just pick it up. A script needs to be executable and in your path, pretty simple and it'll become basic knowledge to you after coming across it once more"
3,You can also just add a boilerplate setup.py and pip install your own library. Then you can `pip install -e .` and continue to build your shared library in the same place you keep all your other projects.
3,Flask has sqalchemy which is extreemly similar to django. It just isnt bundled with flask
3,"It's just a Boolean array and nothing more. The expression `arr > 128` gets evaluated in a vectorized way through broadcasting, just like `arr + 1`"
3,"    terrain = np.arange(8).reshape(2,4)  # 2 x 4 array
    color = np.random.randint(0,255, size=(2,4,3))  # 2 x 4 x 3 array of rgb

    color_is_red = color[:,:,1] > 128  # 2x4 array of bools
    terrain[color_is_red] = 88  # use array of bools to index terrain (same shape!)
    color[color_is_red] = np.array(255,0,0)  # use braodcasting to select rgb value where ""is_red == True""

Indexing with bools just uses numpy.where under the hood and is more idiomatic.

"
3,"What actually are you trying to do?  If you run a reducing vectorized operation (like sum or max) over an NxM array you can get an N or M length array (depending on the axis argument).  flatten doesn't reduce the number of elements though, just reshapes them, so are you wanting a one dimensional array of length `N*M`?"
3,"Np.where returns indices and since those indices come from a different array (slicing gives you a new view on an array) those indices don't match up with what you're trying to index in the original array. Try

    view = arr [:,:,1:2]
    view [view > -1] = 88"
3,Did you read the docs? I dunno what package this is
3,"Uh, there are no sub arrays. Do you have one multidimensional array or an ""array"" of python objects that are arrays? Anyways, don't mess with vectorize because it's just a for loop and slow as hell. Numba.vectorize is sweet."
3,Yes because the nn only learns it's weights through training. Definitely not just one example
3,"Doesn't seem like that functionality is supported. I wrote https://github.com/Permafacture/pygmaps-ng or try some other lib

Edit: example http://elliothallmark.com/wp-content/uploads/2014/05/recursion.html"
3,"I'd phrase this as they can shoot for an entry level position where they can learn and advance. Yeah you won't get a 100k+ position with two years, but 55-70k is reasonable."
3,"You aren't wasting time learning web stuff, but start using sklearn really soon if that's what you're into. Python (and the job field) is not at all web centric "
3,Youll learn them at the same time. Start simple. Just use bootstrap and learn more specific css as you need.
3,"The division is just people stuck in 2 because of large code bases, and everyone writing modern python. Use 3 and don't mind fogies like me that forget the parentheses around the print argument while giving advice "
3,That code you posted doesn't seem  relevant. One training example is not enough. Your net didn't learn anything. 5 examples is not near enough. You can generate truth for free; use 5000 examples. Or more!
3,"
>I have a few more questions:
1- If I only want to go through one training set, instead of 10 times how should I do it? Or if I want to use all data and not split it into training and testing how should I do it? 

Why?

Kfolds will give you a better idea of the fitness of your model. If you don't test your fit, you have no idea how good it is. You should fit, and evaluate the goodness of the fit with test data

> 2-  I have a matrix B with columns of movieID, and moviegenre. qi is a matirx with #trainingdata X20. For each column of qi I have to sort the movies in descending orders and then find their genres. How can I do it? 

Numpy.sort with axis=1? Dunno about genre because I don't know this library.

"
3,I dunno what fodRequest is but in the requests library you just use a dict.
3,If you click on the window?
3,"Please put four spaces before each line of code and a new line between regular text and code.

    def it_should (look):
        print (""like this"")"
3,What happens if you don't put the dpi in save?
3,No idea but you should probably post a simple example that shows what you're trying to do and would execute if fixed.
3,What have you tried? Documentation looks straight forward.
3,"Uh, can you use scipy.optimize? Otherwise this sounds like a machine learning problem with not enough data to train on."
3,Vagrant is pretty helpful in my opinion if you can get the same basebox as the delpoyment.
3,Pick one variable. Can you calculate the standard deviation for it?
3,Generate all of wolfram's cellular automata as pngs or make interesting text with a Markov generator and nltk
3,I assume you have full access to the data and can do anything. I'd suggest you start a simple exploration and start to discover the limitations as you go. I assure you python is extremely powerful and will be an exceptionally helpful tool if you become competent with it.
3,I like how you haven't suggested an alternative method still.
3,Can you elaborate on what a secure randim number is?
3,What are you trying to do? What api accepts a random hash for authorization? Usually https handles the plain text password encryption
3,Whatever http lib your using probably has a base class for all it's http related exceptions
3,"Python is pretty slow, so aim for readability and good, refactorable architecture.  If you need performance, that's quite possible but a different paradigm, so worry about it when you need it (network async stuff or heavy numerical computation).  For instance, your two examples have nothing to do with performance in Python, just readability and refactorability."
3,"Html and javascript is a very solid gui framework. If you want just python, just because a library hasn't had a recent commit doesn't mean it's incomplete. You could do the same thing easily with networkx to manage your flow too."
3,"No. You dont need to implement this right before release. Have an expectation of the behaviour you want. What exact exception would an invalid url cause? Specify it, handle it. You can print a pretty message too if you want, but you don't want to print ""invalid url"" when you got an unrelated IndexError in reality. Printing a message in all cases and returning None when the application expects a value is no good."
3,It's weird to me to handle the number of workers like that. But look at the send messages function and see more. They probably have a reason.
3,"Just except a specific exception and handle it there. With your decorator, any function could return None instead of raising an exception so to handle it you need to check if the value is none. You haven't saved having to handle the exception properly, just made it more difficult by throwing away the exception and where/when it occured."
3,"Insert returns none because a function should be pure (No side effects) or purely mutation. Simple functions should not mutate an object and return it, because that gets confusing. It's a good philosophy but not necessarily followed outside python built ins"
3,Dump both to sorted csvs and hash them? Assuming the fks stay the same too
3,If you have something to iterate over  (a list of dictionaries or xml elements or whatever) you can give sort or sorted a key function that determines what part of that structure it sorts on
3,you called popen to do a system call. and it's not running good.  What command does it call and what happens when you call that command outside of python from the command line?
3,When you updated subprocess?
3,"You said invalid string, now you say invalid syntax. Post the exact error and the two lines of code above that line **copied and pasted from your code**"
3,Try calling it from the command line
3,"Sort as a 1d array, then reshape it"
3,http://pyautogui.readthedocs.io/en/latest/screenshot.html
3,"There is no class name. Only an instance has a self, and has a self.name. What do you think the class name is in this example?"
3,"Multiple dispatch does that though, right?"
3,Bad bot
3,"Yes. Not dunder self, just self. What is your question? `__str__` takes only one arg, self, by the way."
3,So either *args or multiple dispatch? Doesn't seem like what this person is doing
3,Not if you don't call it. And you need to call it on an instance
3,"Arrow will work, but you have to calculate how long you want it to be"
3,Well i can't help further then. Good luck!
3,"Overloading is the wrong word. You overwrote a magic method, which Is an instance method. Maybe you're looking for inheritance? I have no idea what you're expecting. A function that is not called does not return."
3,You need a byte string and just iterate over it. I don't know what to do while iterating though because I don't know the format
3,"Grasshopper, what is self.name if there is no self?"
3,"Don't use excel. If all at once, use the ThreadExecutor from concurrent.futures but throttle it. Print and save your progress because you'll want to see how slow it's progressing and also be able to resume.  It would be much better to calculate the result yourself. What is it?"
3,"All the scholarly papers ""about"" python are going to be doing some specific science thing and they happened to be using python. 

You could use python to figure out how much python is used in a specific field and then research what python things are responsible for that. Dumb example: python is used increasingly in machine learning and it's sckit-learn, theano and then tensorflow causing it."
3,Yeah just print(Allen ('dill'))
3,So just post the ones as you need them. You're not saving time by pregenerating the list. The post will take 1000x longer than calculating the values. Hope you dont eventually want billions of answers. Do your post with requests library in python.
3,Translating between arrays and lists is never the right answer. YMMV
3,"    arr = np.ones (max-min, whatever)
    arr *= np.range (min, max)[:, None]

Untested But you get the idea"
3,"Well, it depends on what the ""Do something"" is, but python will handle it better than excel.

You gotta say what you're doing if you want help."
3,"That's orders of magnitude more rows than excel can handle.  You should do all of the processing in python.  but even then, I think what you're asking is going to run for a loooong time.

Numpy is a library that gives us C (and fortran) arrays, and functions for operating on them hundreds of time faster than in python.  But the functions are very limited.  Numba gives us the ability to write much more complicated functions that do the same thing.  It uses a JIT to compile native code, which is really fast.  But you don't have dictionaries or strings or most of python to work with.

Cython is similar in that it lets you write compiled code.  It's much more flexible (you can use dictionaries at a penalty and C char arrays for stings) but doesn't produce code that is as optimized.  And numba can be compiled for the GPU.

But think of this, if your generating of the values takes too damn long, how the hell would excel or something do anything with those values before the end of society?  Edit: compiled code is the only thing that stands a chance."
3,"Pretty sure that isn't what they're asking but if it were, putting the functions in the list and putting the function list in the zip is still preferable."
3,Do you actually need hex strings? That formatting is taking a lot of time. And yielding. Numba would kill at this if you're just processing native c values. Whatever processing you do after this is going to take forever
3,"    for i, char in enumerate (mystring):
        print( i, char)

You don't need enumerate if you don't want the index. Just showing you can iterate over a string"
3,good bot
3,"why not just

    blah=[ (fun1, list1), ...]
    for fun, lst in blah:
        fun (lst)"
3,https://youtu.be/o9pEzgHorH0 is a good video
3,If you have a data structure you can sort it. I don't know what data structure you have though
3,What do you mean process it? What would the result look like for that example?
3,"You can't. That doesn't make sense. The fact that you can't say what c.shape is shows you that.

I mean, you can pad one with nans, but how doing that could make any sense in terms of what your data means is on you. Seems unlikely "
3,A subset of numpy works in numba nopython mode (use that!). Mostly none of the axis keywords work. Pretty sure none of it works in the gpu though.  Btw first Google result is http://numba.pydata.org/numba-doc/dev/reference/numpysupported.html
3,"Make it all lowercase, replace all the spaces with \\x and put it in b'blah' and you have what the first person asked for. That's what python would print"
3,"Well, you're calling `drawString` with this encoder as the ""string"" you want to draw.  I'm not sure what you want to happen here.  If the encoder is something that makes sense to be a string, it will have a read or some other method that gives you the string."
3,"Start small and learn ""What is required"". Understand what training is and what features are in a road meets rubber kind of way."
3,Does the encoder have a read method that returns it's contents as a string?
3,"Html, css and javascript are an amazing ui stack. Flask can serve that on localhost. That's more work but a great option."
3,"Data is 98% of the battle. Are you willing to hand annotate 10,000 examples of you speaking in different environments with different intonation? That's a small dataset too.

Try the iris dataset with svm and random forest. Start with things that have features you can understand and are easily labeled. What sports team is going to win the championship? What Reddit post is going to be up/downvoted?"
3,Pretty elegant. And probably didn't take long
3,The display is where it's at. The weather and dimmer just set properties on themselves and the display does all the work
3,"https://stackoverflow.com/a/39917862

Helpful?"
3,"Are you sure you're supposed to call the functions inside the chain call? I'd assume you give it the raw, uncalled functions and it will call them"
3,"I'd love a real type system like Haskell, but am not too interested in type annotation. It's a great disciplined documentation habit though."
3,"Start with scikit-learn and use support vector machines or random forest first. The api is extremely similar and the concepts are the same but more graspable. 

What do you want your machine to learn?"
3,"A should be

    def fun ():
        """"""\
        Blah
        """""""
3,Don't do that. Make a class
3,That's simple string manipulation. Python does a lot for you but expecting it to solve every little thing without any effort is unreasonable
3,Strings being Unicode is the big deal. Many things like range and zip becoming generators is big but rare to really be bit by.
3,Anything. Tkinter is built in and people like qt5 a lot
3,Your pasted content includes the memory addresses out of a hex editor. You can paste it as a literal byte string one could paste into a python interpreter. 
3,"To multiply every element by every other element in 2 1D arrays via broadcasting,  you add dimensions. For N and M length arrays, this would give an NxMarray:

    arr[:, None]* arr2 [None, :] 

"
3,Not what they asked for. If you need us to hand format data then you won't get good (or any) answers
3,Awesome! Thanks! I should have checked the issue list
3,"Well, that's what you've got to figure out. You got the path wrong or the automatic creation didn't happen, or something"
3,Great post!
3,"3/4 hours a day won't work. Do 2-4 hour chunks. Otherwise, your on a great track! Jump straight to automate the boring stuff. Your title uses the same words! OOP is over rated in general but especially for what you're doing."
3,"I'd think your options are django/flask/javascript/html or data wrangling, ie helping with transforming spreadsheets, gathering data from apis, etc. For the later I'd learn about setup.py and console_scripts, pandas, openpyxl, requests and bs4. Go to meetups for programming and startups. Get a membership at a co-working space and work on your portfolio there."
3,"I didn't see great python docs. Try help (img) in the repl. Dig into it. Or start with pillow, read the docs, get used to it and then come back to cv2 which is probably extremely similar"
3,Pretty sure you'll have to write those yourself. What's the application?
3,They have json and don't know it
3,You have to see everything multiple times. Make every possible mistake multiple times. But I wouldn't repeat the same course twice. Hear it from someone new. Automate the boring stuff is good
3,Never used dash. React is a whole thing. I wouldn't mess with it unless I was committing to it
3,You will never make any progress in one hour per day. It takes that long to orient yourself and start to dig in. No time to answer any real questions. Do 4 hour chunks if possible
3,"The agile process. Start with the smallest possible idea. Do it. Get feed back. Fail early and often. Iterate. Just think, what is the smallest improvement I can make for the most improved functionality. "
3,"Just write a file. Then try a named temporary file. But why use a pickle if you don't care about the python objectness of it? 

You could write a pickle or a delimited string to a file object

https://docs.python.org/3/library/tempfile.html"
3,"Don't make a website. Just write a function that does a piece of what you want using hard coded variables. Then take one user input from the `input ` function. Make the function do more. Just keep iterating. Build a website (if you need to) out of it once you have a good amount of the core logic already running and giving you feedback.

No one can estimate the time. I struggle to get within 50% just for basic features at work. Just start."
3,Error says your json file is missing 
3,Not if you keep making new soup objects. I wonder if you're trying to load something created by javascript and fetching it with requests so the javascript isn't executed. 
3,"It says the work well together. The dev server in flask or django or anything is not meant for production. Use nginx or apache. That's all.

But are you really going to develop multiple apps? I've always just needed one.  

Edot: rereading I don't know anything about using both on one page. That section you posted is pretty irrelevant. I'm sure you can use whatever mix of the two you want though. I have no experience with dash though. You might use plotly or something if you just want graphs in a flask app."
3,"Numpy arrays are just one long stream of binary data and some metadata to tell the shape and datatype. If you write out a byte array, you can just have numpy create an array from that buffer. Ints would be easy but I dunno how you'd floats. There's jumeric or whatever, and numeric was the precursor to numpy, so it might help with writing a buffer of c datatypes.

I'd send it as a string (1D) and use fromiter or frombuffer then tell it the shape. You could use a socket or a named temporary file (exists only in memory)."
3,Multiprocessing? Aren't you trying to go between cPython and jython? I don't think that will work since they are completely different programs that just have a very similar user interface.
3,Looks like json. Python can load that right up
3,Sooo much overhead
3,"Not gpu but much more practical, use an Async based db driver like https://github.com/MagicStack/asyncpg"
3,"Reshape your 10x1 array (arr.shape=(10,)) or index it (arr[:,0])

Reshaping would technically be faster but takes more lines"
3,It's called if/elif.
3,"You can in fact write a function that encapsulates all of the repeated code. It has been given to you already. Read the first post again, and try it!"
3,"Numpy has built in methods for writing arrays to files. Converting to lists, then strings, then to lists and finally back to arrays will be really slow.

Just write the arrays directly to files and have check_output receive the names of those files."
3,"You're pretty hilarious. I have no idea why you just wrote several paragraphs about None/Nan. Like, who was that written to and why? That's just rhetorical, no need to answer.

Instead of making assumptions about you and giving you advice you didn't ask for or care about, I'll let you get back to all the other things you have going on. Good luck!"
3,"It's actually very common to have nan values in series data. Also, slicing returns a list even if you're out of bounds. It doesn't raise an index error. 

Edit: and zip_longest is another example of not needing to know your list lengths. And if it were made for iterables that didn't start at zero, but at some arbitrary point, then I could see it giving Nones before the start too."
3,"People can answer however they want. I was just including some background since you asked. I'm not looking for an implementation. To clarify I meant I'm turning

    for x in range (start, stop):
        y = object.get_item(x)
        result.append (dostuff(y))

Into

    ys = object.get_range(start, stop)
    result = map(dostuff, ys)

Where `get_item` was checking if x was within bounds every access, and getting the value from self if it was in bounds.  The bounds are propery acessess in `get_item`. X might be out of range if object doesn't have data mapped there. The calling function doesn't control that, and needs to process None if that's what is there. I could move the None filling to the calling function but then every calling function needs to do that, and it would be the same logic anyways.

Edit: didn't mean to imply I didn't like your answer. 

Edit 2: I responded to someone else about performance but taking 10% of the runtime down to .5% or .1% doesn't make much difference, I understand. "
3,"Cool! I took this on as a performance improvement.  Yours would be a speed up over the base case, but slower than mine in the typical use case (yours is #2):

        In [2]: mylist = range(100)

        In [3]: start = -2

        In [4]: stop = 102

        In [7]: %%timeit
           ...: for x in none_slice1(mylist, start, stop):
           ...:     a = x
           ...: 
        100000 loops, best of 3: 4.22 µs per loop

        In [8]: %%timeit
           ...: for x in none_slice2(mylist, start, stop):
           ...:     a = x
           ...: 
        100000 loops, best of 3: 17.1 µs per loop

edited for better use case"
3,"The api expects none if it indexes out of range, and I'm making a slice version for faster range of values access. Calculating start and stop and if'ing every access is the bottleneck."
3,"No. The result is None if the index is less than 0 or greater than `len(mylist)`. Where there would be an index error

Edited for index "
3,"I agree it depends. We might have different tolerances.

If their so varied that `from consts import...` is two lines and consts.X is used every third line, and they are the only ALL_CAPS variables, then I agree.

As a reader of this library, it's third party to me, and I don't want to have to use ctags to understand it."
3,"I can't steal your code for work.  Here's my solution.  Use with any license you want.

https://pastebin.com/xbAqdCzv

Edit: python 2 :("
3,Not what I was saying. 
3,Star imports still make code harder to read/understand. 
3,It goes to hackernoon though
3,What do you get from the manage.py shell when importing that?
3,"It's exactly as you posted. The only issue with your code is it should use sys.argv. otherwise, what's the problem?

Edit: also importing * is bad style"
3,Why does the url say medium.com? I almost downvoted just because I see so much zero effort python articles there
3,Pandas is built on numpy and presumably does some optimizations around datetime objects and strings. Mostly it's about having a bunch of columns making it more database like. Text doesn't belong in numpy mostly. Lists or pandas... depends on your use case
3,That will break if an item is in your list more than once. Also it's computationally inefficient to search the whole list every iteration. You could use enumerate if you really want the index
3,"The else clause only runs if the try passes. Your code could fail at any point in the try and you don't know where. Maybe you appended to the list already and then you mistyped and have an attribute error. I'm just describing good practices. 

Your actual mistake is that your lists are different lengths because sometimes you dont append because of the exception, so index_ isn't the same thing for both of them."
3,Just use an editor. Notebooks are for presentations and stuff
3,"That's way too much to put in the try. Put just the line that might fail in there and the rest in an else after  the except.

And except a specific exception? If it breaks, you should  have expected that exact error."
3,"    for item, nextitem in zip (items, items [1:]:"
3,"Your question is answered by others, but in the iPython shell you can do `something??` to see the code of something. Doesn't work for builtins implemented in C though"
3,"No it's just one vote, and a big one. I'd say scientific computing also. Not sure if sub or super set of those."
3,"What advantages does it offer over what? Converting the image to a list of lists of lists of python objects and then doing nested for loops to process it? The image is (or is easily) represented internally as a L×W×3 C array of unsigned 8 bit integers. Numpy can just wrap that. It would let you clunkily do operations on the data without for loops or iteration.  Any less clunky tool like scikit-image, cython, numba, etc would take a numpy array because native code operates on arrays, not python objects."
3,You should probably just use typescript or some other python-esque javascript spinoff. Transpiling is a mess and you give up 95% of what's good about python anyways
3,https://stackoverflow.com/a/37842328
3,"You realize java is an interpreted language, right?"
3,Disk io is the slow part. Read it into an array and use numpy
3,Why do you want a pandas dataframe? That sounds unnecessarily complicated
3,"Have you had it work on other computers?  If you have, can you tell me what matplotlib and python version you have installed.  Did you run the script in ipython shell or just as a script?

I don't get how it is supposed to work.  ginput is blocking, and show is blocking.  How are they supposed to act simultaneously?  Or does ginput show the plot and close it on completion?"
3,This is the correct method
3,You can change how the operand works by defining those magic methods on your own classes
3,The lstrip (left strip) method of the string 
3,"Notepad++

pycharm is a full ide.

I prefer vim but it has a high learning curve.

Also, get the ipython repl (Not jupyter/ipython notebook)"
3,"Not a pandas user but can't you select all 3 columns at once? Just put all three labels in the brackets, no?"
3,My code does almost exactly that. Replace arr with an x by y by 2 array instead of x by y like I made it and then fill matarr slightly differently
3,"I don't know what you mean by calculate a 2x2 matrix at each point on the grid.  Does this help?

    In [1]: import numpy as np

    In [2]: arr = np.array([[1,2],[10,20]])

    In [3]: matarr = np.zeros((arr.shape[0]*2, arr.shape[1]*2))

    In [4]: matarr[0::2, 0::2] = arr

    In [5]: matarr[1::2, 1::2] = -arr

    In [6]: matarr
    Out[6]: 
    array([[  1.,   0.,   2.,   0.],
           [  0.,  -1.,   0.,  -2.],
           [ 10.,   0.,  20.,   0.],
           [  0., -10.,   0., -20.]])

Edit: this is actually probably more what you wanted:

    In [8]: matarr = np.zeros((arr.shape[0], arr.shape[1],2,2))

    In [9]: matarr[...,0,0] = arr  # use elipses to say ""all of previous dimensions

    In [10]: matarr[:,:,1,1] = -arr  # use : to accomplish same thing

    In [11]: matarr
    Out[11]: 
    array([[[[  1.,   0.],
             [  0.,  -1.]],

            [[  2.,   0.],
             [  0.,  -2.]]],


           [[[ 10.,   0.],
             [  0., -10.]],

            [[ 20.,   0.],
             [  0., -20.]]]])

"
3,"I'm unclear if they have dynamic pages too. I agree that if you just have one page that doesn't need templating and many that do, use the same framework. But if someone is asking a question that can be solved in 1 line of bash or an nginx config then I'll let them know."
3,Windows is a pain for python. They invented anaconda mostly because of windows
3,"Modern web frameworks don't serve non dynamic html. Nginx can strip the .html extension. You don't need a ""modern python web framework"" to strip html extensions.

Removing python from the equation would serve the files with less latency because you just have highly optimized c code doing all the work.

If it isn't dynamically generated, it's static content by definition."
3,"You can, but you'll have nginx or some web server anyway, so why bother with extra software and extra steps if they are redundant? Is any of your content dynamic?"
3,"An html file that isn't generated by python is static content. It's not any different than css or JavaScript. If nothing on your site is dynamic you don't need python at all. Some people generate all their static content with python though, but they let nginx or whatever serve it"
3,"Seems like you're engaging a lock somehow. Accessing value? Can't you just give your workers a start index and end index? I don't see why you need some global array of pointers. You have 4 workers, figure out four pairs of start and stop indices and pass them into the workers"
3,"Yes, just like if you needed two variables you'd name them different or one would overwrite the other.  Also, completely unrelated.  Maybe you understand the different between a class and an instance?"
3,"You can't share python objects.  You can memory map numpy arrays, because they are C arrays.  But if you are using numpy at all efficiently, you'll find multiprocessing if almost always useless.  Better to write your algorithm with numba.vectorize (which is multi core automatically) which is 200x faster.  I have, in my many years, found one occasion to memory map numpy arrays with processes.  It was an extremely esoteric circumstance communicating between numpy physics and opengl buffers. 

edit: and if you do need multi-node (not core) numpy, dask is the way to go."
3,"A table is a map, what python calls a dictionary. It has O (1) lookups and maps keys to values"
3,It's best to let your webserver handle that
3,Zero benefit for reassigning
3,Good bot
3,Why map instead of a comprehension?
3,"Make some stuff on your own, things that interest you, and do so with git. Keep it on github or wherever. Seek out internships and apply! Maybe your school has resources and go to meetups. Be social and vocal about what you want"
3,You don't need it unless you write a class that needs it. You'll know when that's the case
3,Working on a similar game sounds good. Use that tutorial and lots of Google searches to answer your own questions. Learning programming is mostly about breaking down your assumptions (about that which you don't understand) and figuring out why it is the way it actually is.
3,So make points a database field in the score class. Then call calcScore or whatever in your view and add both the ticker string and the points value to the score object before committing it
3,"I don't want to be rude or discourage you, but you seem to not have any idea about what you're doing and you're just moving pieces of code around without any real expectation about what the result will be. You should focus on python outside of a web framework until you get the hang of it. Currently, you can't print and see what you're doing because of the web framework so it's easier to learn outside of one.

For now, why are you putting the ticker in the database? Are you ever going to retrieve it? Do you really want to keep the scraper results in there too? Does your web scraper really just give you the results for one ticker?"
3,"The class is necessary for the orm. So keep it if you're using a database. One problem is if the user input causes a web scraping process to happen, it might make your user's request take too long. Ignoring that and assuming you want the database, just take the scoring function out of that class. Call it in your view."
3,"You should use Async in py3 but in py 2.7 the thread pool works okay.
 http://elliothallmark.com/2016/12/23/requests-with-concurrent-futures-in-python-2-7/"
3,"scoreCalculate runs only once, when the score model is first parsed by the interpreter, and it gets the column object, not a value. So you set points as a class level attribute that never changes.

I don't know what you want to happen, but I reckon you ought to be calling scoreCalculate in your view or something.

What value does that function take? And what is it supposed to do and when?"
3,You install packages from the os command prompt. Cmd.exe
3,"You are comparing strings, not datetime objects. 1xxxx is less than 2xxxx. "
4,"A recent question got me thinking about using an algorithm called a convolution (typically used in computer vision applications) as the update function for the game state in Conway's Game of Life. So I wrote up a little program to test it out and it works great. Check out  the gist [here](https://gist.github.com/mikelane/89c580b7764f04cf73b32bf4e94fd3a3) and run it for yourself if you'd like you'll need numpy and click:

    pip3 install -U numpy click

The whole point of this was to see if I could make the update function as simple as possible. The typical implementation that I've seen is like [this one from Geeks for Geeks](https://www.geeksforgeeks.org/conways-game-life-python-implementation/):

    def update(frameNum, img, grid, N): 
      
        # copy grid since we require 8 neighbors  
        # for calculation and we go line by line  
        newGrid = grid.copy() 
        for i in range(N): 
            for j in range(N): 
      
                # compute 8-neighbor sum 
                # using toroidal boundary conditions - x and y wrap around  
                # so that the simulation takes place on a toroidal surface. 
                total = int((grid[i, (j-1)%N] + grid[i, (j+1)%N] + 
                             grid[(i-1)%N, j] + grid[(i+1)%N, j] + 
                             grid[(i-1)%N, (j-1)%N] + grid[(i-1)%N, (j+1)%N] + 
                             grid[(i+1)%N, (j-1)%N] + grid[(i+1)%N, (j+1)%N])/255) 
      
                # apply Conway's rules 
                if grid[i, j]  == ON: 
                    if (total < 2) or (total > 3): 
                        newGrid[i, j] = OFF 
                else: 
                    if total == 3: 
                        newGrid[i, j] = ON 
      
        # update data 
        img.set_data(newGrid) 
        grid[:] = newGrid[:] 
        return img, 

Okay, that's pretty straight forward, right? You need to figure out the sum of the 8 cells that surround a given cell and then if the given cell is living (or ON in this case) and you have 2 or 3 living cells surrounding it, then it stays on, otherwise it turns off and if the cell is OFF, then you only turn it on if you have exactly 3 living cells surrounding that cell. But gah, that's seriously ugly, isn't it? I mean, is that the best we can hope for?

Definitely not. Enter the convolution. The ELI5 is that a convolution takes a kernel (a small matrix of values) and a matrix of numbers and for each cell in the matrix, we multiply each of the cells in the matrix with a specific cell in the kernel and then take the sum of all those multiplication values. So if you had a kernel that was a 3x3 matrix with the value of 1/9, then the single resulting value of the operation would be the average value of the block of 9 cells in the original matrix. Right? Because you're dividing each cell in the block of 9 by 9 and then adding all those values together which is the same as taking all the values and adding them together and then dividing by 9. So what if your kernel is 3x3 and filled with the value 1? That would mean that you'd take each cell in the sub-matrix and multiply it by 1 and then add it together. Not following? Check out [this page](https://towardsdatascience.com/applied-deep-learning-part-4-convolutional-neural-networks-584bc134c1e2) that has some animations:

The great part is that the convolution uses the kernel as a kind of sliding window that does exactly what the Geeks for Geeks code does. Except it does it in a single line of python code and the code for doing the sliding window and the adding and multiplying and the handling of the edge cases is all done in compiled C under the hood. So it's not only easier to write, it's much faster, too. That G4G update above gets shortened down to this in my code:

    kernel = np.array([[1, 1, 1], [1, 0, 1], [1, 1, 1]], dtype=np.uint8)
    convolved_board = convolve(board, kernel, mode=""wrap"")
    next_board = (((board == 1) & (convolved_board > 1) & (convolved_board < 4)) | ((board == 0) & (convolved_board == 3))).astype(np.uint8)
    #
    

That's it! Three lines of code (that is, admittedly, difficult to understand for those who are new to numpy). The short explanation is that the board and the kernel are both numpy arrays. The result of the convolve is a numpy array where each cell has a value that is equal to the number of living cells around that cell. Once I have that, I can use a bit of numpy magic to determine if that cell should be turned on or off. Each of the comparison operations returns a numpy array of boolean values and when you use the python bitwise operators on numpy arrays with booleans, the result is another numpy array of booleans. Since I followed the game of life rules with that logic, (look at the code, you'll see it: if on and the count of living cells is 2 or 3, remain on, otherwise off, or if off and the count of surrounding cells is 3, turn on, otherwise remain off), the resulting board is a numpy array of booleans where True is on and False is off. I can turn this back into the ints (which, I suppose I could have just left it at bools and changed the print function, ah well) and that's my updated state. (I used ""next\_board"" as a naïve check to see if the next board was exactly the same as the previous board. If so, I exit.)

Anyhow, I thought it was a neat exercise and I figured that maybe some folks might learn something if I shared it."
4,"Using a leading underscore is merely a convention meant to convey to the user of the class that the field or method is not to be used directly. Nothing prevents the user from doing so, however. There is also automatic name mangling when you use a double underscore at the start of the method or field name. When you do that the name will be appended with the name of the class surrounded by underscores when the instance is created. This makes it inconvenient to access the item, not impossible, so it does not reach the level of private, either. 

One other thing a leading underscore does is to prevent a module from adding the class, variable, or function to the export list, `__all__` in python, automatically. So when you import a module in the normal way, you wouldn't have access to these values. But this isn't specific to OOP, so it might not be relevant information."
4,"That's not how this works. Hashing functions are called one-way functions. That is to say that the hash can be computed quickly and easily whereas the reverse will take more time than there is left in the universe to compute (assuming the hash is any good, that is)."
4,"Yeah, this technique gets a hard thumbs down from me, too."
4,"So each python project will have its own set of requirements. Some project might be using Django, some other project might be using Flask. One project may be using Tensorflow 1, another may be using Tensorflow 2. Some other poor sap is forced to use python version 2.7.6 while some lucky dev gets to use 3.7.4. As a developer, you need to make sure that when you're working on a given project, that you're using all the same required versions for the libraries and for the python interpreter itself as the project requires.

This is why we use virtual environments. There are other, more cumbersome ways of doing this (virtual machines, vagrant, docker, hell even a unique computer per project), but virtual environments have all of those beat for pure simplicity's sake."
4,"Well, first, I'd figure out the equation of the line in 3D (google that). Then I'd figure out the velocity of a thing that goes from the start point to the end point. Then I'd figure out how far that thing goes in the required amount of time. Then I'd use the equations of the line to determine what point is this distance away from the start point."
4,"Probably you should scrap it and start all over. Step 1, figure out how to change the input into a list of games, then figure out how to change the game strings into useable data. Then do your other work. 

Write 5 or 10 lines of code **MAX** and test it with the input you'll be given. Make sure it does what you think it does, and if it doesn't, then _fix it_ so that it does. Only then do you write more code."
4,"I think you're going wrong right here:

      (winner,loser,sets)=data.split(':')

If you have data like this:

    winner1:loser1:2-6,6-7.7-6,6-3,6-1
    winner2:loser2:6-7,2-6,6-3,6,1,7-6

Then the result of data.split(':') is

    ['winner1', 'loser1', `2-6,6-7.7-6,6-3,6-1\nwinner2', 'loser2', '6-7,2-6,6-3,6,1,7-6\n']

And so winner, loser, sets are this:

    winner = 'winner1'
    loser = 'loser1'
    sets = ['2-6,6-7.7-6,6-3,6-1\nwinner2', 'loser2', '6-7,2-6,6-3,6,1,7-6\n']

Does this come as a surprise to you? It shouldn't. If it does, it seems to me that you're probably writing way too much code without testing it."
4,"If you are trying to browse the internet, PyCharm is an absolutely awful choice of app."
4,"Use brew to uninstall it. Then do

    $ pyenv install -v 2.7.16

and

    $ pyenv install -v 3.7.4

and then

    $ pyenv global 2.7.16 3.7.4"
4,"You will be repeating the array you start with. So if your array is shape (3,) whereas mine is shape (1,), you'll end up with 3 times as many elements, right?"
4,Right. And I'm telling you that the repetetiton is the entire array. And your array is larger to begin with.
4,Goddamn it. Always unless I'm paying very close attention.
4,"Well, not exactly, because I'm starting with a different value."
4,It makes a 3D matrix (a tensor) with 4 rows of 4 columns and 1 deep
4,"Fluent python is good. 

So coming from Java land, expect things to be less verbose. There is no concept of public, private, or protected. We are all adults here, don't screw with class data, use the class api instead. You can put many classes in a single file. In fact, it's quite common to put all the classes that being together in one file. What else? Don't use `for i in len(range(my_list)):`. Use `for item in my_list` or `for index, item in enumerate(my_list):`

When making a class, do implement operator overloading (look into dunder methods). Do not write getters and setters. Remember, there is no private data. If you need a getter because there is some work to do or validation or something, use `@property`. 

There's lots more. I think the thing I hate most about java is the lack of ability to have common operators. Python kills it in this department."
4,"Format your code, please. Check out the sidebar for how."
4,Whoops. I forget that I use wiki wand.
4,"    In [1]: import numpy as np
    
    In [2]: a = np.array([1])
    
    In [3]: a
    Out[3]: array([1])
    
    In [4]: a.shape
    Out[4]: (1,)
    
    In [5]: np.tile?
    
    In [6]: np.tile(a, 2)
    Out[6]: array([1, 1])
    
    In [7]: np.tile(a, 3)
    Out[7]: array([1, 1, 1])
    
    In [8]: np.tile(a, (1, 1))
    Out[8]: array([[1]])
    
    In [9]: np.tile(a, (2, 1))
    Out[9]:
    array([[1],
           [1]])
    
    In [10]: np.tile(a, (3, 1))
    Out[10]:
    array([[1],
           [1],
           [1]])
    
    In [11]: np.tile(a, (1, 2))
    Out[11]: array([[1, 1]])
    
    In [12]: np.tile(a, (1, 3))
    Out[12]: array([[1, 1, 1]])
    
    In [13]: np.tile(a, (1, 3))
    Out[13]: array([[1, 1, 1]])
    
    In [14]: np.tile(a, (2, 2))
    Out[14]:
    array([[1, 1],
           [1, 1]])
    
    In [15]: np.tile(a, (2, 3))
    Out[15]:
    array([[1, 1, 1],
           [1, 1, 1]])
    
    In [16]: np.tile(a, (2, 4))
    Out[16]:
    array([[1, 1, 1, 1],
           [1, 1, 1, 1]])
    
    In [17]: np.tile(a, (3, 4))
    Out[17]:
    array([[1, 1, 1, 1],
           [1, 1, 1, 1],
           [1, 1, 1, 1]])
    
    In [18]: np.tile(a, (4, 4))
    Out[18]:
    array([[1, 1, 1, 1],
           [1, 1, 1, 1],
           [1, 1, 1, 1],
           [1, 1, 1, 1]])
    
    In [19]: np.tile(a, (4, 4, 1))
    Out[19]:
    array([[[1],
            [1],
            [1],
            [1]],
    
           [[1],
            [1],
            [1],
            [1]],
    
           [[1],
            [1],
            [1],
            [1]],
    
           [[1],
            [1],
            [1],
            [1]]])"
4,[https://www.wikiwand.com/en/History\_of\_Python#/Version\_3](https://www.wikiwand.com/en/History_of_Python#/Version_3)
4,Go for it
4,"They are expressions in python, yes."
4,"If an install script calls python whatever.py and if whatever.py is python2 only, then the install will fail. Since python 2 is still the default on macs, there are still plenty of install scripts that require it. So this is a bad idea."
4,Wake us when there are hundreds of millions or billions and stuff is just taking too long. That's when you ought to worry about little optimization details like this.
4,"You don't want to do this, at least not globally. There are still scripts (install scripts and such) that require python 2. But there is a way to get this using virtualenv (or pipenv or poetry or whatever other manager you want). If you make a virtualenv for a given project and activate that virtualenv, then python will give you the specific version of python for that project."
4,"You have 150 cells? That's it? Not 150 cells in 300,000 documents? 

If you have 150 cells, you have no need to concern yourself about your code's efficiency (unless you're doing something silly, of course)."
4,"OP this is bad advice, from the [numpy.matrix documentation](https://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.html):

> Note: It is no longer recommended to use this class, even for linear algebra. Instead use regular arrays. The class may be removed in the future."
4,">a = numpy.array(\[\[ True, False\],\[True,True\]\])  
b = numpy.multiply(a, a)  
print(b.view(numpy.uint8))  
c = a @ a  
print(c.view(numpy.uint8))

The @ operator is not multiplication, it is *matrix* multiplication, aka matmul in numpy:

    In [66]: a = np.array([[ True, False],[True,True]])
        ...: b = np.matmul(a, a)
        ...: print(b.view(np.uint8))
        ...: c = a @ a
        ...: print(c.view(np.uint8))
    [[1 0]
     [2 1]]
    [[1 0]
     [2 1]]"
4,"The `@` operator is a new addition to python, not Numpy. You can implement it yourself in your own classes by implementing [\_\_matmul\_\_](https://docs.python.org/3/library/operator.html#operator.matmul)."
4,Matrix multiplication is a recent addition to Numpy?
4,I linked you in a different comment.
4,"From the [Numpy docs](https://docs.scipy.org/doc/numpy/user/basics.types.html) :

> There are 5 basic numerical types representing booleans (bool), integers (int), unsigned integers (uint) floating point (float) and complex. Those with numbers in their name indicate the bitsize of the type (i.e. how many bits are needed to represent a single value in memory). Some types, such as int and intp, have differing bitsizes, dependent on the platforms (e.g. 32-bit vs. 64-bit machines). This should be taken into account when interfacing with low-level code (such as C or Fortran) where the raw memory is addressed.

Further…

> The fixed size of NumPy numeric types may cause overflow errors when a value requires more memory than available in the data type. For example, numpy.power evaluates 100 * 10 ** 8 correctly for 64-bit integers, but gives 1874919424 (incorrect) for a 32-bit integer."
4,"Then you've got lots of bugs to report! Any language that doesn't use big int like python does has a problem with overflowing integers. Most programmers know about the problems, why they happen, and how to work around them successfully more or less. But sometimes incorrect results happen because of that, so you ought to be filing bug reports to the various compiler makers. 

While you're at it, you should probably file bugs reports against the implementation of floating point values, too. Bugs in floating point values are very common, even in python. Each week I see many people asking why `0.1 + 0.2` equals `
0.3000000000000004`. I say this is because of an implementation detail, but you'd have to call it a bug, I guess. 

I'm being sarcastic, obviously. Your Numpy ""bug"" isn't a bug, it's the result of how Boolean operators work in Numpy. If you know how they work and their limitations, you can understand why sometimes things don't work as expected."
4,"In Numpy, the Boolean values get assigned to an unsigned 8-bit integer type which overflows at 256. This isn't a bug, it's an implementation detail."
4,"> This gives an error; saying index out of bounds. But if i run the last line ( print(employee_file.readlines()[4]) ) it will work and it will show the last person in the text file, but together they dont work - why is it that?

You open the file and create a file object which you name `employee_file`. The thing about file objects is that they have this internal position value that stores the last known position you were at when reading the file. When you first open a file, that position is 0, the beginning of the file. Whenever you do any reading of anything, the file position changes to the next thing until it gets to a special mark called End Of File (EOF). Just doing reads will always cause the file pointer to progress farther along, it will never automatically reset. So when you call that `readlines()` the first time, the position has progressed all the way to EOF and can't go any more. Then when you call `readlines()` again, Python thinks you are looking at an empty file and you get nothing in return. 

The right way to do this is to store the lines in a variable, close the file, and then process the data as required. Something like

```
with open('employee.txt') as employee_file:
    employee_data = list(employee_file)
print(len(employee_data))
print(employee_data[5])
```
Note that using `with` opens and closes the file for you, so you don't need to remember to call `employee_file.close()`

The second problem has the same cause as the first, so maybe it would be good practice for you to figure that out yourself."
4,"I don't know about the %-string formatting, but this is totally possible with f-strings:

    In [43]: a = 141695.00
    
    In [44]: b = 2137.21
    
    In [45]: c = 472.32
    
    In [46]: d = 2609.53
    
    In [47]: headers = ['Month', 'Balance', 'Principal', 'Interest', 'Payment']
    
    In [48]: print(f'{headers[0]:>5} {headers[1]:>12} {headers[2]:>12} {headers[3]:>12} {headers[4]:>12}')
        ...: print(f'{1:5d} {f""${a:0.2f}"":>12} {f""${b:0.2f}"":>12} {f""${c:0.2f}"":>12} {f""${d:0.2f}"":>12}')
    Month      Balance    Principal     Interest      Payment
        1   $141695.00     $2137.21      $472.32     $2609.53

Maybe this would be easier to understand:

    In [49]: def moneyify(n):
        ...:     return f'${n:0.2f}'
        ...:
    
    In [50]: print(f'{headers[0]:>5} {headers[1]:>12} {headers[2]:>12} {headers[3]:>12} {headers[4]:>12}')
        ...: print(f'{1:5d} {moneyify(a):>12} {moneyify(b):>12} {moneyify(c):>12} {moneyify(d):>12}')
    Month      Balance    Principal     Interest      Payment
        1   $141695.00     $2137.21      $472.32     $2609.53"
4,"Because unlike C++ and other languages, Python does not have an implicit link to the instance as the first parameter. It's just a design decision that, I'm guessing, has to do with the mantra explicit is better than implicit."
4,Have you installed a mysql dbapi?
4,How can we possibly help you with only the information you gave us?
4,"Of course my code didn't fix your issue. The point of that analogy is that your code that did are functionally equivalent. You don't read in the data. Or rather, you read in the data and then immediately discard it.

So if you want to use the old data, stop discarding it."
4,"Beanstalk is just a way to quickly provision an ec2 box.

EDIT: I guess I got a little excited about that 😂"
4,"To fix the imports, I'd suggest using pycharm and in the settings > editor > code style > python under the imports tab select all the options for optimize imports and in the structure of ""from"" imports heading select join imports of the same source. Then under the wrapping and braces tab, in the from imports section select all the options and set the wrapping to ""wrap always"". You can then click okay to save the settings. Then go to a file and go to the Code menu and select Optimize imports. Do this on all your files. There are helpers that you can mess with as you get better with pycharm. 

Black is great. It'll fix your pep8 peoblems for you. 

I'd put the link to the formula info in a docstring in that function so I have it right where it is relevant."
4,"Not going to go through all that code unless you pay me. Where do you think the infinite loop might be happening? If you don't know, how could you figure it out?"
4,"Well you should have provided that info up front, don't you think? Why don't you show what your data is exactly and what code you've used to get the error?"
4,"JSON itself is just a particular way of formatting a string. It's not json that your having trouble with, from the sound of it, its the complex python data structure you get after you convert it. My first suggestion would be to use an ORM like Sqlalchemy (or Django if you're using it) to create serializers for the data. Three is a bit of a learning curve, but, you'll get the hang of it and the code you write will be very robust and easily understood. 

If that route doesn't appeal to you, the json library has methods to define the serialization and deserialization of json that you can use to reinvent the wheel. 

If you really just want to get your hands dirty, well, okay. Just remember that python dicts have the `.get()` method which can return a default value. So

```
data = { 
    'foo': {
        'bar': {
            'baz': 42
        }
    }
}

my_value = data.get('foo', {}).get('bar', {}).get('baz', None)

if my_value:
    do_a_thing(my_value)
```
So if any of the keys 'foo', 'bar', or 'baz' were missing, you wouldn't have to deal with error handling and your code could stay clean, concise, and understandable."
4,"Looks good. Definitely take the advice to add testing. Most of my gripes are with formatting. For example, PEP8 says that using parens is preferred to using continuation slashes and that binary operators should be at the beginning of the next line. So this

```
def correction_factor(temp_f):
    return 1.00130346 - \
           (1.34722124e-4 * temp_f) + \
           (2.04052596e-6 * (temp_f ** 2)) - \
           (2.32820948e-9 * (temp_f ** 3))

```
Should be this

```
def correction_factor(temp_f):
    return (
        1.00130346 
        - (1.34722124e-4 * temp_f)
        + (2.04052596e-6 * (temp_f ** 2))
        - (2.32820948e-9 * (temp_f ** 3))
    )
```
Also, those numbers are super magical. This is a prime example of an excellent place to use constants, if you know what they are. It might be the case that this is just magic, in which case you should consider putting a link to where you found the formula instead. 

Check out a python formatter called Black. It is about 90% of what I'd want in a formatter, which is about the best I've found so far. I prefer it over YAPF. 

Also, you will absolutely want to organize your imports better as you get more of them. With a bit of work, pycharm can do this really well, so maybe give that a go."
4,"Dude, what? There's so much craziness in that little bit of code. Step back a second. WTF are you trying to accomplish? You have 4 files? Or is it that you have many many files and you read 4 of them at a time? Or you have one file and you read 4 lines at a time? 

Be much more precise with your question because nobody is going to try to untangle your spaghetti code."
4,"This just a LAN thing, then?"
4,"Okay, so you think that code is reading the previously saved list in such a way as to prevent sending the same posts, then? Let's go through it line by line, I'll pretend to be the python interpreter and we'll pretend the list data is just some numbers. Let's say the file old\_social.pickle has pickled in it a list \[4, 5, 6, 7\], okay?

    try:
        with open('old_social.pickle', 'rb) as fp:

Using a with context, so far so good... I now have stored as fp a file pointer to the opened pickle file and I'm reading in as binary. Alternatively, I might have thrown an exception...

            old_social = pickle.load(fp)

Okay, so I read in file which we agreed previously had \[4, 5, 6, 7\], so old\_social now contains \[4, 5, 6, 7\] (as a deque, we'll say, by the way.

            old_social = collections.deque(maxlen=200)

uh... okay, so I've completely dropped what was in old\_social and replaced it with an empty deque.

    except(FileNotFoundError, EOFError):
        old_social = collections.deque(maxlen=200)

Maybe I raised an exception because the file wasn't found, I set old\_social to be an empty deque here, too. Do you see what's going on? You can replace all that code with just this:

    # try:
    #     with open ('old_social.pickle', 'rb') as fp:
    #         old_social = pickle.load(fp)
    #         old_social = collections.deque(maxlen=200)
    # except (FileNotFoundError, EOFError):
    #     old_social = collections.deque(maxlen=200)
    
    # The above is the exact same as just doing the following:
    
    old_social = collections.deque(maxlen=200)"
4,"Store it in a database, SQLite is fine. Then you can update as you need to and you can output the data how you want."
4,"What do you believe this does?

```
try:
    with open ('old_social.pickle', 'rb') as fp:
        old_social = pickle.load(fp)
        old_social = collections.deque(maxlen=200)
except (FileNotFoundError, EOFError):
    old_social = collections.deque(maxlen=200)
```
I believe this and the other code like it to be the issue."
4,Scrutinize each line. Don't take anything for granted.
4,Why? Is this assigned to you or is it just a personal challenge?
4,"First write some python functions and classes in a file that ends in a `.py`. Then from some other file in the same dir, do `import <that file name minus the .py>`

That's a first start."
4,Step one: `pip3 install requests`
4,"> first off, am i correct that we can't use dot notation for an object because it's a different type from javascript/typescript? An object is really a dictionary which is a hash map which uses bracket access?

This is not correct. Object fields and methods are accessed using the dot notation. 

> Finally, is there a way to get typing in a django project?

There no way other than to for Django, add type hints, and submit a PR. 

> but when i do miss an amazing feature from typescript i would like to use it's equivalent in python if it exists / is practical.

Is dot notation the thing you're craving? Dicts don't have it, but classes and named tuples do. Maybe some other stuff, too, that I'm forgetting."
4,"They're called inner classes in python, and yes, they're a thing. However, you cannot directly access the methods or data of the outer class. Think of it more as namespacing than anything terribly useful. There are ways of making it work, e.g. creating an instance of the inner class from the outer class and passing the outer class in to the constructor. But...meh. Surely, there are better things that can occupy your time."
4,"```
roll = sum(random.choices(range(1,7), k=4))
```"
4,"```
my_list = [set(item) for item in my_list]
```"
4,"If an address is easily fakeable in such a way as a popular python library can generate that email, then, I guarantee that email is already getting spammed. Spammers have as much access to python and the faker library as anyone else. Anyone with an email address that is easily generated by faker is already getting inundated with spam. Moreover, anyone who has their email set up on a modern email system will have spam protection built-in

For these reasons, I argue that there is, in fact, no ethical problem with using this library or with suggesting it by showing examples. This idea that an email address is some precious data in and of itself, (that is to say without any ties to any other information such as passwords, phone numbers, addresses and the like) is silly."
4,"Well, if it does, it is exceedingly unlikely that your password will, too."
4,"You could create/modify your packets with faked ip addresses. But yeah, this gets into the realm of how much work is it to fix the problem you're trying to create?"
4,"This module is called faker for a reason. If you're concerned with using hotmail.com or yahoo.com addresses, there is another provider that can give realistic, but fake email addresses."
4,"Sometimes letting people find their own bugs is the best tactic. If you try and run it, you'll see the bug, I have no doubt. Would be a good exercise for you to try to find it without running it, though."
4,Discrete math is absolutely critical to in-depth understanding of CS.
4,No clue. What kind of questions are you getting?
4,No better time than the present to learn!
4,You won't learn if you aren't constantly pushing yourself. This seems like a good thing.
4,"You've got a bug, I think."
4,"Not enough information to say. But in general, having a single widget class that you import and/or inherit from is a good idea, absolutely."
4,Do you get an error or something?
4,Yes. Yes this is very inefficient. But how much efficiency do you need? I'm guessing that the convenience of using json far outweighs the efficiency gains you'd get for the amount of data you likely have. Don't optimize prematurely.
4,"Load the file, it becomes python, modify the list or whatever, re-write the file to disk"
4,"First:

    $ pip3 install faker

Then

    >>> from faker import Faker
    >>> fake = Faker()
    >>> fake.name()
    'Robert Ellis'
    >>> fake.name()
    'Sherry Parker'
    >>> fake.email()
    'kristin18@gmail.com'
    >>> fake.email()
    'michael88@hotmail.com'

There are many more [providers](https://faker.readthedocs.io/en/latest/providers.html)."
4,"Report the output of the following

```
pip --version
```
```
python --version
```
```
pip list
```
```
pip3 --version
```
```
python3 --version
```
```
pip3 list
```"
4,"It looks to me from [this blog post](https://insidemysql.com/mysql-connector-python-8-0-a-year-in/) that the mysql connector is currently under active development and is probably the best option. So I'd do

    pip3 install mysql-connector-python

I'd also use Sqlalchemy and it's ORM, too, if I were you."
4,"Yup. Now look back at the commands I had you run earlier. The pip and pip3 commands are using the same python version, the one found in C:\\Users\\conno\\AppData\\Local\\Programs\\Python\\Python37\\ and the IDLE is using the version found in C:\\Users\\conno\\AppData\\Local\\Programs\\Python\\Python37-32\\. The problem is that you've got 2 versions of python 3.7 installed. The solution is to uninstall one of them, probably the Python37-32 version."
4,Go to your C:\\Users\\conno\\AppData\\Local\\Programs\\Python\\ folder and post the contents of that directory.
4,"What do you run, exactly, to make sqlalchemy work?"
4,"Oh, I should have looked at your code more closely. This won't work:

    print (countryPop[firstCountry] + [secondCountry])

But this will:

    print(countryPop[firstCountry] + countryPop[secondCountry])"
4,And IDLE is where you are having trouble importing sqlalchemy?
4,"    In [9]: import json
    
    In [10]: s = [
        ...:   [1,'a',['a','b'],2],
        ...:   [2,'a',['a','b','c'],2],
        ...:   [1,'b',['a','b'],3]
        ...: ]
    
    In [11]: json_str = json.dumps(s)
    
    In [12]: json_str
    Out[12]: '[[1, ""a"", [""a"", ""b""], 2], [2, ""a"", [""a"", ""b"", ""c""], 2], [1, ""b"", [""a"", ""b""], 3]]'
    
    In [13]: data = json.loads(json_str)
    
    In [14]: data
    Out[14]:
    [[1, 'a', ['a', 'b'], 2],
     [2, 'a', ['a', 'b', 'c'], 2],
     [1, 'b', ['a', 'b'], 3]]

Just use json to do your writing to the file and your reading in from the file. I used json.dumps() and json.loads() because I'm not writing to a file. To write to a file you'll probably want to use json.dump() and json.load(). Look up the json library in the documentation for more information."
4,"Go into IDLE and input this code:

    >>> import sys
    >>> sys.version
    >>> sys.path"
4,You're doing it right except for the fact that your numbers are actually strings. Take the quotes off the numbers and try it out.
4,How do you get to your python shell?
4,Using `pip --version` will give you the location of the binary so `which pip` is not required.
4,Which version of mysql?
4,"On the first line, you'd need 2 ""x"" characters, right? One at the start of the line and one at the end of the line. How would you do that?"
4,"Post the outputs of the following 

```
pip --version 

```

```
python --version

```

```
pip list

```
```
pip3 --version 

```

```
python3 --version

```

```
pip3 list

```"
4,"Based off the traceback, it looks like the issue is with reading that file, 

Why are you letting anyone read any old file off your computer anyhow?"
4,https://stackoverflow.com/a/40673918/3858494
4,"The continue is not required. This probably takes a ton of resources. One thing you can do is to put a sleep in there. So maybe after the loop put a time.sleep(0.1) or something. Heck, then you could change the light to be a bit more informative, too. Use some service to create a red to yellow to blue gradient in however many steps you think is right and set the color according to the temperature based on that gradient and your threshold."
4,"    In [3]: grid = [['.', '.', '.', '.', '.', '.'],
       ...:         ['.', 'O', 'O', '.', '.', '.'],
       ...:         ['O', 'O', 'O', 'O', '.', '.'],
       ...:         ['O', 'O', 'O', 'O', 'O', '.'],
       ...:         ['.', 'O', 'O', 'O', 'O', 'O'],
       ...:         ['O', 'O', 'O', 'O', 'O', '.'],
       ...:         ['O', 'O', 'O', 'O', '.', '.'],
       ...:         ['.', 'O', 'O', '.', '.', '.'],
       ...:         ['.', '.', '.', '.', '.', '.']]
    
    In [4]: for row in grid:
       ...:     print(' '.join(row))
       ...:
    . . . . . .
    . O O . . .
    O O O O . .
    O O O O O .
    . O O O O O
    O O O O O .
    O O O O . .
    . O O . . .
    . . . . . .
    
    In [5]: for row in zip(*grid):
       ...:     print(' '.join(row))
       ...:
    . . O O . O O . .
    . O O O O O O O .
    . O O O O O O O .
    . . O O O O O . .
    . . . O O O . . .
    . . . . O . . . .

Or better:

    In [6]: print(*(' '.join(row) for row in grid), sep='\n')
    . . . . . .
    . O O . . .
    O O O O . .
    O O O O O .
    . O O O O O
    O O O O O .
    O O O O . .
    . O O . . .
    . . . . . .
    
    In [7]: print(*(' '.join(row) for row in zip(*grid)), sep='\n')
    . . O O . O O . .
    . O O O O O O O .
    . O O O O O O O .
    . . O O O O O . .
    . . . O O O . . .
    . . . . O . . . ."
4,Yes! I write bugs often. Thanks for catching this one.
4,"This is way too complicated. Just do this:

    #resistance outputs at 6 different temperatures before and after drift occurs
    Rprior = [59.5212, 100.0551, 119.8439, 139.3312, 177.4125, 250.0679]
    Rnow = [59.5203, 100.0530, 119.8411, 139.3278, 177.4080, 250.0620]
    #thermometer sensitivity at each temperature
    sens = [0.41, 0.40, 0.39, 0.39, 0.37, 0.35]
    
    for rn, rp, s in zip(Rprior, Rnow, sens):
        print([rn, rp, s])

Don't worry about efficiency unless there is a problem with this being fast enough. ""Premature optimization is the root of all evil."""
4,"I wouldn't write the code that way, usually. Either I'd do a list comprehension:

    maximum = int(input('Max: '))
    
    cubes = [(n, n**3) for n in range(1, int(maximum**(1/3)) + 1)]
    for n, cube in cubes:
        print(f'{n} cubed is {cube}')

Or I'd do a generator comprehension if you wanted a lot of values:

    import itertools as it
    
    maximum = int(input('Max: '))
    
    cubes = ((n, n**3) for n in it.count(1) if n**3 <= maximum)
    
    for n, cube in cubes:
        print(f'{n} cubed is {cube}')

Or if the function was slower to calculate:

    import itertools as it
    
    def cube(n):
        time.sleep(30)
        return n**3
    
    maximum = int(input('Max: '))
    
    cubes = ((n, cube(3)) for n in it.count(1))
    
    for n, cube in cubes:
        if cube > maximum:
            break
        print(f'{n} cubed is {cube}')

Why might I do this? Well I wouldn't do this exact thing. But I might be iterating over some data and transforming it and I might want to stop only once the transformed data met some threshold. I've done this kind of thing in machine learning, for example. During neural network training, I'd like to prevent overfitting. Overfitting is indicated by the accuracy of the training set going up while the accuracy of the testing set goes down. So instead of continuing my training (thereby making the overfitting worse), I would stop my training and use the weights that correspond to the peak test accuracy. There's a bunch of jargon in there, but hopefully that makes some sense."
4,"Python doesn't return a strictly boolean value from `and` and `or`. Instead, you get the the value that caused the expression to be evaluated. For example:

```
>>> print(0 or 3)
3
```
In python (as in C-languages), `0` is ""falsey"" meaning it evaluates to False. Other things are falsey, such as `None`, `[]`, and, of course, `False`.
```
>>> print(None or 42)
42
>>> print([] or 9001)
9001
>>> print(False or 13)
13
```
Remember, only one of the two items of a boolean `or` must be `True` for the entire expression to be `True`, and in each of the above cases, the 1st item is falsey and the second item is truthy, and so the return value is the first truthy item. But this happens, too, in the case that the evaluation completed with a falsey value:
```
>>> print([] or None)
None
>>> print(False or False)
False
>>> print(False or [])
[]
```
The `and` works similarly; however, if the first item of an `and` is False, then you don't have to evaluate the 2nd item:
```
>>> print([] and 42)
[]
```
And if the first item is truthy, you must evaluate the 2nd item to determine if the and expression itself is True:
```
>>> print(42 and [])
[]
>>> print(42 and 9001)
9001
```
So just remember, you get the item returned to you that caused the `and` or `or` statement to be evaluated, whether that item is truthy or falsey."
4,[https://cryptography.io/en/latest/](https://cryptography.io/en/latest/)
4,"    while counter < 10:
	counter += 1
	number = random.randint(1,1000)
	print(number)

Consider using a for loop

    for _ in range(10):
        number = random.randint(1,1000)
        print(number)"
4,"[https://renesd.blogspot.com/2018/03/pygame-on-pypy-usable.html](https://renesd.blogspot.com/2018/03/pygame-on-pypy-usable.html)

The latest versions of pypy are compatible with pygame, yes."
4,"You'd need to show your code. It is possible that you are using slow algorithms or something. 

But one way to speed things up is to try using a different interpreter. The first one I'd try is pypy. Be aware that pypy hasn't yet implemented all of the python spec yet. So if your code relies on the latest python 3.7 hotness, you might need to bring it back down to python 3.5 era code. After pypy is implemented, I might start looking at your data structures. Are you using lists and list methods that would be much faster in numpy, for example? It could be the gui framework you're using as mentioned by others, etc."
4,"    import os
    import subprocess
    import sys
    import time
    import re

nit: organize your imports. In pycharm you can do cmd-opt-o to automatically sort your imports.

    class Files:
    
        def __init__(self):
            self.current_dir = ['.']
            self.parent_dir = ['..']

Consider using pathlib here.

            self.folders = [folder for folder in next(os.walk('.'))[1]]
            self.files = [file for file in next(os.walk('.'))[2]]
            self.directory = self.current_dir + self.parent_dir + self.folders + self.files
    
    
    def file_explorer():

Is this not a part of the class? Is the class just a fancy container or something?

    # snip...
    
    def change_directory(path):
        """"""Changes the current working directory.
    
        :param path: new path to become the current working directory.

This docstring is redundant. What this function should do and what the parameter is is obvious because of the naming you've used.

        """"""
        try:
            os.chdir(path)
        except (FileNotFoundError, NotADirectoryError):
            for index, file in enumerate(Files().directory, start=1):

It's strange to do Files().directory here. This seems like this function ought to be a method on that class. Also, what are you trying to accomplish here? It looks like if the path isn't a string for the directory name, then, what? You look at the first item in File().directory which you refer to as ""file"" and if ""file"" is not a directory, you output a message and return out of the function entirely. Otherwise if ""file"" is a directory, you change into the directory and return out of the function. Oh, but wait, you only do that if ""1"" equals the path that you were passed into the function. So, what, then? A person could do change\_directory(17). This is a very bizarre way of doing things, don't you think? 

Also, say I have my\_list = \['a', 'b', 'c', 'd', 'e'\] and I want the 4th item in the list (the 'd'), I can do my\_list\[3\] (note that indexes start at 0 in python). I don't have to iterate over the list counting the items, I can just directly access them.

                if str(index) == path:
    
                    if os.path.isfile(file):
                        input(f""'{file}' is not a directory. Press ENTER to continue..."")
                        return
    
                    os.chdir(file)
                    return
    
            input(f""'{path}' is not a directory. Press ENTER to continue..."")
    
    
    def open_file(file):
        """"""Opens file with command line arguments.
    
        :param file: file to open via command line.

Redundant docstring.

        """"""
        try:
            output = _open_file(file)

So like the last time, the user can pass in a string digit to open a file. And if you're given a string digit, your [subprocess.run](https://subprocess.run)() will return with an error in which case you do your iteration over the enumeration indices thing.

            if output.returncode != 0:
    
                for index, files in enumerate(Files().directory, start=1):
                    if str(index) == file:
                        if os.path.isdir(files):
                            input(""Cannot open directory. Press Enter to continue..."")
                            return
    
                        output = _open_file(files)
    
                        if output.stderr:
                            input(output.stderr + 'Press ENTER to continue...')
                        return
    
                input('File does not exist. Press ENTER to continue...')
    
        except OSError as err:
            input(str(err) + ' Press ENTER to continue...')
    
    # snip...
    
    def search(keyword):
        """"""Searches for the keyword in the files and folders from the current working direcorty and child directories. 
    
        :param keyword: Keyword of file to be searched for in the current working directory and child directories.
        """"""
        fmt = '| {:<45} | {:<9} | {:<50} |'
        pattern = re.compile(keyword, re.IGNORECASE)

I like the use of format here.

    
    def guide():

Check out the argparse library (or a 3rd party library called click)

        """"""Descriptions of all commands.""""""
        print(""""""
    CD              Change current directory.
    OPEN            Open file.
    SEARCH          Search for file in the current working directory and child directories.
    EXIT / QUIT     Close program.
    """""")
        input(""Press ENTER to continue..."")
    
    
    def commands(cmd):
        """"""Handle for user input commands.
    
        :param cmd: Command to be called. Pass 'help' as a parameter for descriptions of all commands.
        """"""
        cmd = cmd.lower()
        commands_dict = {
            'cd '    : lambda: change_directory(cmd.split(' ', 1)[1]),
            'open '  : lambda: open_file(cmd.split(' ', 1)[1]),
            'search ': lambda: search(cmd.split(' ', 1)[1]),
            'help'   : lambda: guide(),
            'exit'   : lambda: quit(),
            'quit'   : lambda: quit()
        }
    
        for command, func in commands_dict.items():
            if cmd.startswith(command):
                func()
                return
    
        input(""Unknown command. Press ENTER to continue..."")
    
    
    def main():
        while True:
            file_explorer()
            user_input = input(f""{os.getcwd()} >>> "")
            commands(user_input)
    
    
    if __name__ == '__main__':
        main()"
4,Pandas or else put everything into a database and index with intelligent uses of indexing.
4,Did you test this? It seems to me that the global variable would have to be defined before the function itself is defined.
4,What have you tried?
4,"It isn't a command. Item is just a name we give to each entry in the list. It's just a name, and it could be anything you want."
4,"If the course is walking you towards a pythonic way of doing things or if the idea is to teach you about while loops, then it's fine. Otherwise, it's awful and should be this:

```
for item in x:
    print(item)
```"
4,"Well my answer still stands. That's really terrible python code, though, so if you're using it as an example, I'd find a better source to learn from."
4,"What code?

In general `!=` means not equal. 

```
>>> my_list = [1, 2, 3]
>>> len(my_list) != 5
True
>>> len(my_list) != 3
False
```"
4,"This is something like what I'd do:

    import io
    
    import pandas as pd
    import requests
    
    url = 'https://rucsoundings.noaa.gov/get_soundings.cgi'
    params = {'start': 'latest'}
    response = requests.get(url=url, params=params)
    
    df = pd.read_csv(io.StringIO(response.text), sep=' ', skipinitialspace=True, skiprows=[0, 1, 2], header=None, index_col=[0])
    table_html = df.to_html()"
4,">url = 'https://rucsoundings.noaa.gov/get\_soundings.cgi

I'm thinking pandas is where you want to go with this, but I'm having trouble understanding the data. What are the headers?"
4,That sounds like you're trying to figure out the params? The ?key=value&key=value part?
4,"Windows, Mac or Linux?"
4,"For the first part, use [requests](https://2.python-requests.org/en/master/). 

For the 2nd part, a python stack could be LGPD, Linux, Gunicorn, Postgres, and Django. You can use any number of different WSGI servers instead of Gunicorn, you can use mysql instead of postgres and you can use Flask instead of django."
4,"Use the prompt in the input function, doing so is self-documenting and good code practice."
4,[https://stackoverflow.com/a/6264027/3858494](https://stackoverflow.com/a/6264027/3858494)
4,Why?
4,"    import pandas as pd
    
    raw_data = {'rank': [16,7,6,5,4,7,12,3,2,10,1,8,28,4,37,22,50,19]}
    
    df = pd.DataFrame(raw_data)
    df['normalized_rank'] = ((df['rank'] - df['rank'].min()) / (df['rank'].max() - df['rank'].min())) * 9 + 1
    df['binned_normalized_rank'] = df.normalized_rank.astype(int)
    print(df)

outputs:

         rank  normalized_rank  binned_normalized_rank
    0     16         3.755102                       3
    1      7         2.102041                       2
    2      6         1.918367                       1
    3      5         1.734694                       1
    4      4         1.551020                       1
    5      7         2.102041                       2
    6     12         3.020408                       3
    7      3         1.367347                       1
    8      2         1.183673                       1
    9     10         2.653061                       2
    10     1         1.000000                       1
    11     8         2.285714                       2
    12    28         5.959184                       5
    13     4         1.551020                       1
    14    37         7.612245                       7
    15    22         4.857143                       4
    16    50        10.000000                      10
    17    19         4.306122                       4"
4,Show code.
4,"Don't do apply, my man. Pandas has the native ability to apply these functions without calling apply."
4,Ugh. Autocorrect. It should have been python-bdd.
4,Don't overthink it. A global variable is a variable that is defined outside of a function and is available to be read and set from inside the function. A local variable is a variable that is set inside the function and can't be read from outside of that function.
4,"Nope, you had that correct. It's just that pandas will not make that column a string doing it that way. It'll still be a datetime as if you had never done strftime() at all..."
4,"Well out of all the responses that you've gotten so far, only mine works. Pandas is smart enough to know that if you give it a date string that it can make sense of (*i.e.* a date string in the format of '%m-%Y'), then it'll convert the column into a datetime object and \*not\* a string. The other responses seem to think that if you return a string in the function, that the column will become a string. But that's not the case (at least according to my experiments, anyhow)"
4,">lambda x: pd.datetime.strptime(x, ""%y-%b"").strftime('%m-%Y')  


Did you try this?"
4,"Does this work for you? I don't end up with a str like the OP seems to want, but rather a datetime."
4,"My question is why are you converting from a datetime back into a string? Why not keep the column a datetime so you can make use of it in other ways, *e.g.* sorting? I'm afraid there's no good way to simplify this in terms of making it all one line that I know of. But you can simplify it a bit:

    from dateutil.parser import parse
    
    df = pd.read_csv('date.csv', parse_dates=['date'], date_parser=parse)
    df.date = df.date.dt.strftime('%m-%Y')

That's easier on my eyes anyhow."
4,This seems a bit odd to me. Step back a second. What is the overall goal you're trying to accomplish?
4,"I really liked using bit boards to automatically calculate the possible moves. There was more to it than I thought there'd be, but once I got the bit boards figured out and calculated properly, my update function was one line of code"
4,"Not sure that I understand your vision. Here is what I did: 
https://github.com/mikelane/minichess/blob/master/Bitboard_Header_File_Generator.ipynb"
4,Many different ways. What appeals to you? A DFS method? A BFS method? Generating possible moves and shadows thereby searching the entire board at once? Etc?
4,Huh? Can you coarify what you mean?
4,I used a numpy array of chars. It's crazy fast and easy to deal with.
4,"I was a little twisted up. This is better: [https://regex101.com/r/9rEwPU/4](https://regex101.com/r/9rEwPU/4), though it's probably more than you want."
4,"Note the location of the ? In the [s]? In yours. Also, build up your regex at regex101.com"
4,"Let's see some code.

I think you could simplify it a bit. For example, if you're using non-capturing groups anyhow, why not just do this:

    (?:(?<=http[s?])(\://)?)

That means match '://' only if it is preceded by an http with an optional s. But don't capture the result."
4,Hey! I used the TX2 as a part of my work at a startup in early 2018. I was able to get Keras and Tensorflow to be GPU-accelerated in the TX2 without many issues.
4,How are you going to do the base case if you don't know how many steps you've taken compared to how many you're allowed to take?
4,"Seems to me they'd want to walk the students toward recursion by starting with a concept they're familiar with already: loops.

And in the 2nd day of programming ever, I doubt the concept of functions has even come up yet, so recursion would be off the table."
4,"To pass in the total steps, you'd have to think about it in reverse. Right now you're saying, okay, if I have gone exactly the predefined amount, stop. If I have gone too far, don't count it. And if I haven't gone far enough, recurse. 

Consider an alternative approach. What if instead you pass the number of stairs remaining (instead of the
Number of steps you've already taken)? So if you have 0 steps in front of you, you're done (and if you have a negative value, don't count it). Okay. Now how do we recurse. Let's only consider the case where the total number of steps is 15 and you can only take one step at a time. Wouldn't you want to add one to the number of possible ways to take the remaining 14 steps? How would you extend that to taking 1, 2, or 3 steps?"
4,"From the assignment. The first sentence: ""You can use loops to compute the elements of a mathematical series."" Then in the ""Things to think about"" section: ""You know that you're going to use a loop to solve this problem, but how?"""
4,Looks like you need to call `client.start()` to me.
4,The question specifically asks for an iterative solution.
4,"```
a = 1
for _ in range(5):
    a = 2*a + 1
print(a)
```
That's just the for loop part if someone input the number 4. You do the rest."
4,"Quick question, what if the ratio column has a zero, what's in that cell of new_ln_ratio?"
4,"Yeah, I'm not really getting it."
4,How did you create new_ln_ratio?
4,Dude. Get the f out. That is awesome.
4,"For $10 million, paid upfront, I'll teach you. I guarantee you'll become a python ninja. Before a problem even knows you're there, you'll have solved it with python. Boom dead."
4,Guessing new_ln_ratio has inf or nan.
4,"It skipped over the if when b was either +, - *, or /. Just like you told it to."
4,"Don't use the file.write. That was just to get the example in there. Just do something like

```
df = pd.read_csv('your_file.csv')
```"
4,That depends heavily on the rest of the class doesn't it? So how can we help you without the rest of the class code?
4,"That or you get new rows and you fucking like it. Hell, make coupon abstract and make a new table per coupon type XD"
4,What were his good points?
4,"Yeah, man, just set a flag or an enum on Coupon."
4,This sounds like a bad design to me. Why would you need to convert a class from one thing to another while maintaining the row id?
4,Huh? Try asking that again without assuming we know what is going on with your code. Post some code and ask a clear question.
4,"```
def makes10(a, b):
    if a or b == 10:
        return True
    elif a + b == 10: 
        return True
    else: 
        return False

```
This is broken because the `or` keyword returns the first truthy item. In your case, so long as a is not 0, your first condition, `a or b==10` returns the value of `a`. If a is 0, then it checks if b equals 10. 

Basically `a or b == 10` doesn't do what you think it does. You could do this like this:


```
def makes10(a, b):
    return (
        (a == 10 or b == 10)
        or (a + b == 10)
    )
```"
4,SQLite via Sqlalchemy's ORM
4,"Are your tiles connected from top to bottom? Like, seeing ^ means go to the previous tile?"
4,"Seems like you might want to post running code on a python for beginners blog:

```
def add_it(*args):
for num in args:
print(num)
add_it(3, 4, 5, 6)
```
This is not a common usage of a lambda at all:
```
print((lambda num1, num2: num1 + num2)(4,6))
```
A better example would be this:
```
my_data = [(9001, 'foo'), (42, 'baz'), (13, 'bar')]
my_sorted_data = sorted(my_data, key=lambda tup: tup[1])
```"
4,Whatever lets you run python will let you run pytest and your cucumber tests so long as you have the pytest-bed plugin.
4,"Goodness. Okay, so first, Flask is fine and so is django. But so, flask. First pip install flask, flask-rest, pytest, and pytest-flask (because you *do* want to test your code). Then go over to the [flask-restful documentation](https://flask-restful.readthedocs.io/en/latest/) and start reading along."
4,"    In [26]: import pandas as pd
    
    In [27]: from io import StringIO
    
    In [28]: file = StringIO()
    
    In [29]: file.write('''RECORDNUM,TITLE,URL
        ...: b12234456,The Title: One,connect to https://www.title1.com
        ...: b12234457,The Title: One,connect to https://www.title1.com
        ...: b12234458,The Title: Two,connect to https://www.title2.com
        ...: b12234459,The Title: Three,connect to https://www.title3.com
        ...: b12234460,The Title: Four,connect to https://www.title4.com
        ...: b12234461,The Title: Four,connect to https://www.title4.com
        ...: b12234462,The Title: Five,connect to https://www.title5.com
        ...: b12234463,The Title: Five,connect to https://www.title5.com
        ...: b12234464,The Title: Six,connect to https://www.title6.com
        ...: b12234465,The Title: Seven,connect to https://www.title7.com
        ...: ''')
    Out[29]: 618
    
    In [30]: file.seek(0)
    Out[30]: 0
    
    In [31]: df = pd.read_csv(file)
    
    In [32]: df
    Out[32]:
       RECORDNUM             TITLE                                URL
    0  b12234456    The Title: One  connect to https://www.title1.com
    1  b12234457    The Title: One  connect to https://www.title1.com
    2  b12234458    The Title: Two  connect to https://www.title2.com
    3  b12234459  The Title: Three  connect to https://www.title3.com
    4  b12234460   The Title: Four  connect to https://www.title4.com
    5  b12234461   The Title: Four  connect to https://www.title4.com
    6  b12234462   The Title: Five  connect to https://www.title5.com
    7  b12234463   The Title: Five  connect to https://www.title5.com
    8  b12234464    The Title: Six  connect to https://www.title6.com
    9  b12234465  The Title: Seven  connect to https://www.title7.com
    
    In [33]: duplicates = df[df.duplicated(['TITLE', 'URL'])]
    
    In [34]: duplicates
    Out[34]:
       RECORDNUM            TITLE                                URL
    1  b12234457   The Title: One  connect to https://www.title1.com
    5  b12234461  The Title: Four  connect to https://www.title4.com
    7  b12234463  The Title: Five  connect to https://www.title5.com
    
    In [35]: deduped_df = df[~df.duplicated(['TITLE', 'URL'])]
    
    In [36]: deduped_df
    Out[36]:
       RECORDNUM             TITLE                                URL
    0  b12234456    The Title: One  connect to https://www.title1.com
    2  b12234458    The Title: Two  connect to https://www.title2.com
    3  b12234459  The Title: Three  connect to https://www.title3.com
    4  b12234460   The Title: Four  connect to https://www.title4.com
    6  b12234462   The Title: Five  connect to https://www.title5.com
    8  b12234464    The Title: Six  connect to https://www.title6.com
    9  b12234465  The Title: Seven  connect to https://www.title7.com

Not sure if it could be easier than that!"
4,"I haven't, and probably won't, read all that code. So I don't know how your vertices are encoded in the first place. Suffice it to say that however it is you encode the data that makes up a vertex, you should add a means of encoding the color there, too. Once you do that, you can then just ask the vertex what color it is, and if it returns None, then it's not colored."
4,Which rows should go and why?
4,"I'd probably do this:

    num_sides = int(input('Number of sides: '))
    num_rolls = int(input('Number of rolls: '))
    results = random.choices(range(1, num_sides + 1), k=num_rolls)
    
    for i, result in enumerate(results, start=1):
        print(f'Roll {i}: {result}')

Because why reinvent the wheel?"
4,You only add uncolored vertices to the queue.
4,Tabs or spaces. Pick one. Tabs are hard to distinguish from spaces. Find them all.
4,"It's one of, at last count, 127,345,402 sites full of interview questions. Most companies that bring up sites like this mention LeetCode. A google search will lead you to more questions than you can possibly answer."
4,"Okay, so the issue is not how do I write code that outputs a color, it is how do I determine the color of vertex? This seems to me to be related to the graph coloring problem, but the constraints are different. If you do a breadth first search of vertices, you should be able to set the colors according to the colors of the adjacent vertices. I believe polynomial triangulations are 3-color, so there should not be a case where any vertex is adjacent to more than 3 other vertices."
4,"That doesn't look like an ImportError to me, so it's probably not a missing module. It could be that the module you're using (perhaps numpy or this ld-decode module) is different on your new system (I suspect you have an updated version on your new system, but it could be that what you're using is older). I can't tell what the actual issue is without more information. 

I recommend going to wherever you got this code from and following the installation instructions closely. It is possible that there is some system conflict that would prevent you from running this, so make sure you figure out what the system requirements are, too."
4,That's a lot of code. Simplify your question for us. What would you like your code to do; what does it actually do?
4,"Give me a small example table (in csv, 10 rows and 3 or 4 columns max) where there is a duplicate that ought to be filtered out and a row that might be mistaken for a duplicate. I'll show you how to use pandas to slice out those rows easier than excel can."
4,"github covers the pagination [here](https://developer.github.com/v3/guides/traversing-with-pagination/).

You can register whatever url you want in DRF. The process is well documented in the DRF documentation."
4,"The pandas DataFrame.rolling() is really meant to be used with aggregation functions like sum(). That is to say, you don't just get a dataframe from that function, you get, like you've seen a Window object.

It looks to me like you're trying to do kfolds. So try looking [here](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.KFold.html#sklearn.model_selection.KFold)."
4,Please format your code for reddit.
4,"So...

    while True:
        try:
            func()
        except():
            print('Error...waiting... \n')
            time.sleep(10)
            func()

Really, you only have to worry about restarting once. Once you restart, you'll keep going until the next exception and then die. This is a pretty odd way of doing this. How does this even raise an exception?

    def func():
        for item_pair in zip(dict1.items(), dict2.items()):
            for key, value in item_pair:
                status = '\n'.join([key] + value + [''])
                print(status)
                time.sleep(3)

Why purposefully slow down your processing? Are you just simulating this code for us or something? If it's a simulation, maybe you mean to imply that one of the for loops can somehow raise an exception? If so, catch the exception in the for loop (use the try ... except block in the function itself). You cannot jump to a specific index to start iterating in a dictionary, no."
4,Pandas will be your friend here.
4,I believe you're correct.
4,"Out and about, so I can't post much. But check this link out


https://docs.python-guide.org/writing/structure/"
4,"A parallel reduce (and factorial is a reduction on the operator *) is totally possible, but a great deal more difficult than you might think. 

Start here: 
https://en.m.wikipedia.org/wiki/Reduce_(parallel_pattern)"
4,"Now this is a project I can get behind! 

A lot of the work you're doing on the strings using the apply and lambdas can be done [natively in pandas](https://pandas.pydata.org/pandas-docs/stable/user_guide/text.html) .

Not too bad. I've got no clue what the function in errors.py is doing for you. More organization would be good. Maybe consider moving to poetry or pipenv. I prefer poetry for its use of the pyproject.toml file (and hence, my ability to use flit).

One downside is no tests. If your code isn't tested, it's broken. And it's broken in ways that you don't even know. That's a bummer."
4,"    def binary_search(n, the_list):
        low = 0
        high = len(the_list) - 1
        mid = (low + high) // 2
    
        while low <= high:
            if n == the_list[mid]:
                return True
    
            if n < the_list[mid]:
                mid, high = (low + mid) // 2, mid - 1
            else:
                low, mid = mid + 1, (mid + high) // 2
        return False

That's the canonical way of doing a binary search. Now, you're trying to compare two different lists each of which may or may not contain duplicates. So in addition to iterating over the first list and passing each value into this method, you'll need to keep track of where the match occurred. This will be the tricky part."
4,"Formatted code:

    while True:
        print('who are you')
        name = input()
        if name != ""Joe"":
            continue
        print(""hello joe what is the password (its a fish)"")
        password = input()
        if password == ""swordfish"":
            break
    print(""acces granted"")

Proof that it works:

    In [2]: while True:
       ...:     print('who are you')
       ...:     name = input()
       ...:     if name != ""Joe"":
       ...:         continue
       ...:     print(""hello joe what is the password (its a fish)"")
       ...:     password = input()
       ...:     if password == ""swordfish"":
       ...:         break
       ...: print(""acces granted"")
       ...:
    who are you
    Sam
    who are you
    Joe
    hello joe what is the password (its a fish)
    Bass
    who are you
    Joe
    hello joe what is the password (its a fish)
    swordfish
    acces granted

How I'd change it:

    In [9]: while True:
       ...:     name = input('who are you\n> ')
       ...:     if name != ""Joe"":
       ...:         print(""I don't know you!\n"")
       ...:         continue
       ...:     password = input(""Hello Joe, what is the password (Hint: its a fish)\n> "")
       ...:     if password == ""swordfish"":
       ...:         print()
       ...:         break
       ...:     print('Password incorrect!\n')
       ...: print(""access granted"")
       ...:
    who are you
    > Joe
    Hello Joe, what is the password (Hint: its a fish)
    > Swordfish
    Password incorrect!
    
    who are you
    > joe
    I don't know you!
    
    who are you
    > Joe
    Hello Joe, what is the password (Hint: its a fish)
    > swordfish
    
    access granted"
4,I'm guessing the value in `ASEstimates['ORDER_NUMBER']` is a float
4,"    In [36]: import shlex
    
    In [37]: import subprocess
    
    In [38]: cmd = 'ls -al'
    
    In [39]: result = subprocess.run(shlex.split(cmd), capture_output=True)
    
    In [40]: stdout = result.stdout.decode()
    
    In [42]: stdout
    Out[42]: 'total 2934672\ndrwxr-xr-x+ 64 mike  staff  # etc...'

Your cmd is an invalid string, too, because of the '1-1' part...

    In [44]: shlex.split(""echo '1-1' | sudo tee /sys/bus/usb/drivers/usb/unbind"")
    Out[44]: ['echo', '1-1', '|', 'sudo', 'tee', '/sys/bus/usb/drivers/usb/unbind']

Try that."
4,"As long as it follows the pattern of s1, it'll work."
4,The general graph traversal methods aren't so different from tree traversals. Trees are just acyclic graphs after all. Mostly you'll need to add the ability to prevent visiting a node more than once.
4,"Another approach:

    In [63]: ints = [1, 2, 7, 3, 4]
    
    In [64]: filtered = []
    
    In [65]: ints = ints[::-1]
    
    In [66]: while ints:
        ...:     v = ints.pop()
        ...:     if v == 7 and ints:
        ...:         ints.pop()
        ...:     else:
        ...:         filtered.append(v)
        ...:
    
    In [67]: sum(filtered)
    Out[67]: 7"
4,"    In [51]: import re
    
    In [53]: s1 = 'This file was sent on [DATE] for approval.'
    
    In [54]: s2 = 'This file was sent on 12/08/19 for approval.'
    
    In [56]: regex = re.compile(r'This file was sent on (?P<date>.*?) for approval')
    
    In [57]: regex.match(s1)
    Out[57]: <re.Match object; span=(0, 41), match='This file was sent on [DATE] for approval'>
    
    In [58]: regex.match(s2)
    Out[58]: <re.Match object; span=(0, 43), match='This file was sent on 12/08/19 for approval'>
    
    In [59]: regex.findall(s2)
    Out[59]: ['12/08/19']

So if you call the match function, you'll find the match if the string matches. Moreover, if you need the date, you can easily extract it."
4,"    class Task:
        def __init__(self, func, args=None, kwargs=None):
            self.func = func
            self.args = () if args is None else args
            self.kwargs = () if kwargs is None else kwargs
    
        def run(self):
            self.func(*self.args, *self.kwargs)

This is ususally done this way:

    class Task:
        def __init__(self, func, *args, **kwargs):
            self.func = func
            self.args = args
            self.kwargs = kwargs
    
        def run(self):
            self.func(*self.args, **self.kwargs)

example:

    In [48]: def foo(value, *args, **kwargs):
        ...:     print(f'value: {value!r}\nargs: {args!r}\nkwargs: {kwargs!r}')
        ...:
    
    In [49]: foo('hi', 'there', 'wowzer', this='is', the='kwargs!')
    value: 'hi'
    args: ('there', 'wowzer')
    kwargs: {'this': 'is', 'the': 'kwargs!'}
    
    In [50]: foo('hi')
    value: 'hi'
    args: ()
    kwargs: {}"
4,"You didn't, someone who responded to you did."
4,"Your choices in the latter case are 

1. Don't use a default argument at all
2. Use a default argument that isn't None

You, being the smart guy programmer should know when to choose from those options."
4,"Okay, the point I'm trying to get to is that ""keyword arguments"" is not the issue. The issue is whether OP should be using *default* arguments. In fact, unless/until [PEP570](https://www.python.org/dev/peps/pep-0570/) gets implemented in cpython, there is no way to force positional arguments. We can however force the caller to use keyword arguments. For example:

    In [43]: def foo(*, data):
        ...:     print(f'data: {data}')
        ...:
    
    In [44]: foo('hi there')
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    <ipython-input-44-99e8aaab67ba> in <module>
    ----> 1 foo('hi there')
    
    TypeError: foo() takes 0 positional arguments but 1 was given
    
    In [45]: foo(data='hi there')
    data: hi there

I'm just trying to clarify the language we're using, because it's important."
4,What does this have to do with keyword arguments versus positional arguments?
4,Your code has a keyword argument. Why aren't you following your advice to OP?
4,"If you're not modifying the default value, it's not a problem. The problem comes when you, whoopsie!, change your code at some later date to now modify the value and then forget to change the default parameter to a sentinel value. Now you have weird behavior that's difficult to debug."
4,"Why ""should""?"
4,"```

stk_var_v_p_1 = {""vp_1"": 1,""vp_2"": 2,""vp_3"": 3,""vp_4"": 4,""vp_5"": 5,""vp_6"": 6,""vp_7"": 7,""vp_8"": 8,""vp_9"": 9}

for key, value in stk_var_v_p_1.items():
    stk_var_v_p1[key] = value + 10

print(stk_var_v_p_1.values())
```"
4,I would consider taking a different route entirely. I suggest you get the PHP AST (perhaps by using [this repo](https://github.com/nikic/php-ast)). This should make it so you can identify exactly what you are looking for much easier than trying to build your own php parser (which is ultimately what you're doing).
4,"    In [25]: int_list = [1, 2, 3]
    
    In [26]: int_list
    Out[26]: [1, 2, 3]
    
    In [27]: int_list[::-1]
    Out[27]: [3, 2, 1]
    
    In [28]: list(zip(int_list, int_list[::-1]))
    Out[28]: [(1, 3), (2, 2), (3, 1)]"
4,"use zip... i.e.

    result = [sum(pair) for pair in zip(int_list, int_list[::-1])]"
4,"Most devs I know prefer

    print('to use single quotes for strings')

I do, too.

    print(""Unless there's an apostrophe in my text, that is"")

In which case, 

    print('I\'d prefer not to use a backslash')

Follow the conventions of your team, or if you're solo, pick one and stick with it."
4,"Yeah, I got lazy with the indentation, sadly."
4,"According to OP it will sometimes have nested objects. Also, as demonstrated your code doesn't quite work nevertheless."
4,Maybe. But it'd also be less self documenting. And self documentation is far and away more valuable than subjective opinions on the cleanliness of the code.
4,"    def get_status_report_values(project, phase, portfolio, max_value=20):
        project_phase_value = getattr(project, phase)
        portfolio_total_phase_effort_value = getattr(
            portfolio, f'total_{phase}_effort'
        )
        if project_phase_value > max_value:
            setattr(project, phase, project_phase_value - max_value)
            setattr(
                portfolio,
                f'total_{phase}_effort',
                portfolio_total_phase_effort_value - max_value,
            )
        else:
            setattr(
                portfolio,
                f'total_{phase}_effort',
                portfolio_total_phase_effort_value - project_phase_value,
            )
            setattr(project, phase, 0)
    
    
    while True:
        input('press enter for next status report')
        for project in projects:
            get_status_report_values(project, project.phase, portfolio[0])
    

Something like that (EDIT: used black formatting like I think everyone ought to be doing :P)"
4,"    In [1]: data = {
       ...:     ""quiz"": {
       ...:         ""sport"": {
       ...:             ""q1"": {
       ...:                 ""question"": ""Which one is correct team name in NBA?"",
       ...:                 ""options"": [
       ...:                     ""New York Bulls"",
       ...:                     ""Los Angeles Kings"",
       ...:                     ""Golden State Warriros"",
       ...:                     ""Huston Rocket""
       ...:                 ],
       ...:                 ""answer"": ""Huston Rocket""
       ...:             }
       ...:         },
       ...:         ""maths"": {
       ...:             ""q1"": {
       ...:                 ""question"": ""5 + 7 = ?"",
       ...:                 ""options"": [
       ...:                     ""10"",
       ...:                     ""11"",
       ...:                     ""12"",
       ...:                     ""13""
       ...:                 ],
       ...:                 ""answer"": ""12""
       ...:             },
       ...:         }
       ...:     }
       ...: }
    
    In [2]: for subject_name, subject_quiz in data['quiz'].items():
       ...:     for question_name, question in subject_quiz:
       ...:         print(question['options'])
       ...:         answer = input(question['question'])
       ...:         if answer != question['answer']:
       ...:             print(""No way"")
       ...:
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    <ipython-input-2-d9229ab9d439> in <module>
          1 for subject_name, subject_quiz in data['quiz'].items():
          2     for question_name, question in subject_quiz:
    ----> 3         print(question['options'])
          4         answer = input(question['question'])
          5         if answer != question['answer']:
    
    TypeError: string indices must be integers

Yours doesn't handle any nesting at all. This requires a DFS (which can be done iteratively or recursively)."
4,"You don't have to do this recursively, but it's easier if you do. First you need a base case. Your base case seems to be the case where you have decided you can ask a question. That is to say, if the object you received is a dict and if that dict has a key 'question' and a key 'options', then you can ask your question (and then do whatever it is you do with that answer). So for example:

    def output_quiz(data):
        if isinstance(data, dict) and 'question' in data and 'options' in data:
            nl = '\n'
            tab = '\t'
            return input(f'question [{data[""question""]}]{nl}options [{len(data[""options""])}]{nl}{tab}{f""{nl}{tab}"".join(data[""options""])}{nl}Your answer: ')
        for k, v in data.items():
            print(k, end=' -> ')
            output_quiz(v)

wow... buggy. fixed."
4,Only if it is one of those tuxedo t-shirts
4,There are lots of Americans or people applying to jobs in America on this subreddit. You should consider updating your advice to reflect this.
4,"I can tell you that, for example, amazon specifically says that dressing in business attire is not required and you should wear business casual to your interview. Inasmuch as you are evaluated by what you wear, and we seem to both agree that you probably are, you should dress the part. Too fancy is too fancy just like too casual is too casual. If you're trying to give advice that gives people the best chance at landing a software engineering job, and that seems to be a goal of your post, then business attire is bad advice except in the cases I noted previously."
4,">Dress smart! Yes they may wear tshirt and jeans to work. You do not work there yet. Business dress all the time! Shirt, tie, suit if you can!

I disagree strongly about this for software engineer interviews. This is largely dependent on the company, sure, but I've done a lot of face-to-face interviews now with 5-person companies to super giant companies. If you dress in a suit and tie, you'll actually be overdressed and viewed less favorably by your interviewers.

You ought to aim, instead, for one ""notch"" better dressed than what you'd typically wear to work at these places. For a typical software engineering interview, a guy is fine coming to an interview in jeans or khakis and a button-down shirt and a woman can wear whatever the analog of that is. If you're interviewing for FinTech or at some old school place, a suit and tie might, indeed, be a requirement. But for most places, your advice is bad in this regard."
4,"Ah, that's a nicer definition, indeed."
4,"Just for fun:

    >>> min=10
    >>> max=10000
    >>> narcissists = [candidate for original, candidate in zip(range(min, max), (reduce(lambda x, y: x + y**3, digits) for digits in ([int(d) for d in str(n)] for n in range(min, max)))) if candidate == original]
    >>> narcissists
    [153, 226, 373, 518]

That is:

    narcissists = [
        candidate 
        for original, candidate 
        in zip(  # zip together the range and the generator for convenience
            range(min, max),  # gives us the original value
            (  # A generator comprehension to get the sum of cubes of the digit
                reduce(lambda x, y: x + y**3, digits)  # actually sums the cubes of the digits
                for digits 
                in (  # generator comprehension that breaks the digits up into a list of ints
                    [int(d) for d in str(n)] 
                    for n 
                    in range(min, max)
                )
            )
        ) 
        if candidate == original  # the filter
    ]

Checked values up to 10 million, those are the only 4 so far."
4,"I found that porting a project from C++ (in my case) to python was very instructive. If you do that, pay very close attention to python best practices."
4,"```
In [1]: f = open('example.txt')

In [2]: for line in f:
   ...:     print(f'{line}', end='')
   ...:
foo.txt
bar.txt
wtf.txt

In [4]: f = open('example.txt')

In [5]: for line in f:
   ...:     print(f'Ends with .txt? {line.endswith("".txt"")}')
   ...:
Ends with .txt? False
Ends with .txt? False
Ends with .txt? False

In [6]: f = open('example.txt')

In [7]: for line in f:
   ...:     print(f'{line!r}', end='')
   ...:
'foo.txt\n''bar.txt\n''wtf.txt\n'

In [9]: with open('example.txt') as f:
   ...:     filenames = f.read().strip().split('\n')
   ...:     for filename in filenames:
   ...:         print(f'{filename} Ends with .txt? {filename.endswith("".txt"")}')
   ...:
foo.txt Ends with .txt? True
bar.txt Ends with .txt? True
wtf.txt Ends with .txt? True
```"
4,"    a = float('inf')
    z = [int(number) for number in input('Enter 5 numbers').split(' ')]

    for n in z:
        if n < a:
            a = n

    print(f'The min is: {a}')

Or just
 
    z = [int(number) for number in input('Enter 5 numbers').split(' ')]
    print('The min is: {min(z)}')"
4,Fair enough.
4,I have no idea.
4,It's a start to ML. The language you implement it with is largely irrelevant. Coming back to python later is easy.
4,There is no training time associated with openface.
4,"This is significantly easier. FaceNet is a deep neural network architecture. To implement that, you'd need to know how to build it, you'd need to get thousands and thousands of images of faces, you'd need to train that on some gpu-enabled computer (either physical or in the cloud), and then you'd need to train it on the faces of your students.

OpenFace is a *pre-trained* neural network. That means that you don't have to do the hard work of building and training it. You just give it a few pictures for training and you're all set."
4,"I'd look into Andrew Ng's course. He has an intro to ML course and, I believe, he has one or two new, more advanced courses now, too. Also head over to r/learnmachinelearning to get better answers."
4,"In your original python program, your file pointer is still open. In the new program, the file pointer isn't open. So remember that you use json.load() like this:

    with open('some/file/path/to/file.json') as fp:
        data = json.load(fp)

or this:

    fp = open('some/file/path/to/file.json')
    data = json.load(fp)
    fp.close()

You're either not doing that or the path to your json file is wrong."
4,"While `json.loads()` does take a json string as an argument, it is not true that the difference is that `json.load()` takes a binary. According to [the documentation](https://docs.python.org/3/library/json.html) for json.load() ""Deserialize *fp* (a `.read()`  
\-supporting [text file](https://docs.python.org/3/glossary.html#term-text-file) or [binary file](https://docs.python.org/3/glossary.html#term-binary-file) containing a JSON document) to a Python object using this [conversion table](https://docs.python.org/3/library/json.html#json-to-py-table)."" So the main difference is that `json.load()` takes a *file pointer* rather than a string."
4,"If you use [OpenFace](https://cmusatyalab.github.io/openface/) you only need a few images of each person. OpenFace has a docker implementation so it's super easy to set up, too. Basically, you put the pictures of each person in their own specially named folder and you start OpenFace and send it faces to recognize."
4,"First, since you're using the `with` context, you don't need `File.close()`

Second, if I am checking two conditions with one line, I can only use one `if`"
4,"The traceback, the output of the error, tells you exactly what is wrong and how to fix it in this case. Read the error message. I mean really really read it and you'll figure it out."
4,"Uh...

    maximum_value = int(f'{x}{y}{z}')
    for n in range(111, maximum_value + 1):
        print(n)"
4,My advice is to post some code.
4,"I can program python without reaching for any documentation 90% of the time. Sometimes I have a use for some itertools function or asyncio and so I have to look that up (I usually inspect the docstring and then go to the net if I can't make sense of that). External libraries are a different story. I'm pretty comfortable with Django now, but if you asked me to make a flask back end, I'd have to dive into the documentation.

As far as how I code, it depends on the task. A lot of planning what to do and then doing it. Code a few lines, write a bunch of tests. Code a few more lines, write more tests. And so on until it's done. 

If it's a bug, I might have to dive deep into the code to find it. If it's something to do with AWS or something, then I'll dig in there."
4,How can we help you given that information?
4,"1. Learn python syntax
2. Learn basic algorithms and data structures
3. Learn numpy and perhaps pandas
4. Learn matplotlib
5. Get your data, do your statistical sampling, and plot it!"
4,Have you heard of [Pandas](https://pandas.pydata.org)?
4,"oof. If you have a month to go and you can just grind and grind, then go do a ton of leetcode. Get yourself to the point of being able to do medium questions easily, then you'll be able to pass most of the hardest entry level questions you're likely to get.

If you're going to be interviewing at a FAANG, get yourself up to the hard questions and take some extra time to study up on [dynamic programming](https://www.freecodecamp.org/news/follow-these-steps-to-solve-any-dynamic-programming-interview-problem-cc98e508cd0e/)."
4,Okay. Sounds fun.
4,"I'd say start with basic python tutorials to get good at python. Then do some OpenCV and numpy tutorials. Once you've gotten comfortable with the above, start on some Keras and Tensorflow tutorials."
4,Well ... What level of python and programming in general are you? Also do you have any familiarity with machine learning?
4,"Just have a get input function. it can be as simple as this:

    def get_float_input(prompt, reprompt='Invalid input, please try again'):
        while True:
            unvalidated_input = input(prompt)
            try:
                validated_input = float(user_input)
                return validated_input
            except ValueError:
                print(reprompt)

Or you could do fancy:

    class ValidationError(exception):
        pass
    
    def get_input(validator, prompt, reprompt='Invalid input, please try again'):
        while True:
            unvalidated_input = input(prompt)
            try:
                validated_data = validator(unvalidated_input)
                return validated_data
            except ValidationError:
                print(reprompt)
    
    def float_validator(str_input, low, high):
        try:
            result = float(str_input)
            if not (low <= result <= high):
                raise ValueError('invalid')
        except ValueError:
            raise ValidationError(f'{str_input} is not a valid float between {low} and {high}')
    
    if __name__ == '__main__':
        v = get_input(lambda str_input: float_validator(str_input, 1, 100), prompt='Enter a number between 1 and 100: ')

Something like that minus any bugs."
4,"If a is 5 and b is 5, is b at least as much as a?

If a is 5 and b is 4, is b at least as much as a?

If a is 5 and b is 6, is b at least as much as a?

What do your answers to those questions suggest to you?"
4,"And further, if you are 21, you're good to go, right?"
4,Try developing your own minified version of IRC.
4,"I'm not super delighted with that guy's code. I mean, it gets the job done. But for example, why use `json.loads(open('filename').read())` when `json.load(filepointer)` exists? Why use `random.choice()` in a comprehension instead of `random.choices`? And mostly, why python 2 instead of 3. This might be how I wrote your version of the script:

    import logging
    
    from faker import Faker
    
    logger = logging.getLogger(__name__)
    
    fake = Faker()
    url = ""http://127.0.0.1/wlca""
    logging.basicConfig(level=logging.INFO, format='%(asctime)s :: [%(levelname)-4s] %(message)s')
    
    while True:
        data = {
            'j_username': fake.email(),
            'j_password': fake.password(length=10),
        }
    
        logger.info(f'Sending data: {data!r}')    
        response = requests.post(url=url, data=data, allow_redirects=False)
    
        try:
            response.raise_for_status()
        except requests.exceptions.HTTPError as e:
            logger.error(f'Server responded with an error: {e}')
            exit()

See the fabulous [Faker](https://faker.readthedocs.io/en/latest/#) library. My results:

    In [2]: import logging
       ...:
       ...: import requests
       ...:
       ...: from faker import Faker
       ...:
       ...: logger = logging.getLogger(__name__)
       ...: logging.basicConfig(level=logging.INFO, format='%(asctime)s :: [%(levelname)-4s] %(message)s')
       ...:
       ...: fake = Faker()
       ...: url = ""http://127.0.0.1:5000/login""
       ...:
       ...: for _ in range(10):
       ...:     data = {
       ...:         'j_username': fake.email(),
       ...:         'j_password': fake.password(length=10),
       ...:     }
       ...:
       ...:     logger.info(f'Sending data: {data!r}')
       ...:     response = requests.post(url=url, json=data, allow_redirects=False)
       ...:
       ...:     try:
       ...:         response.raise_for_status()
       ...:     except requests.exceptions.HTTPError as e:
       ...:         logger.error(f'Server responded with an error: {e}')
       ...:         exit()
       ...:
    2019-08-18 08:34:26,428 :: [INFO] Sending data: {'j_username': 'nathanalvarez@jimenez.com', 'j_password': 'W_7O$Gfj+q'}
    2019-08-18 08:34:26,441 :: [INFO] Sending data: {'j_username': 'hrose@hotmail.com', 'j_password': 'CP&0RM_lcY'}
    2019-08-18 08:34:26,445 :: [INFO] Sending data: {'j_username': 'rwilliams@brewer.com', 'j_password': 'gcr9XqBe+w'}
    2019-08-18 08:34:26,449 :: [INFO] Sending data: {'j_username': 'andreamann@andrews-dudley.info', 'j_password': 'x!L8NRfpXm'}
    2019-08-18 08:34:26,452 :: [INFO] Sending data: {'j_username': 'mitchellmichelle@matthews-gregory.com', 'j_password': 'dR2)NzA!&%'}
    2019-08-18 08:34:26,456 :: [INFO] Sending data: {'j_username': 'meganshea@hotmail.com', 'j_password': ')p)MZ4fH0v'}
    2019-08-18 08:34:26,459 :: [INFO] Sending data: {'j_username': 'watsonangela@yahoo.com', 'j_password': 'o6CnG8hB%1'}
    2019-08-18 08:34:26,462 :: [INFO] Sending data: {'j_username': 'mmurray@gmail.com', 'j_password': 'M#7GPHthPk'}
    2019-08-18 08:34:26,465 :: [INFO] Sending data: {'j_username': 'cheryl94@yahoo.com', 'j_password': '%Lw4JT8kA2'}
    2019-08-18 08:34:26,469 :: [INFO] Sending data: {'j_username': 'vegasarah@gmail.com', 'j_password': 'j7T$$TKc^0'}"
4,Was coming to post this.
4,"I like Ubuntu. It was fine. Go with 18.04, I suppose. Or whatever. Centos was fine, too."
4,Please post code.
4,I prefer Linux/Mac.
4,"    class SubTest(SuperTest):
        def __init__(self):
            SuperTest.__init__(self)

Should be

    class SubTest(SuperTest):
        def __init__(self):
            super().__init__()"
4,It's definitely not the same thing. Pathlib provides an OOP implementation which will automatically determine the OS without the programmer habit to manually deal with it.
4,Use pathlib instead of os.path.join.
4,https://medium.com/@dannymcwaves/a-python-tutorial-to-understanding-scopes-and-closures-c6a3d3ba0937
4,That is called reraising an exception. This allows you to bubble up exceptions to get a better idea of where your program when wrong or to handle basic exceptions and to change them into custom defined exceptions that you know how to handle.
4,why give the answer. Why? :P
4,"    def free_bacon(score):
        """"""Return the points scored from rolling 0 dice (Free Bacon).
    
        score: The opponent's current score.
        """"""
        assert score < 100, 'The game should be over.'
    
        # BEGIN PROBLEM 2
    
        ""*** YOUR CODE HERE ***""
    
        # END PROBLEM 2

Okay, a fine start. By the time you get to where you should write your code, you can assume one thing and you know another thing. First, you can assume the argument that is passed into the function is the other player's score. Second, you know that this value is strictly less than 100 (because if it weren't, an assertionError would have been raised in that first line after the docstring (the docstring is the lines with the """""" and """""".

Cool. Well now what? Back to the question. A player who chooses to roll zero dice scores points equal to ten minus the minimum of of the ones and tens digit of the opponent's score. Okay. hmmm. Well okay, so you know another thing, don't you? You know that if you're running code inside this function, you have chosen to roll zero dice and you are trying to determine the score you'll get. Okay, got it. The task for this function must be to determine the score and return it.

But how? Okay, let's look at that part again: the points you score are ""equal to ten minus the minimum of of the ones and tens digit of the opponent's score"". So if the score is 89, you'd score 10 - 8 = 2. If the score was 98, you'd score 10 - 8 = 2. Okay. If the score passed in was 27, you'd score 10 - 2 = 8 since 2 < 7. Okay. So say I'm Mr. Stupid Computer Man and I can only remember one number. Also, let's say that I can compare two numbers together and keep the smaller of the two in my one-number memory. How would I do this?

    score is 27
    split the value into 2 and 7 and store the 7
    memory <- 7
    compare the other digit to see which is smaller
    memory <- 7 compared with 2
    Find that 2 is smaller so keep the 2 and forget the 7
    memory <- 2
    return 10 minus what is in memory
    10 - 2 = 8
    return -> 8

Not so bad. Now... How do we split the numbers? Well, have you studied math at all? There is the thing called the modulus that isn't known so well in primary school ... at least by that name. Most people know it as the remainder. As in the remainder of the division. So what is 27 divided by, say, 10? Well let's see: 10 goes into 27 2 times and there is 7 left over. Ah, so 7 is the remainder. Oh hey! It turns out you wanted that 7 huh? Oh and check it out. How cool is this? The quotient, the number of times 10 goes into 27 is 2 and 2 is the other number we are trying to get! Neat, so we can get there with just basic arithmetic.

So I'm thinking something like this:

    get the modulus of score and 10 and store it
    get the quotient of score and 10 and store it
    determine which value is smaller and store it
    return 10 minus the smaller of the 2 values and you're done.

Some hints:

1. The modulus operator in python is `%`. As in `27 % 10`
2. To get the quotient, you can do floor division (assuming python3) and floor division is `//`. As in `27 // 10`
3. Python has a built-in method called min(). This method returns the minimum value of the values passed to it.
4. If you're feeling fancy, python has a built-in function called `divmod()`. Look it up to see what it does.
5. You can do this in one readable line if you're feeling saucy.
6. Other people are going to tell you to convert this to a string, split it into characters, convert those characters into ints, get the min, and do the subtraction. But that just feels wrong doesn't it? I think so, but you do you."
4,"There's no *easy* solution. Well, there's no solution that is easier than this."
4,"The php:

    $post_url = 'https://testdomain.com/';
    
    $parameters = array(
        // The API command
        // The fslm_v2_api_request parameter takes one of the following values
        // verify, activate, deactivate, details, extra_data
        'fslm_v2_api_request' => 'verify',
    
        // Your API Key
        // You can set your API key in the page
        // License Manager > Settings > API
        'fslm_api_key'        => '0A9Q5OXT13in3LGjM9F3W',
    
        // The License Key
        'license_key'         => 'Trial',
    );
    
    //url-ify the data for the POST
    $fields_string = """";
    foreach($data as $key=>$value) {
        $fields_string .= $key.'='.$value.'&';
    }
    
    rtrim($fields_string, '&');
    
    // Open connection
    $ch = curl_init();
    
    // Set the url, number of POST vars, POST data
    curl_setopt($ch, CURLOPT_URL, $post_url);
    curl_setopt($ch, CURLOPT_POST, count($data));
    curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    
    // Execute post
    $result = curl_exec($ch);
    curl_close($ch);
    
    // Display the request result
    echo $result;

My take on the Python:

    import requests
    
    url = 'https://testdomain.com'
    params = {
        'fslm_v2_api_request': 'verify,
        'fslm_api_key': '0A9Q5OXT13in3LGjM9F3W',
        'license_key': 'Trial',
    }
    
    result = request.post(url=url, params=params)
    print(result.text)

This is basically what you have except that instead of passing `params=params`, you pass `data=data` which doesn't make sense to me since I don't see `data` defined anywhere.a

EDIT: Also holy crap, man! It's been a while since I wrote any PHP. Do you really have to do all that crap just to send a request?"
4,Hmm. How does this help increment a date by 3 months?
4,"    $ pip3 install date-utils

and then

    In [1]: from datetime import datetime
    
    In [2]: from dateutil.relativedelta import relativedelta
    
    In [3]: today = datetime.date(datetime.today())
    
    In [4]: three_months_from_today = today + relativedelta(months=3)
    
    In [5]: today
    Out[5]: datetime.date(2019, 8, 16)
    
    In [6]: three_months_from_today
    Out[6]: datetime.date(2019, 11, 16)"
4,"I think you should nuke your python install from orbit. Then install [pyenv](https://github.com/pyenv/pyenv) :

    curl https://pyenv.run | bash

Once you get your current python eliminated and then get pyenv installed with the above command, you can install python

    pyenv install -v 2.7.16

And

    pyenv install -v 3.7.4

(If you need other versions, do `pyenv install --list` to see what is available. 

Then when those complete do

    pyenv global 2.7.16 3.7.4

This will make it so `python` and `pip` go to python 2 and `python3` and `pip3` go to python 3. Use the command `pyenv versions` any time to see which interpreters are in use at any time. 

For your project, do one of the following, *but not both*

1)

    cd <your project dir>
    pipenv virtualenv 3.7.4 someName374 # use the version you want, of course
    pipenv local someName374
    pip install --upgrade your-packages

2) 

    sudo apt install pipenv
    cd <your project dir>
    pipenv --three
    pipenv install your-packages

You have other options for the pipenv interpreter, too. And the nice thing is that pipenv will use pyenv to get the specific version of python you want if you specify it and you don't already have it."
4,Yup. Indeed.
4,"On Mac/Linux use a shebang 

    #!/use/bin/env python3

And make the file executable:

    chmod u+x app.py

Or, better yet, use a setup.py (or even better a pyproject.toml) to set an entry point script and install it using the install method."
4,"Tell us about your system. Windows, mac, or linux? How did you install python? What versions of python do you have installed? How did you install your virtual environment manger? What is the output of `pip --version` and of `pip3 --version` both when your virtual environment is active and when it is not? What is the output of `python --version` and `python3 --version` both inside and outside of your virtual environment?

I see you mentioned the `workon` command which suggests that you're using virtualenvwrapper. But I also see that you used `pipenv install pyVmomi` which suggests that you're using pipenv. 

My gut says that you don't really get the whole python environment thing and you've been doing tutorials that do things different ways or you've been googling around trying to figure out how to do things and you've run so many random commands that you have a twisted mishmash of an environment that not even a virtual environment can overcome. I've been there myself early on in my python education and I've seen it time and again in here and elsewhere."
4,"Sorry to break your heart,  but check out collections.Counter"
4,There is a money library that uses decimal as its base. I think there are regulations on that for serious money stuff.
4,You are probably not using the python version you think you're using.
4,Go to tools > python console (or look for the icon at the bottom).
4,"You've got other burning issues, I'm guessing."
4,Query for the item in question and then use len() on the resulting dataframe/series. Need more explicit info? Post some code and/or example data.
4,"Okay. And so the axis is coming from where? Matplotlib? Something else? Post some code, please."
4,I figured. But it was funny. Ha.
4,10 uppercase(12)? Like you want that literal text? Or you want 10 E12? As in uppercase E? I don't understand what you're asking.
4,I feel like there is a lot of code you're not posting.
4,"You're good. There are a few tweaks. If you're returning a value in an if statement, you don't need an elif or an else. 

    def is_power(a, b):
        if a == b:
            return True
        if a % b:
            return False
        return is_power(a/b, b)

This cleans it up a bit and makes it more clear what's going on. Also, no need to reassign a, just pass the division."
4,guess a number between 1 and 100 (sets the number to 108)... Good luck!
4,"    print('Guess the number between 1 and 100 you have 6 tries!')
    solutionNumber = random.randint(1, 111)

Sometimes you just give the player the middle finger. 😂"
4,"That makes sense. An rpn calculator is a really easy thing to do, so there aren't really so many things to learn. You ended up learning why pop(0) is a bad idea in this post as well as f-strings over string concatenation. So that's good."
4,"The handling of unary operators in the general case doesn't have to get as ugly as you suggest. Further, the order of operators that are popped can be controlled by assigning them to values and using the values in the desired order. Still not a big deal and certainly more readable and clean than a slice."
4,"Actually, I was overcomplicating it by allowing an arbitrary number of operands for a given operator. Also allowing a unary operator doesn't take ""some major changes"", just 2 lines of code. I can make it more general, of course, but that would still be pretty simple, indeed.

    
    In [50]: import math
        ...: from functools import reduce
        ...: from operator import (
        ...:     add,
        ...:     mul,
        ...:     pow,
        ...:     sub,
        ...:     truediv
        ...: )
        ...:
        ...: token_map = {
        ...:     '+': add,
        ...:     '-': sub,
        ...:     '/': truediv,
        ...:     '*': mul,
        ...:     '**': pow
        ...: }
        ...:
        ...: def rpn(expression, evaluate=True):
        ...:     tokens = expression.split()[::-1]
        ...:     stack = []
        ...:     while tokens:
        ...:         token = tokens.pop()
        ...:         if token.isnumeric():
        ...:             if evaluate:
        ...:                 token = int(token)
        ...:             stack.append(token)
        ...:         else:
        ...:             if evaluate:
        ...:                 if token == 'sqrt':
        ...:                     result = math.sqrt(stack.pop())
        ...:                 else:
        ...:                     result = token_map[token](stack.pop(), stack.pop())
        ...:             else:
        ...:                 result = f'({f"" {token} "".join(stack)})'
        ...:             stack.append(result)
        ...:     return stack.pop() if stack else None
        ...:
    
    In [51]: rpn('1 2 3 + *')
    Out[51]: 5
    
    In [52]: rpn('9 sqrt')
    Out[52]: 3.0"
4,"What does the following return?

    print(spy_game([3,4,10,0,7,5,8]))

What should it return?"
4,"This is less than 10 mins worth of work, so there may be bugs. Something like this:

    In [41]: import math
        ...: from functools import reduce
        ...: from operator import (
        ...:     add,
        ...:     mul,
        ...:     pow,
        ...:     sub,
        ...:     truediv
        ...: )
        ...:
        ...: token_map = {
        ...:     '+': add,
        ...:     '-': sub,
        ...:     '/': truediv,
        ...:     '*': mul,
        ...:     '**': pow,
        ...:     'sqrt': lambda x: math.sqrt(x)
        ...: }
        ...:
        ...: def rpn(expression, evaluate=True):
        ...:     tokens = expression[::-1].split()
        ...:     stack = []
        ...:     while tokens:
        ...:         token = tokens.pop()
        ...:         if token.isnumeric():
        ...:             if evaluate:
        ...:                 token = int(token)
        ...:             stack.append(token)
        ...:         else:
        ...:             if evaluate:
        ...:                 result = reduce(token_map[token], stack)
        ...:             else:
        ...:                 result = f'({f"" {token} "".join(stack)})'
        ...:             stack = [result]
        ...:     return stack.pop() if stack else None
        ...:
    
    In [42]: rpn('1 2 +')
    Out[42]: 3
    
    In [43]: rpn('1 2 + 3 *')
    Out[43]: 9
    
    In [44]: rpn('1 2 + 3 *', evaluate=False)
    Out[44]: '((1 + 2) * 3)'"
4,"Go [here](https://wiki.python.org/moin/TimeComplexity). Go to the List table and then find the pop intermediate (which is what you're doing). Note that the run time is O(k) where k is the number of elements to the right of the insertion point. So every time you insert or delete from the left of a list, you essentially have to create a whole new list. You have to touch every element. And since you're doing that in a loop that means that you touch every element each and every time you pop an element. 

Using reverse isn't so scary, though. Just do something like this:

    expression = expression[::-1].split()
    while expression:
        c = expression.pop()
        # and so on

Once the reverse is done, you can just forget about it and use pop() efficiently."
4,"One hopes you note that your code is far too complex to begin with and a fully functional rpn calculator could be accomplished in much smaller amount of code. So if it is readability you're after, well...  Also, I recommend that you reverse your list and just use pop() since that is constant time (or use a deque and use popleft()). 

And no time like the present to learn you some regex!"
4,"Just that move is probably not enough. You also need to be importing correctly. To know that, I'd need to see some code. Pick a sub module and post the code to something you're having trouble importing. Also, post the code where you are attempting to do the import."
4,My recommendation still stands. The top-level __init__.py needs to go away and the sub folders should all have an __init__.py at the very least.
4,"Python 3.7 is on your path, but I don't think you're calling your script with python 3. Try using 

    python3 <path to .py file>

Instead."
4,You're probably forgetting a quote or a paren somewhere. Post all your non-working code if you want help.
4,"Okay, do what you want. Just know that having the `__init__.py` at the top level and nowhere else will cause the very problems you're having. If you follow my recommendation, your imports will just work. More info about namespace packages [here](https://packaging.python.org/guides/packaging-namespace-packages/#native-namespace-packages)."
4,Reversing the list would also allow pop to be used in constant time.
4,"Be brave, use regex!

    def wrap(param):
        if re.match(r'(\(.*?\)|(?!.* ).+)', param):
            return param
        return f'({param})'

This works:

    str_operators = {
        'param_type': str,
        '+': lambda a, b: wrap(a) + ' + ' + wrap(b),
        '-': lambda a, b: wrap(a) + ' - ' + wrap(b),
        '/': lambda a, b: wrap(a) + ' / ' + wrap(b),
        '*': lambda a, b: wrap(a) + ' * ' + wrap(b),
        '**': lambda a, b: wrap(a) + ' ** ' + wrap(b),
        'sqrt': lambda a: 'sqrt' + wrap(a)
    }

This is so much nicer:

    str_operators = {
        'param_type': str,
        '+': lambda a, b: f'{wrap(a)} + {wrap(b)}',
        '-': lambda a, b: f'{wrap(a)} - {wrap(b)}',
        '/': lambda a, b: f'{wrap(a)} / {wrap(b)}',
        '*': lambda a, b: f'{wrap(a)} * {wrap(b)}',
        '**': lambda a, b: f'{wrap(a)} ** {wrap(b)}',
        'sqrt': lambda a: f'sqrt{wrap(a)}'
    }

Or

    def get_str_operator(operator):
        def fn(a, b):
            return f'{wrap(a)} {operator} {wrap(b)}'
        
        def sqrt_fn(a):
            return f'{operator}{wrap(a)}'
    
        if operator != 'sqrt':
            return fn
        return sqrt_fn
    
    str_operators = {op: get_str_operator(op) for op in ['+', '-', '/', '*', '**', 'sqrt']}
    str_operators.update(param_type=str)"
4,"First off, do you have `__init__.py` files in your sub-directories? Like this:

    .
    ├── app.py
    ├── cameras
    │  ├── __init__.py
    │  └── camera.py
    ├── scenes
    │  ├── __init__.py
    │  └── scene.py
    └── views
       ├── __init__.py
       └── view.py

(By the way, if you do `tree | pbcopy` (on a mac, and you may have to install tree), you can get that directory printout easily)

With that structure, if you have this:

    # ./cameras/camera.py
    class Camera:
        def __init__(self, foo):
            self.foo = foo
    
        def bar():
            return self.foo + 2

or whatever... Then you can do this:

    # ./cameras/__init__.py
    from .camera import *

Then you can do something like this:

    # ./scenes/scene.py
    from camera import Camera
    my_camera = Camera(42)
    print(my_camera.bar())

And what have you."
4,Have you actually tried it?
4,"With rare exception, Pycharm is where it's at when you're developing in industry."
4,"You can't just squash that code together without making any changes. If you're going to do 

    import datetime

Then you must use

    datetime.datetime.now()

And if you're going to use 

    from datetime import datetime

Then you must use

    datetime.now()"
4,"First, [make all pulls use rebase](https://coderwall.com/p/tnoiug/rebase-by-default-when-doing-git-pull) 

Second, rebase against the master branch (or whatever your base branch is) often, squashing commits as long as it makes sense to do so (check out the interactive rebase). 

Third use pull requests to merge the branch into master (or whatever you use). 

Do that and you'll have a nice history where small tasks have a single commit and large tasks have a few commits and the history is nice and pretty."
4,"Do yourself a favor and learn how to branch, learn how to rebase, learn how to handle conflicts, learn what a PR is, and learn how to merge a pull request. Each of those things probably has dozens of videos on youtube you can watch to help you understand what is going on and how to be successful with git. You may not get to 100% with git, but if you can get from 80% on git to 90% or 95%, you'll be all set for almost every task."
4,"This code isn't smaller, but it's got some interesting features. We haven't covered exceptions and exception handling, but check out the get\_int\_input() function to see how that might work.

    import math
    import random
    
    LOW = 1
    HIGH = 100
    MAX_TRIES = math.ceil(math.log(HIGH, 2))
    
    possible_numbers = range(LOW, HIGH)
    actual_number = random.choice(possible_numbers)
    
    
    def is_match(actual, guess):
        return actual == guess, math.copysign(1, actual - guess)
    
    
    def get_int_input(prompt, low, high):
        try_again = True
        guess = None
    
        while try_again:
            try:
                guess = int(input(prompt))
                if not (low <= guess < high):
                    print(f'You must enter a number between {low} and {high - 1}')
                else:
                    try_again = False
            except ValueError as e:
                print('You may only enter integers')
    
        return guess
    
    
    print(f'''{"" NUMBER GUESSING GAME "":*^100}
    
    You have {MAX_TRIES} tries to guess the number between {LOW} and {HIGH}
    ''')
    
    for count, attempt in enumerate(range(MAX_TRIES, 0, -1), start=1):
        print(f'You have {attempt} guesses left')
    
        guess = get_int_input('Guess a number: ', low=LOW, high=HIGH)
    
        match_found, direction = is_match(guess, actual_number)
        if match_found:
            print()
            print(f'CORRECT! The number was {actual_number}. '
                  f'You got it on attempt {count}')
            exit()
    
        print(f'Your guess is too {""high"" if direction > 0 else ""low""}', end='\n\n')
    
    print(f'Too bad! The number was {actual_number}.')"
4,Here's a U-net implementation I built: [https://github.com/mikelane/SegNet/blob/master/network.py](https://github.com/mikelane/SegNet/blob/master/network.py)
4,"The first one the only person mentioning one-hot encoding doesn't know what he is talking about. The other person is talking about creating a mask where a pixel with a 1 is a part of the mask and a 0 is not. This is not a one-hot encoding.

The 2nd answers aren't much better. Just create a mask where each separate class to be segmented has its own unique color. That's your mask that you train on. This is how you can have the correct shape."
4,"Your reading is bizarre. A one-hot encoding is used for classification, not segmentation. That is to say if we have 3 classes, turtle, monkey, and chicken, and if this training or test image is of a turtle, then an encoring would be [1, 0, 0]. If the next image is a chicken, its one-hot encoding could be [0, 0, 1]. 

But with semantic segmentation, you don't have a one hot encoding, you have a *mask*. That is to say that your algorithm is generating an image as a result *not* a vector of 0s and 1s."
4,"Wait. If you're doing segmentation, how can a 1-hot encoding possibly be what you want to do?"
4,"Can you post your project in github or post the directory structure and code here, please."
4,"I'm probably going to need to see some actual code, then."
4,"    date2  -> array([datetime.date(2019, 8, 6)], dtype=object)

date2 looks like it has an array of datetime objects not a single datetime."
4,This is a great lecture on the subject: [https://youtu.be/-W9F\_\_D3oY4](https://youtu.be/-W9F__D3oY4)
4,"Right. So a subsequence is any sequence with zero or more items missing so long as the remaining items retain the same ordering as the original sequence. So we could have an recursive solution, right?

    1. The only subsequence of an empty string is itself.
    2. For a given character in the string, the subsequences are all the subsequences 
    of the characters to the left of the character and all the subsequences to the 
    right of the character both with and without the character in question. 

So ""abc""... for each of the characters, get all the subsequences of the substring to the left of the character and get all the subsequences to the right of the character and then return all those subsequences concatenated with and without the character. As long as you consider the base case, you'll be all set."
4,"Well, think it through. First, what is a subsequence?"
4,"By ""manually"" do you mean like with a pencil and paper or something?"
4,"It's too late. You're incapable of learning anything past 26. Sorry. Please report to the nearest senior citizens center to receive your daily ration of pudding. 

God I hope it isn't too late. I didn't learn Python until I was 39."
4,"I've seen DP algorithms that deal with flow, like the flow of water through a system of pipes.  That's about as close as I've come to what you mention. 

You'll probably have better luck if you provide more specific information in your question."
4,"So be a programmer. Use some kind of loop to see if the results has a ""next"" key. If so, stash the data you have already gotten and go get the next. Do that until there is no more data to get."
4,Isn't the data in the 2nd page what you're looking for?
4,"    import numpy as np
    import pandas as pd 
    
    df = pd.DataFrame([random.sample(range(30), k=6) for _ in range(100000)])
    n = len(df[(df >= 7).sum(axis=1) >= 4])
    print(f'probability: {n / 100000:0.4f}')

I may have screwed something up. I'm posting from my phone. I just love the power of numpy and pandas, so I wanted to share."
4,"Go to the url in the ""next"" key and see what you get."
4,Also pycharm's debugger offers the ability to stop on the first exception and lets you inspect the call stack.
4,"Okay. Your documentation is perfect. Good job. 

¯\\\_(ツ)\_/¯"
4,"If your team needs a comment like this:

    #set today's date
    today = date.today()

Then there is really no hope they can be successful in tying their shoes let alone reading any code. I've been watching Deadwood recently and it's hilarious how often the character EB Farnum gets chastised for saying the same f---ing thing that was just said in different words. 

Don't be like EB Farnum. If it is obvious what your code does, don't comment it for god's sake. 

But notice that it is obvious what your code does because of the naming of the variables and functions. If, on the other hand you had this code:

    asdf = foo.bar()

You'd need a comment to tell everyone what it does. So that means that your _code itself_ can be sufficient documentation if the variable and method naming is done properly. 

What's more, comments don't have to change when you change the code. Changing your date.today() call from above to something else without changing the comment, can work just fine. 

    # set today's date
    tomorrow = date.today() + timedelta(days=1)

Now think how confusing that is! The developer made his intentions clear with the comment, right? But I can see the code does something completely different. It gets tomorrow's date, not today's! I'm confused. WTF??

Comments can go stale. Correction: comments WILL go stale and you must remember to update them or else the confusion will become a major obstacle to development rather than something helpful. But code... code cannot go stale. If you have excellent naming conventions, your code will do what it says it does *every time*. 

This is why so many people stress not only self-documenting code, but also to eliminate comments wherever possible. Comments should tell the story of why or the overall goal of the code NOT what the code does. 

So I think you not only included too many comments, you didn't write the code with self-documentation in mind. You ought to refactor your code so that just by reading it, you understand what it is doing.

ALSO: good god, man, why aren't you using Pandas?"
4,"Don't iterate. At least don't do something like 

    for row in df:
        #do a thing

Think of pandas as a kind of in-memory database with its own query language. Let Pandas do the iteration for you. What I'd do is to create a new column that contains just the first part of the postal code. Use [pandas.DataFrame.apply](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html) and pass a function (a lambda is fine) that splits the string on the space and returns the first part. 

An example is [here](https://www.geeksforgeeks.org/create-a-new-column-in-pandas-dataframe-based-on-the-existing-columns/amp/)"
4,GitHub mostly. Some use Gitlab.
4,"Github, mostly. Some use Gitlab."
4,"https://docs.python.org/3/library/functions.html#round


https://docs.python.org/3/library/string.html#formatspec"
4,I highly doubt your line terminator is `'\r'`. It might be `'\r\n'`. Pandas is looking for the lone carriage return character and not finding it before the amount of text gets too big.
4,I'm 43 and I'm a software engineer. I finished my degree when I was 41.
4,"Take [this function](https://github.com/itwasntzak/deliveryTracking/blob/f0da5683e6ff8f51c987bf95662d43910d1c7c0a/delivery.py#L25)  for example. You could simplify your life so much by having a method that gets input from the user. Give it parameters prompt, reprompt, valid_responses, and/or validator (a callable function that validates input). Test the hell out of this method so you know it works (hint: pytest). Then you can stop with the crazy nested try except nonsense. You can just call that get input function with the parameters you want and your flow will be so much cleaner (and shorter!)"
4,Post your pandas code. Just the read_csv part.
4,So ... read it in chunks :-)
4,Thanks. 12 years goes by quick.
4,"Nice! Tetrominos was one of my favorite homework assignments. I used numpy arrays to create the tetrominos. So this:

    tile_o = np.ones((2,2), np.int)
    tile_l = np.array([[1, 0], [1, 0], [1, 1]], np.int)

and so on. The nice thing about numpy arrays is that you get the rotations basically for free because it just adjusts the indexing. So you can try to place the tetromino, then rotate it using np.rot90() and try again. Of course, you'll probably want to keep track of the amount of rotational symmetry as an optimization."
4,"This is a good answer, OP. In addition to being easy to code, it is also implemented in C under the hood so it is fast. I don't really see any way around generating all (n \* (n - 1)) / 2 combinations (where n is the length of the list). So it's O(N^(2)), but ¯\\\_(ツ)\_/¯."
4,Why not use [Pandas](https://pandas.pydata.org/)?
4,"I'd have you do all the tests. Any function or method you write should have tests that cover the happy path, tests that cover a bunch of sad paths, and tests that cover corner cases. I recommend pytest. Also I recommend an approach called Test Driven Development. There are plenty of books on that."
4,I'd probably start with the basics to try to understand what these files are and how to use them in general. Then I'd move to the specifics of your case.
4,Where are your tests? Surely you don't expect me to install and use something that is completely untested?
4,https://www.tensorflow.org/guide/checkpoints
4,"A general solution must surely keep in mind that the only values of x and y that must be checked are in the x and y range of the circle. The sine function can have any x value, but its y values are limited. So if the sine's y-value range does not intersect they circle's y-value range, there cannot be an intersection. 

One you eliminate that scenario, if you are to determine this in python, I'd suggest to evaluate the sin function in the range of the x-values of the circle. Take some collection of points (x, y) that solve the sine function and see if they solve the circle function, too. You'll probably find one or more points that very nearly solve it (though you will probably not find points that solve it exactly and you may find zero points, too). 

Once you have the points that nearly intersect, you can substitute the sine equation for y in your circle equation and use an optimization function like scipy.optimize.newton to solve for the precise intersections for the initial batch of approximations."
4,A MUD text game is a popular option. Another is to do some kind of graphics thing using turtle.
4,"That last line should be

    print(myobjectx.function())

you must call the function using the parentheses."
4,"Break it down into pieces. You'll need something to store the city information like a text file or, better yet, a database. You'll need something to serve the data from the database to whatever makes the map. You'll need a user interface that creates the map with the appropriate data, allows the user to zoom in (and, hence, the UI redraws the data), has some way for the user to make guesses, has some way to identify the correct answers, keeps a timer, outputs scores, and deals with new games.

Really, the data storage and the backend server are the least of your problems. As long as you can populate a db with the cities you want to use and as long as you can write a simple server that creates an endpoint that returns that data when asked, the backend is a piece of cake. The front end is more work. You just need to break it down into pieces, though."
4,There's nothing that I'm aware of that does this. Are you trying to learn to do this yourself or are you just interested in using a library that has already implemented this?
4,"If you're on a linux-type system, then you'll want to pipe your stderr to a file, I'd think. You could have a global exception handler that catches errors and uses the logging module to log them with a logging level of error."
4,"It's hard to give recommendations on this. However, in general, if the file is not too big to be read in its entirety, you could read in the entire file as a string. Then you could use clever splicing (or some data structure like a deque, or even a list comprehension) to look at every group of 4 characters. If the group of 4 characters is not in the format M, 5 or 6, some digit, some digit, then you can discard it and move on (unless you need to account for M499 or less or M700 or more, that is). You can either have some counter or an enumeration or what have you to use for comparison of the expected value and the actual value. Then you could change it as required. The following is untested, so it surely has bugs, but it should get the general idea across:

    import string
    
    with open(filename) as f:
        data = list(file.read())
    
    counter = 500
    for i, c in enumerate(values[:-4]):
        substr = ''.join(values[i: i+4])
        if not re.match(r'M[56]\d\d', substr):
            continue
        if int(substr[1:]) != counter:
            values[i+1], values[i+2], values[i+3] = str(counter)
        counter += 1
    
    result = ''.join(data)"
4,"According to the documentation:

>\*?, +?, ??  
>  
>The '\*', '+', and '?' qualifiers are all *greedy*; they match as much text as possible. Sometimes this behaviour isn’t desired; if the RE <.\*> is matched against '<a> b <c>', it will match the entire string, and not just '<a>'. Adding ? after the qualifier makes it perform the match in *non-greedy* or *minimal* fashion; as *few* characters as possible will be matched. Using the RE <.\*?> will match only '<a>'.

So...

    In [10]: import re
    
    In [11]: regex = re.compile(r'(?P<date>\d{1,2}\/\d{1,2}\/\d{1,2}, \d{2}:\d{2}) - (?P<name>[^:]+?): (?P<text>.*)')
    
    In [12]: s1 = '2/17/20, 17:44 - Mario K: here is the list: - one list - some other example'
    
    In [13]: s2 = '2/17/20, 17:44 - Luigi: here is the list: just some text'
    
    In [14]: regex.match(s1)
    Out[14]: <re.Match object; span=(0, 75), match='2/17/20, 17:44 - Mario K: here is the list: - one>
    
    In [15]: match.groupdict()
    Out[15]:
    {'date': '2/17/20, 17:44',
     'name': 'Mario K',
     'text': 'here is the list: - one list - some other example'}
    
    In [16]: regex.match(s2)
    Out[16]: <re.Match object; span=(0, 56), match='2/17/20, 17:44 - Luigi: here is the list: just so>
    
    In [17]: _.groupdict()
    Out[17]:
    {'date': '2/17/20, 17:44',
     'name': 'Luigi',
     'text': 'here is the list: just some text'}"
4,"[https://www.python.org/dev/peps/pep-0484/#arbitrary-argument-lists-and-default-argument-values](https://www.python.org/dev/peps/pep-0484/#arbitrary-argument-lists-and-default-argument-values)

[https://docs.python.org/3/library/typing.html#typing.Callable](https://docs.python.org/3/library/typing.html#typing.Callable)

Looks like you'd want:

    def inner_func(fn: Callable[[LoggerAdapter, StopWatch, Any, Any], Coroutine]):

or

    def inner_func(fn: Callable[[LoggerAdapter, StopWatch, ...], Coroutine]):

those are nearly equivalent except the latter allows for an unlimited number of arguments and, perhaps, it truly mirrors what you're doing. The former is technically correct, according to the docs, but is probably less helpful when it comes right down to it."
4,"I don't have any specific Udemy courses in mind, but I'm guessing there are. Coursera is also an option. Or you can do Andrew Yang's machine learning and his deep learning class."
4,"Start with a course on computer graphics with python and opencv. Then move on to a basic machine learning course. After that, take up a deep learning course that focuses on computer vision. The deep learning course could be in TensorFlow/Keras or PyTorch/fast.ai, doesn't matter, really. Once you've got that information, you're all set."
4,I'd need to see example data to be able to tell you that for sure. 5 to 10 rows per table should suffice.
4,Have you considered using Pandas?
4,"better:

    >>> from collections import defaultdict
    >>> the_list = [['1', '2968', '1.0'], ['1', '3671', '3.0'], ['2', '10', '4.0'], ['2', '17', '5.0']]
    >>> dictionary = defaultdict(list)
    >>> for k, *vs in the_list:
    ...     dictionary[k].extend(vs)
    ...
    >>> dictionary
    defaultdict(<class 'list'>, {'1': ['2968', '1.0', '3671', '3.0'], '2': ['10', '4.0', '17', '5.0']})"
4,Ah. Indeed.
4,"Edit: misunderstood the question. A proper solution:

    >>> from collections import defaultdict
    >>> the_list = [['1', '2968', '1.0'], ['1', '3671', '3.0'], ['2', '10', '4.0'], ['2', '17', '5.0']]
    >>> dictionary = defaultdict(list)
    >>> for k, *vs in the_list:
    ...     dictionary[k].extend(vs)
    ...
    >>> dictionary
    defaultdict(<class 'list'>, {'1': ['2968', '1.0', '3671', '3.0'], '2': ['10', '4.0', '17', '5.0']})"
4,"Or with a dict comprehension:

    l = [['1', '2968', '1.0'], ['1', '3671', '3.0'], ['2', '10', '4.0'], ['2', '17', '5.0']]
    d = {k: vs for k, *vs in l}"
4,"We'd be better able to understand if you posted 5 or 10 rows of data. If I'm reading you correctly, you have missing data in one of the lists that you need to figure out how to account for in the others?"
4,"Here is the code for reference:

    for a, b, c in zip(lats_model, lons_model, temps_model):
        if (a>= a-.25 or a<=a+.25 or a) in lats_pireps and (b>=b-.25 or b<=b+.25 or b) in lons_pireps:
            f = lats_pireps.index(a)
            g = lons_pireps.index(b)
        if f == g:
            writer1.writerow([a, b, c, temps_pireps[f]])
        else:
                continue
    else:
        writer1.writerow([a, b, c])"
4,The decision tree image?
4,"Okay, so unit testing your database doesn't make much sense to me. You can unit test the tables or your models, but I don't really know what you'd unit test in terms of the database itself. So you should get clarification on what, exactly, is required.

Insofar as unit testing your connection, what functions have you written? How can you isolate those functions? Are you supposed to be using any particular unit test framework in python (e.g. pytest)?"
4,You're unit testing the database? Or you're unit testing your code that connects to the database?
4,"That doesn't make much sense to me. Post your python code and exactly what you're using to run your app, please."
4,"I don't know what you mean by ""get grids"". An image is just a list of lists. Actually, when working with images, you will want to use numpy (or something like OpenCV that uses numpy under the hood). You absolutely do not want to be iterating over an image with python loops."
4,"Well, it's the skill set that will allow you to group posts together so you can hope to identify anomalies."
4,"Well I'd start with the basics of python. Get yourself good all the way up through object-oriented programming. Also get on khan academy or something and get yourself up to speed on the math. After that, you can start to think about machine learning."
4,"This is a lot more difficult than you think and will involve plenty of machine learning. How familiar with machine learning are you? If not very, then how familiar with statistics, calculus, and linear algebra are you?"
4,You can't use hyphens in your folder names. The hyphen is a subtract operator and will cause an error. Also spellcheck the name of you my-functions-folder. Also put an empty file named \_\_init\_\_.py into my-functions-folder and into test-folder.
4,"The readable, pythonic way

    for row in grid_of_values:
        for value in row:
            if value == 2:
                print('This is a two')

Or the code golf way

    [print('This is a two') for r in grid_of_values for v in r if v == 2]"
4,I'd do the P4E. Data Science courses will lead you a bit astray from the school work you're about to start doing.
4,"And why is the parameter name ""size"" not ""shape"". That bugs me, I admit it."
4,"Certification, Schmertification. Just get the learns and don't worry whether or not you're certified."
4,"This absolutely is possible in python using [functools.singledispatch](https://docs.python.org/3/library/functools.html?highlight=singledispatch#functools.singledispatch). Alternatively, this is also accomplished using the `*args, **kwargs` pattern."
4,"The original requirement is not met by this code or your perfect code. I'm talking about my code written as _a challenge in response to your code_. Where in my code does user input get gathered? 

As a corollary, assuming user input was gathered in the only spot it would make sense, before the py_expression variable assignment, please inform me what input would result in hard disk deletion and gnashing of teeth."
4,"We need all your code, friend, or else we can't see what's up. There are a number of potential problems there, but we can't identify which one it is without code."
4,You might find more answers in r/cscareerquestions than in here.
4,"Eventually the lack of precision of floating point numbers causes this to become 1. The question is what problems is this causing you? In some situations, there won't be any problem, in others there might be.

One thing we did in the ML class I TA'd for, for instance, is to set the target values to 0.9999 and 0.0001 instead of 1 and 0. This might help if you're in a similar situation as us. Or it might not. I don't know. I don't really have enough info to help."
4,I'm not familiar with the term stack diagram. Are you just trying to determine what methods will be called (and hence be placed on the stack in their own frame) and when?
4,I'm even dumber than I sound! Please tell me what line of my code (or your perfect example) has user input. I'm so dumb. Lolz.
4,"> I've led more developers than you'll ever work with

Stop with the bravado, your excellency, you don't know anything about me.

> and shipped code used by hundreds of millions in commercial use.

Oh. Wow!

> You can't justify silencing the linter because you haven't inspected the code that can run.

I _absolutely_ have. I know with _absolute certainty_ that the only code that can possibly run is `1 {} 2 {} 3 {} 4` where the {} values are replaced with one of `+`, `-`, `*`, and `/`.

> I doubt you are in any kind of position to claim that the code shown is any kind of industry best practice.

Once again, you don't know anything about me. All you've proven is that you know one hard-and-fast rule and you're too inflexible and/or set in your ways to allow yourself to understand that there are certain situations that breaking some rules is not only okay, it's preferred. Like I said in another response, Lisp programmers are wondering what all the fuss is about. Using eval() in lisp is just another Tuesday, and eval in Lisp comes with all the hazards it comes with in Python. Someone somewhere decided that eval isn't how we do it in Python and the best way to ensure a preference is followed is to make it a Rule That Shall Not Be Broken. And so here we are.

Anyhow, your eminence, clearly you're too entrenched, too dug in, and your ego is too closely tied to this to admit that, just this once, you might just be, bear with me, incorrect. I get it, it's hard. I mean, look how you're flailing. You're suggesting the user entered input into code that doesn't have any input() statements. Moreover, even if there was a user input, the code you gave would be mangled beyond repair by the remainder of the code and would be rendered inert.

I don't know you or what company you supposedly work for, but I wish I did. Honestly, not because I'm so ridiculous to like tattle on you or something. I just want to avoid your place of business like the plague. I'd be grateful if you'd DM me that, so I don't ever have to deal with someone who does PRs without actually taking any time to evaluate the code in question and who mistakes ""Rules"" for godly commandments. I swear to Guido that I will only use it for my personal avoid file and nothing more."
4,"Please show me where the user inputs anything in my script, or your  perfect example script for that matter. 

EDIT: Because the last was from my phone. Tell me, professor, if the user is asked for input and their input is not `1 2 3 4` (or the like), but rather `exec('rm -rf /');`, what happens in my code as written from the py_expression line and onwards? At what point does that command get executed? Just how exactly does my harddrive get wiped? I'm an eager student, your honor, please keep me safe.

Silencing the linter with a comment in the code (especially for warnings) is standard practice. Maybe you're not actually in industry and don't know standard practice, though. In that case, consider it an introduction to how things are actually done. 

I'll stop being an ass when you do, teach.

Nobody is teaching anyone that eval is the first tool to reach for. Settle down."
4,"They just require babysitting. Plus they add unnecessary coupling and dependencies. I've only found one application of them that I like, and production code ain't it."
4,"A git-submodule sounds like a pain in the ass to me. In practice at work, they *are* a pain in the ass that everyone considers to be tech debt and wants to get rid of. So there's that.

In your case, I see absolutely no value in using a git submodule. If you need to refactor it, then I recommend going the OOP route. If you want your logger to be an abstract base class, that's totally doable in python (this is why the NotImplementedError exists) and it's also pretty common.

Another option... You sound like you're coming from C++ so you've probably been warned to stay away from multiple inheritance at all costs. Well, welcome to python. You can create a class SedanBuilderLogger that inherits from the class Logger (maybe renamed class BaseLogger now) and that inherits a SedanLoggerMixin, too. You get all the base logger functionality that you can reuse or override them as required and because you inherited from the SedanLoggerMixin, you also have the specialized SedanLoggerMixin methods available to you, too."
4,"A unit in this case is one bit of functionality. It's usually concerned with class functions, but module-level functions (aka, functions), too. 

A unit test, then is just a test of a function. In particular,  a unit test isolates a function. That is to say that the tester has complete control over the global state and the results of any other functions the tested function calls.

If I write a function that uses the requests module to make a call out to an api, then in the test, I will mock the requests function that my function is calling so it does not actually make a request over the internet and so it returns values that are expected, values that are unexpected, and corner cases."
4,"Here you go!

    #!/usr/bin/env python3
    
    """"""Teach the professor that sometimes it's okay to break the rules.
    """"""
    
    # pylint: disable=invalid-name
    
    import itertools
    
    GIVEN_NUMBERS = [1, 2, 3, 4]
    py_expression = ' {} '.join(str(n) for n in GIVEN_NUMBERS)
    
    GIVEN_OPERATIONS = '+-*/'
    operator_permutations = itertools.product(
        GIVEN_OPERATIONS, repeat=len(GIVEN_NUMBERS) - 1
    )
    
    results = (
        py_expression.format(*permutation) for permutation in operator_permutations
    )
    
    for result in results:
        # We know the python expression being evaluated is safe.
        # pylint: disable=W0123
        print(f'{result} = {eval(result):0.2f}')

Would you look at that. It is every bit as clean, maintainable, and readable as your code. Moreso, for various reasons, in fact, I think. Now let's see what that pesky pylint thinks, shall we?

    $ pylint -s n for_the_professor.py
     

Sweet. All good. We used eval and we didn't even manage to make the earth explode.

Look, in most cases, I'm totally cool with telling folks not to use eval. Mostly it's a bad idea for all the reasons you listed. But when none of the reasons you listed (at all) applies to the code in question, eval is a fine tool to have in your toolbox. Now, if that means I can't teach at whatever code school or whatever you belong to, fine. Like I said, you probably can't afford me anyhow. I make it my job to do my best to identify when we should be following the standard practices and to identify the rare occasion that we can break the rules. This falls squarely into the column of rule breaking because when we do, we end up with cleaner, more readable, more maintainable code."
4,"Not for nothing, professor, but you could *at least* go to the documentation...

>**eval-used (W0123):** *Use of eval* Used when you use the “eval” function, to discourage its usage. Consider using ast.literal\_eval for safely evaluating strings containing Python expressions from untrusted sources.

There's nothing in there about the code being problematic or the inability to determine correctness. There isn't even anything about not using eval or something like it (ast.literal\_eval). No, this is just a warning to discourage use of eval and to consider using a different kind of eval *if the source of the Python expressions is untrusted*.

So yes, it most certainly does mean it's just a warning. It means take a moment to consider what you're doing and why and only continue if you're absolutely sure it's safe.

I'll let you chew on that whilst I write a quick ditty for you since I'm at the computer now."
4,"If I get time tonight to crank out a little ditty, sure, why not. Can't now, on the phone. 

I'm not wrong about pylint. That was a warning. You do understand the difference between a warning and an error, right?

If I was one of your instructors, whatever that means, I wouldn't stay if you're too dogmatic and inflexible to allow rule breaking where it makes sense. Besides, I doubt you could afford me ;\^)

Let's teach beginners all the things. Let's teach them why it's generally wrong to use eval. Let's also don't make them think eval is some magically destructive function."
4,"Why would that be enough?

This suggestion does not necessarily lead to a habit. Why would it?

If you can't decide whether or not eval is useful and safe in this circumstance, then that's a problem.

Look, I know that we programmers don't have many hard and fast rules. And I know that when we find a rule that is more or less hard and fast (or thought to be hard and fast), we latch on to it like nobody's business. I get that ""don't use eval"" is just about as hard and fast a rule as we have in python. All I'm saying is that we have to be smart enough to know when it's okay or even preferable to break the rules. Those of us who are professional programmers need to be able to identify when it is okay and when it isn't. 

And just FYI, lisp programmers are wondering why this is such a debate. Using eval for them is just another Tuesday (and they face all the same problems with it as python devs do)."
4,"What's the first point you're making? This can obviously be solved in a number of ways. 

As for pylint, that's just a warning, so I'm not sure what your point with that is either."
4,"Oh. Well, then. Haha"
4,"Of the reasons listed by the other comment, which one affects this particular program? This isn't just easier, it's cleaner and more maintainable than other solutions. And I have the iterative, semi-functional, and recursive solutions in mind when I say that."
4,"This particular code does not accept any input. Debugging this would be simple. The no linter would have difficulty with this. This would be plenty fast for anyone. In fact, for this problem, it's a reasonable solution. I'd argue that it is perhaps even better than a solution using itertools and operator.add and so on."
4,eval looks like a decent way to accomplish this particular task. What are you envisioning being the issue with it here?
4,"Not sure if this will satisfy your needs, but you could use the [extras](https://poetry.eustace.io/docs/pyproject/#extras). If you have the following in your pyproject.toml:

    [tool.poetry.dev-dependencies]
    flake8 = { version = ""^3.7.8"", optional = true }
    
    [tool.poetry.extras]
    flake8 = [""flake8""]

In your pre-test environment you could install like this:

    poetry install -E flake8

But in your test environment, you could avoid installing it by not using the extras flag."
4,"If you have the schedule saved as excel, then you can read it in and write it out by using Pandas. No problem there. The general idea you have seems like a good one, though if there are multiple kids making choices at the same time, deconflicting those choices is going to be difficult."
4,"Isn't flake8 a dev dependency? Meaning, shouldn't I be able to run it when I am developing so that I can avoid committing improperly-formatted code? One would think that pytest would also be a dev dependency."
4,"C++ is a beast of a language, to be honest, but, in general, you'll be doing the same kinds of things in C++ that you do in python. So once you get the syntax for defining and setting variables, conditionals, loops, comparisons, classes, etc., you'll be fine with the basics of C++ (and any C-like language including C, Java, JavaScript, etc). So don't stress there.

The main sticking point you're likely to have at first is the fact that C++ is statically typed and that you must do your own memory management. The basics of both are reasonably easy to grok, but they both are notoriously complex to fully understand.

You'll find that things are just... harder ... in C++. It takes a lot more code and a lot more time to get to the same place. Also, for God's sake, when you're coding in C++, code a few lines (5 or 10 at most) and then test what you've written thoroughly. If you don't, you will quickly get yourself into a world of hurt."
4,"How did you install scikit-learn? Are you running your program with the same interpreter you installed that library with? What is your system, how are you running your code, what version of python and what version of pip do you have?"
4,What's the question?
4,"It depends on your preferences. If you want to develop for the web, learn yourself some JavaScript. If you want to develop for mobile, learn yourself Objective-C, Swift, and Java (and start looking at kotlin, flutter, and dart). If you want to get into machine learning, learn C/C++ and CUDA. If you want to get into data science, learn R and JavaScript. If you want to get into robotics, learn C. If you're trying to push into some more specialized research areas or academia, learn Haskell."
4,"    >>> bin(1234)
    '0b10011010010'"
4,"GraphQL is not a database, it's a query language that is independent of the underlying database. The competition is not relational or nosql databases, but rather REST. I'd focus on learning how to query REST APIs first and then learn how to query graphql APIs. Then learn how to write a REST API and then learn how to write a graphql api (could do those last 2 simultaneously, if you want)"
4,"~~Graphql != graph database. You can (and very often will) have a graphql api for a relational database.~~

Edit: I didn't read your entire response. You clearly know that graphql isn't a database. Sorry about that."
4,"Your requirements.txt has ""pip freeze"" on the first line. Might want to get rid of that.

This

    from XL.columns import *
    from XL.column_data import *
    from XL.parse_files import *

is almost always a bad idea. Consider importing like this

    from XL import (
        columns,
        column_data,
        parse_files
    )

And then call the functions like

    columns.whatever_function_name()"
4,"From my experience, you'll never not feel that way."
4,"Egads. You're right. Never write code you don't test, folks!"
4,No clue.
4,"I tend to write all classes and their supporting classes in a single file. In Django, for example if I have a class that inherits from Model, I may also want to have a custom manager class. That makes sense to be in the same file to me. Or in Django Rest Framework, I tend to put the serializer in with any nested serializers, filters, pagination, etc."
4,"How the internet works is extremely important. How packets are routed from the server to the computer displaying them is fascinating and enlightening. You'll learn what kinds of issues you have to work around and why security is such a big issue. 

To go with Apache, learn about nginx and Gunicorn. Knowing about those will let you make sense of the options available to you. 

Also, in addition to MySQL, learn about Postgres. I personally prefer Postgres. 

I'm a full stack web developer and Jinja is something I rarely use. Front ends tend to be written in JavaScript, usually using React. So take some time to learn that (it's pretty fun to learn, honestly). Other front end stuff to learn, NextJS and Gatsby. 

AWS, Google Cloud, Azure, Digital Ocean, or whatever other cloud service. You basically have to know that stuff to be successful with web dev these days. 

Pycharm. There is a lot to it to help you develop actual python applications. Learn it well. 

Git and GitHub Or GitLab. Learn versioning since it is crucial. 

Dev helpers and devops tools are handy and confusing. You don't need to know them at first, but have things like Docker, Jenkins, and Kubernetes on your radar to learn later."
4,https://regexr.com has the meanings printed out
4,"That is a confusing sentence, I'm sorry. I should have used commas or split the sentence up. The positive look ahead will not capture any characters. All the look ahead does is validate that some condition happens in the string at the location of the look ahead. So that confusing sentence should have been something like

> In general, a positive look ahead will not capture anything, it is only used for string matching. A string will match only if the condition of the look ahead is found in the string at the location of the look ahead. 

Our look ahead are found at the beginning of the regex and they are set up so they allow 0 or more characters of any kind first, and then some specific character after that. Since there is no match the end result is that each of those individual classes of characters could occur anywhere in the string that will be matched. And in our case, the only thing that is matched is the .{8,} which is only there to ensure the length requirement is met."
4,"So, it looks like you'd need to ask the user for how many minutes they want. Then you can calculate the time that is x minutes in the future and then do the loop until the current time is greater than the calculated time. So for example:

    from datetime import datetime, timedelta
    
    num_minutes = int(input('How many minutes to beep: '))
    end_time = datetime.now() + timedelta(minutes=num_minutes)
    
    while datetime.now() < end_time:
        # do your beeping thing here..."
4,"Going to need more info than that, I'm afraid. Wake word for what? Some kind of homemade Echo-like device? Something else? Discord somehow?"
4,"You can validate any password with a single regex if you know this one weird trick. No, for real though. If you understand the positive lookahead (or lookbehind), you're all set. In general, a positive look ahead will not capture anything, it is only used for string matching. A string will match only if the condition of the look ahead is found in the string at the location of the look ahead (and vice versa for the lookbehind). So for example,

    regex = re.compile(r'(?=.*\d).{5}')

That regex contains the positive lookahead (the `(?=.*\d)` part). That regex will only match if there is 0 or more of any character followed by a digit and then if there are exactly 5 of any other characters (that's the `.{5}`) part. So that quick regex there will only match strings that contain exactly 5 characters where at least one of the characters is a digit. Well, so let's expand that for your case and let's walk through it step-by-step. Let's do the easy part. Let's match at least 8 characters:

    regex = re.compile(r'.{8,}')

Nice and simple. Match a string with absolutely any character as long as there are at least 8 of them. Okay, let's use a positive lookahead to match for at least one uppercase letter:

    regex = re.compile(r'(?=.*[A-Z]).{8,}')

Okay, now how about lowercase letters?

    regex = re.compile(r'(?=.*[A-Z])(?=.*[a-z]).{8,}')

See how that works? 0 or more characters and then an uppercase letter or no match. 0 or more characters and then a lower case letter or no match. And the order doesn't matter, either. So let's add the digit:

    regex = re.compile(r'(?=.*[A-Z])(?=.*[a-z])(?=.*\d).{8,}')

Digits are easier since we can use the `\d` character class. So there you go, a one-liner regex that isn't so terribly difficult to understand that matches passwords as complex as you require. You could increase the complexity a great deal farther, if you'd like, too.

Read more on the positive lookahead and lookbehind as well as the negative lookahead and negative lookbehind, too. They're incredibly useful tools for crafting regex."
4,"Your requirements.txt has ""pip freeze"" on the first line. Might want to get rid of that.

This

    from XL.columns import *
    from XL.column_data import *
    from XL.parse_files import *

is almost always a bad idea. Considef importing like this

    from XL import (
        columns,
        column_data,
        parse_files
    )

And then call the functions like 

    columns.whatever_function_name()

This:

   
    if stripped_list_1 == stripped_list_2:
        return ['The columns are equal']
    else:
        diff = (np.array(stripped_list_1) == np.array(stripped_list_2))
        return diff

Could just be this:


    if stripped_list_1 == stripped_list_2:
        return ['The columns are equal']
    
    return np.array(stripped_list_1) == np.array(stripped_list_2)

This is a strange way to loop:

    count = 0
    for i in range(len(column_names)):
        n_uni = df[column_names[count]].nunique()
        uni = df[column_names[count]].unique()
        distinct_value_list[count].append(n_uni)
        distinct_value_list[count].append(uni)
        count += 1

Why not this:

    for count, column_name in enumerate(column_names):
        n_uni = df[column_name].nunique()
        uni = df[column_name].unique()
        distinct_value_list[count].append(n_uni)
        distinct_value_list[count].append(uni)

Probably other stuff. I don't see any iterating over data frames, but I'd need to examine what you're doing in more detail to know for sure."
4,"Oof. Okay, so pretend you're the python interpreter. I want you to start at the top of the read() method and follow it line by line. If it says counter=5, I want you to write down counter: 5 on a sheet of paper. Of the value of counter changes, cross out the 5 and write in the new value. 

IMPORTANT! Do not skip over any lines. Do not think to yourself, oh this loop does such and such so I can just skip past it. No. You manually execute every single line of code. 

I guarantee you'll see your error if you do this all the way."
4,Why are you trying to avoid defaultdict?
4,"Not necessarily. They're used for different purposes. A repr is useful for the ""official"" representation of the instance whereas str gives you more flexibility. So, for instance, if I have a linked list data structure, I might want to make it so the repr outputs information about the list, it's lenth and the repr of the head node. Whereas with a string, it's extremely useful to make it so you recursively print out the list. So that might be something like this:

    class Node:
        def __init__(self, v, next=None):
            self.value = v
            self.next = next
    
        def __repr__(self):
            return f'Node(v={self.value!r})'
    
        def __str__(self):
            return f'{self.value} -> {self.next if self.next else ""X""}'
    
    class LinkedList:
        def __init__(self, head=None):
            self.head = head
    
        def __repr__():
            return f'LinkedList(head={self.head!r}'
    
        def __str__():
            return f'{head!s}'

And right there if I have many nodes in my\_list, say, I can just call a print(my\_list), and it'll print out something like 

    1 -> 5 -> 8 -> 'whatever' -> 9000 -> X

Which is neat."
4,"You're printing out the default class representation, aka the [repr](https://docs.python.org/3/library/functions.html#repr). You can customize what the repr outputs by implementing [the \_\_repr\_\_() method](https://docs.python.org/3/reference/datamodel.html#object.__repr__) in your class. Like this:

    In [5]: import datetime
       ...:
       ...: class Car:
       ...:     def __init__(self, model, year, color):
       ...:         self.model = model
       ...:         self.year = year
       ...:         self.color = color
       ...:
       ...:     def __repr__(self):
       ...:         return f'Car(model={self.model!r}, year={self.year!r}, color={self.color!r})'
       ...:
       ...:     def isOld(self):
       ...:         yearToday = datetime.datetime.today().year
       ...:         diffYear = yearToday-self.year
       ...:         if diffYear>18:
       ...:             return True
       ...:         else:
       ...:             return False
       ...:
       ...:     def displayInfo(self):
       ...:         print(""Model: "" + self.model)
       ...:         print(""Year: "" + str(self.year))
       ...:         print(""Color: "" + self.color)
       ...:
       ...: #main
       ...: carList = []
       ...: for i in range(2):
       ...:     model = str(input(""Enter car's model: ""))
       ...:     year = int(input(""Enter car's year: ""))
       ...:     color = str(input(""Enter car's color: ""))
       ...:     newCar = Car(model, year, color)
       ...:     carList.append(newCar)
       ...:
       ...: for c in carList:
       ...:     if c.isOld() == True:
       ...:         print(c)
       ...:
    Enter car's model: asdf
    Enter car's year: 1930
    Enter car's color: red
    Enter car's model: qwer
    Enter car's year: 1947
    Enter car's color: blue
    Car(model='asdf', year=1930, color='red')
    Car(model='qwer', year=1947, color='blue')

You can make the repr return anything you want, but Python suggests that you return text that is the python code that is used to instantiate this particular instance. If you can't, then return a string in the form of `< ... some useful description ... >`. There is also a \_\_str\_\_() method that is used to return the ""unofficial"" representation of the instance. This can return a friendlier value."
4,"How much deep learning did you get into in that course? If none or only a little, I'd pursue that next. Give object detection,  classification, and/or segmentation a try. If you've done that, I'd go for reinforcement learning."
4,"Deploying flask or Django behind Apache or nginx is standard procedure. You won't find any backend frameworks that use parallel processing on their own because of the GIL. There are super fast frameworks that are flask-like that use asyncio, though. Check out Vibora for that. 

As for an implementation of just about anything in flask, you're on your own. There are surely plugins that help or that do this for you, but that isn't and won't be included in flask. Django either comes with support or has a plug-in for OpenID. 

Anyhow, blah blah blah. I like python and I'm a backend dev who uses Django all day. So yay, I get to use python. But if it doesn't meet your needs, why bother? Just keep on trucking with C#. It's a perfectly fine language. If you're bound and determined to use python, well, the community has made the choices it's made."
4,"The string operations will do their work on c-strings if they can. There will be cases they can't, I think, but in most cases they can. What you're seeing there is the fact that in python, the immutability of strings is always maintained. You'd never know that the replacement is happening in place by using python code."
4,"Recursion is your friend here. I'm on my phone, but, something like this

    from functools import lru_cache
    
    @lru_cache(maxsize=None)
    def dottify(s):
        if len(s) < 2:
            return s
        return tuple(
            [f'{s[0]}{result}' for result in dottify(s[1:])] 
            + [f'{s[0]}.{result}' for result in dottify(s[1:])]
        )

And a test:

    >>> dottify('testing')
    ('testing',
     'testin.g',
     'testi.ng',
     'testi.n.g',
     'test.ing',
     'test.in.g',
     'test.i.ng',
     'test.i.n.g',
     'tes.ting',
     'tes.tin.g',
     'tes.ti.ng',
     'tes.ti.n.g',
     'tes.t.ing',
     'tes.t.in.g',
     'tes.t.i.ng',
     'tes.t.i.n.g',
     'te.sting',
     'te.stin.g',
     'te.sti.ng',
     'te.sti.n.g',
     'te.st.ing',
     'te.st.in.g',
     'te.st.i.ng',
     'te.st.i.n.g',
     'te.s.ting',
     'te.s.tin.g',
     'te.s.ti.ng',
     'te.s.ti.n.g',
     'te.s.t.ing',
     'te.s.t.in.g',
     'te.s.t.i.ng',
     'te.s.t.i.n.g',
     't.esting',
     't.estin.g',
     't.esti.ng',
     't.esti.n.g',
     't.est.ing',
     't.est.in.g',
     't.est.i.ng',
     't.est.i.n.g',
     't.es.ting',
     't.es.tin.g',
     't.es.ti.ng',
     't.es.ti.n.g',
     't.es.t.ing',
     't.es.t.in.g',
     't.es.t.i.ng',
     't.es.t.i.n.g',
     't.e.sting',
     't.e.stin.g',
     't.e.sti.ng',
     't.e.sti.n.g',
     't.e.st.ing',
     't.e.st.in.g',
     't.e.st.i.ng',
     't.e.st.i.n.g',
     't.e.s.ting',
     't.e.s.tin.g',
     't.e.s.ti.ng',
     't.e.s.ti.n.g',
     't.e.s.t.ing',
     't.e.s.t.in.g',
     't.e.s.t.i.ng',
     't.e.s.t.i.n.g')"
4,Yes. A string in python code is immutable. But replace doesn't use a python string. Under the hood replace uses the underlying C char array which absolutely is mutable.
4,"""In place"" means that it is replacing the character in the string for another one without creating a new string."
4,"The string replace function is actually a method written in C. You can find the code [here](https://github.com/python/cpython/blob/e42b705188271da108de42b55d9344642170aa2b/Objects/stringlib/transmogrify.h#L445-L489). This method replaces the character in place, so it does not create a new string. And since it's written in C, well you can see for yourself how much faster that is."
4,"    for dict in data:
        for key, value in dict.items():
            print(f'key is {key} and the value is {value}')"
4,Reasonably useful and not so hard. Go for it.
4,"You could do it the if-statement way:

    def round_to_quarter(n):
        whole_part = int(n)
        decimal_part = n - whole_part
        if 0 <= decimal_part < 0.5:
            rounded_decimal = 0.25
        else:
            rounded_decimal = 0.75
        return whole_part + rounded_decimal"
4,"If you writing code for yourself (or your class or something) and your test tests everything you need to test? In that case, it's probably fine. If you are writing software that is expected to be well and thoroughly tested, then it is probably not fine.

Though even if you're writing code for a personal or school project, you'd probably benefit from a more thought out test plan that uses a test framework like pytest. This is particularly true if you're going to be extending the program in some way."
4,What is the rook captures thing and what does it have to do with the keyboard problem?
4,">I have to parse (potentially) over a million URLs and HTML

I bet my code will process millions of urls in the order of seconds even with the use of index. It'd be hundreds of millions or billions that would probably be an issue.

>I see that we are using index and you hinted that index is the slower option? What is the other option to this?

using index() scans the iterable from left to right looking for the index of the value passed as a parameter. The good thing is that this lookup doesn't grow with the input, so even though the lookup is done in linear time, it only ever does 65 operations. And that means that for this problem, the lookup is really constant time. That said, the faster method of doing this is to use a dictionary where the key is the character and the value is the ordinal (like you were doing originally). Though, if you're building up that dict each time you run the function, it won't save you any time. So I'd build it before the function is defined and use it in the function. 

But like I said, I'm guessing that my code as written might be as fast as you need. This will be particularly true if you've got multiple processes running. This should scale very well with multiprocessing, so if you're going to use that, try the code as written.

>why is it n or '\_\_' and why is double underscore appended to the list of allowed characters? is this some type of error handling?

From [the documentation you linked to in your code](https://developers.google.com/chart/image/docs/data_formats#extended), I see that it says:

    A string where each two characters is a single data point, and series are delimited by a comma. Individual values in a series are not delimited. Here are the supported encoding characters:
    - A—Z
    - a—z
    - 0—9
    - period (.)
    - hyphen (-)
    - Missing values are indicated with a double underscore (__).

The `n or '__'` handles the last case. That or statement returns the value of the first truthy item. In the case of building the list of tuples, if you have an odd number of characters, you'd end up with something like (r, None). I took that to be a case where there was a missing value and so I replaced it with the double underscore. So if n is None, which is falsey, that or statement will return the double underscore instead. If it is the case that you must handle double underscores in the middle of the text, then my solution isn't quite correct, by the way, because whatever code is used would have to lookahead 3 characters every time to make sure it isn't seeing 'c\_\_' or '\_\_c' where c is any single character."
4,"Well, I'm not sure how to help. I can envision a simple bot that uses q-learning using a table. It doesn't look like the search space is too big so a q table seems possible to me. 

But that's just a wild guess on my part. Without knowing the rest of the assignments, I'm not sure what help you're looking for? I guess pay attention and keep up with the work and you'll be fine."
4,"This will be JavaScript. I imagine that there are many ways to skin that cat. Probably there are (many?) JavaScript packages that do the hard work for you. 

This isn't really something well suited to r/learnpython, though."
4,"It's early here, not sure why I'm awake, so bear with me. I don't see anything in what you linked to about a bot that learns from its mistakes. Actually, I don't see anything about any requirements at all, just a walk through of how to build the basic bot. Am I missing something?"
4,"Sounds like it appends the message string with a prefix of some kind. I don't know the ins and outs of discord's api, but I'm guessing that messages must be sent with some kind of prefix every time and you don't want the user to have to deal with that."
4,"I wouldn't call it a ternary, no.

    1 < 3 > 4

is equivalent to

    1 < 3 and 3 > 4

and this

    1 != 2 != 1

is equivalent to

    1 != 2 and 2 != 1

But this

    1 != (2 != 3)

is equivalent to this:

    1 != True

Which returns False:

    >>> 1 != (2 != 3)
    False

So everything looks right as rain to me."
4,">I have a dictionary (built with defaultdictionary) and a list.  
>  
>I would like to edit the list so that it matches the dictionary.

    myDict = defaultdict(<class 'list'>, {0: [60, 64, 67], 384: [62, 65, 69], 768: [64, 65, 69]})  myList = [[192, 61,],
     	  [384, 63,],
      	  [672, 65,]] 

>My desired output:

    myList = [[192, 64,],
     	  [384, 65,],
      	  [672, 65,]] 

>The keys in the dictionary correspond to time intervals and the lists in the dictionary correspond to values.

I'm just a simple caveman, granted, but I have no clue how either version of myList matches myDict in any way. If you can explain that to me, I can probably tell you how to get what you want."
4,EDIT: not required.
4,"You must make Vertex comparable. You must define the comparison operators: 

    __eq__()
    __ne__()
    __lt__()
    __le__()
    __gt__()
    __ge__()

Actually, I don't think you have to define all of those. Maybe only \_\_lt\_\_(), I forget. Also, you could use [functools.total\_ordering()](https://docs.python.org/3.7/library/functools.html#functools.total_ordering)"
4,touche.
4,">This throws an error because obj isn't defined.

You sure about that?

    $ python3
    Python 3.7.3 (default, Jun  3 2019, 10:39:07)
    [Clang 10.0.1 (clang-1001.0.46.4)] on darwin
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> my_list = [1, 2, 3]
    >>> for item in my_list:
    ...     print(item)
    ...
    1
    2
    3
    >>> print(item)
    3

A perhaps clearer example:

    >>> another_list = ['a', 'b', 'c']
    >>> for item in another_list:
    ...     print(f'item {item} is at {id(item)}')
    ...
    item a is at 4316368656
    item b is at 4315729624
    item c is at 4315672000
    >>> print(f'item {item} is at {id(item)}')
    item c is at 4315672000

You can access that value after all."
4,"The map function takes an iterable and applies some function to each of the elements and then returns a map object that acts like a generator. So for example, I could have this:

    def add_one(n):
        return n + 1
    
    my_list = [1, 2, 3]
    list(map(add_one, my_list))
    # returns [2, 3, 4]

It is sometimes cumbersome to define an entire named function just do pass it into the map function. In that case, we can define an anonymous function (aka a lambda). I could do the same thing like this:

    my_list = [1, 2, 3]
    for item in map(lambda x: x + 1, my_list):
        print(item)
    # prints this:
    # 2
    # 3
    # 4

You can include any function you want so long as it takes a single parameter and returns a single value. So I could do this:

    import math
    xs = [0, 45, 90, 135, 180, 225, 270, 315]
    xs_radians = map(math.radians, xs)
    # <map at 0xwhatever>

I could then do this:

    list(map(math.cos, xs_radians))
    # [0.0,
    # 0.013707783890401887,
    # 0.027415567780803774,
    # 0.041123351671205656,
    # 0.05483113556160755,
    # 0.06853891945200943,
    # 0.08224670334241131,
    # 0.0959544872328132]

You could also do this:

    list(map(lambda x: math.cos(math.radians(x)), xs))

Hope that helps."
4,"So it looks to me like you're intending to pass in a list of file pointers and an unused (?) parameter into your method. Then for each file pointer in the data prameter you

1. define a new list named array with the contents \[1\]
2. read all the data in from the file being pointed to
3. delete every single comma you find in that file
4. call a method convert\_data\_format on data and save the result of that as data1
5. Then for each obj in data 1 you
   1. create a new array called test and fill it with the obj
   2. append that obj onto the array that started with \[1\] so you'd end up with something like this: \[1, \[obj1\], \[obj2\], ...\]
6. Then you inexplicably append the last object to the array one more time.
7. Then you print the array.
8. Then you return the array.

I have no clue what you get back from convert\_data\_format(), why you're passing in a list of open file pointers, what ends up closing the files being pointed at, why you replace every last comma, or, in general, why you'd ever do this. but there you go."
4,"To implement negative indexing in a data structure that *you* are creating, you must implement the `__getitem__()` method. So for example:

    class SinglyLinkedList:
        def __init__(self, *values):
            if values:
                self.append(*values)
            else:
                self.head = None
    
        def __getitem__(self, i):
            if i >= 0:
                # code for traversing to the ith element and returning it here
            else:
                # code for traversing to the ith element from the right and returning it here    
    
        # other methods here...

Does this answer your question? If not, I'm not clear what it is that you are asking."
4,"I don't know what your models are, so I can't tell you if they should be changed. In general, I'd make sure to add a boolean field called `is_business_owner` to your user model and make sure that admins set this value to true for any biz owners they create. This way you can promote a regular user to be a business owner, too, if you want.

I agree that there is a lot of OOP abstraction in django. It makes it very hard to wrap your head around what is going on when you first get into it. A lot of stuff is kind of magical and you just have to accept that it works."
4,"Whoa... That's a lot of work to do. You need to learn to be lazy! There are tons of ways of getting the kind of thing you're after without writing all. that. dict. code. Like this:

    >>> import string
    >>> allowed_characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + '-' + '.'
    >>> base64 = {c: i for i, c in enumerate(allowed_characters)}
    >>> base64
    Out[19]:
    {'A': 0,
     'B': 1,
     'C': 2,
     'D': 3,
     'E': 4,
     'F': 5,
     'G': 6,
    ... etc

Then you can use it like you have it. base64\['A'\] gives you 0. Alternatively, if the actual numeric values of those characters don't matter to you (and I'm not sure if they do), you can take advantage of the fact that each one of those characters corresponds to a unique int value automagically:

    >>> ord('A')
    65
    >>> ord('B')
    66
    >>> ord('C')
    67
    >>> ord('D')
    68
    >>> ord('a')
    97
    >>> ord('b')
    98
    >>> ord('c')
    99
    >>> ord('d')
    100
    >>> ord('-')
    45
    >>> ord('.')
    46
    >>> ord('0')
    48
    >>> ord('1')
    49

If all you need is an integer value and if those values will work for you, and I'm not seeing any reason they shouldn't, then you're all set. You'd just need to change your code to this:

    def decode64(raw_url):
        # https://developers.google.com/chart/image/docs/data_formats
        series = []
        magic_number = 64
        arbitrary_range = 4095 #  as per googles doc
        for i, c in enumerate(raw_url):
            if i % 2 == 0:
                m, n = ord(c) * magic_number, ord(raw_url[i + 1])
                series.append((m + n) / arbitrary_range)
        return series

Note I changed it so that you're making use of the enumerate and also that you're returning series and not elements (which does not appear to be defined). I might do this instead:

    def decode64(raw_url):
        # https://developers.google.com/chart/image/docs/data_formats
        series = []
        magic_number = 64
        arbitrary_range = 4095 #  as per googles doc
        for m, n in zip(raw_url, raw_url[1:]):
            series.append((ord(m) * magic_number + ord(n)) / arbitrary_range)
        return series

Or, if you're feeling saucy, a list comprehension:

    def decode64(raw_url):
        return [(ord(m) * 64 + ord(n)) / 4095 for m, n in zip(raw_url, raw_url[1:])]

EDIT: I see that the values do matter and, moreover you want to use groups of 2 characters not every pair of characters in the list. But also you have to handle `__` for missing values. So what I might do to build the list you walk over is this:

    >>> from itertools import zip_longest
    >>> s = 'www.google.com/wowzer'
    >>> list(zip_longest(s, s[1:]))[::2]
    [('w', 'w'),
     ('w', '.'),
     ('g', 'o'),
     ('o', 'g'),
     ('l', 'e'),
     ('.', 'c'),
     ('o', 'm'),
     ('/', 'w'),
     ('o', 'w'),
     ('z', 'e'),
     ('r', None)]

Then, if speed isn't an issue, I'd simplify the lookup by using index:

    >>> allowed_characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + '-.'
    >>> allowed_characters.index('A')
    0
    >>> allowed_characters.index('B')
    1
    >>> allowed_characters.index('a')
    26
    >>> allowed_characters.index('b')
    27
    >>> allowed_characters.index('0')
    52

And end up with something like this:

    def decode64(raw_url):
        allowed_characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + '-.__'
        chr_groups = [(m, n or '__') for m, n in list(zip_longest(raw_url, raw_url[1:]))[::2]]
        return [
            (allowed_characters.index(m) * 64 + allowed_characters.index(n)) / 4095 
            for m, n 
            in chr_groups
        ]"
4,"You're working too hard at this. Python can handle json serialization and you can read more about that [here](https://realpython.com/python-json/). There's a bit of a learning curve, but you'll get it if you persist."
4,"The superuser should have access to the django admin, so that's a different route and code you don't have to write.

The business owner should be created by the superuser in the django admin, so the signup is irrelevant.

The regular user has a sign up page. Take care to ensure that the is\_superuser, and is\_business\_owner (or whatever) flags are not set by this sign up page. Also take care that usernames are unique (using emails as a login is a decent idea). 

From there, you can give the business owners and the regular users the same login page. Then you can restrict access to any given route by using django's ability [restrict access by using groups](https://bradmontgomery.net/blog/restricting-access-by-group-in-django/).

As for how to do the logging in, that's either standard django stuff which you can look up, or it's a bit more complex if you're using some kind of 3rd party auth. Either way, you should at least try to look that stuff up yourself."
4,"That's a big question. First of all, give yourself a leg up by learning pytest. Second break your objects into units of functionality. You probably already do this. Test the methods of a class that are considered public. Don't test things that are already tested. That is to say that if some method of yours calls requests, well you don't actually need to test that requests does what it's supposed to do. Instead, mock requests to return various expected and unexpected values and make sure your method handles that properly. 

That's a good overview on what to do, but there's a lot to be said about how to do that, of course. Start by getting pytest set up properly and go from there."
4,"> I'd argue that implementing linked lists in Python is only really useful for learning the fact that you should never, ever implement linked lists in Python. 

No argument here. Well, I mean if you want to learn the basics of how a single linked list works, it's good for that. Some other language that requires memory management is probably better, though. 

> At least if you attempt it in C, you could at the very least learn about why you should almost never implement linked lists in general.

Again. No argument. Linked lists are for learns, really. It's a super easy way to get used to pointers and to data structures in general. It's an easy playground for recursion, and it's a way to introduce asymptotic analysis. But if you're making a linked list in python or any other language for realsies, you're probably doing it wrong. 

But, this is _learnpython_ after all, so those of us with knowledge should seek to help with the learns. And insofar as linked lists are good for the previously listed learns, we should consider helping with the questions as asked. That's my opinion, anyhow."
4,"I mean, list traversal is the cross you have to bear for implementing a single linked list. I mean, unless you're only going to be using them as a stack or, if you include a tail pointer, a queue, then just about any operation is going to require at least one traversal of the list. 

I'm just saying, if the traversal is an issue, you need a different data structure. It's a useful learning exercise to implement this kind of thing to see the limitations and to be able to compare and contrast them with other data structures."
4,"Traversing the whole list, for sure, keeping the pointers, I don't see why. Having a fast and slow pointer let's you easily find the desired node, and returning the pointer to the desired node should be sufficient for maintaining the pointers to the rest of the list, no?"
4,Why not implement it on a linked list?
4,Not in python.
4,"https://pypi.org/project/django-plotly-dash/

Or write your own React code. It isn't that hard. Check out D3.js, too."
4,"My first college degree was in math, so the list comprehension flows nicely from the set theory notation that it was derived from (albeit indirectly). The idiosyncrasies come from the particulars of the python syntax, but once you've mastered that, you're all set."
4,https://plot.ly/dash/
4,Or poetry and a pyproject.toml.
4,"Well, so start with either the module or the class. You're testing one or the other, surely. If it's a module, then you'd have some test file called test\_whatever\_module.py and in there you'd have a class like 

    class WhateverModuleTest(SomeBaseTest, OrMaybeAMixin, WhoKnows):
        # maybe a set up and/or a teardown function here?
    
        # Tests here. Like this:
        def test_my_widget_does_a_thing(self):
            # Set up your preconditions here, database fields and what not
            # Then run the function (make sure you import it!)
            # Then test your postconditions here."
4,"You've got to have the anaconda package? That seems like a strange requirement. You're saying that you absolutely cannot nail down your app's dependencies?

I take it that you're expecting a folder full of python modules that you need to import, but you may not know the names?"
4,"This is using the unittest module? Or are you using pytest?

In general, test every public method of a class. It sounds like you're going to be getting happy path tests already. So just create tests that are not so happy happy. Try to figure out edge cases, pass parameters that don't make sense. Mock functions that the tested method calls and have them return weird values and raise exceptions. As a dev, it's a challenge to test your code thoroughly. You want it to work, so you don't test it as well as you should sometimes. You're not the developer, so you get to have the mindset of trying to break things. It should be pretty fun, honestly."
4,"Could use a defaultdict and skip the conditional check. Something like 

    from collections import defaultdict
    
    my_dict = defaultdict(list)
    # the data…
    
    for name, value in value_set:
        my_dict[name].append(value)"
4,"Not unless you're a deep learning PhD doing cutting edge research there isn't. The state of the art has a difficult time with this (""Hey Siri, play Michael Jackson's song Bad"" ""Okay, calling Dad""), so I'm guessing you'll be a bit out of your depth, too."
4,"    def preparesentence (opts = {}, sentence = []): # write a sentence based on vocab 
    s = str(random.choice(list(vocab.keys())))
    sentence.append(extractword(s,'D'))  
    while sentence[len(sentence) - 1] != '.':                                                   # make a 10 word sentence                                                   
        opts = prepareoptions (vocab, sentence)
        # print ('The options are: ', opts)
        s = str(random.choices(list (opts.keys()), weights = list(opts.values()), k = 1)) 

What if you pass nothing or an empty dict as the value of opts?"
4,"Python don't work that way, sorry, guy."
4,"It looks to me like 'run\_command' is not defined. Indeed, looking at your script, I see this:

    class NBZ(object):
        # some methods and stuff
    
        def run_command():
            # some code here.

Yet in your code you simply do 

    run_command()

But run\_command() isn't defined. It doesn't even look like you instantiate an object of the class. You'd have to do something like this:

    nzb = NZB()
    nzb.run_command()

Now, I have no idea if that's going to fix everything or not."
4,"Do you see the following in the block of code you just posted?

    s = str(random.choices(list(opts.keys()), weights = list(opts.values()), k = 1))

I don't. But the traceback says that this is where random.choices is barfing. So it looks to me like you're looking at the wrong code for your bugs."
4,"    def convert_base(num_as_string,b1,b2):
        # below is an inner named function. It's just a function that
        # you can't access from outside the convert_base function
        def construct_from_base(num_as_int,base):
            # This function does the same thing as this if-statement:
            # if num_as_int == 0:
            #     return ''
            # else:
            #     string_value_of_all_but_rightmost_digit = construct_from_base(num_as_int // base, base)
            #     rightmost_digit_as_hex_digit_string = string.hexdigits[num_as_int % base].upper()
            #     result = f'{string_value_of_all_but_rightmost_digit}{rightmost_digit_as_hex_digit_string}'
            #     return result
            return('' if num_as_int == 0 else construct_from_base(num_as_int//base,base) + string.hexdigits[num_as_int % base].upper())
    
        # this sets a flag if the first element is a dash
        is_negative = num_as_string[0] == '-'
        # Okay... reduce is also known as aggregate or accumulate. It will walk over a list
        # and use an accumulating function to build up a result. So for example if the aggregating
        # function was add and the list was [1, 2, 3], then you'd start with 0 and then it'd add
        # 1 for a result of 1, then it'd add 2 for a result of 3 then it'd add 3 for a result of
        # 6 and since there's no more in the list, it'd return 6.
        # 
        # So in this case, the accumulating function is this;
        # the_function = lambda x, c: x * b1 + string.hexdigits.index(c.lower())
        # so if x is 3, b1 (a parameter to convert_base) is 10 and c is '4', this function would
        # return 3 * 10 + 4 which is 34 (string.hexdigits is '0123456789abcdefABCDEF' and the 
        # index of the substring '4' happens to be 4. 
        num_as_int = reduce(
            lambda x, c: x * b1 + string.hexdigits.index(c.lower()), # the lambda accumulator
            num_as_string[is_negative:],  # The number as a string starting from 0 or 1
            0  # The default value if there are no elements
        )
        
        # again with the python ternaries. You could also do this:
        # if is_negative:
        #     prefix = '-'
        # else:
        #     prefix = ''
        #
        # if num_as_int == 0:
        #     value = 0
        # else:
        #     value = construct_from_base(num_as_int, b2) . # described above...
        # return f'{prefix}{value}'
        return ('-' if is_negative else '') + ('0' if num_as_int == 0 else construct_from_base(num_as_int,b2))
    
    def main():
        b1 = 7
        b2 = 13
        s = '615'
        print(convert_base(s,b1,b2))
        ''' output: 1A7 '''
    
    if __name__ == ""__main__"":
        main()

Overall, this is pretty ugly coding style. You wouldn't get this answer through as written at my company."
4,"Meh. Most interviewers (and I've interviewed a ton) won't care if you choose to use reduce. Hell, many of them don't even know python that well, so they really won't care."
4,"minimax is the way to go here. You might have some luck with a very simple reinforcement learning algorithm, too, if you're feeling saucy."
4,"Looks like opt doesn't have any keys to me. The random.choice method can't choose from an empty list. Hence, an error."
4,I'm a software engineer. Myself and every one of my colleagues but one uses pycharm. The one was a C# dev for years and years and is more comfortable in VSCode.
4,"The [Format Specification Mini-Language](https://docs.python.org/3/library/string.html#formatspec)  is what you need. You can assign a width for the value (*i.e.* the width of the header for that column). You can assign a placement of left, centered, or right without doing any calculations. And you can specify the fill value. Look into that and see if you can figure it out on your own."
4,"I'd need more info than that. What comes before this value? Are you saying there needs to be a flexible amount of space between the columns? Can you give a few lines of examples of a row that works, and a few rows that don't, the output and the expected output?"
4,"In your code, count is a class field rather than an instance field. [Geeks for Geeks](https://www.geeksforgeeks.org/class-instance-attributes-python/amp/) has a bit more info…"
4,"Or using f-strings:

    for i, number in enumerate(range(5, 8), start=1):
        print(f'Number {i} is {number}')
    
    person = {'name': 'Sarah', 'age': 37}
    print(f""{person['name']} is {person['age']} years old"")"
4,"    >>> import logging
    >>> logging.basicConfig(format='%(asctime)s %(message)s', level=logging.DEBUG)
    >>> logger = logging.getLogger(__name__)
    >>> logger.debug('Logging debug messages with time!')
    2019-07-20 10:17:21,397 Logging debug messages with time!
    >>> logger.info('and info!')
    2019-07-20 10:17:42,662 and info!
    >>> logger.warning('And warnings!')
    2019-07-20 10:17:55,208 And warnings!
    >>> logger.error('Oh my! Even errors!')
    2019-07-20 10:18:13,022 Oh my! Even errors!
    >>> logger.critical('Oh no! This is a critical message. Hide!')
    2019-07-20 10:18:36,526 Oh no! This is a critical message. Hide!

More info can be found in the logging documentation on the online docs."
4,"This is fine. Fancier code would be hard to read. It might be faster, I don't know, but if you're not having issues with speed, then don't bother changing it. The only thing that I \*might\* consider changing is the hard-coded values. If you were to make those ""constants"" (as much as something can be constant in python) you could name them in such a way as to get rid of those ridiculous comments. Sorry, yes those comments are ridiculous. Do you really need #removing nulls and #not 0?

Maybe this is for a school project where ridiculous comments are the norm, so maybe you should just ignore me. Just don't do that if you ever get hired as a coder, okay. Please."
4,Do one of your Java projects in python and be like [https://gfycat.com/bigheartedunnaturalcrocodileskink](https://gfycat.com/bigheartedunnaturalcrocodileskink)
4,"\> The range() function is kinda weird.

How do you think it should work? Would you have it create a new range for every loop but set the start value to be the current value of v, or something? The way it does work is that python constructs the range iterator once and then iterates over it. Now, if you do something like this, you'll get an infinite loop:

    my_list = [1]
    for item in my_list:
        my_list.append(item + 1)

But notice the difference. We are modifying the data structure that the for loop is pulling from in this case. But the range function doesn't do that. len(l1) is just an integer value, for one thing. The range function has no idea whatsoever where that integer came from. Hell the for loop doesn't have any logic in it to determine if the list has gotten out of sync with the initial value given to the range function. 

It's just a strange thing to say that the range function is weird, is all."
4,"I know OP specified bit *shifting* but if we are going to do anything serious with bit twiddling, we'll need the &, |, and \^ operators, too."
4,"Dict items are separated with commas, yo."
4,"    if b == True or b == False:
        return b

Uh. What else can b be? You're waaaay overthinking this I say."
4,"I have no idea where you are at in your journey. If you're not comfortable with python syntax. Then no. If you're not comfortable with OOP and how Python does OOP, then no. If you have no idea how the web works, then no. But if you have some grasp of all those, then I say go for it."
4,"SQL is going to be right now if you learn flask. Either SQL or Sqlalchemy, that is. Sqlalchemy is a SQL ORM that you can use with Flask (or any other python program, really). There's a reasonably steep learning curve for sqlalchemy, so I'm guessing you'd want to start with a SQLite database and just write the raw SQL queries yourself to begin with. So yeah... think of your journey as starting with python, flask, and sql, not just python and flask."
4,"A great way to practice recursion, I've found, is by dealing with some intro cs-level data structures like linked lists and binary trees. There's really no good reason to make a linked list in python other than for self teaching, but that's your goal, it seems. So have at it. Figure out how to build the list iteratively and then figure out how to build it recursively. Then figure out how to find data iteratively and then how to find data recursively. Write an iterative reverse and then write a recursive reverse. Etc and so forth. You'll quickly get the hang of recursion doing this. After you've gotten through a basic singly linked list, try your hand at a doubly linked list and whatever other list you can think of. When you're sick of lists, write yourself a binary tree and see if you can figure out how to insert iteratively and then try recursively. Then build up a big tree and see if you can figure out how to delete a single node iteratively and then recursively. See if you can do inorder traversals iteratively and then see how you can do the same thing almost magically using like 3 lines of recursion. There are waaay more examples of iteration and then recursion you can do on trees, so that'll make you even better at recursion.

That's a good way to start, anyhow."
4,"    from sensey.senseable import *
    from sensey.sense_exceptions import *
    from sensey.__init__ import *
    from sensey.asyncsenseable import *
    from sensey.sense_api import *

Wow. That's a recipe for disaster. What if sensey.senseable has a function called sense and then what if sensey.asyncsenseable has a function called sense? Which function will you call when you call sense()? Will you get the (presumably) synchronous sense function or the asyncrhonous sense function?  Also, this:

    from sensey.__init__ import *

Is just plain nonsense. Just do 

    import sensey

and then use the methods and classes by doing something like

    sensey.awesome_function()

Listen, I get it. The python import system is one of the most confusing parts of python (right behind the environment), but seriously. Right now is the time to learn that you should never, ever do from whatever import \*. I know you see that in All. The. Tutorials. Everywhere. (which frustrates me), but please just purge that pattern out of your brain forever. If you need the sense function (for example, I don't even know if that is a real thing) from sensey.senseable and from sensey.asyncsenseable, then do this:

    from sensey import asyncsenseable
    from sensey import senseable
    
    senseable.sense('now you know you have the one you want!')
    asyncsenseable.sense('And better yet, you can get this one if you need it.')

It's more verbose, yes, but for good reason. If you just plain can't stand all the typing, then get yourself hooked up with pycharm and enjoy the autocomplete."
4,"Either framework is a good choice for learning. The big difference is in philosophy. Flask includes the minimum amount of functionality you need to get a web server to work. You get a listener that handles requests and responses, some templating for constructing html, and that's about it. If your goal is to learn how to write some back end that creates web pages, well then flask will fit the bill.

On the other hand, Django takes a more batteries-included philosophy. Routing, responses, templating, of course, just like flask. But also a (wonderful) built-in ORM that makes it so you rarely ever have to deal with, or even think about SQL. Also testing, settings management, etc. etc. etc. It has all the things, or nearly so, that you'd need to create a backend web server for realsies.

For that reason, you'll typically find django as the full stack solution that most companies choose (if they have chosen to go with python, and I've seen a loooot of jobs that do). Flask tends to be relegated to single task microservices that live behind some secured internal network from what I've seen.

So knowing a bit more about these two web server frameworks and how these are used in industry, you make the choice. I don't know what your priorities are."
4,"Instead of repeating all the code to make two separate functions that do the same thing, just write one (either in grams or in lbs) and then ask for input and convert that input if required. So if you write the function to take grams and if you get pounds as input, then your first task is to convert the weight from pounds to grams and then send that into the function.

Also, it makes more sense to have one function for the calculation and a way for the function to look up the weight (which won't change, right?). So something like this:

    coin_type_info = {
        'penny': {'plural': 'pennies', 'dollar_value': 0.01, 'weight': 2.5, 'num_in_wrapper': 50},
        'nickel': {'plural': 'nickels', 'dollar_value': 0.05, 'weight': 5.0, 'num_in_wrapper': 40},
        'dime': {'plural': 'dimes', 'dollar_value': 0.1, 'weight': 2.268, 'num_in_wrapper': 40},
        'quarter': {'plural': 'quarters', 'dollar_value': 0.25, 'weight': 5.67, 'num_in_wrapper': 40}
    }
    
    def num_coins_by_weight(coin_type, weight):
        return weight // coin_type_to_grams[coin_type]['weight']
    
    def num_wrapers(coin_type, num_coins):
        num_in_wrapper = coin_type_info[coin_type]['num_in_wrapper']
        return divmod(num_coins, num_in_wrapper)
    
    def get_input_weight_as_grams(coin_type):
        raw_value = input(f'Enter the weight of {coin_type}: ')
        # insert logic to determine if you got pounds or grams
        # insert the logic to convert the digit part to a float
        # insert the logic to convert the float to grams if required
        return value_in_grams

And then...

    penny_weight = get_input_weight_as_grams('penny')
    num_pennies = num_coins_by_weight('penny', penny_weight)
    num_penny_wrappers, extra_pennies_left_over = num_wrappers(coin_type, num_coins)
    # etc...

or even something like this:

    for coin_type in coin_type_to_grams:
        coin_weight = get_input_weight_as_grams(coin_type)
        num_coins = num_coins_by_weight(coin_type, coin_weight)
        num_wrappers, extra_coins_left_over = num_wrappers(coin_type, num_coins)
        coin_dollar_value = num_coins * coin_type_info[coin_type]['dollar_value']
        print(f'You have {num_coins} {coin_type_info[coin_type]['plural']}, ${coin_dollar_value:0,.2f}')
        print(f'You need {num_wrappers} wrappers and you'll have {extra_coins_left_over} coins extra')"
4,That python 2 is going away and they should use python 3.
4,Look at the difference [here](http://pythontutor.com/visualize.html#code=matrix1%20%3D%20%5B%5B'.'%5D%20*%205%5D%20*%205%0Amatrix2%20%3D%20%5B%5B%22.%22%20for%20i%20in%20range%285%29%5D%20for%20j%20in%20range%285%29%5D%0Amatrix1%5B0%5D%5B0%5D%20%3D%20'*'%0Amatrix2%5B0%5D%5B0%5D%20%3D%20'*'%0A%23%20print%28matrix1%29%0A%23%20print%28matrix2%29%0Aprint%28id%28matrix1%5B0%5D%29%29%0Aprint%28id%28matrix1%5B1%5D%29%29%0Aprint%28id%28matrix2%5B0%5D%29%29%0Aprint%28id%28matrix2%5B1%5D%29%29&cumulative=false&curInstr=56&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false). The id() function gives you the address in memory for any given element. See how it is the same for matrix1 and different for matrix2?
4,Yes.
4,It may very well. Using the variable date when you're importing a library called date is a really bad idea.
4,Let's see all your code.
4,"Episode 1: Don't download python from [python.org](https://python.org). Instead use pyenv by using the following terminal command:

    curl https://pyenv.run | bash

Once pyenv is installed, install python from your terminal using this command:

    pyenv install 2.7.16
    pyenv install 3.7.4
    pyenv global 2.7.16 3.7.4

Both versions of python are required since some installers still use python2. This sets your system up so that when you do `python my_program.py`, you'll run my\_program.py using python 2.7.16 and when you do `python3 my_program.py` you'll run my\_program.py using python 3.7.4. This method of install also makes it so that if you want to use IDLE, you can go to your terminal and type `idle` for the python2 version of IDLE or `idle3` for the python 3 version of IDLE. 

In episode 2, please do not name your file print.py (or any other python builtin name). If you do, you might get into the situation of doing something like `import print` which would shadow the builtin print function. 

On an aesthetic level, the music you use is too loud compared to your voice. Also the lo-fi chill beat feel is pretty annoying anyhow. So I say turn the music waaaay down or turn it off."
4,"Do the following commands from your terminal and report back with the results:

    python --version
    python3 --version
    pip --version
    pip3 --version
    pip freeze
    pip3 freeze"
4,"You have bugs. Looks like you meant to post this:

    from datetime import date
    from dateutil.relativedelta import relativedelta
    
    today = date.today()
    six_months_before_today = today - relativedelta(months=6)
    six_months_from_today = today + relativedelta(months=6)
    print(today.strftime(""%m-%Y""))
    print(six_months_before_today .strftime(""%m-%Y""))
    print(six_months_from_today.strftime(""%m-%Y""))"
4,my bad.
4,Yes. Google regex positive lookahead.
4,"The problem is here:

    d2 = OrderedDict

should be

    d2 = OrderedDict()

Also, you can create your cookies data much faster, easier, and more intuitively by doing this:

    cookies_data = ';'.join(f'{k}={v}' for k, v in cookies.items())"
4,"You're right that it'll execute the summation 101 times. The total will be the same as if you used range(1, 101), which would execute the summation 100 times. It is possible that they intended to use range(1, 101) but Since the result is the same as using range(101) that bug wasn't caught (I presume they have a suite of tests for the code in the book). Or it's possible the 100 was a typo and they meant 101. It's a decent illustration of how easily bugs can sneak into your code if nothing else. :-)"
4,"    In [7]: import pandas as pd
    
    In [8]: df = pd.read_csv('Datainvestisseur.csv', sep=';')
    
    In [9]: df
    Out[9]:
       3  1  46,800000  34,336986  Single  No information....
    0  4  0  43,323287  30,356164  Single  No information....

This works for me. What happens for you?"
4,"The easiest way is to use the dateutil library (`pip3 install python-dateutil`)

    >>> from datetime import datetime
    >>> from dateutil.relativedelta import relativedelta
    >>> now = datetime.now()
    >>> six_months_from_now = now + relativedelta(months=6)
    >>> now, six_months_from_now
    (datetime.datetime(2019, 7, 17, 7, 23, 12, 662586), datetime.datetime(2020, 1, 17, 7, 23, 12, 662586))"
5,"Ever noticed that some words are repeated over and over in Python programs? Those are Python's reserved keywords, and they form the backbone of understanding the language. Unfortunately they're not all the easiest to grasp, even if your first language is English, and after explaining them, individually, over and over here and elsewhere I decided to put together a pretty long-form resource that I think learners will find useful. Hope it helps! [https://yawpitchroll.com/posts/the-35-words-you-need-to-python/](https://yawpitchroll.com/posts/the-35-words-you-need-to-python/)"
5,"There’s several ways to do this, assuming the data is reasonably consistent, but a regex will be the most precise:

    import re
    
    line = 'KevnBlack ""Merry christmas!"" 2019 12 25 13:46:42\n'
    
    print(re.match(r'^(?P<username>.*) (?P<message>"".*"") (?P<timestamp>\d+ \d+ \d+ \d+:\d+:\d+)$', line).groupdict())"
5,"You’re being taught slicing, not indexing... don’t think in terms of loops.

For the first one, look at the [str.join](https://docs.python.org/3/library/stdtypes.html#str.join) method. If you can get a slice of every third letter then you can use that to join them with a delimiter of your choice.

For second one your fellow student is using negative indexes, not slicing. The negative index allows you to get the character at an index from the right side, while a positive index will get you the character at an index from the left. So `string[-1]` will get you the last character, `string[-2]` the second last, and so on. But again the exercise is you use slicing to do the job, not indexing. Well, what happens when you slice by a negative _step_ value?"
5,"You can try printing this out now, I’ve taken a whack at print styling."
5,"Python keeps a reference count for every object in memory. When the reference count drops to zero Python destroys the object _eventually_ by first calling the object’s destructor method (`__del__`) — if that is implemented — and then by freeing up the actual memory.

Just how immediately the memory gets freed is an implementation detail of the interpreter itself, and no guarantees of deterministic performance are made, so the best you can say is _eventually_.

All `del name` does directly is delete the name from the namespace it’s defined within, which reduces the reference count to whatever object the name refers to by one, so _if_ that drops the reference count to zero then yes, indirectly, it results in freeing up the memory, via the process above.

Re-assigning the variable to a different object also reduces the reference count for the original object, so that can also trigger deletion."
5,"I’ll try and get it added as a footnote tomorrow, when I’m back at my desk."
5,"Good point, a final clipping. Might have to update with that. Glad you enjoyed it; took quite a while to write and I hope that it is something people can come back to. Cheers! M"
5,"It is inaccurate to blanket state that SQLite doesn’t allow concurrent access. SQLite in normal mode can be read simultaneously by multiple threads/processes, but a write will block all readers. In [Write-Ahead Log mode](https://www.sqlite.org/wal.html) the readers are not blocked by a write and writes are not blocked by readers and quite high read concurrency can be maintained, though with some caveats mentioned in the link.

So concurrent read access is definitely possible and quite widely used... it is unclear from the OPs statement just how much concurrent write is actually going to happen. If writes are low volume and fast it might be perfectly acceptable."
5,"Just work through it with 4.

Does 4 divide by 1? Yes. Increase count to 1. Does count equal 2? No. Pass. Does 4 divide by 2? Yes. Increase count to to 2. Does count equal 2? Yes. Add it to the list. Does 4 divide by 3? No. Does 4 divide by 4? Yes. Increase count to 3. Does count equal 2? No. Pass.

Is 4 prime? Nope. It’s got more than two factors... but you’re ensuring that every number greater than 2 that has _at least_ two factors gets added as a prime. And so will ever prime number. Which means if your list includes 2 and 3 the only number you won’t add to the list is 1."
5,"I’m afraid this doesn’t make a heck of a lot of sense as written.

First, your **real_number** is an **int** ... it’s one of 1,2,3,5,6,7,8, or 9. Let’s say it’s 5.

You then give the user there guesses, but you convert their input to a **float**.

The use can now make a nearly infinite number of inputs ... they can choose 5.1, or 5.2, or 5.9, or 5.991992935 and your code will merrily inform them that they’ve chosen a number that’s too small.

You also check **again**, but it’s never changed... so what’s it even there for?

As for how to make it shorter; you don’t need the function, a **for** loop requires no bookkeeping, and the only thing that changes if the user didn’t guess correctly is a single word:

    from random import randint
    
    real = randint(1, 10)
    for attempt in range(3):
        print(f""You have {3 - attempt} guesses left"")
        guess = int(input(""What would you like to guess?: ""))
        if guess == real:
            print(f""YOU GOT IT RIGHT ON YOUR {attempt} TRY!"")
            break
        print(f""your number is too {'small' if guess < real else 'big'}"")
    else:
        print(f""The number was {real}"")"
5,"Yea, did the chafing teacheth him a lesson. And it was good."
5,"And lo, the heavens shook and the man quailed in terror, as a voice from above said, in burning words writ 10,000 feet high: `from string import ascii_lowercase as alphabet`."
5,"Thanks! And yeah, I mention it in a footnote near the top: **keyword.kwlist**."
5,It’s at most half as good! ;-)
5,"I am the author, and thanks for reading it! Yeah I figured it needed to be posted in at least r/learnpython and r/learnprogramming to hit all the Python learners."
5,"Yeah, I’d originally meant to post it on this subreddit instead of r/python, but wasn’t clear on the contributor guidelines and held off till a mod gave me the ok. Further posts will be on here and r/learnprogramming... I definitely don’t want to spam, but I do want people who are learning to find it."
5,Glad to hear it’s helped you.
5,"Rote memorization is not the same thing as, nor a substitute for, understanding, as the recent meme about `8/2(2+2)` amply demonstrates. If _all_ you’ve done is memorized the keywords you can certainly identify Python, but you cannot comprehend it, or know well-formed Python from bad. And based on what’s been conveyed to me by quite a number of ESL learners the fact that the words are often technical English vernacular puts them at a distinct disadvantage, since the English native learner has the cultural toolkit to at least partially grok the implied meaning of the word during memorization."
5,"Glad to know it’s a help. Yeah the subtle points of the Boolean comparisons can be a bit hard to remember long term, since most of the time we tend to use them as if they evaluate to an actual **bool**. And the short circuit behavior can trip people up coming from other languages that have both a non-short circuiting and a short-circuiting form of each operation."
5,"Will do! Yeah I initially wanted to post it to this subreddit, as it’s aimed at Python learners, but realized that such “here’s my blog entry“ posts are not usually part of the traffic here, so I put it on r/learnprogamming and r/python instead... then I got permission from a mod to put it here, and to update in the future, so when the next ones come out I’ll announce on here as well."
5,"Or just `fun`, yeah... the choice to honor Church was too costly and has everyone treating one of the very simplest building blocks of a programming language as if it were kryptonite, or at the very least some dark and arcane incantation. The same would have happened if we’d called every programming language a `turing`.

Writing this has really helped me understand just how important it is to have simple, ideally single-syllable keywords that are very carefully chosen and which convey themselves well and deliberately. From a well-chosen base you can give everyone the tools they need to build everything else."
5,"Will do! Working on the operators post now... going to take a little while, as this one did, but hopefully it will be out within a month."
5,Thank you!
5,What happens when you try and follow it?
5,"That’s a good ordering, thank you for that! There’s a few rearrangements I’d make, but I’ll definitely take it into consideration when I get to that article.

And thanks for the paper, it’s brilliant! I find myself in the place where I’ve come around to the same ultimate point, though via a more circuitous route. I wish I’d read that first, years ago!

Cheers."
5,"Heh, actually you can’t assign to reserved keywords in Python 2 either, there were just different keywords. Neither `True` nor `False` was a keyword, so you had that issue, and both `print` and `exec` were, despite being exactly the sort of thing you’d want to pass around as a first order function.

Any company without a transition plan to be off Python 2 by end of this year is a company with really, really terrible foresight. I can’t think of a more telegraphed punch in the nose that isn’t climate change or certain political choices."
5,"I’m planning on doing the same thing for the third and fourth posts in this series (builtin types and builtin functions), would be interesting to see how you’ve categorized them."
5,"I did post it in r/learnprogramming a little over a week ago, but I didn’t put it on here until one of the moderators told me it was okay to. I think you’ll find it worth the read, but I do know it’s quite long."
5,"Thank you! Will do; this one took quite a while to write, but I’ve started the next and I’ll post on here when it’s up."
5,"Thanks, that’s good to hear."
5,"Thanks, yeah I thought it would be a good resource for people who’ve been with Python even for quite a long time! Glad you like it."
5,Thanks!
5,"It’s for relative newcomers to the Python language to use as a resource as they progress. Relative meaning in the first few years of their journey with Python. From personal experience with _lots_ of Python programmer’s I’d say intermediates (< 5 years) will find it helpful as a refresher and they’ll encounter some things they didn’t know, and experts may find a keyword or two they haven’t bothered to learn (see `nonlocal`).

I’d like to think that many complete neophytes will find it useful... I’ve curated the list from top to bottom and the concepts build on each other, with only the asynchronous items being a real leap. The next article will expand on this one by adding the operators, which will layer on a lot in terms of helping them grasp what they’re reading in real-world code.

As for people transitioning from another language, I hope they’ll find it helpful mainly to see how concept A in their language maps to B in Python... Python has a number of odd little corners that it pulls in from things like Modula-3 and they’ll trip over things that aren’t a direct mapping and a quick read could save them some headache.

But we’ll see. These are based on what I perceive to be a gap in first principles created by the educational approach that’s typically used, and it may not appeal to everyone."
5,Hope it helps!
5,Please do!
5,"You’re welcome! I hope it prints well, the one thing I never actually tested with my CSS work on the site was how it formats for print."
5,"Those are there for (and based on a lot of interactions with) ESL learners... I’ve tried to use formatting to mark them as “read if interested” for everyone else. I’ve found that lots of people with quite good conversational English fluency will still have significant problems making sense of many of the keywords that use a non-dictionary standard definition of a word, or say the 4th transitive form definition or the 3rd adjective variant of what would usually be a noun.

My guess is though that even someone with quite advanced native English fluency will find something to learn in them."
5,"Thanks! I don’t write super fast, but more are coming!"
5,That’s what I am hoping to hear!
5,"No problem. Pandas will look a bit daunting at first, but it will save you **so** much work compared to the above!"
5,Glad to help!
5,"Thanks. I asked the moderators before posting, but of course there’s no way to communicate that, so my guess is it’s a reflexive response before reading.

Unfortunately it’s long kind of by necessity... some of those keywords are actually pretty difficult to explain!"
5,"Oh wow ... yeah that class is \_painful\_ ... you really may want to look at \*\*pandas\*\* to help you with converting and working with CSV tabular data, because practically speaking you really don't ever want to build a class like that.

It looks like the actual problem is that you're \_not\_ actually sorting the \*\*amazonias\*\* by price in your existing code.

You see the \*\*sorted\*\* function returns a sorted \_copy\_ of the iterable, it does not do an \_in-place\_ sort. So you have to do \`amazonias = sorted(amazonias, key = lambda x: x.price)\` to get back the sorted data.

I see you were trying \*\*list.sort\*\* which \_does\_ do an in-place sort; \`amazonias.sort(key = lambda x: x.price)\` should get you the same sort order as the above, but without having to create a full copy of all your data.

I don't see any other reason you shouldn't be getting back your data in price sorted order."
5,"Could you post your code, including that class? Might give us more to work with, because **sorted** should not be changing order in the original list."
5,And the fact is there’s simply no reason they shouldn’t both know how to and be encouraged to do so where they’re most appropriate...
5,"First, that’s an opinion — and a demonstrably simplistic one — stated as fact... it doesn’t constitute fact. By your rigid assertion you can’t use `2 + 2 + 2 + 2 == 2 * 4 == 2 ** 3 == 8` to teach multiplication or exponentiation because the left-most is “bad” practice in applied mathematics.

I’m not advocating for the _use_ of named lambdas in Python; I’m demonstrating the relationship between the two form of function declaration in Python.

But please demonstrate how to teach that complete relationship _without_ showing the named lambda form."
5,"You have an interesting tendency to read far too much into things.

I have no aversion to the PEP, I simply said it’s irrelevant to a valuable bit of pedagogy. Which it is... I use a named **lambda** to demonstrate how it’s just a transformation of a **def**... the PEP doesn’t apply. If I followed it dogmatically I could not in fact teach that point. No aversion is, was, or need ever be present.

Also there are _plenty_ of professional opportunities where you work with someone who is also a beginner. In my line of work I teach scripting and automation to colleagues who are _highly_ skilled in their work but neophytes to programming. Five years from now most of them will still be relative beginners to Python, as it’s an ancillary skill to their work.

Lastly, human beings are, in my experience, quite capable of learning two near identical forms of the same operation simultaneously. There’s no _reason_ to leave to later what can be processed now, especially when **def** is, as you’ve acknowledge, just more_ complex restatement of **lambda**."
5,"I work with a lot of rank beginners. I also work with people who have less than a year of professional experience under their belt... I’d consider both beginners.

A very simple way to explain a re-useable function is:

    square = lambda x : x ** 2
    print(square(2))

The fact that the PEP recommends against named lambdas in working code is irrelevant, as this is just an introduction to the concept of code re-use in the simplest possible statement.

To introduce **def** you have to introduce multiple concepts because you must necessarily introduce **return**... but now after showing someone how to write simple re-useable functions you can rewrite as **def**:

    def square(x): return x ** 2
    print(square(2))

Now, in four lines and a little bit of explanation I’ve got a student who understands both **lambda** and **def** and **return** and isn’t afraid of the former. They’ve also been at least very mildly introduced to the notion that functions are just another _object_ and that **def** is just assigning that object to a name that’s the same as any other name.

They may never need to use **lambda** again, but if they see it, they’ll know what it’s doing.

Also the vast majority of programming classes do a terrible job at teaching programming, so that’s not much of an argument in and of itself."
5,"Never mentioned fear. The problem with not introducing them is it leaves them with this idiot mystique as something “different” or “leet”... so I see lots of people using nested **def** to write named closures that are much more simply implemented as a lambda. The way it’s introduced it builds fear in the beginner that doesn’t have a reason to exist.

By the same logic, BTW, you don’t really learn anything new with **def** over **lambda** until you begin to introduce docstrings and multiple statements. They’re both mechanical restatements is each other."
5,Doesn’t mean they shouldn’t... introduced correctly they’re just a simpler introduction to **def** that can be understood and set aside for when they’re actually useful. My issue is with how often they’re seen as an “advanced” feature when they’re kind of trivial.
5,"Yes, network boundaries and FFI would be cases where runtime type checking using **isinstance** might be warranted, even good practice, but (again, arguably) _most_ of the time such policing of inputs just breaks duck typing without clear and discernible benefit, and with some runtime cost. Now that type annotations exist I feel it’s worth checking whether or not all your **isinstance** calls are actually _doing_ is documenting your function by other means, rather than protecting some vital resource. If it is, it’s likely a good candidate for replacement with an annotation."
5,"Since it’s compiled every time it’s encountered `lambda` is notably less efficient than a `def` — unless you assign to a name, at which point you _should_ be using `def`, as a named anonymous function is a bit of an oxymoron — and should really only be used where you _need_ a closure.

But I agree it can be fun."
5,Number #2 comes up quite often when you start to implement custom numerical types... I often see `raise NotImplemented` where it should be `raise NotImplementedError` and `return NotImplementedError` when it should be `return NotImplemented`... these really should both have better names.
5,"There’s different levels of beginner... the things in that article are all common mistakes of people with <1 year intensive (think professional) Python experience... still beginners, just less beginner."
5,"Lambda expressions are just one line **def** statements that implicitly return ... they’re actually simpler than **def**, they’re just very poorly named and their use cases are relatively rare because they cannot handle a block of statements."
5,"Wouldn’t it make much more sense to use multiple **except** statements for that?

    try:
        some_maths(a, b)
    except FloatingPointError as err:
        ...
    except ZeroDivisionError as err:
        ...
    except ArithmeticError as err:
        ...

But even if you wanted to do it for some reason in an **if** why isn’t this better:

    except ArithmeticError as err:
        if isinstance(err, FloatingPointError):
            ...
        elif isinstance(err, ZeroDivisionError):
            ...
        else:
            ...

Who is to say a subclass of ZeroDivisionError might not be semantically more meaningful than your code’s user than a ZeroDivisionError itself?"
5,"I can’t think of a well-reasoned case where you’d want:

    foo(3)

To do one thing but:

    class MyInt(int): pass

    foo(MyInt(3))

To do another."
5,"This is great for a beginner, but I take a bit of an issue with #5... using `type` breaks inheritance, and 99% of the time that’s exactly what you _don’t_ want to do, and is why you very likely _should_ be using `isinstance`.

I’d go so far as to say that if you think you need to know that a thing is an actual **int** and not subclass of **int** then you’re very likely wrong, or at the very least overthinking.

Arguably even **isinstance** is overkill... why break your user’s ability to use duck-typing?"
5,"The problem is you’ve got a positive lookahead with no actual pattern to match before it, which essentially means you’re trying to look for “nothing whatsoever followed by google” instead of “the literal dot character followed by google”.

Thing is regex is going to be a painful way of doing this if what you’re actually trying to do is extract subdomain and domain from a URL... try [tldextract](https://github.com/john-kurkowski/tldextract) for that."
5,"No worries. And that overwhelmed feeling is normal, it’s a pretty wide topic and it gets wider quick. Personally I’d start with a couple of small “toy” apps via the mega tutorial I linked, just to get a feel for all the moving parts."
5,"You’d likely want to get a bit more normalized with your database tables.

For instance you’ll probably have many products that have the same manufacturer, so it makes sense to have a table that represents the manufacturers, so that each product can reference the manufacturer and you don’t end up duplicating information in products table.

Also consider _not_ storing passwords at all... it’s much safer to store Oauth 2.0 tokens from a provider like Google or Facebook or Github. If you do store passwords make sure you’re _very_ up on the best practices for password hashing and data security.

For database choice, don’t forget about cloud providers; it’s much easier to get and keep a database secure on AWS, GCP, or Azure then it is to run your own server and keep it patched and battened down.

Also, though there are arguments against them, a good ORM like SQLAlchemy or PeeWee can help with modeling your data and make it easier to transition from one database backend to another.

Lastly, if you haven’t seen it, the [Flask Mega Tutorial](https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world) is an amazing resource and covers some useful points about databases and authentication along the way."
5,"You wouldn’t. An operator isn’t an instance of anything, it’s part of the grammar of the language. You can’t assign it to a variable, or test it, any more than you can a keyword like `return`.

Can you explain, in some detail, what the heck it is you’re trying to do? Odds are I can answer this question better if I have some context."
5,"True, I just find that for a first time introduction the set literal form looks too similar to the dict literal."
5,"Yeah **more_itertools** can solve a lot of problems like this... be a little careful with **set_partitions** though, it removes all duplicates and returns the partition in its own ordering, like your set approach but with a defined order that will be the same from machine to machine... it’s not going to maintain the order of **obs** in each partition, like your approach does."
5,"Your second solution seems the better one, unless you’re trying to remove _all_ duplicates of an obj that might be duplicated in **objs**.

There’s no builtin... if you _are_ looking to remove all duplicates it looks like **more_itertools.set_partitions** could help, but if you’re just trying to have the item at each successive index and a list of everything but that index, then your second one seems pretty solid."
5,"Python does not have a do-while loop construct; instead you use **while** and ensure that **break** ends the loop if it _should not_ continue.

So the pseudocode:

    do:
        block
    while: test()

Is the same as Python’s:

    while True:
        block
        if not test():
             break"
5,"Assuming your user must spell their answer perfectly correctly, but that case doesn’t matter, then a **set** is what you’re after:

    if guess.lower() in set([“atlantic”, “atlantic salmon”, “salar”]):

A **set** can only hold unique items and has very fast membership testing."
5,"What do you mean by “catch it”?

When Python encounters:

    x += y

It first checks to see if **x** implements `__iadd__`; if it does it tries:

    x = x.__iadd__(y)

But if **x** does not implement `__iadd__`, or if `x.__iadd__(y)` returns **NotImplemented** Python tries:

    x = x.__add__(y)

But if **x** does not implement `__add__`, or if `x.__add__(y)` returns **NotImplemented** and **x** and **y** are different types Python tries:

    x = y.__radd__(x)

And finally **x** and **y** were not the same type or if **y** does not implement `__radd__` or `y.__radd__(x)` returns **NotImplemented** then a TypeError is raised.

You can play around with all of this pretty easily:

    class X:
        def __iadd__(self, other):
            print(f""try {self.__class__.__name__}.__iadd__({other.__class__.__name__})"")
            return NotImplemented
    
        def __add__(self, other):
            print(f""try {self.__class__.__name__}.__add__({other.__class__.__name__})"")
            return NotImplemented
    
        def __radd__(self, other):
            print(f""try {self.__class__.__name__}.__radd__({other.__class__.__name__})"")
            return NotImplemented
    
    class Y(X): pass
    
    x, y = X(), Y()
    
    try:
        x += y
    except TypeError:
        print(""failed"")"
5,Yeah **or** and **and** can be a great help when you’ve got functions that either return some True-y value or a “False-y” value.
5,"Just think of the **dict** as a container that maps a _key_ to a _value_... in this case the key is the username and the value is the password.

    db = {}  # create empty dict
    db[“scroob”] = “12345” #set user = password

The **def** keyword creates a _function_, which is a re-usable bit of code. The **return** keyword hands back the value to its right.

    def say_hello():
        return “hello”

    print(say_hello())
    print(say_hello())
    word = say_hello()
    print(word)

See how I can reuse the function multiple times? And that it looks like what you’re doing when you use **input**? That’s cause **input** is a function that uses **return** to give back whatever the user entered.

It takes some time, but it’s just smaller building blocks assembling into larger ones."
5,"Before you get drawn off into too much human interface details (like menus, etc), try and break this into functions that use looping to handle getting valid user input, and have a **dict** stand in as a database.

Then try to import and use **getpass.getpass** to actually get the password without echoing input to the screen.

Start with a basic skeleton like this:

    db = {}

    def add_user():
        [get username and password]
        db[username] = password

    def authenticate():
        [get username and password]
        if username in db:
            if password == db[username]:
                return True
        return False

Now you can call **add_user** as many times as you want to populate your database, and **authenticate** will return True or False if the user knows their username and password."
5,"That’s true if **a** is ever 0... in the above **a** is a non-zero constant and thus `div(a, b)` can never be 0... I don’t know how general OP needs this to be.

A general option would be: `div(a, b) if b else div(a, c)`.

Of course at that point, `div(a, b or c)`."
5,"`test = div(a, b) or div(a, c)`

If **a** is non-zero, or:

`test = div(a, b) if b else div(a, c)`

Or:

`test = div(a, b or c)`

Edit: add options."
5,"Before getting to your code: please don’t share pictures of your code, just share the code, properly formatted. It makes life so much easier for the rest of us.

Now, your math works fine. Of course it does, its trivially summing some values and the calculating an average. The logic isn’t the problem, the problem is your implementation.

You initialize your roll totals for each dice size as floats, but each dice has a discrete number of sides, hence _is_ an integer. You repeat yourself when you could and should use a constant and a function, etc.

Consider a more Pythonic approach:

    from random import randint
    
    def roll(n, d):
        result = 0
        for _ in range(n):
            result += randint(1, d)
        return result
    
    d4 = 0
    ROUNDS = 5000000
    for _ in range(ROUNDS):
        d4 += roll(3, 4)
    a4 = d4 / ROUNDS

If you’re in Python 2 add this at the top of the file:

    from __future__ import division

Which ensures that `/` performs true division and gives you back a **float**.

And (also in Python 2 only) ideally replace **range** with **xrange**, as there’s no reason to build that huge a list since you’re never actually going to use any value in it."
5,"For the moment, no, you can’t, in 3,8 you’ll be able to do:

    while thing := get_thing():
        act_on(thing)

But for the moment you’ve got to do:

    thing = get_thing()
    while thing:
        act_on(thing)
        thing = get_thing()

Which certainly isn’t as concise, but it’s worked for quite a while."
5,"A class is, fundamentally, just a way of describing a type of thing ... the class has state (attributes) and it has behavior (methods), and all instances of that class have the same attributes and the same behaviors... thus the class is a template for making new instances that have concrete values for each of those attributes.

Howard is a duck. Which is a bird. Which is an animal. Which is life. Which is matter. Which is energy that’s come to a screeching halt, for now, Howard has assigned, concrete values for the union of all the attributes of all those classes, and all the behaviors that haven’t been overridden by each progressively more specific class.

What really helped me grok all that was a book called Mastering Object-Oriented Python by Steve Lott, though I’ve simplified and added my own spin."
5,"Well I don’t know how these are being used in the program, but if they’re just icons for the script’s GUI then there’s no performance advantage; hard coding them into the file makes them a little easier to simple move around, since you’ve just got to move one file and not a whole directory structure, though."
5,All the `bytes` literals beginning with “iVBORw” appear to be base64 encoded PNG files. The other four represent hexadecimal colors.
5,"OP didn’t ask for a DB implemented in pure Python, and the sqlite3 bindings to SQLite (which is usually used as an embedded database) are extremely fast."
5,"Well, sqlite3, and I’d just start with its [docs](https://docs.python.org/3/library/sqlite3.html)."
5,"Ok, overall this is a good starting point, but here are a few things to think about.

First, idiomatic “best practice” approach to working with files is to use **with**, since the **file** object can be used as a _context manager_.

    PATH = “atm_sim_accounts.pickle”
    with open(path, “rb”) as src:
        acc = pickle.load(src)

This opens PATH (given an UPPERCASE name because it’s a constant value), loads the pickle data within it, then closes the file handle (that’s what the context manager interface of **file** does for you — notice you _did not_ close it manually).

Then at the end of the file you can overwrite it:

    with open(PATH, 'wb') as dst:
        pickle.dump(acc, dst)

And ensure the same cleanup is done.

Second, looks carefully at **registration** and your main logic loop: should an ATM allow anyone who chooses to register an account to overwrite the details of anyone else that already has an existing account? You might want to reject an existing name. You might also want to use **getpass.getpass** to get the PIN, since it’s never a good idea to display it to the screen. Also is there any reason for **while**? Seems to me you can only ever start one loop, so do you need to loop at all? Or did you mean to do some validation that isn’t yet present?

Third, if someone were to make a copy of your pickle file they’d have access to the plaintext PIN numbers of your users. You could use **hashlib** to keep only the hash of the pin, and the when authenticating a user you could compare that the hash of the password they typed to the hash stored in the “database”... that way you never have the actual PIN at all and the user’s a bit more secure."
5,"Good job on taking on a challenge, but this would be much easier to read and critique if it were on pastebin or github or a gist, if you can’t get it formatted correctly in the post itself."
5,"It’s a bug in Python as well, it’s just a silent one, whereas C has a compiler check for undeclared variables.

This is one of the problems of Python’s flexibility... a _name_ isn’t something that a compiler (even if there was one) can reasonably check; it’s just an arbitrary identifier that refers to some arbitrary object in memory... if the interpreter blocked you from accidentally making a new such name it would have to block you from _intentionally_ doing it as well, and 99.99% of the time you’ll be doing it intentionally.

Now something like `pylint` can statically check your code and warn you about certain things, like assignments that are never actually used, which can _help_ in finding issues like this, but there’s nothing in the Python interpreter that can do that for you."
5,"So you’re trying to protect yourself from a typo? I’m afraid there is no meaningful way to do that, since you can assign to a new name at any point in a program... the fact that you’re assigning to the _wrong_ name is one of those problems that debugging is for.

An IDE with code completion that autocompletes names _can_ be helpful here, but even that can’t save you if you’re typing fast enough.

This is however why it’s a good idea to write small discrete functions that you can test to ensure they’re doing exactly what you think they’re doing."
5,"There isn’t really such a thing as an undeclared _variable_ in Python; if you’re getting a NameError it means you haven’t declared the _name_ you’re trying to use such that it’s readable/writable inside the scope you’re trying to read from or write to it.

The reason for that could be as simple as you simply haven’t assigned to or defined that name yet — the obvious fix being assign or define it _before_ using it — or it could be you’re trying to use a _local_ variable outside its scope.

So we need more context to help."
5,"Try:

    “.” * 3 + “and then.

Though if what you’re trying to do is pad to a specific width you’re better off using string formatting:

    ""{:.>11}"".format(""and then"")"
5,"So this _would_ work in Python 2,  but not in Python 3.

The reason is the fix to Python 2’s “dirty little secret” described by Guido late in [this post](http://python-history.blogspot.com/2010/06/from-list-comprehensions-to-generator.html).

See in Python 2 the list comprehension (but _not_ the generator comprehension) leaked the temporary variable assigned in its scope into the surrounding environment, therefore this was valid:

    print([a() for x in seq])

But this was not and would raise a NameError:

    print(list(a() for x in seq))

_**Caveat**: try running _both_ of those in that order and the latter will work, but not as you’d expect and only because **x** leaked out of the former._

In Python 3 this “dirty little secret” was removed; no comprehension leaks its namespace... which means that the function **a** cannot look up **x**, since to do so would be a way of leaking that namespace.

So in Python 3 _neither_ will work because _neither_ ever should have.

Thus you need to use an explicit **for** (and lose the optimizations of a comprehension), or you _could_ do something like:

    [(lambda : x + 2)() for x in seq]

Though I can’t say I’d recommend it."
5,"I can’t think of any such certification in Python an employer would take particularly seriously, except _maybe_ one offered by edX through a known institution, or directly from a known tech leader like Microsoft, Oracle, Cisco, etc... and even then they’re going to be taken _much_ less seriously then demonstrated ability via code samples.

Also the cheaper such a thing is the less meaningful it becomes, which is a painful Catch-22, I know. Still, speaking as a professional, I’d recommend spending that time and energy and money on learning and practicing rather than on seeking a certificate of dubious value."
5,"Ok, so you have something like `CLOCK = datetime.now()` at the top and you’re updating it on some (unknown) event, and that master CLOCK is being used to set the start and stop times of each trip in its dataframe? And you’re trying to figure out how to test (some unknown part) of your logic by generating lots of simulated records?

It _sounds_ like you’d want to use **mock** to get `datetime.now()` to give you a consistent starting point and consistent intervals for updating **CLOCK**, but without seeing exactly how you’re creating and updating that master clock is not sure."
5,"The sense of all three paragraphs is unintelligible without extra information, as I made perfectly clear in my initial response. By choosing to stress the sentence you’ve quoted in the third paragraph plus the “how do I check” phrase in a prior paragraph you arrived at your interpretation, which is reasonable but not by a long shot the only valid (or even obvious) interpretation of the meaning of the entire post.

You seem to be hung up on whether or not it was or was not _actually_ gibberish when I said it was _essentially_ gibberish, as in it did not have the essential information required to be interpreted meaningfully and unambiguously."
5,"That is one interpretation, based on assumptions not precisely supported by the sum of those three paragraphs. As is the assumption that OP is male."
5,"A function isn’t recursive if it never recurses. Your function, as written, _never_ calls itself."
5,"You’re going to have to explain yourself better. I’ve read those first three paragraphs over and over and frankly I don’t really have a picture of what it is your program is trying to do or how you’re currently storing the data. It’s essentially gibberish.

Maybe give us some examples of how you’ve been using Datetime currently? How are you gathering the data, how are you storing it, etc.?"
5,"A very high level overview would be that:

1. You use a _conditional_ wherever your logic hits a fork in the road, and you need to make a decision based on some condition you knew could happen in the normal course of the work you’re doing. It’s about reacting to predictable states in a planned manner.

2. You use _exception handling_ whenever your logic hits a pothole (or moose) in the road, and you need to stop and react, maybe by doing some repairs, possibly by screaming for help. It’s reacting to abnormal outcomes and unpredictable states by either fixing the issue, ignoring it, or panicking.

So very often you use **try** around things that _might_ error, and you use **if** for things that _won’t_."
5,"If you pass an argument to **Counter.most_common** you get exactly that many elements, it doesn’t matter if the counts of those elements are the same.

If what you want is all of the elements that share the highest count, then you’d need something like:

    def commonest(count):
        common = iter(count.most_common())
        result = [next(common)]
        most = result[0][1]
        for item in common:
            if item[1] != most:
                break
            result.append(item)
        return result"
5,"In this case **inventory** will be a **dict** and **added_items** will be a **list** of **str**; as you see in your example data **added_items** can contain duplicated items.

All the function does is loops over each item (called **loot**) in **added_items** and uses **dict.setdefault** to ensure that the count for that item starts at 0, then the count for that item is incremented by 1.

The **dict.setdefault** method tests if a key exists in the **dict**, and if it does not it sets the value of that key to the second argument... so it essentially does `if loot not in inventory: inventory[loot] = 0`."
5,"Well, **iter** takes a callable and a sentinel value, and it keeps calling the callable with no arguments until it returns the sentinel value, at which point the iterator stops.

Now **partial** is just being used to preload **take** so that arguments never need to be passed to it... the partial function it returns will just keep giving back a list of the **n** left-most items remaining in the **iterable** every time it’s called, right up until the iterable is exhausted, at which point it will return an empty list.

So the first time you call **next** on the iterator returned by calling **chunked** you get the first **n** items, then the next **n** items, then the next, and so on, until the original **iterable** is exhausted and iteration stops."
5,"Which would, again, all potentially be valuable advice, if you’d selected a true equivalence. Which you demonstrably haven’t.

You’ve also improperly inverted my argument while trying to shift the goal posts. I never said anything about trusting PyPi, I’m just encouraging people to actually do their homework, which you have not in this case."
5,"And `more-itertools` is more than 2400 LOC that does much, much more than left-pad and is maintained by long-standing, well-respected, and very professional contributors to the Python community. Contributors who, IIRC, provided the meat of the itertools “recipes” section you rely on to dissuade people to skip their work.

Your advice would be well taken and helpful _if_ it weren’t starting from false equivalence."
5,"Yes, and that not looking is how you ended up at a false equivalence. The `more-itertools` version of both is subtly different than the recipe versions, and the **windowed** implementation especially is more efficient at building the windows and handles more edge cases.

The OPs article points readers at what is a very useful, long-standing module that saves you having to “roll your own” for a number of quite complicated cases. 

Sure, two of the three examples OP posed aren’t that hard to roll — though why do so given a stable, well written “best practice” library that handles the subtle issues? — but the third is _quite_ non-trivial. 

You cherry-picked the first two to support your (premature) first blush response, eliding that third example and fueling your confirmation bias.

That is how you end up skipping — and worse encouraging other readers to skip — a valuable addition to any Python coder’s toolkit, all due to leaping to a false equivalence."
5,"Something like this;

    if string.upper == “A” or “a”:
        print(“here!”)

Will _always_ print “here!”.

To fix that you first need to call the **str.upper** method, as otherwise you’re comparing the _method_ — and not the method’s _return value_ — to “A”. That comparison will _always_ be False because the method is a different type than “A”.

    if string.upper() == “A” or “a”:
        print(“here!”)

But this will _still_ always print “here!”. This is because “a” is always considered equivalent to True, since it’s a non-empty str, which means that the overall **or** will always evaluate to True, since at least one side of the **or** is True.

What you’re trying to do is this:

    if string.upper() in [“A”,  “a”]:
        print(“here!”)

Though since you’re uppercasing the string anyway, you should just do:

    if string.upper() == “A”:
        print(“here!”)

Which is much simpler."
5,"Unlike the JS left-pad debacle the `more-itertools` package has multiple active maintainers who have been around for years, and is a quite large package that has _dozens_ of very useful functions, most of which are non-trivial to get right... it’s not some tiny little insignificant throwaway managed by a single petulant user and unknowingly depended upon by thousands of other base dependencies. Or, in other words, has false equivalence taught you nothing?"
5,"The parentheses are doing exactly the same thing as in a maths equation, they’re just assigning a specific order of evaluation.

And yes, it can be done via factoring as well. It’s a little easier if you abstract out the actual modulo comparisons, though. Basically you’ve got two conditions that make a leap year:

1. year divides by 4 and not by 100
2. year divides by 4, 100, and 400

Which you can think of as:

    if A and not B:
        return True
    if A and B and C:
        return True
    return False

But those two conditions describe an **or**, since either the first is True or the second is True or the answer is False.

    return (A and not B) or (A and B and C)

But yes, we can factor out the first test, because it applies to both sides of the **or**:

    return A and (not B or (B and C))

And we can remove B, because we know it’s value if we know `not B` is False, the only way we ever reach `B and C`.

    return A and (not B or C)

And we’re back at the same place we reached via reduction the last time.

The reason I wrote that article I linked to above is that this leap year problem is actually _very_ instructive. Professionals very often don’t come up with the _right_ answer on their first few tries, and there are **many** ways of getting the correct answer in an inefficient fashion. It’s actually not at all trivial, but the fascinating thing about it is that in any language there exists an optimum form that is also the _most_ readable, once you’ve trained yourself to read Boolean operations.

So don’t fret at this one puzzling you... it only looks simple, and the odds are good even experienced Python coders won’t arrive at `return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)` on the first go until later in their careers."
5,"Efficiency always matters if something is actually used. Not understanding that is the majority of the reason we’re going to lose whole civilizations to carbon dioxide.

    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)"
5,"In a terminal type `python3 /path/to/getpassword.py luggage` and — if **pyperclip** is installed — the program will end after printing success and you’ll be able to hit CTRL+V to paste “12345”.

I haven’t read the book, but I’d assume it has instructions early on about how to install modules and run things at the command line."
5,"Inefficient though, since both 100 and 400 are multiples of 4 and since we know ahead of time that 75% of all possible years don’t have 4 as a factor."
5,"Let’s make it less weird.

First, let’s stop tracking the result, let’s just return the answer when we know it.

    def is_leap(year):
        if year % 4 == 0:
            if year % 100 == 0 and not year % 400 == 0:
                return False
        return True
    return False

But you’re right, it’s a bit ungainly. However you can flip the meaning of any Boolean expression, so instead of returning False early when the year is a multiple of 100 AND not a multiple of 400, let’s return True when the year is not a multiple of 100 OR is a multiple of 400. We can eliminate the nested follow up `return False` then because we’ll hit it on the final line anyway.

    def is_leap(year):
        if year % 4 == 0:
            if not year % 100 == 0 or year % 400 == 0:
                return True
    return False

Though that can be made easier to read when you realize there’s a more obvious way to say the year does not divide by 100.

    def is_leap(year):
        if year % 4 == 0:
            if year % 100 != 0 or year % 400 == 0:
                return True
    return False

But at this point aren’t we saying that a year must both be a multiple of 4 AND meet the inner condition as well?

    def is_leap(year):
        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
            return True
    return False

Better... but doesn’t that expression already evaluate to either True or False? Do we even need the **if**?

    def is_leap(year):
        return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)

Et voila."
5,"You’ve got the rules slightly wrong in your logic, it should return True if the year _does_ divide by 4 (`year % 4 == 0`) AND either _does not_ divide by 100 (`year % 100 != 0`) OR _does_ divide by 400 (`year % 400 == 0`).

You’re currently returning False unless the year divides by 4 and BOTH divides by 100 and by 400... which would mean that only years that are multiples of 400 are leap years.

You might get something out of reading [my post](https://yawpitchroll.com/posts/look-before-you-leap-year/) on why this is a good learning exercise."
5,"From the top, then:

    #! python3

Known as a [shebang](https://en.wikipedia.org/wiki/Shebang_(Unix)), this instructs POSIX operating systems to use python3 to run this program if it’s made executable. Should really read `/usr/bin/env python3` though.

    # pw.py - An insecure password locker program.

A comment that explains the program. Should really be in triple double quotes to form a module [docstring](https://www.python.org/dev/peps/pep-0257/#one-line-docstrings).

    PASSWORDS = {
        'email': 'F7minlBDDuvMJuxESSKHFhTxFtjVB6',
        'blog': 'VmALvQyKAxiVH5G8v01if1MLZF3sdt',
        'luggage': '12345'}

A **dict** literal that creates a global constant name **PASSWORDS** that maps the account name to its password. Apparently this is holding the passwords of [Spaceballs President Skroob](https://giphy.com/gifs/spaceballs-password-12345-xT0GqJfdLcrcpSbZf2).

    import sys, pyperclip

Imports a standard library module (**sys**) that is included with a Python installation and also an external module that (**pyperclip**) that must be installed on the computer for this program to work.

    if len(sys.argv) < 2:
        print('Usage: py pw.py [account] - copy account password')
        sys.exit()

The **argv** attribute on the **sys** module holds a list of the arguments used to launch this script on the command line. The first such argument will be this script, but if no second argument is provided the rest of this script cannot work, so this is verifying that at least the one required argument has been provided when the script was invoked. If it has not this prints out an error message and then exits the script. The **print** line really should have an extra argument `file=sys.stderr` and the script should exit with a number greater than zero (`sys.exit(1)`) to correctly indicate the program failed.

    account = sys.argv[1]   # first command line arg is the account name

Sets the name **account** to refer to the first argument given by the user at the command line invocation of this script.

    if account in PASSWORDS:

Checks if the given **account** is actually a key in **PASSWORDS**.

        pyperclip.copy(PASSWORDS[account])
        print('Password for ' + account + ' copied to clipboard.')

Uses the **copy** function of the **pyperclip** module to copy the password for **account** into the system clipboard (you should now be able to do a CTRL+V paste operation to paste that password into another document. Also prints a message to indicate that such a copy operation has occurred.

    else:
        print('There is no account named ' + account)

In the case that **account** was not a member of **PASSWORDS** print a message to that effect."
5,"No worries. Those books haven’t been updated in a few years, so they’re missing a small number of features of Python 3.6 and 3.7. Don’t worry about those, everything in the books will prepare you to just look at the [What’s New in Python X.Y](https://pymotw.com/3/) posts and pick those up."
5,"Find a copy of the books Learning Python and Programming Python, by Mark Lutz. Once you’re through the first and comfortable with it, also read everything in [pymotw](https://pymotw.com/3/).

Those will give you enough basis in the whole language to start picking up everything else.

Also one big piece of advice: Python and it’s ecosystem have now grown large enough that no human can possibly hope to master all of it. Always be learning."
5,"You’re going to have to better explain yourself. What _precisely_ are you trying to do. Give examples as necessary, because what you’ve said so far communicates nothing anyone can clearly help you with."
5,"We cannot know what topics have been covered in this chapters or the lectures you’ve attended, but the instructions explicitly say to **not** define any functions, and one of the first things you appear to be doing is defining a function called **repeat**.

Do not define a function.

Just use **while** to start a loop that will continue forever, _then_ prompt the user for input. If after splitting and converting to two **int** values the first is less than the second then **break** out of the loop.

That gets you through A... for the rest go back in your class notes and find the `%` operator, because to test for even/odd you need to use modulo division."
5,"To be precise someList is being extended with, not appended to. The + operator for lists maps to **list.extend**."
5,"Before doing _anything_ else start from this assumption: you’re a rookie programmer, and you’re not professionally involved in payments and banking. The odds of you having come up with a unique new way of transferring money that isn’t already patented or in play _somewhere_ in the hands of someone with _much_ deeper pockets and _many_ more lawyers than you is, practically speaking, **way** below nil.

**If** after a thorough patent search you’ve actually managed to do so your very first stop should be to engage a good patent attorney.

You’re incapable of delivering the code. You’re very likely incapable of creating the business and contractual structure necessary to execute on the code, but even if you are without the patent you’ve got less than one tenth of bupkiss."
5,"You never set **subfound** inside the inner **while** loop, and therefore the left side of that **or** is always True, so `subnum != b` will never be reached, so eventually you try and index into the substring with an index that’s too large.

I’m assuming this is a learning exercise. Think about how you could do this with a for loop using **enumerate**. You just need to check if a slice of **string** starting at each index and that is as long as **sub** is the same as **sub**, and if so return the index.

It would save you a lot of trouble managing **while** loops ... like for instance you current function just never exiting if the substring is never found in the string."
5,"For every **dict** — which is given the name **pet** for the scope of the loop — inside the **list** called **pets** it is first printing out a line that includes the title-cased name of the **pet** (via looking up the _value_ assigns to the _key_ “name” using `pet[“name”]` and then calling **str.title** on the **str** value), then for every key and value pair (actually given the names **key** and **value** in this loop) that is returned by the **dict.items** method it’s printing out the key and it’s value, separated by a colon and preceded by a tab character."
5,This is exactly what you want to use the **logging** module for. You just add a **StreamHandler** and a **FileHandler** and start logging.
5,Either manually put in the indentations or surround the entire thing in triple backticks. It’s unreadable without formatting.
5,"Via dict comprehension:

    {k: v for k, v in x + [(j, i) for i, j in x]}

Preferred approach:

    dict(x + [(j, i) for i, j in x])

Or:

    dict(x + [i[::-1] for i in x])"
5,"You’re over-thinking.

Start with `index = string.find(“xyz”)`.

If **index** is -1 then **string** does not contain “xyz”.

If **index** is 0 then **string** starts with “xyz”.

In all other cases you just need to test if **string** contains a period at `index - 1`."
5,"It’s not possible to create a _Python_ program that runs _outside_ a Python interpreter.

PyInstaller and other “freeze” utilities bundle a Python installer with the minimal code necessary to run your program. When the .exe they produce is clicked the bundled contents are unzipped somewhere and your bundled source Is then run with the interpreter inside the bundle.

If you’re having problems with PyInstaller it almost always comes down to your not having successfully bundled all the required python and data files. This is because you’re going to have to manually update your [spec file](https://pyinstaller.readthedocs.io/en/v3.4/spec-files.html) with whatever it needs to capture files it can’t automatically discover.

This is true in some other form of all such “freeze” bundlers.

Your other option is to try [Nuitka](https://nuitka.net/), which goes another route (transpiling Python to C). It’s a bit rough around the edges, but can work for some things quite well."
5,"[Yep](https://docs.python.org/3/library/sqlite3.html). There are quite a large number of tutorials out there, as it’s pretty much the world’s most widely used embedded database. It’s pretty powerful and can get complex quick, but the basics are covered in the linked page.

Edit: should add, if you want a somewhat easier approach that abstracts away most of the SQL itself, look for an ORM like [peewee](http://docs.peewee-orm.com/en/latest/)."
5,"I’ve got about 5 times more Python experience than that, and I can say it’s totally possible.

It’s just a drill down question-based estimator and there’s no need for particularly fast access to a database. Hell, this could actually be a static site with no database access at all.

The speed of Python itself would never come into meaningful play."
5,"A dictionary is an in-memory data structure and is lousy at persistence, but save it to disk as JSON every time and sure, I guess. Personally I’d look at using **sqlite3**."
5,As described this is kind of [elasticsearch](https://www.elastic.co/products/elasticsearch)’s territory.
5,"It is UTF-16 encoded.

Let me try to make this a little simpler.

Here I write out “test” encoded in ASCII, then print back the binary contents of the file:
    
    with open(path, ""w"", encoding=""ASCII"") as dst:
        dst.write(""TEST"")
    
    with open(path, ""rb"") as src:
        print(src.read())

This will print `b’TEST’`.
    
Now in UTF-8, which is backwards compatible with ASCII and uses the same 8 bits for the first 128 Unicode codepoints (the ASCII character set) as ASCII itself does.

    with open(path, ""w"", encoding=""UTF-8"") as dst:
        dst.write(""TEST"")
    
    with open(path, ""rb"") as src:
        print(src.read())
    
This will _also_ print `b’TEST’`.

Now in UTF-16, which is _not_ backwards compatible with ASCII:

    with open(path, ""w"", encoding=""UTF-16"") as dst:
        dst.write(""TEST"")
    
    with open(path, ""rb"") as src:
        print(src.read())

This will print `b'\xff\xfeT\x00E\x00S\x00T\x00' `.

Notice that there’s two bytes at the front (called the Byte Order Marker or BOM) that are unique to UTF-16; this is what allows programs to guess that this is meant to be decoded using UTF-16.

So you’re already getting UTF-16 encoded text, you’re just not putting in characters outside the ASCII letters you’re used to.

To do what replace “TEST” with something like “😯😈💩👻” in the above. You’ll see you _can’t_ encode it with ASCII, and that for both of the UTF encodings you get a different byte string from that corresponds to those emoji encoded in that encoding. Hence the file contents written when opened in UTF-16 _are_ UTF-16, though if the program you’re using to view them sees the BOM and interprets it correctly it might look like it’s ASCII when using only characters that exist in ASCII."
5,"You’re encoding the **str** to **bytes**, then passing that object to **file.write**, which expects a **str** when opened in non-binary mode (ie “w” with an encoding vs “wb” without one), so of course that doesn’t work.

Just do `fd.write(“test”)` and it should work fine.

Basically if you open a file in binary mode you’re responsible for writing and reading **bytes**, if you open a file in text mode then you write and read **str**, and the file object will handle encoding the **str** content to **bytes** before it writes and vice versa, always using the encoding given or a default.

It is import to understand, though, that that there is no such thing as a UTF-16 _character_ in that file... there’s Unicode codepoints encoded using UTF-16 to **bytes**."
5,"First, there are no such thing as UTF-16 _characters_ ... UTF-16 is a means of encoding the entire realm of Unicode _code points_ into bytes. So is the much more common UTF-8. In fact these days you can think of ASCII as just an encoding for the 256 Unicode code points in the ASCII table.

What ends up on disk is _always_ bytes. By opening the file with a specific encoding you’re just telling Python _how_ you want to encode and decode **str** objects into and out of that file.

    with open(path, ""w"", encoding=""utf-16"") as dst:
        dst.write(""💩"")

Now if you actually look in that file, depending on _how_ you view it, you should see something like:

     \xff\xfe=\xd8\xa9\xdc

Or possibly

     ÿþ=Ø©Ü

Which is your viewing program trying to guess how it want the raw bytes data displayed.

But if you read it again with the same encoding:

    with open(path, ""r"", encoding=""utf-16"") as src:
        print(src.read())

You get back your 💩!

If that doesn’t clear things up, maybe give me some explanation of precisely why you’re trying to do what you’re trying to do, and why you chose UTF-16 specifically."
5,"With the caveat that **data** must be **str**, then the idiomatic way to create and write to the file would be:

    with open(path, ""w"", encoding=""utf-16"") as dst:
         dst.write(data)
   
And you can do a round trip to verify:

    with open(path, ""r"", encoding=""utf-16"") as src:
         assert data == src.read()

Now if you’re just trying to _touch_ a file, then you don’t need all that encoding business... an empty file has no encoding."
5,"If your _primary_ interest isn’t programming, then Python is the softer introduction and has much less of a learning curve. It’s also able to relatively easily leverage an enormous number of libraries in machine learning and data manipulation and analysis that will come in dead useful in your chosen field, even for someone who only uses it as a scripting and automation tool.

That said, it’s far easier for someone who has mastered C++ to master Python then it is to make the reverse trip."
5,Try using [Stirling’s Approximation](https://en.wikipedia.org/wiki/Stirling%27s_approximation) for `m!`.
5,"I’d be a _little_ careful with that one... the return value of **os.listdir** is True if _anything_ exists in the directory; empty directories, hidden system files, things like .DS_store on a Mac that merely indicates that someone has viewed the directory in Finder at some point."
5,"Not all iterable things have an `__iter__` method, so no the **hasattr** approach is not generally advisable.

There are a couple ways of allowing your desired syntax using a function and an exception handler, either using **iter**:

    def thumbscrew(victim):
        try:
            return iter(victim)
        except TypeError:
            return ()

Or slightly abusing **yield from**:

    def waterboard(victim):
        try:
            yield from victim
        except TypeError:
            return

Which I think is the prettier of two horrible things.

In neither case do I think this is an advisable thing to do... you’re almost certainly being _too_ generic if you’ve reached a **for** loop and don’t _know_ the thing you’re about to iterate over is an iterable."
5,"You would not usually use **basicConfig** for this, since logging to email doesn’t really constitute a “basic” configuration, but you’d do something like:

    from logging.handlers import SMTPHandler

    mail_handler = SMTPHandler(
        mailhost='localhost',
        fromaddr='logs@example.com',
        toaddrs=['admin@example.com'],
        subject='Message')

    logging.basicConfig(handlers=[mail_handler], [THE REST OF YOUR CONFIG])

Of course this won’t work unless you’ve got an email server on localhost using the default ports.

This will seems a single email per message logged. Collecting logs together into a single file is more complicated and I’d have to suggest a Stack Overflow search for that."
5,For that you’d usually use a dedicated [SMTPHandler](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SMTPHandler).
5,"Uh... why?

The simple answer is that **logging.debug** doesn’t return the logged message, so you can’t do that directly.

You _could_ use a logging.Filter and/or some other trickery to capture logging calls... but I’ve still got to understand _why_, because there’s almost certainly a more sensible approach."
5,"Unless I read the instructions incorrectly it wants True to indicate that **n** is in 90-110 or 190-210 inclusive, so 102 should return True."
5,"Notwithstanding my belief that:

    return min(abs(100-n), abs(200-n)) <= 10

... is a better solution than either of the above, I agree that CodingBat should be removed or at least demoted.

The example solutions provided are often un-idiomatic. plus the exercises themselves are repetitive and stated in a fashion that’s obtuse, and yes it very much feels like the exercise of someone who is or was still learning Python at the time the exercises were written."
5,"Without trying to introduce too many new concepts:

    def main():
        counts = {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'F': 0}
    
        infile_name = input(""What is the file you would like to process? "")
        try:
            with open(infile_name, 'r') as infile, open(""grades.txt"", ""w"") as outfile:
                for line in infile:
                    score = line.strip()
                    if not score:
                        continue
                    grade = letter_grade(float(score))
                    counts[grade] += 1
                    outfile.write(""{}\n"".format(grade))
                outfile.write(""\n"")
                for grade, count in sorted(counts.items()):
                    outfile.write(""{}: {}\n"".format(grade, ""*"" * count))
        except FileNotFoundError:
            print(""File could not be located"")
    
    def letter_grade(grade):
        if grade >= 90.0:
            return 'A'
        if grade >= 80.0:
            return 'B'
        if grade >= 70.0:
            return 'C'
        if grade >= 60.0:
            return 'D'
        return 'F'
    
    if __name__ == ""__main__"":
        main()

The use of global _variables_ is almost always a sign of bad code. Global constants that you never change are fine, but variables no. Notice how doing it this way removes any need for **letter_grade** to worry about more than one concern."
5,"Fair enough. Just know that your professor is, currently, teaching you some pretty bad habits. I hope they move on to better ones.

The use of global _variables_, for instance, should practically speaking  _never_ exist in professional code. All file handling should be done using **with** because right now you’re not handling errors at all on the output file, which means the input file handle could be left open if, for instance, the output file didn’t have write permissions for you, etcetera.

Also none of the **elif**s are necessary in **letter_grade**, you could just replace those with **if**. And the last one should really just increment the “F” counter and return “F”, because by that point the value of grade can not be anything but less than 60."
5,"Sure, Python can’t guess what extension you intend to write, so you have to explicitly choose a name like “file.txt” to get a .txt file.

BTW you really should be using the **with** context manager for file handling.

    with open(“data.txt”, “r”) as src:
        for line in src:
            line = line.strip()
            if not line:
                 continue
            num = float(line)

The **with** contact manager for the file object returned by **open** will ensure that the file handle is closed for you, even if some unexpected exceptions arise."
5,"That indicates that some line in your file isn’t a legitimate float.

Try doing:

    line = infile.readline()
    print(repr(line))
    num_grade = float(line.strip())

And that should show you the contents of the line that is failing."
5,Try `float(infile.readline().strip())`.
5,"Not sure exactly what you mean by “action” here. It _sounds_ like you may want to provide a callable value for **obj_hook** or **obj_pairs_hook** in the **json.load** call. These can, for instance, take the decoded primitive JSON data and use it to build and return a class instance. That class could have an **action** method you’d then call when iterating over “elements” the fully loaded and decided **dict** returned by **json.load**.

I’d tend to separate the decode from the actions because the hooks get called in a bottom-up fashion."
5,"Yeah, too few is pointing you towards “maybe I could do this with a primitive and a function”. But the emphasis is on the _maybe_... if you really do have a class with only a single behavior then it’s fine to ignore or silence it. But _generally_ such a class probably hasn’t been fully thought through yet or doesn’t constitute a class.

Also a dataclass might very well be the right solution for that. And if `pylint` barks about a dataclass girl an Issue with the pylint folk."
5,"Yeah one of the oversights of dictionaries is you don’t have “dot key” style access.

There’s a very good reason for that, though... you can use keys in a dict that aren’t valid Python names ... like for instance `{1: True}`. Now ok, you might think `d.1` seems fine, but how do you deal with `{lambda x: 2: 4}`??

Hence the dataclass and the collections.namedtuple.

And don’t worry, I can accept your use of PHP... I just want to bring you over to the Light side."
5,"First is remember those are _opinionated_ warnings, probably coming from `pylint`, not actually some hard and fast PEP-8 “rule”.

I find that _usually_ “to few” means you probably could have just used a **dict**... you’ve got no behavior to associate with your data, so is it really a compelling use case for a class?

Similarly “too many” _usually_ means you need to break your problem up."
5,"BTW, if you’re decent at PHP you’ll do _fine_... you just have to purge yourself of all the masochism first. ;-)"
5,"Ahh dataclasses ... that’s really a reaction  to boilerplate. When you want to _properly_ implement a class that really just represents a _thing_, without a lot of specialized behavior (a class that really just holds data) then there’s a lot of “magic” / “dunder” methods you’ll want to implement, and _usually_ they’ll be the same damned implementation every time.

Hence the dataclass is, really, just a way of decorating a class with all those boilerplate methods.

Back in the day you had to learn all those methods... personally I still feel like that’s the best path. A really good resource is [here](https://rszalski.github.io/magicmethods/)."
5,"Heh, don’t worry, Python brings its own habits, good and bad.

Speaking of which, that ideal world case is kind of funny, because you should _never_ actually run **eval** on a class instance you didn’t completely control the creation of. So it’s a “good Python practice” thing that’s really only good for fooling around in the REPL or while debugging your own code."
5,"Useful tip, though in this particular case I would consider adding “!r” to the end of every one of the instance attributes (ie `f”password={self.password!r}`).

I’m an ideal world you can run `eval(repr(thing))` and get back a copy of **thing**, but that won’t work if strings and bytes aren’t quoted. Forcing the instance attributes to their own **repr** should allow that, assuming those attributes are actually ones passed into the class constructor."
5,"`list(range(1, 49))`"
5,"The simple answer:

    int(“42”)
    float(“42.0”)
    
But realistically that _only_ works for **int** and **float**. If you need to evaluate more complex _literal_ strings for other primitive types you can use the [ast.literal_eval](https://docs.python.org/3/library/ast.html#ast-helpers) helper.

    from ast import literal_eval

    literal_eval(""[42]"")

But yeah, if you ever think you need **eval** or **exec** and you’re not actually writing a compiler you’re almost certainly wrong."
5,"The **except** keyword _should_ be followed by the specific class (or tuple of classes) of exception that you want to catch.

_All_ exceptions are subclasses of **BaseException**, but practically speaking you only want to catch the ones that are subclasses of **Exception** (which is itself a direct child of **BaseException**). This is because any subclass of **BaseException** that is _not_ a subclass of **Exception** is going to be used for abnormal control flow, like explicit attempts to shut down the interpreter (see **SystemExit** and **KeyboardInterrupt**) or manual closing of a generator (**GeneratorExit**).

The [hierarchy of exceptions](https://docs.python.org/3/library/exceptions.html#exception-hierarchy) explains the tree of builtin exceptions. All custom exceptions should inherit from one or more of the classes on that tree.

Looking at that hierarchy you should see why the naked `except` statement should be a fireable offense, because you’ve broken the ability of the user to shutdown your process gracefully.

But more importantly you should also see why even the minimal `except Exception` is a _terrible_ idea.

If you blindly silence all subclasses of **Exception** you’ll never know about pending deprecation of Python (or internal) features, actual deprecation of them, system resource issues, upcoming Python syntax changes, and even syntax that is no longer valid but may once have been. Your code will _miraculously_ run in any newer version of Python, but it might not be doing what you’ve always been thinking it was doing.

You _should_ always catch the most specific subclass of **Exception** that applies to the situation at hand, but at the absolute minimum you should **except Exception as err** and at least inform the user what specific **Exception** occurred."
5,"Basically, no, that’s the simplest way to do it.

You _could_ do:

    def foo(a, b=None):
         b = b or a

But most people will find that harder to grasp than yours."
5,"Side tangent, but anyone who is caught doing this should usually be fired after a couple of warnings.

    try:
        whatever()
    except:
        pass

At an absolute minimum that should read:

    try:
        whatever()
    except Exception:
        pass

Unless you really, really want to catch KeyboardInterrupt and SystemExit. And you usually don’t.

I know that doesn’t help shrink your boilerplate problem though."
5,"First, a Python **str** is immutable. Once created you can’t modify a single letter without creating a new string.

Second, a Python **str** is _not_ an array. Neither is a **list**. Python does have **array.array**, but none of the builtin data types are properly-speaking arrays.

Third, a Python **int** definitely isn’t an array. When you write `row1 = 00000000000` you’ve assigned **row1** to the **int** value 0 because integers ignore left 0-padding.

So, how would you actually do this? Well there’s a number of different ways. The simplest, brain-wise, is to use a **list** of **str** values.

     row = ['O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O']

Though for simplicities sake you can fill that row with 0s like so:

     row = [“O”] * 11 # or list(“O” * 11)

Then assuming you wanted to flip the second column from the left to “X”:

    row[1] = “X”

Remember Python uses 0-indexing, meaning that first column from the left is at index 0, the second at index 1, and so on.

Now you can print your row by joining the items together with **str.join**:

    print("""".join(row))

And so on.

There are much better ways of doing this in reality, but the above will work for your homework."
5,"Because of the way PyInstaller works it necessarily will. A onefile app essentially has a zip embedded in it, when you run it the first thing it does is unpacks the contents of that into a temp directory, then it runs the code in that temp directory. If the data files are large that’s an expensive operation."
5,Assuming you’re using pyinstaller you want the section [in the spec file docs](https://pyinstaller.readthedocs.io/en/v3.4/spec-files.html) on adding data files to the bundle.
5,"I’m not sure of the context that surrounds that quote, but the author is trying to show that **list** and **str** are _type constructors_ and are not not _functions_.

The distinction is that a type constructor shares the same methods and attributes as an instance of that type. A _type_ and a _class_ are essentially the same thing, with **type** used more narrowly to mean the builtin primitive data classes like **int**, **float**, **bool**, **str**, **tuple**, and so on. There used to be a strong distinction between types and classes, but nowadays you can think of a type as a class that’s a primitive value rather than a wrapper around one or more primitive values, so you access the data via `self` rather than via `self.attr`.

And no, assigning the _type_ list to the _name_ **a** doesn’t create an object, it create an alias to that type.

    >>> list
    <class ‘list’>
    >>> list()
    []
    >>> a = list
    >>> a
    <class ‘list’>
    >>> a()
    []

The somewhat awkward wording in the quote is just meant to say that calling the type constructor `list()` gives you back a value (`[]`) of the type **list**."
5,"It’s doing exactly the same thing as this:

    grade = computegrade(score)
    print(grade)

All functions (including **print**) return a value when called. You _can_ assign that return value to a name, or you can ignore it (as you usually do with **print**), or, if there’s no actual need for using that value anywhere else you can just nest the function call into the function you’re calling as an argument."
5,The `b` indicates a **bytes** literal. All those `string.encode(“ascii”)` calls are converting **str** to ASCII-encoded **bytes** so that they can be concatenated with the **bytes** literal... this is all because ultimately the Telnet protocol expects ASCII-encoded  **bytes** to be transmitted and received.
5,"I consider all beginners to be junior programmers, but I’ll let an amateur use **print** until I can introduce them to **logging**. Personally I wish **input** wasn’t even a first class builtin, as I’ve spent an _inane_ amount of time over the years re-educating people away from it, as with **eval** and **global**."
5,"I try and dissuade them from that idea... IMHO both **input** or **print** should appear in professional code only _exceptionally_ rarely, which means beginners should be encouraged _awaya from them early."
5,"For small cross platform CLI tools you’ll be best off using **argparse**; there’s no  need to add an external development dependency and it’s more than capable.

That said, once you start getting into extensive use of subcommands — think `git` — it gets pretty boilerplate-heavy, and that’s when [click](https://click.palletsprojects.com/en/7.x/) starts to shine. Also if you need _extensive_ argument validation, **click** is a great all-around choice, though a fairly opinionated one.

If you need interactivity, not just command invocation parsing, then look at [prompt toolkit](http://python-prompt-toolkit.readthedocs.io/en/stable/)."
5,Start with the [docs](https://docs.python.org/3/library/argparse.html)... for simple tools it’s quite straightforward.
5,"Arguably most CLI applications do not use **input**, but instead take their arguments at the invocation of the command via **sys.argv**.

Similarly many such applications never use **print** directly.

There’s an entire world of command line interfaces that aren’t interactive prompts or REPLs."
5,"At a glance that’s a pretty big commit, which might be why it hasn’t been merged.

You could fork the repo so you’ve got your own copy, merge the pull request on your fork, then install your forked version locally [from git with pip](https://pip.pypa.io/en/stable/reference/pip_install/#git)."
5,"Hadn’t noticed this comment, since it was a reply to someone else, I’ve added a top level response to your original post given the crypto context.

BTW, crypto can be a space where you need to be careful; the library you link to elsewhere for Shamir’s Secret Sharing has an invalid cert issued for a .ru domain. While that’s not exactly proof of evil intent one would hope that anyone dealing in crypto primitives could at least keep their site verified, and given that it’s a crypto lib I don’t think I’d touch it with a ten foot pole.

The pycryptodome project is pretty well known and has an [implementation of Shamir’s](https://pycryptodome.readthedocs.io/en/latest/src/protocol/ss.html) that’s a little more trustworthy."
5,"Based on your comments in the various threads I think what you’re looking at is the packed binary representation of a 256 bit (32 byte) cryptographic digest, likely from a sha256 checksum.

Usually you’d want to _transmit_ the (smaller, machine-readable) binary digest and _read_ the (larger, human-readable) hexdigest.

This is the hexdigest of your given digest:

    01b4f70266f461f62a894da4439c8d9c455f5c4ad01dc066f150b59254e4a15f

Which is given by calling **bytes.hex** on your bytes value.

Such digests are commonly used in cryptographic contexts, ie as the result of hashing a string. Larger size cryptographic keys can also be in both binary and hex digest forms.

Such digests do not convert into a readable human-language message; they’re gibberish by design."
5,"Just a thought, but not sure I’d ever use a cryptography-related module the home page for which has an invalid https cert.

My guess is your output is a sha256 hash, by the way."
5,"True that, I’ll edit my rather ambiguous statement."
5,"Those are bytes that fall within the set of printable characters in the C locale, so basically the ASCII printable characters.

Think of a **bytes** as a sequence of 1 byte integers, so each is in the range 0-255, inclusive... _some_ of those (specifically 32-126, inclusive, or \x20-\x7f in hex) can be represented by a single _printable_ ASCII character (letters, digits, punctuation, whitespace, all of which are 1 byte wide). Any of the others can still be represented as a single byte, but _not_ by a printable ASCII character —- instead those values are represented by a 1 byte hex value.

Where it really starts to bake your noodle is the moment you’re trying to use characters outside the 0-255 range (ie unicode) ... as now you have to pack individual code points into _potentially_ multiple individual bytes... now you need to know _how_ those bytes were encoded in order to get back your original string."
5,"The `b` at the front says it’s a bytes literal, so that part is easy. Those `\x??` bytes _are_ hex ... an individual 8-bit byte represented by two hexadecimal characters representing the two 4-bit _nibbles_.

**Edit**: clarify what a nibble is."
5,"It is bytes, but without knowing more about the script there’s no simple way to determine what might be encoded in those bytes. Might not be text at all, for one. Certainly trying to just do `your_string.decode(“utf-8”)` fails, as it doesn’t appear to be a valid UTF-8 encoded string. There _are_ codecs it will “work” with (`your_string.decode(“utf-16”)` for instance), but that doesn’t meant that the resulting string is what was actually intended to be transmitted, as other codecs (like “thai” and “ruscii”) will give you printable likely-gibberish as well."
5,"You’d use a _default argument_ so the caller of your function could tell your code what index to **start** uppercasing from:

    def upper_every_other(word, start=0):

You can use **str.lower** to ensure all the characters are lowercased to begin with:

        chars = list(word.lower())

And you can use **enumerate** to iterate over a _tuple_ containing the current index and the current character (much simpler than a **while** loop):
        for idx, char in enumerate(chars):

Now the only trick is uppercasing only every other index starting from the **start** value:

            if idx >= start and (start + idx) % 2 == 0:
                chars[idx] = char.upper()

Then combining the modified **char** into a string when you’ve finished looping.

        return """".join(chars)
    
Hope that helps."
5,"Without seeing your code it’s impossible to give really meaningful advice here, but typically if you’re hitting **too_many_arguments** you should consider passing _custom objects_ instead of _primitive_ values. In the described case passing two instances of a **LatLong** class (quite possibly a **dataclasses.dataclass**) may dramatically simplify the signature of your method.

And if you’re hitting **too_few_public_methods** there’s a reasonable chance you could replace the class with a function, though it depends a lot on the problem at hand."
5,"Why do all the business with copying and pasting?

    with open(“file.txt”, “w”) as dst:
        dst.write(image_to_strint([...]))

Then open the resulting file."
5,"The function expects that either no **key** will be passed, or if passed **key** will be a function that takes an item and returns a value to dedupe on.

So by default it will dedupe by yielding an item, then never yielding that same item again if it’s encountered.

If you passed say `key=str.lower` it would yield the first instance of each item, but would then skip any subsequent that was a case-insensitive match for any previous item."
5,"Well, let’s think back to my high school internship... I learned how to run a web fed offset printing press at a newspaper.

Now we didn’t have a sixteen tonne web-feed offset press in my high school, so not sure how much prior preparation I could have reasonably made. But I was interested in journalism and they were keen on getting kids to think about becoming productive members of society, so they had me shadow some real world experience.

Of course then the Internet came along and f**ked everything up for print journalism."
5,For me it was Nuke... though I’d say I only thought I knew what “fully productive” meant for the first year or so. It wasn’t  until I moved off show TD positions building artist-facing GUI elements and on to backend work on the asset database and rendering tools that I started to realize just how much the Python APIs of the various artist packages hold your hand.
5,"You could use three **input** calls inside the `__init__`, but it might be better to have a classmethod that acts as a dog “factory” by collecting the user input and then building and returning a new instance.

Pedantic tangent: “dog” is a species, “mammal” is a class, though not the Python variety."
5,"In 2-3 weeks of dedicated study, starting with no prior programming experience, you can except to achieve a rudimentary familiarity with the basic syntax. Given the focus of the internship you’ll want to concentrate on the **int** and **float** data types and understanding the various mathematical operators. You’ll also want to understand the **list** and **dict** collections. The rest you can pick up along the way, but the above are fundamental.

Any well reviewed basic text will cover all of this, and luckily there’s been only minor changes between 2 and 3 in all these areas, so even older texts will do. Personally I’ve always liked Learning Python by Mark Lutz, though it hasn’t been updated for the most recent versions of Python 3. Python the Hard Way also seems to be a “from first principles” text, but I’m sure there are others.

Good luck!"
5,"OP is a highschool student, these internships are placed more on interest than on pre-existing skill set."
5,"> Unless you’re some Steve ~~Jobs~~ Wozniak incarnation then sure you can fully understand a computer language in 3 weeks

Fixed that for you. 😉"
5,"The best practice is to avoid global _variables_ entirely. In a command line script that gathers user input and assigns them to global _constants_ will work, but will be much less readable than creating a proper **main** function that uses local variables and passes them as arguments instead. 

    #! usr/bin/env python

    def do_something(value):
        [...]

    def main():
        value = input(“Value: “)
        do_something(value)

    if __name__ == “__main__”:
         main()

It’s also best to avoid having effectful things happening in the global namespace at all... that way you avoid having effects (like asking for input) if your module is imported rather than executed."
5,"Because you’re in a REPL session you’ll automatically see a print out of whatever the expression you’ve just entered evaluates to:

    >>> []
    []
    >>> list(range(3))
    [0, 1, 2]

So when you do a list comprehension with a function you’ll end up with a list of the value(s) returned by each of those function calls.

Since **print**‘s only effect is to print to the screen it doesn’t explicitly **return** anything... which means it implicitly returns None. That’s why you end up with a None for every invocation of **print** in your comprehension.

So, if you do this in a REPL session:

    >>> [print(“Hello”) for _ in range(3)]
    Hello # first print
    Hello # second print
    Hello # third print
    [None, None, None] # the three return values in the list built by your comprehension

Now, do it in a .py file and you will just get the three “Hello” lines, because this automated printing of the evaluated expression is just a REPL feature."
5,"And once you’ve fixed that and get the same error but referencing **None** instead of **method**, make sure the **Patient.update** method actually returns an integer."
5,"Hopefully you had File History enabled. Either way, don’t let “someone” do it again."
5,"This is a bit of a problematic way to implement what you’re after.

By the time your `String.__new__` is passed into it **self** is an immutable **String** that has the value passed in... it _also_ has the **list** you’ve assigned. You can mutate the list all you want, you’ll never change that stored value in memory, which is why you’ll end up having to replace every public method and most dunder methods (including the rather obscure `self.__getnewargs__`) just to hide that original value from your users.

I think you might get more mileage out of something that is a bit clever with **collections.UserString** and also subclasses **collections.abc.MutableSequence**, so that it works more like a **bytearray** does.

    from collections import UserString
    from collections.abc import MutableSequence
    
    class String(UserString, MutableSequence):
        def __init__(self, seq):
            if isinstance(seq, str):
                self._data = list(seq)
            elif isinstance(seq, UserString):
                self._data = seq._data[:]
            else:
                self._data = list(str(seq))
    
        @property
        def data(self):
            return """".join(self._data)
    
        def __getitem__(self, *args):
            return self._data.__getitem__(*args)
    
        def __setitem__(self, *args):
            return self._data.__setitem__(*args)
    
        def __delitem__(self, *args):
            return self._data.__delitem__(*args)
    
        def insert(self, *args):
            return self._data.insert(*args)
    
    text = String(""cello world"")
    text[0] = ""h""
    print(text)
    print(text.replace(""world"",""pythoners""))
    
But I’ll be the first to admit I just whipped this up and you’d want to test the hell out of it."
5,"The **str.strip** method removes _terminal_ whitespace, as in extra whitespace padding on the left or right of the string. There’s also **str.lstrip** and **str.rstrip** if you only want to do one side.

What you might want to look at it **str.split** and **str.join**."
5,"There are a number of reading in and parsing a structured data file; but in Python I wouldn’t go anywhere near reading the file character by character in a stream.

Realistically your data appears to be comma separated values each on its own line, so the [csv module](https://docs.python.org/3/library/csv.html) should probably be your starting point, but for a very simplistic (and brittle) approach:

    with open(path, “r”) as src:
        for line in src:
            command, channel, note, velocity, time = line.strip().split(“,”)
            print(command, channel, note, velocity, time)

You open the file — which is line buffered and already converted to UTF-8 Unicode text — assuming Python 3 — and you strip the newline off each line and split the result on commas, assigning the results to individual variables using multiple assignment and unpacking (a fancy way of saying a the resulting five item list gets assigned to five variables, one per item)."
5,"OP asked for a better / shorter way of writing an already idiomatic code fragment. I pointed out that a suggested alternative was going to be slower. Apparently this ruffled some feathers, so here, let me retract that critique. I’ve since pointed out other reasons why it’s not quantitatively or qualitatively better. It’s certainly not shorter.

And from none of that can a reasonable person extrapolate that I am offended by try/except, any more than a reasonable person can interpolate that the OP was asking for a better/shorter way that might involve partial or complete reimplementation of two placeholder functions that are only relevant because they set up a problem in which one returns a value and the other is either invoked or short-circuited based on that value."
5,"Perhaps it wasn’t charitable, but I’d rather not make assumptions unsupported by the evidence at hand.

Here’s what we have from the OP.

    to_send = get(values)
    if to_send:
        send(to_send)

We know _nothing_ about **get** but that it takes an argument and returns a value, and since there’s no exception handling around it we know it’s not expected to ever throw an exception.

We know _less_ about **send**... it takes an argument and it does _something_... because OP has taken pains to avoid calling it in the case of **get** returning some falsey value we can infer that it’s either a) costly, b) has some unpleasant side effects, or c) will error at some point on a falsey value. It could be all three, it could be just one... but pains have been taken to avoid calling it, so _if_ we call it on a falsey value we’re in danger of being wasteful, harmful, or and/or disruptive.

To assume we can rewrite either is both a) not really answering the OPs question as stated and b) presumptuous. So is adding new behavior to what’s been asked about.

Without rewriting the internals of those two functions, there’s only one way to rewrite with an exception handler that maintains the same _overall_ behavior:

    to_send = get(values)
    try:
        send(to_send)
    except Exception:
        pass

Now, to be charitable towards your solution — and it’s yours because you’re the one proposed it in this thread, it’s irrelevant how many times it’s been written outside this context — we have to interpolate that **send** _will_  raise an Exception immediately if a falsey value is received. But I’m happy to allow that it’s a charitable assumption.

And at this point I’m left with two proposed idioms and all other things being equal.

And your idiom — while still an idiom — _is_ slower (as I said, exception handlers are not featherweight, and neither are function calls and stack frames). It’s also effectful, and more difficult to reason about at a glance. And as I said before if my charitable assumption is wrong it’s also reckless to employ. At any point after the very first I’m of those I’m out of reasons to be _more_ charitable.

Also I’m curious where you get the idea that it’s considered “_very_” Pythonic to use exceptions for control flow. Outside of generators/iterators, and interpreter shutdown exceptions are relatively rarely used in the core language std lib _specifically_ for control flow. And in all the cases that I can think of it’s quite an explicit choice with a dedicated Exception subclass made for purpose and silenced with clear and documented intent. As for **with**, the  context manager on file objects doesn’t change the path of your code’s control flow — an exception raised will still be raised — it just ensures the OS closes the file handle, whereas your suggestion relies on silencing an error. As a pure control flow mechanism you’ve got to go to quite a bit of effort to make a reasonably robust implementation... there are certainly times that’s a good idea, even the only one... bit I wouldn’t call it the obvious go to toolkit, and I certainly wouldn’t add _very_ to how “Pythonic” it is."
5,"In a comparison between two idioms if all other things are equal then speed is as reasonable a discriminator as any. In a language as slow as Python it’s more than merely reasonable. And yours _will_ be slower, given what we can currently gather about the OP’s functions (we _know_ that **get** will return a value, we _assume_ that **send** will throw an exception if it’s run on a falsey value, thus your approach includes both the overhead of the exception handler _and_ the errant function call the OP’s code is, likely rightly, intended to avoid)... there’s a chance that you’re right and that **send** fails virtually immediately on a falsey value while **get** also returns such a value exceptionally rarely, though after loads of profiling and policing performance issues over the years I’m not confident that chance is high enough to be good general advice. And, since if **send** doesn’t raise an exception at all your pattern is reckless, I still stand by my brief critique."
5,"Thought about the decorator, but it’s unclear from OP’s post if they control the def of either **get** or **send**, and personally I’d think decorating functions you don’t control will pretty quickly become indecipherable.

The idiomatic form is what OP wrote originally... assignment expressions will make this a bit better, if they land in the proposed form."
5,"> but if it rarely or never throws it will be faster.

Try profiling that assumption, especially with **try**/**except** handlers being created in a tight loop.

In my experience exception handling as an alternative to a single truth value test is usually slower sometimes substantially so, and also uses considerably more memory.

More importantly it’s neither simpler nor more obvious than the OPs original version if **get** doesn’t raise an exception."
5,"Your basic options are:

1. C, with a lot of boilerplate.
2. C++, with even more, and probably Boost, which is like boilerplate for boilerplate.
3. Rust, which is probably your best bet if you really want to get close to the metal and also write reasonably safe code.
4. Nim, which I hear good things about, though it’s not got the momentum of Rust.
5. Cython embedded in your Python and pre compiled.
6. Using **ctypes** or **cffi** to run any shared library written and compiled in the any of the compiled languages above such that the resulting binary exports a C ABI.

Those are in roughly descending order of speed. Personally these days I’d mainly keep exploring Rust for Python C extensions, but also look at **cffi** and Cython, and not get too tied up in boilerplate."
5,"The C code is compiled to a binary, that binary is sourced by your Python code, which is being interpreted... the C runs as fast as it would if being called from C code. There is a small speed loss in the interface between the two, but in most cases that’s minuscule compared to the speed gains.

Typically though the point is to either leverage existing C libraries or to speed up an existing bit of Python that’s particularly hot. Virtually no one wants to write large, complex applications in C — Linus Torvalds and company excluded — and for very good reason, so you prototype out your application in a high level language and then you selectively drop portions of it into the low level where you’ve found a hot spot.

This has been the pattern with Python from the get go. It’s also a pretty general description of the pattern of programming languages. You might never realize it, but unless you’re writing directly in your CPU’s Assembly Language you’re relying on more than one language."
5,"Because functions are first class objects in Python, you could do this:

    def if_call_with(pred, func):
        payload = pred()
        if payload:
             return func(payload)

    if_call_with(get, send)

But this gets hairier quick if either needs to receive other arguments."
5,That will be slower. Exception handlers aren’t exactly featherweight.
5,That’s pretty inefficient if **get** has any cost at all.
5,"There are _loads_ of reasons to do this, since C is _worlds_ faster than Python. It’s very common to write C extensions that Python uses to do the more performance-sensitive work, and if you’re using the standard Python interpreter _most_ of the standard library depends on those C extensions.

Also, C is the _Lingua Franca_ of computing, if for no other reason than it has long had a stable Application Binary Interface (ABI)... one of the early things most language’s _have_ to do is develop a Foreign Function Interface (FFI) so they can call into C libraries, as that’s what allows them to interface directly with OS libraries. In Python that’s **ctypes**, and it’s incredibly useful, because there are more libraries out there that do useful things and export a C ABI then you can possibly imagine."
5,"For the moment there’s no better way. After [PEP 572](https://www.python.org/dev/peps/pep-0572/) drops you’ll be able to do:

    if to_send := get():
         send(to_send)

But that’s 3.8 at the earliest."
5,"Assuming there’s no difference in the testing conditions, and with the caveat that there shouldn’t be anything _stupid_ going on — like the scipy method performing the calculation in one second then hitting a **time.sleep** that waits six minutes — then _yes_."
5,"Every even character is an ambiguous statement, as it depends on what number you start counting on. In Python, which is 0-indexed, then the characters at positions 0, 2, 4.., etc should be uppercased, as they’re at the even indexes. You’re uppercasing based on a 1-indexed starting position, so you’re uppercasing what your prof probably sees as the characters at the odd indexes.

    AnThRo # 0 indexed
    aNtHrO # 1 indexed

Try to change your code to be 0-indexed and test that."
5,"I can barely read your code and of course I cannot read your tests, but it appears you’re testing it the _next_ letter is even before uppercasing the _current_ letter. Also you’re leaving any other letters in whatever case you found them, but from the problem description it sounds like you need to lowercase the odd letters."
5,"Others have answered what Anaconda _is_, so let me address if you need it.

Python has been a core part of my career since 2007, and I’ve never once _needed_ Anaconda. So no, it’s certainly not _necessary_.

If you’re not working in a domain that depends on lots of non-Python packages, then that’s really the end of the story. Huge amounts of meaningful work can easily be covered by pure Python packages, Python packages with dedicated C extensions, Cython-accelerated packages, and anything else you can find on PyPi that embeds its dependencies in a _wheel_ file (.whl), and these days almost every reasonably widespread package, even in the scientific sphere, has a wheel.

Before the wheel format became prevalent — and still for packages for which no wheel exists, though this often means either bleeding edge or out of date — building and installing non-Python dependencies was an issue that required some command line skills. On Linux at least the problem has always been a mild to moderate headache, given that system package managers and compilers are already central to the workflow. On Mac it’s always been a bit more painful, but Homebrew is the one-stop shop that makes it much easier. On Windows — at least prior to the advent of the Windows Subsystem for Linux — this has always been _painful_, if not _excruciating_, and that’s where Anaconda found it’s feet.

So if you’re on Windows and working with such dependencies, or you’re not on Windows but working with others who are, Anaconda can be a huge help. Just be aware that you’ll be tying yourself into an ecosystem that is essentially a fork of “normal” Python workflows, since you’ll grow to depend on conda where others depend on pip."
5,"To be accurate it’s about both... if a website consumer has chosen to turn on ad blocking they’re almost necessarily getting two benefits:

    1. Reduced exposure to advertising, which benefits them in no way whatsoever, except in the _extremely_ rare case that an ad shows them something they both _need_ and were not otherwise aware of. In all other cases it’s just pollution.
   2. Reduced infosec risk.

Arguably passive-view advertising either does no good or it does do harm. It’s a valuable right to be able to turn off both the psychological toxicity of such received advertising — especially among the people most susceptible to its manipulative nature — and to be able to not be tracked and profiled. Allowing them that choice is a moral good on the site owner’s part."
5,"Comparisons with other media are misguided... there’s no auto-playing video or audio in a newspaper, and when I flip the page, change the channel on a TV, or tune the radio elsewhere there’s no persistent web pixel silently communicating my every move back to the advertiser. No other form of media exposes me to more potential harm than the advertisements served up on websites by people who have bought into that model. Being able to block that isn’t a service offered because of a technical _possibility_, it’s offered because it’s become technical _necessity_.

Can careful design make ads considerably less intrusive? Sure. But you’re on the tail end of a years of abusive, greedy people and a relative minority of your audience have decided to use adblockers as their way of not being abused by those less careful and considerate peers of yours. And as the abusive approach **far** outweighs the careful and considerate one, that’s a choice you _should_ respect, because it’s _not_ taking money from _you_, it’s just keeping you from receiving a kickback on the rent of their eyeballs and personal data. Spend your energy on pleasing those people with your content instead... they’ll be more likely to pay you for it."
5,"_Why_ would you consider doing this? It’s kind of like asking how you can impregnate someone even when they’re on birth control.

That might sound hyperbolic, but it isn’t...  the ad network is serving something your user has affirmatively and actively decided they _do not_ want to receive, who are you to interfere with that choice? More importantly for your bottom line — the only bad justification I can think of — how _should_ your users react if they become aware that you’ve made efforts to thwart their choice not to see someone else’s _bad_ product?

Seems to me like a recipe for declining use of your site either way. Let the blockers do their job and concentrate on better content."
5,"I’ve never read the book, but based on the website it’s only very moderately out of date, seemingly having been written around the height of 3.4. I haven’t seen an example on it that wouldn’t work in Python 3.7,  syntactically, but it does appear that there are some idioms and external libraries used that have since been supplanted / improved.

That said if you’re writing 3.7 without considering backwards compatibility to 3.4, you’re a bit nuts. Hell many, many projects still require backwards compatibility with 2.7, and will for years to come.

Additionally the truly _significant_ changes over the last 4+ years are few, and typically in domains you’re unlikely to trip over early in your Python career. Probably the most significant and commonly used addition is the _f-string_,  which is really just an extension to the **str.format** syntax that’s been in place since 2.7. It arguably shouldn’t be used as often as it is, either, so missing out on it a little isn’t a great loss.

Honestly you can pick up at least 80% of core Python 3 by reading the first Learning Python edition of 1999 and the old Python 2 versions of PYMOTW, so perhaps don’t lean so heavily on cutting edge modernity."
5,"The significant difference is a little subtle, and not yet well explained by other answers.

The [not](https://docs.python.org/3/reference/expressions.html#not) unary operator inverts the [truth value](https://docs.python.org/3/library/stdtypes.html#truth-value-testing) of the object on its right.

So if **x** is considered True, `not x` will evaluate to False, and vice versa.

The [is](https://docs.python.org/3/reference/expressions.html#is) binary operator is used to compare the _identity_ of the object on its left to the object on its right.

Thus `x is y` is considered True if **x** is actually the _same object_ as **y**, so it  is essentially testing `id(x) == id(y)`.

Somewhat confusingly [is not](https://docs.python.org/3/reference/expressions.html#is-not) is it’s own distinct binary operator, and is used to invert the identity test described above.

Thus `x is not y` is considered True if **x** is any object other than **y**, and is essentially testing `id(x) != id(y)`.

You can think of `x is not y` as being a much nicer way of writing `not (x is y)`.

You only very rarely want to use _identity_ testing in practice.  A somewhat common use case is for checking default arguments:

    def foo(x=None):

In the body of that function `x is None` will only be True if **x** actually is the `None` _singleton_ object in memory, and so you can distinguish no argument being passed (`foo()`) from some “False-y” argument being passed (`foo(False)`)."
5,https://docs.python.org/3/using/cmdline.html#using-on-general
5,"Don’t post the same question multiple times, that’s just spamming the subreddit. You’re already getting help in your previous post."
5,"It’s valid syntax in Python 3, it gathers together all the items but the last into **words**, putting the last in **digit**.

Here’s a Python 2 version:

    data = {}
    for linenum, line in enumerate(FILE_CONTENTS.splitlines()):
        if not linenum or not line:
            continue
        words = line.split()
        digit = words.pop()
        key = "" "".join(words)
        digit = int(digit)
        data[key] = digit

Another option is to make your data more sensible right off the bat, but I don’t know if you control the source of all that gibberish. If you did it would make _much_ more sense to have that file in an easier to parse format. Is that data being generated from some other process? Do you control that process? Is it just a one-off configuration file, or something else?"
5,"Right, someone has been playing silly buggers with your data... there’s a heading line with a unique format, multiple words in most lines, blank lines, and mixed whitespace. What a pain.

The following works with the data exactly as presented:

    FILE_CONTENTS = """"""
    Shenda - 95106091
    Hydrocarbons                     801
    Dysprosium                       803
    Tungsten                         245
    Hafnium                         3023
    Caesium                            1
    Mercury                          600
    Vanadium                        3737
    Technetium                      2039
    Cobalt                          7393
    Titanium                        7085
    Evaporite Deposits             10819
    Cadmium                         8658
    Promethium                       647
    Silicates                      16369
    Scandium                       14786
    Thulium                          506
    Platinum                        6903
    Chromium                        1275
    Atmospheric Gases               3321
    Neodymium                       1598
    
    Vanadium Hafnite                    2751
    Titanium Chromide                   7618
    Hyperflurite                        3398
    Prometium                             12
    Platinum Technite                    437
    Fluxed Condensates                   314
    Dysporite                            100
    Ceramic Powder                        45
    Hexite                                11
    Silicon Diborite                    5261
    Promethium Mercurite                 670
    Ferrofluid                            20
    Thulium Hafnite                     1422
    Rolled Tungsten                     7654
    Fernite Alloy                       1392
    Neo Mercurite                         43
    Caesarium Cadmide                   1679
    Carbon Polymers                       93
    Crystallite Alloy                     94
    Solerium                            1986
    Sulfuric Acid                      23400
    
    Oxygen Fuel           1143
    Nitrogen Fuel         1913
    Helium Fuel            988
    Hydrogen Fuel         2361
    
    Photonic Metamaterials                    7357
    Crystalline Carbonide                    48692
    Ferrogel                                  5600
    Titanium Carbide                         20761
    Nonlinear Metamaterials                   5250
    Hypersynaptic Fibers                      5733
    Fullerides                                 308
    Fermionic Condensates                     1853
    Terahertz Metamaterials                   5497
    Fernite Carbide                         112460
    Sylramic Fibers                          58205
    Phenolic Composites                       6703
    Tungsten Carbide                        228577
    Nanotransistors                              1
    Plasmonic Metamaterials                   6208
    
    Quantum Microprocessor                                                2673
    Antimatter Reactor Unit                                               1410
    Magpulse Thruster                                                     1623
    Nanoelectrical Microprocessor                                          949
    Oscillator Capacitor Unit                                              925
    Plasma Pulse Generator                                                 996
    Scalar Capacitor Unit                                                 1463
    Graviton Reactor Unit                                                 1380
    Fusion Thruster                                                       1914
    Photon Microprocessor                                                  577
    Ladar Sensor Cluster                                                  1246
    Tungsten Carbide Armor Plate                                          1305
    Tesseract Capacitor Unit                                              2803
    Linear Shield Emitter                                                 1148
    Spatial Attunement Unit                                                169
    Magnetometric Sensor Cluster                                           937
    Radar Sensor Cluster                                                  1035
    Titanium Diborite Armor Plate                                         2360
    Pulse Shield Emitter                                                  1606
    Sustained Shield Emitter                                              1137
    Fusion Reactor Unit                                                   1383
    Particle Accelerator Unit                                              102
    Nuclear Reactor Unit                                                  3199
    Gravimetric Sensor Cluster                                            1004
    Crystalline Carbonide Armor Plate                                     4618
    Electrolytic Capacitor Unit                                            759
    Plasma Thruster                                                       1821
    Thermonuclear Trigger Unit                                            1143
    Fernite Carbide Composite Armor Plate                                 1533
    Laser Focusing Crystals                                               1849
    Ion Thruster                                                          3505
    Nanomechanical Microprocessor                                          527
    Graviton Pulse Generator                                              1207
    Deflection Shield Emitter                                             1124
    """"""
    
    data = {}
    for linenum, line in enumerate(FILE_CONTENTS.splitlines()):
        # skip the first and blank lines
        if not linenum or not line:
            continue
        *words, digit = line.split()
        key = "" "".join(words)
        digit = int(digit)
        data[key] = digit
    
    from pprint import pprint
    pprint(data)

The problem, really, is in finding the fingerhold that will let you parse the data into the **dict** I mentioned at the top of the thread.

Output:

```
{'Antimatter Reactor Unit': 1410,
 'Atmospheric Gases': 3321,
 'Cadmium': 8658,
 'Caesarium Cadmide': 1679,
 'Caesium': 1,
 'Carbon Polymers': 93,
 'Ceramic Powder': 45,
 'Chromium': 1275,
 'Cobalt': 7393,
 'Crystalline Carbonide': 48692,
 'Crystalline Carbonide Armor Plate': 4618,
 'Crystallite Alloy': 94,
 'Deflection Shield Emitter': 1124,
 'Dysporite': 100,
 'Dysprosium': 803,
 'Electrolytic Capacitor Unit': 759,
 'Evaporite Deposits': 10819,
 'Fermionic Condensates': 1853,
 'Fernite Alloy': 1392,
 'Fernite Carbide': 112460,
 'Fernite Carbide Composite Armor Plate': 1533,
 'Ferrofluid': 20,
 'Ferrogel': 5600,
 'Fluxed Condensates': 314,
 'Fullerides': 308,
 'Fusion Reactor Unit': 1383,
 'Fusion Thruster': 1914,
 'Gravimetric Sensor Cluster': 1004,
 'Graviton Pulse Generator': 1207,
 'Graviton Reactor Unit': 1380,
 'Hafnium': 3023,
 'Helium Fuel': 988,
 'Hexite': 11,
 'Hydrocarbons': 801,
 'Hydrogen Fuel': 2361,
 'Hyperflurite': 3398,
 'Hypersynaptic Fibers': 5733,
 'Ion Thruster': 3505,
 'Ladar Sensor Cluster': 1246,
 'Laser Focusing Crystals': 1849,
 'Linear Shield Emitter': 1148,
 'Magnetometric Sensor Cluster': 937,
 'Magpulse Thruster': 1623,
 'Mercury': 600,
 'Nanoelectrical Microprocessor': 949,
 'Nanomechanical Microprocessor': 527,
 'Nanotransistors': 1,
 'Neo Mercurite': 43,
 'Neodymium': 1598,
 'Nitrogen Fuel': 1913,
 'Nonlinear Metamaterials': 5250,
 'Nuclear Reactor Unit': 3199,
 'Oscillator Capacitor Unit': 925,
 'Oxygen Fuel': 1143,
 'Particle Accelerator Unit': 102,
 'Phenolic Composites': 6703,
 'Photon Microprocessor': 577,
 'Photonic Metamaterials': 7357,
 'Plasma Pulse Generator': 996,
 'Plasma Thruster': 1821,
 'Plasmonic Metamaterials': 6208,
 'Platinum': 6903,
 'Platinum Technite': 437,
 'Promethium': 647,
 'Promethium Mercurite': 670,
 'Prometium': 12,
 'Pulse Shield Emitter': 1606,
 'Quantum Microprocessor': 2673,
 'Radar Sensor Cluster': 1035,
 'Rolled Tungsten': 7654,
 'Scalar Capacitor Unit': 1463,
 'Scandium': 14786,
 'Shenda -': 95106091,
 'Silicates': 16369,
 'Silicon Diborite': 5261,
 'Solerium': 1986,
 'Spatial Attunement Unit': 169,
 'Sulfuric Acid': 23400,
 'Sustained Shield Emitter': 1137,
 'Sylramic Fibers': 58205,
 'Technetium': 2039,
 'Terahertz Metamaterials': 5497,
 'Tesseract Capacitor Unit': 2803,
 'Thermonuclear Trigger Unit': 1143,
 'Thulium': 506,
 'Thulium Hafnite': 1422,
 'Titanium': 7085,
 'Titanium Carbide': 20761,
 'Titanium Chromide': 7618,
 'Titanium Diborite Armor Plate': 2360,
 'Tungsten': 245,
 'Tungsten Carbide': 228577,
 'Tungsten Carbide Armor Plate': 1305,
 'Vanadium': 3737,
 'Vanadium Hafnite': 2751}
```"
5,"That isn’t how your _data_ is organized, that’s how your _program_ is organized. What I mean is what are the contents of `/home/user/final_list.txt`, ie the file in which your data resides."
5,"That has nothing to do with there being too many lines in the file, it means that your individual line is not in the form “item count”... there is at least one line in your file that has three runs of non-whitespace characters separated with whitespace. If every line in your file was “item count” then that multiple assignment one line 12 would work fine.

What are the contents of your data file, exactly?"
5,"There cannot be a difference in time complexity between these two, as there’s no difference between them that would react differently to increasing input size.

But assuming **counter** is a dictionary, you want to do this:

    counter.setdefault(i, 1)
    counter[i] += 1

As there’s really no faster way unless you know all the possible keys ahead of time."
5,"Because you haven’t shown us how your data is actually organized, I can’t say for sure.

Assuming you had a file where every line had an item number followed by a space followed by a quantity, you could do something like this:

    results = {}
    with open(“YOUR_FILE..TXT”, “r”) as src:
        for line in src:
            item, count = line.split()
            results.setdefault(item, 0)
            results[item] += int(count)

End result is **results** holds an entry for every unique item and the count of that item found in the file.

Now if you want to print those items and their counts in lexicographic order:

    for item, count in sorted(results.items()):
        print(item, count)

And if you want to print in ascending count order:

    from operator import itemgetter
    for item, count in sorted(result.items, key=itemgetter(1)):
        print(item, count)

The key thing though is understanding the structure of your data so you can transform it into a structure that’s amenable to what you want to do."
5,OP is also assuming the inventory_amount has exactly one shy of a billion lines in it and doesn’t mind splitting into a fresh list on every loop... I’m assuming that the example code is just a very rough sketch and that what OP described in the response to me is a little closer to the actual data format.
5,"The standard solution would be to assign each line to a key in a dictionary, rather than dynamically assign variables. You can then order **dict.items** in either key or value order with **sorted**."
5,"Dynamic assignment of named variables is possible, but not particularly easy. That’s mainly because it’s virtually never something you actually want to do.

Can you give a concrete example of something you’re trying to do and _why_ you think dynamically assigned variable names will help you do it?"
5,"What, precisely, is the nature of the change of **M** relative to **N**?

The **N** in Big O should represent the (variable and linearly increasing) size of the data set, so if **M** is a constant as **N** grows you’ve got linear growth.

If **M** is increasing as **N** grows then you’ve got some degree of exponential growth.

If **M** is decreasing as **N** grows then you’ve got some degree of logarithmic growth."
5,"There’s a lot here — minimal examples help — but how will **x** ever be greater than the length of **recipe.variable_tools**? Therefore how would you ever get into a situation where you’d make **enough_variable** False?

Also all that business with **var1** to **var9** is just agonizing... for one thing you can reuse those temporary variable names outside the loop they’re scopes into. For another `for tool in recipe.tools` just makes semantic sense."
5,"Its not really a corner case, though. If you’re intentionally duck-typing then you pass in an empty deque and you’ll get back an empty deque. It’s only if you pass in nothing that you’ll get back a list... but that’s fine, and actually expected behavior, because it’s impossible for default arguments to consider duck-typing.

Well, that’s not entirely true, you could do something like:

    def f(a, L=None, K=list):
        if L is None:
            L = K()
        [...]

But now you’re avoiding passing `deque()` to L by passing `deque` to K, so there’s no obvious advantage.

Type annotations would indeed make it more clear what the author’s intended use is, but that’s kind of irrelevant to a duck-typer, who’s already off the reservation, as it were. The main problem with options 2 and 3 (which is just a less idiomatic 2) is that they’d break the implicit promise of a mutate and return... None would give you a list, as expected, but an empty deque would give you a list while a full deque would give you the same deque."
5,"Right, there’s a lot more than a minimal example there, but the Crusader Kings 2 example you give does not appear to encode the business logic into the data, it seems to be taking the more common (and sensible) approach of having the configuration in one place:

    BUILDINGS"": [
      {
          ""name"": ""Name"",
          ""conditions"": {
              ""target"": ""foo"",
          },
      },
    ]
    
And the business logic for building an instance from that configuration in another:

    class Building:
        def __init__(self, name, conditions):
            self.name = name
            self.conditions = self.parse_conditions(**conditions)
    
        def parse_conditions(self, **kwargs):
            if kwargs[""target""] == ""foo"":
                [...]
            else:
                [...]
    
Which then allows you to marry the two:

    city = []
    for building in BUILDINGS:
        city.append(Building(**building))
    

You seem to be trying to encode logic into the data, but for instance the weapon could be:
 
    WEAPONS = [
        {
            “name”: “Holy Hand Grenade”,
            “commonality”: “unique”,
            “explodes_when”: [
                (“self.seconds”, “gt”, “2”),
                (“self.seconds”, “lt”, “4”),
            ],
        },
    ]

Then the Weapon builder would have logic for iterating over those rules and assembling the lambda or partial function that would actually make the test."
5,"Let’s back this up a bit. Explain exactly what you’re trying to accomplish, and try and simplify it to the most basic, idealized form rather than try and imagine an implementation.

The very fact you’re saying “instances” means you almost certainly want a **Building** class, then subclasses for each of the various kinds of conditions... these _could_ be made dynamically, but that might not be a sensible approach, and even if it is it’s unlikely you’ll approach it with a **dict** that has values that are _functions_."
5,"The first is the best form, especially because you’re mutating and returning any passed in **L**. The user should expect to get back either a brand new **list** if no argument (or None) is passed, or the mutable object they passed in any other case.

So `assert L is f(L)` should always pass without error if **L** has an **append** method. For both option 2 and 3 that implicit promise would be broken if the user passed in, for instance, a **collections.deque**."
5,"You can’t define functions inline using **def**, but more importantly that sort of approach doesn’t seem to make any sense, even with **lambda** (and certainly not with **eval**, which you should basically never use).

It’d make more sense to make either a **Building** class that would take **target** in its `Building.__init__` method, or write a **make_building** function that took a **target** and gave you back a **dict** representing the appropriately created building."
5,"First, what you’re trying to do has _nothing_ to do with either _encryption_ (making something unreadable to anyone not in possession of a secret key) or _decryption_ (making readable something encrypted with a secret key), instead you’re trying to _serialize_ (convert an object to a series of bytes for transmission / storage) and _deserialize_ (convert a series of bytes that’s been received / read back into an object).

This is not a simple topic, as the best way to do this depends entirely on just how complex the object is.

In your case, since it’s ultimately all simple primitives, you can actually use **str** to serialize, but you’ll need to use **ast.literal_eval** to deserialize:

    from ast import literal_eval

    print(literal_eval(str([[None, None], [None, None], [None, None]])))

But realistically you’d want to start off by using the **json** module:

    import json

    print(json.loads(json.dumps([[None, None], [None, None], [None, None]])))

Since JSON is designed for transmission of such data, and can be written and read by languages other than Python."
5,"Well, first how would you count the number of digits in a positive integer? Seems to me if you floor divide a three digit number by 10 three times the result will always be 0.

How would you do that recursively? Well, if **n** is 333 then `digits(333)` is the same as `digits(33) + 1`, which is the same as `digits(3) + 1 + 1`, which is the same as `1 + 1 + 1`."
5,"That’s what I meant by “shrinking the set of all numbers”, which is quite inefficient, both because you then mutate and can’t re-use the all numbers set, and because you’ll be doing a lot of popping and resizing of an array from random indices.

It’s more efficient to keep a list of all the numbers selected so far, then while the length of that list is shorter than required keep selecting random values in the given range and only append values not already in the list at the moment of selection.

Depending on the randrange implementation you may never need to allocate the full list of numbers in the range."
5,"Nowadays you can use **pathlib**:

```python
from pathlib import Path
from hashlib import md5

for p in Path(""."").iterdir():
    if p.is_file():
        print(md5(p.read_bytes()).hexdigest())
```

Though that (and your version above) will yak hard on huge files, while something like this won’t:
    
```python
from pathlib import Path
from hashlib import md5

def md5sum(file_, blocksize=8192):
    hasher = md5()
    with open(file_, ""rb"") as src:
        while True:
            chunk = src.read(blocksize)
            if not chunk:
                break
            hasher.update(chunk)
    return hasher.hexdigest()

for p in Path(""."").iterdir():
    if p.is_file():
        print(md5sum(p))
```"
5,"Look carefully at a good dictionary... to commit to memory is usually one of the definitions of the verb “learn”, not of the noun “learning”. It’s always been somewhat more correct to say “she is trying to learn the alphabet” rather than use the gerund form in “she is learning the alphabet” when you’re implying rote memorization.

If you learn it tomorrow you’ll add it to your learning, whether or not you committed it to memory."
5,"Assuming you were randomly choosing from the set of all numbers, why wouldn’t you make the same choice twice? You’d need some mechanism to reject a choice already made, either by shrinking the set of all numbers or testing that any given choice wasn’t already in selection set.

But really the OP just needs **random.sample**."
5,"Comes in dead handy if you ever want to print an aligned table, for instance. But you seem to be somewhat confusing learning with committing to memory."
5,"Solve the algebra, then put that into a function:

    def f(x, z, t):
        b = (t - t * x) / (z - x)
        a = t - b
        return a, b

    print(f(1.36, 0.88, 14))

Then you never have to do anything but supply the input values."
5,"When Python compiles your class to bytecode all methods are added to that class; none of the methods is called.

When you instantiate your class (`cls(*args, **kwargs)`) the `cls.__new__` class method is called and _whatever_ it returns is **self** — ie the _constructed_, but not yet _initialized_ instance of your class — and this **self** then automatically has `self.__init__(*args, **kwargs)` called to perform the actual _initialization_.

Thus the object returned by `cls.__new__` has all the methods defined on the class bound to it... so `self.__anymethod__()` is the same as calling `cls.__anymethod__(self)`... to use the “default” method you’d actually have to use **super**."
5,"You use the backslash character inside **str** and **bytes** literals, not variable or function names.

Try:

    test_path = r”C:\where\ever”

Instead."
5,"Ahh, good point. And it was an implementation detail of the cPython interpreter only, not the language. Updated to clarify."
5,"I’m not an Anaconda user, but there appear to be instructions [here](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-python.html) for installing and activating other Python interpreter versions.

That said for a beginner there will be, practically speaking, no difference between 3.6 and 3.7; anything that works in 3.6 will work fine in 3.7, except for some fairly obscure bad habits and insecurities that you shouldn’t use anyway, and _almost everything_ that works in 3.7 will work on 3.6. The only thing to really keep in mind is that the sort order of **dict** objects only became _guaranteed_ stable in 3.7... in cPython 3.6 it was stable in practice, but not guaranteed so by design and across all interpreter implementations.

**Edit**: correcting details about sort order in earlier versions."
5,Just takes a bit of time to wrap your head around!
5,"The **self** is a reference to the _instance_ of the class being operated on; it needs to be the first argument of any instance _method_ because that’s what allows the `instance.method(arg)` syntax instead of `class.method(instance, arg)`.

You _could_ actually create an instance and then initialize it:

    e = Engine.__new__(Engine)
    Engine.__init__(e, scene_map)
    print(e)

But Python makes that much easier for you by doing most of that for you behind the scenes.

Class initialization is a little hard to grasp because of the “magic” being done for you with the class constructor (`__new__`) and the class initializer (`__init__`), but just think of **self** as the instance that Python will implicitly pass in to the method as it’s first argument."
5,"There is a _class_ Dog.

George is an _instance_ of Dog.

All Dogs have things we can know about them, like their height, weight, and whether or not they like balls. We model these as _attributes_.

Some of these are _class attributes_ that are common to all Dogs... for example `Dog.goes_to_heaven` is always True.

Usually these are _instance attributes_, because they are things we can only know when seen in relation to one particular Dog. For example, `George.good_boy` is currently True.

All Dogs also have behaviors, like running, sleeping, and fetching. These we model as _methods_.

Almost all of these are _instance methods_ that again act on a specific Dog... for instance `George.fetch(ball)`... you can identify these because they take **self** as the first argument by convention.

Some of these are _class methods_, which are usually used to create new instances, for instance(s) `Dog.woops(George, Molly)` would return [Scruffy, Tumbles, Noodle. and Poops]. These will be marked with the **@classmethod** decorator (with one exception, the Dog.__new__ constructor method) and the first argument will by convention be **cls**."
5,"In Python 3 **print** is a function, not a statement. It will implicitly do a `” “.join(*args)` for all arguments passed to it.

Assuming that the function **foo** returns “foo”:

    print(“I pity the “ + foo() + “!”)

Will print “I pity the foo!” because **print** is receiving one argument (the concatenated string), but notice that I had to manually add a space to the first term. I’d rather not have to do that, so I’ll try:

    print(“I pity the”, foo(), “!”)

Which will print “I pity the foo !”, because **print** is now getting three arguments.

    print(“I pity the”, foo() + “!”)

Will get us what we want, “I pity the foo!”, because the concatenation expression on the right means that **print** is now getting two arguments.

But really it’s nicer to do this;

    print(“I pity the {}!”.format(foo()))

Or in 3.6+ we can use _f-strings:

    print(f""I pity the {foo()}!"")

Though I pity the foo that tries to internationalize the last one into other languages."
5,"Try to simplify by ignoring the class for now:

```
from random import sample

FACES = {
    ""2"": 2, 
    ""3"": 3, 
    ""4"": 4, 
    ""5"": 5, 
    ""6"": 6, 
    ""7"": 7, 
    ""8"": 8, 
    ""9"": 9, 
    ""10"": 10, 
    ""J"": 11, 
    ""Q"": 12, 
    ""K"": 13, 
    ""A"": 14
}
RANKS = ""♣♦♥♠""
DECK = [face + rank for face in FACES for rank in RANKS]

def main():
    # deal 13 cards from a deck
    cards = sample(DECK, 13)
    
    # sort cards by rank
    by_rank = {rank: [] for rank in RANKS} 
    for card in cards:
        rank = card[-1]
        by_rank[rank].append(card)
        
    # print ny rank order
    for rank in RANKS:
        dealt = by_rank[rank]
        # sort by face value
        dealt.sort(key = lambda card: FACES[card[:-1]])
        print(dealt)
        
if __name__ == ""__main__"":
    main()
```

A class can make for a much more convenient way to interact with a card (ie `card.suit` rather than `card[-1]`), but it can muddy the waters on understanding the basic logic of a task."
5,"A lambda is just another way of writing a function definition with no name... aka an _anonymous function_:

    # named function form
    def add(a, b):
        return a + b

    # anonymous function form
    lambda a, b: a + b

The things before the colon are the arguments, the thing after the expressions that the return value of the anonymous function.

Such a function is also often known as a _closure_ when it binds names from the scope in which it’s defined."
5,"You’re filling **listDia** with instances of **Card**, which does not have a member **Card.ranked**.

You’re then trying to sort **listDia** using a lambda closure that says, explicitly, to sort every item (ie **x**) using the value of that item’s **ranked** attribute (**x.ranked**).

No such attribute exists on any of those **Card**s, so the error naturally occurs."
5,"Since there are only three possible outcomes for any given **n** you can just expand it out via substitution. To save my own typing I’ll replace **mystery** with **m**:

```
m(6) =>
m(5) + m(4) =>
m(4) + m(3) + m(3) + m(2) =>
m(3) + m(2) + m(2) + m(1) + m(2) + m(1) + m(1) + m(0) =>
m(2) + m(1) + m(1) + m(0) + m(1) + m(0) + 4 + m(1) + m(0) + 4 + 4 + 2 =>
m(1) + m(0) + 4 + 4 + 2 + 4 + 2 + 4 + 4 + 2 + 4 + 4 + 2 =>
4 + 2 + 4 + 4 + 2 + 4 + 2 + 4 + 4 + 2 + 4 + 4 + 2 =>
42
```"
5,"_Essentially_ it creates a dictionary that maps the argument(s) used to the return value of the decorated function as called with those argument(s), then returns the return value. In future calls with the same argument(s) the cached return value is returned immediately and the decorated function is not called again. 

If you call the decorator with a **maxsize** of None the cache will grow for each new discrete argument(s) in an unbounded fashion, eventually crashing with a MemoryError if enough unique calls are made. You shouldn’t usually use such an unbounded cache

If you call it _without_ setting **maxsize** to None it also keeps track of how recently the wrapped function has been called with those particular argument(s), so there’s more memory overhead than just the return value. Using this information it acts as a Least Recently Used cache with an upper bounds of **maxsize** (that is by default 128 items). When the cache is full the oldest item on the cache (aka the least recently used) is discarded and the current argument(s) are added in its place.

In both cases the argument(s) must all be hashable, which is a limiting factor, and obviously it will only work if the decorated function is _pure_ in the sense that it will always return the same value for the same argument(s) and has no other side effects. The **maxsize** value should usually be a power of 2 for the sake of efficiency as well.

You’re basically trading memory for speed, which means you probably should not use too many such caches, and only very rarely unbounded ones, but if your function is going to be called repeatedly with the same arguments, and especially if it’s most likely to be called often with the one of the most recent arguments, then it can be a huge speed boost with little overhead."
5,"The direct equivalent for Java’s CSPRNG would be **random.SystemRandom**, assuming your system has **os.urandom** (you’ll get a NotImplementedError if it doesn’t).

For cryptography purposes though use an external library; **cryptography** is very popular."
5,"Yes, a DB will use more resources, potentially much more resources, but it gives you speed of access, and it _can_ make it so you avoid lots of (slow) disk reads on that enormous file.

BTW there’s still an advantage to sorting the data... when you do a binary search you’re looking for the index that matches the search term; if you don’t find it, you effectively have the index at which you’d want to insert the term into the file to maintain sort order.

Doing an insert into the file is still costly, since you have to shift all the content from that index onwards, but since your data all appears to be uniform in size you should be able to do that relatively cleanly."
5,"```
Yeah, seriously?
```"
5,"What precisely are you trying to do? From some of your responses below it looks like you’re simply searching for the presence of some search term S in N unordered elements, which themselves are just random strings. That’s a problem that requires a linear search, so the time complexity will be O(N)... run time will increase in a linear fashion as N increases. Sorting the elements will give you much better options, as a simple binary search will drop to O(logN), but then of course you’ll have to put the one-time cost of sorting into the mix. You could also convert the search space into a structure that’s better for membership testing, like a hashmap or set, but that’s basically only going to work if you can hold the whole dataset plus overhead in memory. Entering the data into a database and creating an index, which basically just produces a sorted search space in a more compact form, may save you memory and lead to more efficient IO on repeat searches than a simple sorted file, but the database engine itself will tax limited resources.

So a real world solution will depend on what you’re trying to do, how often, and which resources you need to optimize for."
5,"For one of those there’s an _extensive_ section on cert chains [here](https://docs.python.org/3/library/ssl.html#certificate-chains)... I know you hate links to the docs, but the answer to the questions you’re asking (most of them) are in the docs.

The port is a matter of convention based on what protocol the socket will be speaking... you can essentially select whatever open port you want in testing, though for instance if you’re talking HTTP it should be 80, and for HTTPS it should be 443. The socket is the raw tube you’re pushing things down, so the actual port depends on the protocol because both sides need to know where to look, and random clients of a given protocol will expect random servers to be listening on the protocol port(s).

As for **load_verify_locations** that’s for loading a file that you don’t generate at all... it’s a list of the trusted high level Certificate Authorities, and that file is usually part of your OS’s installation of OpenSSL. You can use **get_default_verify_paths** to find the usual place on your OS... or you can troll through [the source](https://github.com/python/cpython/blob/3.7/Lib/ssl.py) to find what it’s doing. Understanding how the default SSLContext is created may help too, and the source will help there as well.

Honestly all these questions point back at my initial response to you elsewhere: you need to build a better higher level understanding of what TLS is doing _before_ you keep banging your head against how to do it in Python."
5,"Right, well first you’re getting the “help you teach yourself” responses because this is r/learnpython... we’re here to help you learn the language itself, and beyond that the problem solving skills that go with it, one of which is _how_ to go about working your way through the use of the standard library and external modules. Aka “how to teach yourself”.

Also “I’m not new to programming” isn’t the same thing as “I’m not new to socket programming”, and some of the questions you asked previously (like generating a single set of keys and thinking either of them needs to be passed to the client code) imply you’re pretty new to secure sockets at least, if not sockets in general.

I’m not on a machine where I can test these, but [here’s](https://markusholtermann.eu/2016/09/ssl-all-the-things-in-python/) what certainly appears to be an example of a workable setup (working requires your own properly formatted certfile and domain details).

Since you mention “three” examples I think you may have read primarily the three at the top of the docs, there’s more [client side](https://docs.python.org/3/library/ssl.html#client-side-operation) and [server side](https://docs.python.org/3/library/ssl.html#server-side-operation) examples way down below, as well as some discussion of [client side best defaults](https://docs.python.org/3/library/ssl.html#best-defaults) which also shows a working client."
5,"Honestly I think you need to start at a higher level understanding of TLS (which yes, is the current name for SSL... TLS is the more modern protocol, and a slightly more generalized term for the problem of securing the transport layer, which doesn’t necessarily _require_ sockets). The module’s documentation is really for someone who does already understand the entire TLS handshake and what’s being negotiated (and why), and your statements in the previous post certainly seem to indicate that you’re missing some of the fundamentals.

Finding a resource that makes TLS simple is non-trivial... [this](https://tls.ulfheim.net/) seems to cover the handshake in a fairly step-by-step fashion, but there’s also loads of YouTube videos around on the subject."
5,"You mean like:

    from pytz import timezone
    from datetime import datetime
    tz = timezone(""US/Pacific"")
    local = datetime.utcnow().astimezone(tz)
    print(local.utcnow(), local.now())

??"
5,"Something like:

    name, surname = [], []
    with open(file, “r”) as src:
        for line in src:
            first, last = line.strip().rsplit(“ “, 1)
            name.append(first)
            surname.append(last)

Though this assumes every name in the file is in the same form, and that every one has a surname following a single space. This won’t work very well in, for instance, Indonesia."
5,"No worries. Now, do no evil with his newfound dark magic."
5,"As an example:

    print(eval(""__builtins__.__import__('shutil').rmtree""))

User now has access to a function that can recursively delete any directory they can write to, silently.

Since they have the import mechanism, they have any module your Python installation has access to. Sockets, privilege escalation, arbitrary system calls. What have you.

Now imagine you’re running **eval** on a string someone outside your organization has infiltrated into it.

As George Takei would say, “Oh my.”"
5,"If I understand what you’re after, a general form would be:

    def mindex(iterable, start=0, stop=None):
        values = list(iterable)
        start = int(start)
        stop = int(len(values) if start is None else start)
        low = min(values[start:stop])
        return values.index(low, start, stop)"
5,"I _think_ you want:

    c.execute(“SELECT * FROM employee WHERE employeeID = ?"", archiveEmployee)

Also you really should never, ever,  _ever_ run **eval** on user input. That’s ludicrously insecure, as it allows the user to arbitrarily control the interpreter. If the employee ID is an integer just use **int**."
5,One of the advantages of 0-indexed lists. Also leaves **index** growing so it can be used to cut out after a maximum number of rounds.
5,"The interviewer likely wanted to hear single and multiple... multilevel and hierarchical are subtypes of either or both, and hybrid requires multiple plus one of the other subtypes.

Python does support all 5 you mentioned. My guess is the interviewer laughed because they hadn’t considered the 3 generational forms."
5,"First, let’s rationalize your file handling and the creation of your initial **list** of digits (it’s not an array, which is a specific data type, so let’s give it a more descriptive name that’s _much_ easier to follow:

    digits = []
    with open(""list.txt"", ""r"") as src:
        for line in src:
            digits.append(int(line.strip()))

In the above we start with an empty list. We then use the **with** _context manager_ to open the file and assign it to the name **src** (we don’t use **file**, as that’s the builtin _type_ of the object now assigned to **src**). The reason for doing this is that the context manager will automatically close the OS file handle once we’re done reading it, rather than holding it open for the duration of the program. A **file** object is _iterable_, so we just iterate over ever line, strip that line of any trailing newlines, and convert the stripped line to an integer, which we append to **digits**.

We now have a list containing all the digits in the file. Of course it would have failed on any line that wasn’t a valid integer, and also if none of the lines were negative then it’s impossible for the loop that follows to ever end, but I’ll leave it to you to devise checks for those issues.

Now, we need something to keep track of the sums so we can determine it a duplicate is ever reached. This also needs a descriptive name, but since all we’re doing with it is checking for membership of unique values we’ll use a **set**, which is an unordered collection that can _only_ contain unique items. It’s also extremely fast to look up membership in a set, which is not at all true of a list. Since we’re creating the empty set we’ll use the **set** type constructor.

 We also need to initialize three pieces of information... an index that will increment up from 0, the length of the **digits** array — which is what we don’t want to count beyond — and the running total, which starts at 0.

And finally we need the result, which we’ll default to None, so that if at the end of our loop result is _anything_ but None we’ll know we’ve hit a duplicate sum (which could include 0).

    index = total = 0
    sums, bound, result = set(), len(digits), None

Just for fun we set both counters to 0, then use _multiple assignment_ to initialize the rest on a single line. Don’t get too carried away with things like this, but they’re going to make the final version down below a lot shorter.

Now in reality we’d probably want to put some upper bounds on the amount of time we’ll spend searching for a duplicate (if all **digits** are positive we’ll search forever, but there are also an infinite number of other sets of **digits** for which no duplicate sums will ever exist),  but I’ll leave that for you to exit it if we’ve made some ludicrous number of tries.

    while True:
        total += digits[index % bound]
        if total in sums:
            result = total
            break
        sums.add(total)
        index += 1
    print(result)

And there you have it... we’ll get to the same answer, but _much_ more cleanly, and with the added advantage of not holding open a file handle potentially forever.

Final version, with same printing as yours:

    digits = []
    with open(""list.txt"", ""r"") as src:
        for i in src:
            digits.append(int(i))
    
    index = total = 0
    sums, bound, result = set(), len(digits), None
    
    while True:
        total += digits[index % bound]
        if total in sums:
            result = total
            break
        sums.add(total)
        print(sums)
        index += 1
    
    print(result)

Realistically I’d tend to gather all of this up into a function, and there’s probably a mathematical way to determine if a given set of digits even could have a repeating running sum."
5,"If a command is in the form `cmd filename` then you’re _not_ passing the filename via stdin and you need to inspect **sys.argv** (or better yet use **argparse**), otherwise yes of course it will hang waiting for input that will never arrive.

I’d on the other hand it were `echo filename | cmd` then it _would_ be going to stdin.

Hint, [argparse.FileType](https://docs.python.org/3/library/argparse.html#filetype-objects) has built in support for taking filename arguments or accepting them via stdin."
5,"Absolute bare minimum:

    import logging

    logging.basicConfig()

    def subreddit_pushshift_access(query_string):
        times_to_retry = 3
        tries = 0
        while tries < times_to_retry:
            try:
                return requests.get(query_string).json()
            except Exception as err:
                logging.exception(f""Attempt {tries + 1} failed with {err}"")
                tries += 1
        return {}

Though personally I’d only catch the exceptions likely to be thrown by **requests.get** in cases of server-side hiccups that are _very_ likely to heal themselves in _very_ short order. No point retrying a badly formed or invalid query, after all, or hammering an endpoint with an invalid certificate, etc. Plus realistically you’d want to add some progressive backoff to most any retry on an HTTP-related error that _was_ recoverable, since rabbit-punching it isn’t going to make it work better, so it’s probably better to have multiple specific `except LikelyExceptionType` handlers rather than one overly loose one as above."
5,"Arguably you’d be hire-able now, if you ran that `def Disclaimer` through Pylint and fixed the naming issue and the fact that **pass** isn’t indented.

An entry-level Python job means many different things to many different industries. You’ve got a few more years of experience and a degree to finish before you’ve got a shot at Google, but if you’ve gotten to basic use or sqlite3 and PyQt / PySide you’ve got enough experience for a very entry level automation and scripting job at lots of smaller companies. Though I’d still very much suggest finishing that degree.

This is coming from a self-taught but long-term professional Pythonista... I know the language backwards and forwards — after _many_ years of paid work and reading, but I’m _still_ in the hot grip of imposter syndrome because I don’t have the CS background in data structures and algorithms that I wish I’d picked up back in university (where I studied pretty much the polar opposite or CS). The moment where self-taught single-language coders are lifetime-employable is passing, rapidly, as ML and other concepts that require a deeper understanding than you can get at by progressive tinkering come to the fore of the mainstream work.

So look for a gig on the side, or an internship, but keep your nose in the books and hustle. You’re already showing more self-motivation than your peers — is your self-assessment is correct, and your other-assessment as well — and that means you’ve got a good shot at higher faster further with the same background knowledge... just keep investing in the background knowledge, because merely employable with Python isn’t really that high of a bar to meet."
5,"The only path to an infinite loop is if the request body was somehow always  going to be “null\n”.

That said, you’re trying 4 times, not 3, and this could be a lot simpler.

    def subreddit_pushshift_access(query_string):
        times_to_retry = 3
        tries = 0
        while tries < times_to_retry:
            try:
                return requests.get(query_string).json()
            except JSONDecodeError:
                tries += 1
        return {}

Of course this will still fail with an Exception if the **request.get** call itself fails (due to a malformed query, SSL error, etc), but if the issue is you want to retry exactly three times if invalid JSON is returned, otherwise return {}, then this should do."
5,"Sure it is. If you think about it any 2D game is just a 3D game with a constrained camera and little or no depth considerations. Fundamentally all the same tools are required, you just restrict yourself to a subset of the rendering features and have a simpler problem with path-finding and collisions.

I mean I wouldn’t recommend Unity for a text-based game like Zork. And there are no doubt better platforms for interactive narrative games (like those Japanese dating sims), but for your typical 2D game, sure."
5,"Technically speaking you could build most games in Python... practically speaking, you wouldn’t, for a whole lot of reasons.

If you’re serious about games — serious as in career, not hobby — then start learning Unity."
5,"Here’s a example that combines your three lists into a deck of tuples, then shuffles that:

    import random
    
    aShuffle = []
    
    dCardNames = ['2','3','4','5','6','7','8','9','10','J','Q','K','A']
    
    dCardValues =  ['2','3','4','5','6','7','8','9','10','11','12','13','14']
    
    dSuits = [""Clubs"",""Spades"",""Diamonds"",""Hearts""]
    
    # Build a two dimensional deck with Cards suits and values.
    
    aCards =  [['' for i in range(52)] for j in range(3)]
    
    i = 0
    n = 0
    
    while i < 13:
    	aCards[0][i] = dCardNames[i]
    	aCards[0][i + 13] = dCardNames[i]
    	aCards[0][i + 26] = dCardNames[i]
    	aCards[0][i + 39] = dCardNames[i]
    
    	aCards[1][i] = dSuits[0]
    	aCards[1][i + 13] = dSuits[1]
    	aCards[1][i + 26] = dSuits[2]
    	aCards[1][i + 39] = dSuits[3]
    	aCards[2][i] = dCardValues[i]
    	aCards[2][i + 13] = dCardValues[i]
    	aCards[2][i + 26] = dCardValues[i]
    	aCards[2][i + 39] = dCardValues[i]
    	i = i + 1
    
    aShuffle = list(zip(*aCards))
    random.shuffle(aShuffle)
    
    i = 0
    while i <= 52:
    	print(aShuffle[i][0], ""\t"", aShuffle[i][1], ""\t\t"", aShuffle[i][2])
    	i = i + 1
    
BTW, notice the `i = 0` ... you were only printing out 39 cards."
5,"Here’s a example that combines your three lists into a deck of tuples, then shuffles that:

    import random
    
    aShuffle = []
    
    dCardNames = ['2','3','4','5','6','7','8','9','10','J','Q','K','A']
    
    dCardValues =  ['2','3','4','5','6','7','8','9','10','11','12','13','14']
    
    dSuits = [""Clubs"",""Spades"",""Diamonds"",""Hearts""]
    
    # Build a two dimensional deck with Cards suits and values.
    
    aCards =  [['' for i in range(52)] for j in range(3)]
    
    i = 0
    n = 0
    
    while i < 13:
    	aCards[0][i] = dCardNames[i]
    	aCards[0][i + 13] = dCardNames[i]
    	aCards[0][i + 26] = dCardNames[i]
    	aCards[0][i + 39] = dCardNames[i]
    
    	aCards[1][i] = dSuits[0]
    	aCards[1][i + 13] = dSuits[1]
    	aCards[1][i + 26] = dSuits[2]
    	aCards[1][i + 39] = dSuits[3]
    	aCards[2][i] = dCardValues[i]
    	aCards[2][i + 13] = dCardValues[i]
    	aCards[2][i + 26] = dCardValues[i]
    	aCards[2][i + 39] = dCardValues[i]
    	i = i + 1
    
    aShuffle = list(zip(*aCards))
    random.shuffle(aShuffle)
    
    i = 0
    while i <= 52:
    	print(aShuffle[i][0], ""\t"", aShuffle[i][1], ""\t\t"", aShuffle[i][2])
    	i = i + 1
    
BTW, notice the `i = 0` ... you were only printing out 39 cards."
5,"Ok, yeah so the problem is that you’re independently shuffling the names and the suits, then you’re overwriting the contents of the values with the now shuffled names... so of course you can’t print out the “K Hearts 13” because you’ve overwritten the “13” with “K”.

The issue exists with all your cards, not just the fact cards, but because the value and the name are identical for all but the face cards you just don’t notice it.

It fundamentally does not make sense to shuffle the names, suits, and values as independent lists, you _must_ either shuffle a single list of (rank, suit, value) tuples or you must shuffle the 52 indexes, but you can’t let your three lists go out of order, which is exactly what you’re doing by shuffling the names and the suits. And you can see it doesn’t work; if you look carefully you’ll notice you end up with duplicate cards (I just ran it and had two Kings of Diamonds and no King of Clubs).

I can understand your instructor not wanting you to jump ahead, but the above code simply makes no sense as an approach, as is."
5,Can you post the code on Pastebin? The formatting is so broken that it’s basically impossible to copy this into an interpreter and try and run it.
5,"Can you please try and explain exactly what this code is meant to do? As in what specifically is the desired outcome and what problem is it trying to solve?

It _appears_ that the problem comes down to the line where you do this:

    aCards[2] = aCards[0]

Which is where you overwrite the values of the cards with their names.

But I can’t for the life of me figure out why you’re building a list of three lists of 52 empty strings first, then populating those lists via indexing, or why you seem to be shuffling two of them and the overwriting the third with the first."
5,"You must properly install Python3 and run it with that. You cannot run code written exclusively for Python3 using a Python2 interpreter, and glancing at **load.py** there is no affordance made for backward compatibility."
5,"The **for** loop would have to use `break` in the count- or sentinel- controlled versions, since without it (or `return` inside a function) a for loop just runs to exhaustion.

But in a **while** loop you’d just test if the count had reached its limit, or if the current value is not the sentinel value.

This sounds like homework, but the above should point you in the right direction."
5,"I may be misunderstanding your need, and I may be wrong that the result array you wrote above seems to be missing [0,1,0], but if not:

    from itertools import product

    def ndarray(m, n):
        return [list(p) for p in product(range(m), repeat=n)]

I wouldn’t do this via recursion as you’ll hit the stack limit with fairly small values of **n**."
5,"What you’ve described _sounds_ like an overly complicated and probably bad idea, and you’ve given no indication of what precisely is happening — ie traceback, error messages in the terminal, etc — but you’d normally have to call `os.system(“python script.py”)`."
5,"One area where **str.format** trumps f-strings is any string that will or may require internationalization into other languages. The standard **gettext** approach requires access to the format string, and there’s no story yet for doing that at all with f-strings."
5,"And anyone with your, or more, privileges could reverse it just as trivially!"
5,"Put the files on a USB drive, put that USB drive in a vault with a time lock, then kill anyone who knows how to defeat the time lock, especially the manufacturer.

If you don’t have such a vault, or are not willing to kill all those people, then give up on this idea.

There is _no_ known (or likely knowable) software-only solution to keep a file truly inaccessible — meaning encrypted, the only way to render the data inside the file practically inaccessible — for a specific period of time."
5,"You’ve always got to remember that file operations are like moving a playhead around on a record or tape... if you read bytes from or write bytes to the file you move that playhead, and you use **file.tell** to inspect the current position and **file.seek** to move it around without changing anything on the file itself.

The docs have a [pretty basic description](https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects), but it’s enough to figure it out."
5,Be more than a little wary of any profiling you do on this. For one thing if you’re not using **timeit** and a large number of repeats you’re not getting anything like average performance. Also because **ismount** is involved your OS’s file system caching will play a large role.
5,"Assuming you’re not always using the same path — in which case you could save yourself all the work of ever building **split_path** — would be to make the inner comprehension a _generator comprehension_ and eliminate the unnecessary **enumerate**, both of which will reduce your RAM usage. You ca. Also reduce the lookup of **is_mount**, which may help a little:

   _ismount = os.path.ismount
   t_mp = [path for path in (''.join(split_path[0:end]) for end in range(1, len(split_path) + 1)) if _ismount(path)]

There’s not a lot of room for improvement... the slowest thing by far in all of this is the ismount check and the tiny gains of a nigh-unreadable comprehension will be dwarfed by that fixed cost."
5,Based on the path some sort of a queue for “nudes” of the category “dps”. Apparently this queue can either be really long or really full.
5,"You’d normally want to use **logging.baseConfig** or one of the more specialized classes in [logging.config](https://docs.python.org/3.3/library/logging.config.html) to actually set up your logger. With the former just pass a format string and it creates the Formatter and attaches it to the Handler properly. You’ll find links on the top right of the page linked above to the Basic and Advanced tutorial as well as the Logging Cookbook ... there’s a fair bit to digest in all of that, but once you grok it you’ll find **logging** isn’t actually that hard and once it’s configured it’s quite simple to use.

Generally it’s best practice to use **logging** for all the flexibility... it’s just easier to evolve to other needs. If you’re purely writing a Linux-only tool though **syslog** is handy, you’ll just regret it if the scope expands.
"
5,"No, that would throw a TypeError because 4 isn’t a type that can be indexed into.

But `dq[-1]` would be 4.

Now, I don’t know what’s meant to be passed into **head** in your code, but given the context it appears to be a node in some sort of linked list; **head.val** returns the value of the node, **head.next** returns the next node or None. And the only place your code adds items to **dq** it does so by appending a tuple whose first item is an index integer and those second item is the value of the current **head**... that means your **dq** will always hold something like [(0, 1), (1, 2)] ... so `dq[-1][1]` will return 2... first you index to the rightmost tuple (‘dq[-1]`) then you index to the right side value in that tuple `da[-1][1]`."
5,"What that _should_ do is throw an IndexError on the second line. The **deque** like the **list** will error if you try to index to a non-existent item and that deque is empty.

That said `dq[-1]` is trying to index into the last item in the deque. The further `[1]` is the trying to index into that item.

Both that line and `idx, _ = dq.pop()` seem to assume that there’s at least one item in **dq** and that that item is a two item list or tuple. "
5,"Yeah, mutable variables can cause some awfully funny looking behavior.  No worries, good luck with it!"
5,"When all branches of a conditional terminate in **return** there is no need for **else**. There is also no need for an **elif** if the branches above it terminate in **return**.

Thus:

    if a:
         return 0
    elif b:
         return 1
    else:
        return 2

Is better written:

    if a:
        return 0
    if b:
        return 1
    return 2

The **elif** and **else** are redundant, since by the time you reach them the branch tests above it _must_ have been False.

Remove the terminal **return** statements, though, and you’ll still need **elif** and **else**, as you can’t rely on **return** having eliminated from consideration all inputs that matched previous conditions.

BTW, I believe `pylint`now complains about **elif** and **else** after **return** by default."
5,"Right, the actual data doesn’t matter, the problem is the mutation.

Compare this:

    q = []
    d = {}
    for i in 1, 2, 3:
        for l in ""abc"":
            d[l] = i * l
        q.append(d)
    print(q)

To this:

    q = []
    for i in 1, 2, 3:
        d = {}
        for l in ""abc"":
            d[l] = i * l
        q.append(d)
    print(q)

In the first what we’re putting on the **q** is 3 copies of the same dictionary — literally the same object in memory —, which holds the data only from the last line because we keep overwriting the same keys.

In the second we’ve put three different dictionaries on the **q**, each with the appropriate data for its “columns”."
5,"Right, for the sake of argument let’s assume there is 1 column, **foo**, and for all 30 rows there’s a unique incrementing value for **foo**.

On the first row you’ll change **details** to `{“foo”: 0}` and push it to the queue. On the second you’ll push `{“foo”: 1}`, and so on, till you push to `{“foo”: 29}`.

Now the queue holds 30 items that are all `{“foo”: 29}`.

Is that basically what’s happening?"
5,"I think it is though... am I correct in assuming that if you have 30 unique rows in your data you end up with 30 items in the queue that are all identical and all have 30 rows of data in them?

**Edit** or if all the columns share the same **key** values, 30 items that all have the values of the last row’s columns?"
5,"Ahh, wait, just noticed — it’s hard to read the formatted code on here — but you seem to be mutating **details** and then shoving a new reference to the same **dict** onto the queue with each row... all those references will ultimately be to the way the last row left **details**.

Are you trying to get the details for all rows into one dict on the queue, or the details for each row? If the latter you need to initialize **details** at the top of the outer **for**, before iterating over the column data, so you’ve got a fresh dict for each set of columns."
5,"I don’t see anything obviously wrong with the above, but it’s missing a lot of context. Perhaps post the full code on Pastebin or GitHub and provide an example of the data?"
5,"It’s a bit unclear — and admittedly I can’t see the entire book here — but that _appears_ to be comparing an implementation in pure C (no Python crossover) with a C extension (unknown implementation, possibly using ctypes to call the preceding pure C function) and Cython, the latter two of which are ultimately returning a Python object and so must incur more overhead than purely native C. The results seem to imply that by the time you get back a value useable in Python the Cython version is faster than or at worst comparable to the C extension.

I mean calling C in C will _always_ be faster, but if that’s what’s being compared then that 295X speedup is kind of misleading."
5,"I’d be interested in seeing the two implementations, and whether or not the Cython one uses [all the tricks](https://cython.readthedocs.io/en/latest/src/userguide/early_binding_for_speed.html) for avoiding / minimizing the overhead of crossing from C to Python."
5,"No, OP means [Cython](https://cython.readthedocs.io/en/latest/index.html), which is a superset of Python that allows compiling to C. It’s basically a way of writing C extension modules but in a much more ergonomic and pythonic fashion than straight C.

It also provides an FFI for calling into pre-existing C libraries in a broadly similar fashion to **ctypes**, but the resulting code still needs to be compiled with the cython compiler, while **ctypes** (and the 3rd party **cffi**) allow bog-standard, interpreted Python to call into libraries that export a C ABI."
5,"When you code in **cython** you shouldn’t get a _slight_ speed increase, you should get roughly the same performance as you would writing in native C and then calling into it using a Python Foreign Function Interface (such as the std lib’s **ctypes** or the considerably more ergonomic **cffi**). After all the cython code itself compiles down to C... at least if you _are_ compiling it, rather than using cython’s pure-python mode.

Of course cython doesn’t allow you the full control available in native C, so really finely hand-optimized C is likely to be somewhat faster than even well written, idiomatic, [statically-typed](https://cython.readthedocs.io/en/latest/src/quickstart/cythonize.html) cython, but it shouldn’t be by a particularly large degree."
5,Read bottom of OPs post.
5,"I won’t explain how to reverse the list, but I’ll explain what the current code is doing. Once you get that reversing it should be quite simple.

Let’s assume that we start with **sequence** = [5,3,6,1].

    for i in range (1, len(sequence)):

We’re iterating over the _indexes_ in **sequence**, starting at 1, so on the first round of the **for** loop **i** = 1.

        item = sequence[i]
 
This sets **item** to the index in **sequence** that **i** points to... in Python list indices start at 0, so on the first round **item** = 3 (the _second_ item from the left in **sequence**).

        j = i

This just makes **j** equal to the current value or **i**, so **j** = 1.

        while j > 0 and sequence[j-1] > item:

This is where the work gets done... we’ll keep looping indefinitely for as long as **j** is _both_ greater than 0 _and_ the item in **sequence** immediately to the left of **j** is greater than our current **item**.

Since on the first round of the **for** loop **j** = 1 we obviously pass the first test of the **and**, so we check the item to the left and see that 5 is indeed greater than 3... both tests are True which means the whole **and** expression is True, so we enter the **while** loop.

            sequence[j] = sequence[j-1]

On this first iteration of the **while** loop we set **j** (still the original index for **item**) to be equal to the value to its immediate left. This works because the **list** we are working with is _mutable_, meaning we can change it in-place: our **sequence** now contains [5, 5, 6, 1], but remember **item** is still equal to 3.

            j -= 1

Now we _decrement_ **j** by 1... **j** now equals 0.

            sequence[j] = item

And now we set the 0 index (first from the left) item to our current **item**, so at the end of the first round or the **while** loop **sequence** = [3, 5, 6, 1].

We’ve now hit the bottom of the **while** loop, so we return to the start of it:

        while j > 0 and sequence[j-1] > item:

First thing that happens is the first test is False (0 is not greater than 0), so the whole **and** is False. That means we’ve hit the end of the **for** loop, so we return to the top.

    for i in range (1, len(sequence)):

We stop to the next index and **i** = 2.

        item = sequence[i]
        j = i

Same as before, **item** = 6 and **j** = 2.

        while j > 0 and sequence[j-1] > item:

The first test obviously passes, but the item to the left is 5, which isn’t greater than 6, so we never enter the **while** loop, which also means we’ve hit the bottom of the **for** loop, so we return to the top with **sequence** = [3, 5, 6, 1].

    for i in range (1, len(sequence)):

This time around **i** is 3, the last index in a 4 item list... when we hit the bottom of the **for** loop this time the loop ends.

        item = sequence[i]
        j = i

Same as before, **item** = 1 and **j** = 3.

        while j > 0 and sequence[j-1] > item:

Both tests pass since the item to the left (6) is greater than 1, so back into the **while** loop.

            sequence[j] = sequence[j-1]
            j -= 1
            sequence[j] = item

On the first loop of the **while** we move the 1 and item left, so **sequence** = [3, 5, 1, 6] and **j** = 2.

Both conditions of the **while** therefore remain True, since 5 is greater than 1, so we continue.

On the second loop of the **while** we move the 1 another item left, so **sequence** = [3, 1, 5, 6] and **j** = 1.

We continue in the **while** because 3 is also greater than 1.

On the third loop we move the 1 another item left, so **sequence** = [1, 3, 5, 6] and **j** = 0. 

At this point the **while** loop ends because we’ve run **j** down to 0. The **while** is complete, and so is the **for** and there’s no more looping to do... but that’s fine as **sequence** is now sorted, and the last thing to do is:

    return sequence

So basically all we did was iterate over each item and move it further left until either it was the leftmost item or the  item to its immediate left was less than or equal to itself. That gives us ascending order. Descending requires just a very small change to that algorithm."
5,"An AttributeError doesn’t make much sense at all, that’s for when either attribute reference (ie `print(A.x)`) or attribute assignment (ie `A.x = 1`) fail ([ref](https://docs.python.org/3/library/exceptions.html#AttributeError))... it would make more sense to raise a TypeError if the value could not be coerced to an **int** at all of a ValueError if the value could be coerced but was non-positive."
5,Doesn’t make much sense to raise an AttributeError here. Also any negative integer or round float / Decimal would pass(ie `check_input(-5.0)`).
5,"I wouldn’t call a dict the extreme case, in fact I’d tend to say it should be the default approach for what the OP seems to be describing;

    objs = {“a”: a, “b”: b, “c”:c}
    print(objs[“a”].attr)

The use of both **globals** and **locals** on a user-controlled input seems a bit risky, considering the user can access — for instance — any module that’s been imported into the given namespace.

Imagine for instance if the OP’s code were doing something like `globals()[input_a].remove(input_b)` and as **input_a** the user gave “os” instead of one of the OP’s object names."
5,"It’s not a good idea to use **type** like that, instead use **isinstance** to determine if the input is an instance of **int** _or_ one of its subclasses.

Also, you can use _Boolean logic_ to combine expressions, and for that matter you can simply `return` expressions, since an expression is evaluated to an object at runtime.

    def is_pos(value):
        return isinstance(value, int) and value > 0

Notice that I also renamed the function per Python’s PEP-8 style conventions."
5,No worries. Have fun with it!
5,"That’s where your actual need is unclear... in an earlier comment you said that you needed to react to a format string that contained exactly one positional token... the above function validates only that; multiple tokens is considered a not legit format string, as is zero tokens. It also considers a positional token that is given an explicit index but where that index is not 0 to be invalid.

The **check_unused_args** dummy method on Formatter is probably going to be the most fruitful for you, as you can pretty much react to any combination of tokens and provided args and kwargs you don’t like with an appropriate Exception."
5,"Another approach;

    from string import Formatter
    
    class MyFormatter(Formatter):
        def check_unused_args(self, used, args, kwargs):
            if not used:
                raise ValueError(""No tokens"")
            for idx, arg in enumerate(args):
                if idx not in used:
                    raise IndexError(f""{idx}={arg}"")
            for key, val in kwargs.items():
                if key not in used:
                    raise KeyError(f""{key}={val}"")
    
    myformat = MyFormatter().format

By providing a non-dummy implementation of **check_unused_args** you can respond to pretty much any combination of tokens and provided args and kwargs with an Exception."
5,"Yes. And **rest** contains a list of those tuples. Your **sum** iterates them all as well, this version just accounts for your spec stating that only a single token is a valid format string for the purposes of your Example."
5,"That’s what the splat unpack is avoiding.,, **rest** would contain any further tokens beyond the first."
5,"It’s a pattern in need of a function method, not a subclass that doesn’t behave in a manner consistent with generally accepted OOP principles used throughout the language.

A subclass should behave in a consistent fashion with its superclass; if the superclass method returns an instance of the superclass then the subclass method should return an instance of the subclass.

If you want to break that behavioral consistency, that’s fine, but it’s an abuse of OOP."
5,"Based on the definition you provided in a deleted comment (fmt string must contain exactly 1 positional token to be considered legit), then something like this should help:
 
    from string import Formatter

    def is_legit(fmt):
        if not fmt:
            return False
        (_, name, spec, conv), *rest = Formatter().parse(fmt)
        if rest or (name is spec is conv is None):
            return False
        return not name or name == ""0""

They should return True only for a fmt string like “{}” or “{0}”, any other string (no tokens, more than one token, any keyword tokens, or a single token with an index higher than 0) should return False.

Alternatively subclass Formatter and add a method for **check_unused_args** that raises an exception if the set of used arguments doesn’t match the provided args and kwargs."
5,"You don’t get **Str** back.., that’s what’s weird about a subclass of **str**. Maybe that makes sense to you for **Str.split** — it doesn’t for most people — but conceptually **Str.upper** should return an uppercased **Str** instance that retains all the custom methods and behaviors of **Str**."
5,"That super trivial subclass will break in innumerable ways in practice. For instance check the type of any of the substrings returned by **Str.split**. All sorts of weird behavior crops up with such a trivial subclass, which is precisely why I said it’s a non-trivial problem.

In fact it forces you to overload the constructor mechanism to even begin to do it properly, and that _still_ has oodles of edge case weirdness."
5,"Why _should_ that error? I mean fundamentally, since all the tokens provided in the string have been successfully replaced?

Subclassing **str** in a reliable manner is hard... it’s an immutable, so you can’t use `__init__`, and even if you subclass it properly using `__new__` and setting `__slots__` you’ll find that many operations with it will end up returning a standard **str** anyway, and not an instance of your subclass. The **collections.UserString** class exists to make some of that a little more ergonomic, but it’s still relatively rare that you come across a problem where a subclass of **str** is the _right_ solution to a problem."
5,"I’ve been using Python for over a decade and I still haven’t learned EVERYTHING... in fact I’d say that at 5-6 months in you’re at best a novice in any general programming language, even if you’ve got a solid background in programming."
5,"Subclassing **str** is extremely non-trivial, and almost certainly isn’t a good idea for what you’re trying to do.

Which leads me to the question _why_ do you want to do what you’re trying to do?

The **str.format** method will already error in a number of different circumstances.

For instance indices given in tokens but there no positional arguments for those indices:

     “{0}”.format()  # IndexError

Or keys given in tokens but no keyword arguments provided for that key:

     “{foo}”.format()  # KeyError
     
However no it won’t error if unnecessary args and kwargs are provided.

So what exactly is the issue?"
5,"It is simple if you’re just kicking off a Python process that will then call your EXE on a specific schedule... the problem is that without registering that process as something that the OS will ensure gets run under your user account and re-starts automatically the simple version isn’t actually very reliable.

It just happens that task scheduling is one of the problems that really is the responsibility of the OS itself."
5,"For an interactive prompt “best practice” is going to be to use something like [prompt_toolkit](http://python-prompt-toolkit.readthedocs.io/en/stable/), which is a framework designed for that purpose.

For a simple program of your own I’d tend to suggest writing a series of functions:

    def yes_no(prompt):
        [... keeps asking for Y or N and returns True or False ...]

    def choice(prompt, choices):
        [... keeps asking for one of the choices and returns that choice ...]

    def city(cities):
         city = choice(“Choose a city”, cities)
         if yes_no(f“You choose {city}, are you sure?”):
             return city
         return None

Then your main program can just call **city** and deal with either a choice or None.

The idea is to build up a suite of generic tools you can re-use for different types of questions. Which is ultimately what the framework would give you, in battle-tested form."
5,"This isn’t really an ideal learning project as it involves a bit of a chicken-before-egg problem: scheduling events _reliably_ — ie the events will restart on the required schedule even after a reboot — requires access to the underlying OS’s task scheduling mechanism (Task Scheduler on Windows, usually Crontab on Linux). Which means the best way to get a Python script to run a Windows EXE on a schedule is to use Windows Task Scheduler to run the Python script that runs the EXE.

If you want to play around with the idea but don’t need that sort of fault tolerance then you can start with Python’s **sched** module, but it’s relatively rarely used because you basically have to have a permanently running Python process... which is easiest to keep up reliably using the OS task scheduler, see?

Running a EXE isn’t a bad learning task — you’d use **subprocess** and the tools in it to do that and to capture output, etc — but the scheduling part is going to be frustrating."
5,"You want to use the _entry_points_ parameter (specifically the _console_scripts_ key) rather than the older _scripts_ parameter.

See [here](https://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-script-creation) for documentation."
5,"This will happen if you’ve done something like:

    list = []
    def foo():
        return list(“bar”)

It means you’ve _shadowed_ the **list** builtin by assigning its name as a variable."
5,"I don’t know Periscope Data at all, but a quick glance at their offering suggests that they’ve got a built-in (but possibly add-on) Python interface of some sort that supports both Pandas (for tabular data manipulation) and NLTK (for natural language analysis, helpful in finding those invalid names and bios), so if the data is already in a database accessible by Periscope Data then you might be able to do all of this within the dashboard... it’s unclear what the data source is from your description though, or what you’re ultimately doing with the changed date columns etc other than tagging the user in a dashboard view. If you’re actually going to need to manipulate and then insert this data into a database from which Periscope Data reads you’ll also need to learn how to integrate with that specific database.

Either way the task described definitely sounds well-within the realm of fully automatable with Python and the help of those libraries.

Sounds like you’re a good candidate for starting with [Automate the Boring Stuff](https://automatetheboringstuff.com/) then adding some tutorials and reading on Pandas and NLTK."
5,"You _can_ use **os.system** if you don’t mind having no interaction with the process, and no control over (or ability to inspect) any output it produces, but really you should use **subprocess.run** if available, or one of the **subprocess.call** variants in older Python versions."
5,"The simplest method in which the _user_ is responsible for having an appropriate Python interpreter installed is to use **pip** and [setuptools endpoints](http://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-script-creation) to create the actual executable shim... the user just does `pip install your_app —user` and they’ll have a working copy of your script. Uploading to PyPi is optional, since pip can install directly from a properly formed git repo these days. It’s cross platform and it works well if the user can be trusted to manage their Python installation ... it’s brittle as all Hell if they can’t.

At the other end of the spectrum is you managing the interpreter for them, which is where you get tools like **pyinstaller** and other “freeze” options, as well as Docker (though now they need to be sophisticated enough to manage Docker).

This is why the Python Packaging Authority (PyPa) has a whole section on [applications](https://packaging.python.org/overview/#id9)... there’s a whole gamut of options that really come down to how sophisticated is your user. Many of the os-specific packages can build off of a proper `setup.py` that uses the same endpoints described above, so starting with being able to pip install your app into a virtual environment is a good starting point for further exploration."
5,"Depends on who you’re interviewing with. I’ve interviewed and conducted interviews at places that don’t do much more than FizzBuzz or something of similar complexity (Fibonacci, Sieve of Eratosthenes, etc), and also been interviewed by Google, where I needed to be able to estimate Big O on various algorithms read off to me on the phone, and didn’t even get the interview till I’d completed their FooBar challenge level 4. Which required dynamic programming, quite a bit of set and graph theory, and a fair amount of rudimentary crypto."
5,"A very common practice is to use environment variables to store credentials. You then set up your shell to source a file only you can read that exports those environment variables. Projects like **dotenv** can make this easier, though obviously these files should _never_ be committed to your VCS."
5,"One caveat, I barely use tk... but it seems the simplest way is to set the Entry widget as an attribute of your instance:

    self.due_day = tk.Entry(self)
    self.due_day.pack()

Then if I read your code correctly your MainApplication class should be able to get the current value via `app.frames[PageOne].due_day.get()`.

You can also bind **textvariable** as you seem to be trying to do, but then it would be that variable you’d want to attach to **self**."
5,"None of those allow you to access the local variable by name, ie by `func_name.variable_name`. The local scope of function A is not accessible to function B."
5,"You’ve only provided a partial snippet and only one function, so it’s impossible to see what you’re actually trying to do clearly, _but_ the simple answer to the question posed in your title is “you can’t... a variable local to function A cannot be accessed by function B”. You must either return the value, update a **global** variable, or in the case of a class method set an attribute on the class instance itself."
5,"In the broadest sense it means a language giving you — the programmer — the means to replace (aka overload) the behavior of that language’s operators (ie `+`, `-`, `+=`, and so on) in some custom way.

There are many languages do not allow you to do this, but it’s a nice feature in OOP languages because it, for instance, allows you to create a custom number-like class that responds to all the usual numerical operators in a way that’s appropriate for your class... basically it allows you to make more ergonomic and “user-friendly” custom classes than you’d be able to achieve without it."
5,"An _array_, in the lowest-level and simplest sense, is a sized sequence of homogenous data that is represented by a contiguous stretch of memory. There’s a starting address and you can access any given item by simply offsetting from that address using the index multiplied by the size of the type stored within it. Re-sizing it involves freeing up and allocating more continuous memory in blocks of N items multiplied by the size of the type stored within it.

This fundamental array isn’t really all that flexible, but it can be used to build higher-level structures by using an array of pointers to keep track of references to objects in other, discontiguous areas of memory. This allows you to build all the more familiar higher-level data types, including **builtins.str** (an immutable and fixed length homogenous array), **array.array** (a mutable and variable length homogenous array) and **builtins.list** (a mutable and variable length heterogeneous array), among many others.

So yeah a **builtins.list** is an _array_ (in the same way that a human is a primate), but it’s not an **array.array** (in the same way that a human is not a chimpanzee)."
5,"Given what you’re describing and specifically the limitations you’ve applied on OOP — ie by trying to extend a base class without having to use a child class that then has to be inherited all over your framework — you’ve pretty effectively reduced your toolset to just monkey-patching. In fact you’ve kind of described its primary use case.

And yeah, introspection isn’t great with monkey-patching, so IDE features and static analysis will be compromised, but cookies, sadly, crumble and those tradeoffs may just be necessary. In an app this isn’t much of an issue, in a library copious documentation may be required."
5,"Others have explained better ways to approach the actual problem (regular expressions, iterating over the string’s characters rather than indexes in a range, using **str.isupper**, **str.islower**, and **str.isdigit**, etc), but I haven’t seen anyone explain _why_ “ULFFunH8ni” is returning False.

Basically you’re being bit by a feature of Python known as [comparison operator chaining](https://docs.python.org/3/reference/expressions.html#comparisons)... `a in b == c` is actually not doing what you think it’s doing (checking if the answer to `a in b` is equivalent to True), but is instead doing `a in b and b == c`.

This is actually one of the reasons why the idiom in Python is to _not_ use comparison against True and False; rather than `if thing == True` or `if thing == False` do `if thing` or `if not thing`, respectively.

Operator chaining is hugely useful, but can be a bit confusing in cases like this, hence the idiom."
5,"Simple and easy to read always beats complex and hard to read, with the exception to that rule being when complex is _substantially_ more performant. Even then simple and _performant enough_ should tend to win out.

As for modules there’s no one answer. Over time you’ll learn what is where in the _standard library_, it’s pretty well organized and [heavily documented](https://docs.python.org/3/library/index.html). It doesn’t take long to memorize the stuff that’s in your domain(s) of interest.

External packages are harder... Google searches help, but the simplest thing is often to ask “is there a module for Y” here or on StackOverflow if Google-fu leads you nowhere."
5,"So you’re just trying to print the individual items in the matrix in reversed order?

    from itertools import chain

    for i in sorted(chain.from_iterable(matrix), reverse=True):
        print(i)

Or, with no imports:

    for i in (i for j in reversed(matrix) for i in reversed(j)):
         print(i)

Either should work, though arguably the explicit two-for-loop is the more readable alternative."
5,"The Python syntax is quite common and shared with lots of languages that start with an index of 0... this is not at all unusual and nothing is “suddenly” happening, you’re just slightly confusing two very different operations.

In the _index_ syntax `thing[i]` (notice no colons) the value for **i** must be a valid index into **thing**. Since Python is 0 indexed that means it must necessarily be one of the positive integers in `range(len(thing))`, **or** it can be a negative integer such that `len(thing) + i` is one of those same positive integers.

This has the nice property of making this form _always_ legal:

    for i in range(len(thing)):
        print(thing[i])

Precisely because **i** will obviously be one of those positive values.

None of that is true of the _slice_ syntax `thing[start:stop:step]` (notice colons), which is basically doing this:

    while start < stop:
        if start in range(len(thing)):
            yield thing[start]
        start += increment

As you can see neither **start** or **stop** value is _necessarily_ a valid index into the list at all; they’re just arbitrary integers (with one proviso: increment cannot be 0). In fact none of the three even needs to be provided:

    thing[:]

... returns a copy of **thing** because the default for **start** is 0, the default for **stop** is `len(thing)` and the default for **step** is 1.

Basically it’s a choice that languages have to make... should `thing[0:10]` return 10 items that stop at 9, or 11 items that stop at 10. Most languages I’ve used chose the former."
5,"> why is this a thing? python forces format with tabs so you should always know when you have a line in the main part of the script instead of a function. is this just a ""style"" preference that's carried over from languages like C?

It’s borrowed from C good form, but in Python it’s mainly to do with the two distinct ways your module can be run. Both importing a module and explicitly executing it will run all global / root indent level code... by segregating your “executable” logic behind a name guard you ensure that it’s safe to import without side effects. It also immediately flags the script as an executable rather than a library."
5,"Notebooks are great for demonstrating small snippets of code, but they don’t constitute a sensible way to distribute complete code. They’ve asked for your code to present either a CLI or GUI as if it were a production tool, which basically means they expect to be able to download your repo, install any dependencies in a virtual environment, then run it. That means a repo for a demo piece should include a README on how to use it, a requirements.txt that allows them to install any external dependencies, and so on. A _truly_ ideal demo piece would be installable with just `pip install your_demo_package` as that demonstrates a much wider range of skills then is usual in an entry-level Python programmer."
5,"Ok so basically just don’t worry about policing the contents of what the user types right now. For one thing it’s impossible for **i** to ever be None in your code as it exists, and for another it will just slow you down for now. You can clean up user inputs when you get the logic right, until then you’ll be the only one making inputs, so don’t input digits.

    import json

    with open('words_dictionary.json') as f:
        data = json.load(f)

    for word in input(""Insert Phrase Here \n"").lower().split():
        wurda = data.get(word, word)
        print(""{} -> {}"".format(word, wurda))

This will print the word and it’s translation, and if no translation is found it will print the original word as the translation."
5,"Since the formatting is completely broken and I can barely read it, no. Look for where you’re using **i = input([...])**.

Currently you’re expecting **i** to be a strong with a single word in it. That’s not a good assumption; **i** will be any string the user types. If you **str.split** that string it will split a sentence on newlines, leaving you with a **list** of individual words (which will mean any characters that are not whitespace). But the odds are you’ve got a more complicated problem then that, as you’ll want to deal with punctuation as well."
5,"There’s a reasonable chance they don’t use Jupyter internally. Never make it harder for a recruiter — who very well may know nothing about code — to look at your work. Their “details” link is dead but if they didn’t specifically suggest a Jupyter notebook I’d say that might work against you right off the bat. They suggested Github, so a bunch of .py files in a well structured repo is what they’re expecting to see.

Also if they really like PEP-8 than your variable names might annoy the hell out of them. Never underestimate how easy it is for people to get annoyed by non-standard style choices. I’d go so far as to say any code sample you send to a company should pass `pylint` with none of the default warnings disabled and a 10/10 rating.

Personally I would also remove all the Hungarian Notation for a similar reason... you never know who a “bad” style habit of yours will irk. Assume that if your code sample ever makes it _past_ the recruiter it will go in front of someone who can figure out that **thingString** and **items_list** are a **str** and a **list** respectively and without your help."
5,"Try:

    print(input(“Enter a sentence: “.split()))

The **input** function just accepts whatever your user types before hitting enter, so a sentence is fine."
5,"Yeah that should be the logger call where you just do `+ l`, you’d want to do `+ “ “.join(args)`. You’ll need to adjust all your code to **args** being a tuple of strings."
5,"What do you mean precisely by “it won’t work”?

From what I can see here both of those should behave as if `sendCommmand ls` were called, ignoring the extra flag. And that’s sensible since **com** will always be the first item in sys.argv, which will be “ls” in both cases.

I’m not sure why you’re popping a single value off sys.argv here if you intend to pass the entire command along.

Because **run** expects a list your signature should probably look like `def sendCommands(container, *args)` and you’d need to extend your base command with **args**. You’d then call your function with `*sys.argv`.

As to how to improvise it:

1. Move all the business logic into a **main** function and call that within a proper `if __name__ == “__main__”` guard.
2. Use PEP-8 naming conventions (ie no **dromedaryCase** or single letter parameter names).
3. Don’t mix logging and **print**... you can configure your logger to print to stream as well as to file. You can also have the file filter out messages if need be.
4. Use **argparse** for your CLI... it can validate arguments for you."
5,"I’d use:

    list(chain.from_iterable(nested))

It’s simple to understand, memory-efficient, and less complex than the comprehension required to achieve the same result."
5,"It’s helpful to not name your variables so they shadow builtins like **list** and **dict**... that just makes your code a lot harder to read.

Also this seems about the most straightforward form:

    m = max(d.values())
    choice([k for k in d if d[k] == m])

Though if **d** were really large it might be more efficient to build your population on the fly:

    max_v, population = 0, []
    for k, v in d.items():
        if v < max_v:
             continue
        if v > max_v:
             max_v = v
             population.clear()
         population.append(k)
    choice(population)

Though I’m talking quite large."
5,"I once had to explain basic covalent chemical bonds to a fellow student who was falling behind... the valence she’ll diagrams were giving her such trouble. Eventually I hit on sigma-bonding being an arm-outstretched handshake and pi-bonding being an arms spread hug and it just clicked for her.

You _never_ know what metaphor can work for any given individual on any given subject, but for every student and every subject there’s a metaphor that will _work_... trick is finding it before the heat death of the universe."
5,"There’s several ways to approach this, and some shortcuts it k is 1 or is larger than the number of values in the list. I’d start by looking at the source for **heapq.nsmallest**, though that doesn’t consider uniqueness."
5,"Well Falcon is intentionally more narrowly focused than Django and Flask in that from the service’s POV the front-end _is_ the JSON data the API returns... what some other front-end service then does what that data isn’t something the API itself knows or cares about. It’s goal is to serve JSON data as quickly as possible, not render and serve HTML.

Now if your front end was static HTML with client-side JS that queried for and displayed API data in a prettier form — aka a [jamstack](https://jamstack.org/) app — then sure, it would work, as Falcon would remain content to just do the job its good at, leaving the actual front end work to the browser itself in this case."
5,"There is such a thing as a CSV injection attack, but it usually involves opening a maliciously-crafted CSV in a program like Excel or Google Sheets or Numbers that will automatically attempt to format and evaluate the data in a cell as if the user had written a legitimate function into that cell.

Python’s own CSV module does no such thing, it just gives you back the raw data without attempting to format or evaluate it... so unless your app then proceeds to **eval** it there’s not really any direct risk.

Now if your app offers an export to csv function that allows someone to craft the contents of just such a malicious file that they knew would then be opened in Excel, etc, that could be a vector."
5,"You certainly can use pure python, though a framework will make your life a _heck_ of a lot easier.

Maybe consider comparing other framework options as [this guy did](https://fgimian.github.io/blog/2018/05/17/choosing-a-fast-python-api-framework/) first? There are definitely other options out the with different focuses and approaches. For strictly-API microservice writing I’ve been hearing a lot of good things about [Falcon](https://falconframework.org/), which has very few dependencies and is quite narrowly focused. If you’re already comfortable with and like Flask’s decorator-heavy ergonomics then [Hug](http://www.hug.rest/) seems to be aimed at giving Falcon a similar feel without adding too much cruft."
5,"Sure; **split** is a _method_ of the **str** _type_, and you can alway create something similar by making a _class_ of your own:

    class Thing:
        def bar(self, some_param):
            print(self, some_param)

    t = Thing()
    t.bar(22)

A _bound method_ of a _class instance_ is a method that takes the instance itself (conventionally represented by the **self** parameter) and acts on it in some way."
5,"Can you describe what your script does generally? Specifically how you run it, how often, how long it says running, etc. It might help focus the advice. Amazon has an enormous number of offerings from running a full server on EC2 to serverless reactive functions on Lambda, each appropriate to different tasks and with various options in between.

Assuming you're currently running a full self-managed EC2 instance and ultimately just kicking off your Python process with `python -m your_module` or something similar than the experience on a Linux instance is going to be broadly identical but at lower cost, once you've gotten the instance actually up and running.

But depending on what your app is doing there might be better solutions."
5,"Python also runs fine on Linux, so if OP's script doesn't _rely_ on Windows and is going to be running on an instance on AWS _anyway_, why should OP pay more for every moment it's up? That's the point OP's friend was trying to make."
5,"They've got a lot of open issues that aren't on the hard end; any that get a successful PR just opens up resources for the hard ones, so contributing is still worth considering."
5,"None that I'm aware of. My hope is that pipenv improves rapidly, but to do so it needs more contributors. Poetry has split the pool, and to a certain extent seems to be doing better on the popular opinion front, as _any_ time pipenv fails it gets loudly and publicly kvetched about, usually with an answer from someone in the peanut gallery about ""just use poetry"". Problem is they really did start and continue to be influenced by nearly opposite focuses. The pyproject.toml specification that Poetry leverages is aimed at specifying and locking _library_ dependencies -- as well as allowing alternative build tools -- and its focus is very much _not_ on helping you build a virtualenv for development or deployment. In fact it sees pypi as the natural and to a certain extent only deployment endpoint of anything you write for it... Poetry exists to make it easier to make and build pip- (and by extension pipenv-) installable libraries, so sure it incidentally helps the library developer create a virtualenv to that end, but that's ancillary to the goal, which is easier packaging into a wheel for distribution via pip.

Now pipenv instead attacks the Pipfile, which is the evolution of requirements.txt, which was really intended to allow you to specify the dependencies of an _app_ in its runtime installation. It sees deployment to pypi as  just one of many possibilities, and doesn't care as much about build-time dependencies, it's all about marshalling your environment into a state where it can run your app's body. It also leverages virtualenvs but in a different way and aimed at different (it not necessarily conflicting or contradictory) concerns.

So given when you're describing as your use case pipenv is likely the choice that will trend towards getting better for you quicker. But consider improving it, I know the team involved has mentioned several times their openness for good pull requests."
5,"Yeah, you'll find you're simply asking too much of one tool. At least at this stage.

First, **pyenv** is an outlier; the work of **pyenv** doesn't involve dependency management, it's there to bootstrap interpreters and to manage getting its user-configured shims into the PATH before any existing interpreter. It can't itself be written in Python because it's job needs to be done before a local copy of Python even exists. It also precedes anything having to do with the concept of virtual environments. And its bread and butter requires it to ""own"" at least its interest in your PATH, so I'm not sure how you could get around that and still have its functionality. Even if you could it will almost certainly remain a distinct tool for a distinct problem that later dev tools might leverage, but not replace.

The core problems both **poetry** and **pipenv** are trying to address are mitigations of issues that derive from the mess that is Python packaging and distributed development of those packages with virtual environments. Both involve some level of dependency resolution,  but neither is meant to me a general purpose package manager for Python virtual environments. The former is really trying to make **setup.py** easier, the latter is trying to make **requirements.txt** more sensible, and both happen to leverage virtual environments to attain their goals, but neither sees virtual environment management _as_ their goal. Instead their goal is to help you shape what the final minimal requirement set is and to manage getting that requirement set installed, possibly Incidentally into a virtual env.

Now I agree Python needs the single tool you're talking about, but it's a fairly large evolutionary step from where we're at. These two projects improve on **pip** -- which doesn't really even consider conflict resolution beyond the most trivial level -- and they'll both have to be improved upon further. They -- especially pipenv -- take their inspiration from Ruby's rbenv and parts of Rust's cargo, but neither of those does everything you're asking for either (and neither does anything of what **pyenv** does).

Eventually we'll need a toolchain manager, a package manager, and a configuration manager just to keep up with other languages... but these are big ideas and hard problems requiring lots of resources and all three of **pyenv**, **pipenv** and **poetry** are still smallish projects without a lot of contributors."
5,"Well, as of right now dependency constraint solving is considered NP-Hard -- there's likely no efficient algorithm that works in all cases -- so odds are very good this problem will never be ""solved"".

The algorithm currently used by Pipenv doesn't appear to be very sophisticated. You need backtracking to deal with conflicts in dependencies that get added during the solve, but adding backtracking without blowing up the amount of time _all_ solves will take is hard. Since most simpler solves don't require backtracking, that's a large price to pay. Poetry has added backtracking with some form of lazy-processing of dependencies that might keep it reasonable, but yeah the error messages for a failed solve are kind of gibberish. The latest algorithms seem to be using something called conflict-driven clause learning to do a much better job of solving for the conflicts, and have the added benefit of being much more clear about the cause of failure, but I haven't seen any Python package that does that yet.

Yeah it'd be great to have this fully automated... but it's a ways off."
5,"Ok, looks like you're running into one of the (many) potential conflicts that require a backtracking solver, which pipenv has [not yet implemented](https://github.com/pypa/pipenv/issues/2596).

Have you tried **poetry**? According to that discussion it may be able to handle this situation."
5,"Ok, but if I'm interpreting what you've said correctly and you've specified _explicit_ versions of flake8 and autopep8, the authors of which have released versions that have mutually incompatible dependencies, then _how_ could **pipenv** resolve that for you? Or how could you resolve it manually, not matter how much time you took?

Given what you seem to have described above your best bet is to downgrade autopep8 by just specifying that you need the package but not specifying a version, ie `autopep8 = ""*""`. "
5,"I mean this is the problem that things like **pipenv** and **poetry** (partially) exist to solve... but there's no solver that can find a resolution to the problem you've described above, as they've both precluded any form of overlap."
5,"Mutating global variables like this is a bad idea, and will lead you to all sorts of hell down the line.

Instead pass an argument to your functions.

    def add(inventory, item):
        print(""Found a "" + item +""..."")
        if item in inventory:
            print(""Meh, already got one!"")
            return False
        print(""Stashed it!"")
        inventory.append(item)
        return True

    def remove(inventory, item):
        print(""Thinking about dropping a "" + item + ""..."")
        if item in inventory:
            print(""Hot potato!"")
            inventory.remove(item)
            return True
        print(""Don't have one!"")
        return False

    inv = []
    add(inv, ""sword"")
    add(inv, ""sword"")
    remove(inv, ""sword"")
    remove(inv, ""sword"")

Now those will result in exclusive inventories... you can only ever add an item once.

A more flexible idea would be an inventory that automatically counts itself... but a **list** isn't a great choice for that, instead use a **dict**:

    def add(inventory, item):
        inventory.setdefault(item, 0)
        print(""Found a "" + item +""..."")
        if inventory[item] >= 2:
            print(""Meh, already got two!"")
            return False
        print(""Stashed it!"")
        inventory[item] += 1
        return True

    def remove(inventory, item):
        print(""Thinking about dropping a "" + item + ""..."")
        if inventory.get(item):
            print(""Hot potato!"")
            inventory[item] -= 1
            return True
        print(""Don't have one!"")
        return False

    inv = {}
    add(inv, ""sword"")
    add(inv, ""sword"")
    add(inv, ""sword"")
    remove(inv, ""sword"")
    remove(inv, ""sword"")
    remove(inv, ""sword"")

Now you can use **if** statements in your functions to see if a specific item count exceeds a specific value and then reject it.

This is much nicer because it'll collect things like good pieces together, instead of ending up with a list that includes hundreds of individual ones.

Now, notice how all those functions have to have the **inventory** as the first argument? That's a hint that your inventory should probably be a _class_ of its own, but that may be too big of a leap just yet for you so try to build on something like the approach above first."
5,"A class can have three kinds of methods:

    class Foo:

        def instance(self):
            print(self, ""instance"")

        @classmethod
        def class(cls):
            print(cls, ""class"")

        @staticmethod
        def static():
             print(static)

All methods are _instance methods_ unless decorated with **classmethod** or **staticmethod**.

All instance methods _must_ receive an instance of the class as their first argument (that's what **self** is). They are usually called as _bound_ instance methods, meaning they're called using the instance they're attached to using the ""instance dot method"" form, where the instance on the left of the dot is implicitly passed as the first argument to the method on the right of the dot.

    f = Foo()
    f.instance()

However instance methods can also be _unbound_ and called via the class. This is quite rare, but is allowable, though they still require an instance as their first argument.

    f = Foo()
    Foo.instance(f)

Now _class_ methods are a bit different; they also require a first argument, but this time that argument (the left side of the dot) must be the class itself:

    Foo.class()

This is to allow for methods that apply to the class as a whole... a very common case is factory functions that take some kind of arguments and return an instance of the class. The odd thing are class methods can also be called on an instance:

    f = Foo()
    f.class()

This works because of the **classmethod** decorator... Python knows that this is a class function, so when called with an instance the method automatically uses `f.__class__` as the first argument instead.

That leaves _static_ methods,.. these are really just a way of taking a normal function and attaching it into a class namespace for organizational purposes. The decorator tells Python to simply not pass whatever is on the left or the dot into the method at all... the static method knows nothing about the class or instance and so cannot act on either directly. These are relatively rarely used, as generally it makes more sense to simply have a function in a module rather than a function in a class in a module, but they do come up occasionally."
5,"Well now this is why I included the loop to begin with. Typically you don't want to read just any one specific line, you want a general way of doing things:

    def nth_line(path, nth=1):
        index = nth - 1
        with open(path) as src:
            for linenum, line in enumerate(src):
                if linenum == index:
                    return line
                if linenum > index:
                    break
        return None

    x = nth(YOUR_PATH, 2)

Now **x** will either be the second line of the file or it will be **None** if the file were shorter than 2 lines.

This is the problem with solutions that use **next(src)** and **src.readline().rstrip()**: the first will throw an error it the file is too short, the second will give you back an empty string (that looks like an empty line) even if the file was too short, while with `file.readlines()[2-1]` approach will error if the file was too short _and_ will use up the entire file's size of memory if it's too long."
5,"Hmm, good point... I was visualizing the rotation wrong.

Interestingly though neither of our interpretations would allow **product** to function with **tee** at all, so since I've seen it work for years I looked under the hood.

The first thing the **product** function does is creates a tuple our of each of its input arguments... immediately exhausting first the left hand copy of the tee, then the right hand copy. Since the docs say the underlying implementation ""does not build up intermediate results in memory"" is assumed it did not do that and treated each argument as an iterator, pulling one item in via **next** as required and _somehow_ managing the rollover.

Instead it just keeps repeating the items in the further right arguments until the furthest left element has rolled over, odometer-style.

Don't think I've ever tried to pass an infinite generator into **product**, so I never noticed that would suck up all your memory. Interesting. And implies that there are actually situations in which the nested for loops would be superior."
5,"Agreed, and stupidly forgot about the **readline** method... goes to show how rarely you ever need to read just a single line from a file in real life."
5,"Sure, I just didn't want to introduce an entirely new concept into the mix. Explaining **next** usually involves a **for** or a **while** and an explanation of **yield** and possibly an introduction to the whole concept of the iterator protocol, and why it is you _can't_ use **next** for all _iterable_-s but can use it for all _iterator_-s."
5,"The issues with **tee** don't really come into play here, as they'll both be exhausted at the same moment (you won't pass z in the first iterator until the moment you pass z in the second), and they're both started at the same time. So basically the two caveats with **tee** cant crop up."
5,"Assuming the file at YOUR_PATH actually exists:

    with open(YOUR_PATH) as src:
        for line in src:
            x = line
            break

And **x** will now be the contents of the first line of the file. Note that it _will_ contain a newline character at the end (it will read ""line contents\n"", so you might need to strip that off, which means that **x** may be an empty string after stripping, if the file was empty or started with a blank line.

You could even simplify it:

    with open(YOUR_PATH) as src:
        for x in src:
            break

You can also use the **src.readline** method:

    with open(YOUR_PATH) as src:
        x = src.readline()

It will also leave the newline in place though.

**EDIT**: Bloody heck, forgot about the **readline** method it's used so rarely."
5,"Your **guess** is a _string_, that means you need to compare it to a string:
   
    if guess == ""turtle"":

And **print** -- not **Print** as you've written once above -- is a _function_; you call a function by putting the arguments (if any) to the function in parentheses that immediately follow the function name:

    print(""You picked an animal"").

BTW, there aren't that many words to remember, right off the bat. Python has 33 keywords: **False**, **None**, **True**, **and**, **as**, **assert**, **break**, **class**, **continue**, **def**, **del**, **elif**, **else**, **except**, **finally**, **for**, **from**, **global**, **if**, **import**, **in**, **is**, **lambda**, **nonlocal**, **not**, **or**, **pass**, **raise**, **return**, **try**, **while**, **with**, and **yield**... that's a lot less than most programming languages.

Combine that with the 68 functions/types (skipping Exceptions) you will need to know over time in the _builtins_ (**abs**, **all**, **any**, **ascii**, **bin**, **bool**, **bytearray**, **bytes**, **callable**, **chr**, **classmethod**, **compile**, **complex**, **delattr**, **dict**, **dir**, **divmod**, **enumerate**, **eval**, **exec**, **exit**, **filter**, **float**, **format**, **frozenset**, **getattr**, **globals**, **hasattr**, **hash**, **help**, **hex**, **id**, **input**, **int**, **isinstance**, **issubclass**, **iter**, **len**, **list**, **locals**, **map**, **max**, **memoryview**, **min**, **next**, **object**, **oct**, **open**, **ord**, **pow**, **print**, **property**, **range**, **repr**, **reversed**, **round**, **set**, **setattr**, **slice**, **sorted**, **staticmethod**, **str**, **sum**, **super**, **tuple**, **type**, **vars**, and **zip**), and it's not too big a task at all."
5,"The answer is ""it depends"".

Usually, no. When a python interpreter session reaches and imports a module that module is compiled and then reserved in an in-memory cache in **sys.modules**... any further imports of that module, even in a tight loop, will just re-use what's in the cache, so changes to the file on disk will not effect the running program.

_But_... the running code could use **importlib.reload** (or just **reload** in < 3.4), and then it _would_ pick up the changes. _Sort of_... it gets complicated because global names in the file that were removed will not be removed from memory, as well as other weird side effects.

Also if any of the running code monkeys with the import system itself on other ways (like messing with **sys.modules**) then it's pretty much impossible to predict if changing the code on disk will matter or not.

But _usually_ the answer is no."
5,"For clarity combine **product** with **tee**:

    from string import digits, ascii_lowercase as letters
    from itertools import product, tee

    codes = ["""".join(p) for p in product(digits, *tee(letters, 2))]

Though I would usually use a _generator_ comprehension rather than a _list_ comprehension to save keeping all 6760 codes in memory at one time."
5,"Amy chance you're on Python 2? If so use **raw_input** instead of **input**.

That error usually crops up when you try to **eval** a string that's missing a quote inside it. In 2 **input** was basically `eval(input())`."
5,"The approach at **exercism** is to give you an introduction to the problem and some tests that represent a minimally-functional solution to the problem. You run the tests and you read the failure message and you write whatever code is required to pass that test then you rerun the test. Repeat until all the tests pass.

This is the basics of Test Driven Development (known as TDD), which is a ""best-practice"" approach to development in the real world, where you decide you want to add a feature to a program and so you write tests that describe that feature (at the simplest level, given these inputs I expect this output) _before_ you start to implement the feature... when the tests pass, you've implement your feature.

In the Python track it's best to use **pytest** to run the test suite against your code. Running `pytest -x` in your exercise directory will run until the first failing test is found, which is ideal for the above approach.

Now, fair warning, I'm one of the Python mentors... we won't accept something that _just_ passes the tests, because you could simply look at the tests and write a big **if** statement that takes the exact inputs given by the test suite and returns exactly the expected output. We expect you to think about the problem and write a _general_ solution, which we'll help you improve.

Unfortunately some of the exercises are written a little vaguely for Python itself, since the same exercise is used across multiple language tracks. 

In this particular case you've got to implement four functions, each of which represents a different approach to error handling:

1. **handle_error_by_throwing_exception** -- when called this method should throw an exception with a message... doesn't matter what exception or what message, this one really just demonstrates that you know how to throw an exception in Python.

2. **handle_error_by_returning_none** -- this is slightly more complicated; multiple inputs are given and in some cases you're expected to successfully return a value, and in others cause do something with the input that causes an exception to be raised, but then successfully catch and silence that exception so you can return **None**. Basically you want to handle `int(input_data)` failing when **input_data** isn't a valid integer. This demonstrates that you know how to catch an exception in Python.

3. **handle_error_by_returning_tuple** -- an alternate approach to handling errors... in this case you want to return `(True, input_data)` for good data and `(False, None)` for bad data.

4. 
**filelike_objects_are_closed_on_exception** -- in this case you just need to ensure that the given **filelike_object** has its **close** method called regardless of whether or not an exception occurred. This is to demonstrate that you know how to safely open a file and ensure you don't leak file handles in an error case.

Hope that helps. This exercise is fairly trivial in Python because it has some pretty simple tools for all these cases, so the actual implementation should be pretty short and simple.

And no, tasks aren't usually this vague, but they can be worse."
5,"Neither of those is well served by global variables, and definitely not by shared global variables that live in one module and are modified by others.

For the first case; the configuration of a program is a run-time constant, there should be no need for it to be modified by other modules. The usual practice is to put the user-configurable values in a dedicated file (normally in YAML, TOML, INI, JSON or some other common format, as you wouldn't want to force the user to configure the application by writing or even knowing Python), then load that into a single point that all your modules, functions, etc only ever read from. This _can_ be assigned to a global name (though it's more normally assigned to a local name in the main function or master class that controls your program), but it is _not_ treated as a variable, because that name is never re-assigned and the configuration values within it are only read, never modified. Which means the **global** keyword is never used and there's never any call to worry about modifying its values from any other module.

The second case is the domain of a class. You make an instance of that class and you pass that instance as an argument to whatever function in whatever module needs it. At the very simplest level you use a **dict** for this. You again never need to re-assign to the same name, so **global** is never needed. Eventually you'll realize that you write a _lot_ of functions whose first parameter is always that class instance... this is a hint that those functions should be bound methods of that class.

I can't remember the last time I used the **global** keyword, and I've been coding professionally with Python for at least ten years now. I have never, not once, run into a case in which what you describe above is a good or necessary approach to a problem. Global _constants_ are fine and useful, but global _variables_ are virtually always something that indicates a poorly written piece of code that's in need of rethinking."
5,"Not to be flippant, but _why_ would you _ever_ want to do that?

One of the things you'll learn early in your Python career is to avoid global variables and shared state wherever possible. And that's within a single module... you _definitely_ want to avoid it across multiple modules.

Can you explain a real world scenario in which you're trying to use this?"
5,"You will never, ever, ever actually need to make a distinct variable for every letter in a string.

Instead you'll use loops and indexing.

For an ASCII Morse converter you'd first create a **dict** that mapped each letter and number to its Morse equivalent (I'll only type out the first and last here):

    MORSE = {
        ""A"": ""•–"",
        [...]
        ""0"": ""–––––"",
    }

Then you'd loop through your input and lookup the Morse value for each, appending that to your output:

    output = """"
    for c in input(""Enter a phrase"").upper():
        output += MORSE.get(c, c)
    print(output)

Now, that will leave in place any character in the input that is _not_ in the MORSE global, so you'd need to consider if that's the right thing to do with unrecognized input, but this is a typical way to approach dealing with strings and lists and other collections of indeterminate length."
5,Fundamentally no... if you could do that you'd be breaking out of the sandbox iOS runs all apps in. You can't use subprocess or any other means of forking or creating a child process.
5,That will fail. The sandbox Pythonista operates in cannot access underlying system commands. Any **os.system** call will just silently fail with a non-zero exit code.
5,"Since **requests** uses **urlib3** that in turn uses **http.client**, I'd say that **http.client** is _still_ successful. Not at all friendly in light of work that came later, but still very much successful in that it remains in use and its promises are a core part of the whole ecosystem.

And I didn't suggest that a beginner investigate the entirety of the stdlib source, I gave them some specific packages that I keep coming back to as good examples of how to approach some gnarly low-level problems."
5,"Right, so obviously it varies widely from project to project, but _most_ Python projects you'll be interested in are `pip`-installable, and they tend to have a somewhat similar base structure.

So using [requests](https://github.com/requests/requests?files=1) as an example, you see a lot of stuff in the root, but there's only a few that you typically want to concentrate on.

1. The README will either be the documentation or will lead you to it. It will also usually describe the license and contribution guidelines if any, though these might also be in their own LICENSE and CONTRIBUTING files... all of these may have various extensions, but they're typically text files or Markdown these days. The README is always the starting point, and all the other ALL_CAPS files tend to be _about_ the project.

2. The **setup.py** file is what's actually used to build the project for upload to pypi, and is also what you'd use to directly install from source. This can be very useful for understanding the dependencies of the project, as well as what is installed with it. In some newer projects that have chosen to use [poetry](https://poetry.eustace.io/) you will also (or often only) find a **pyproject.toml** file... this basically do the same job by managing the creation of the **setup.py**, but in a more elegant and deterministic fashion.

3. Either a **requirements.txt** or in more modern projects that use [pipenv](https://pipenv.readthedocs.io/) a **Pipfile** and/or **Pipfile.lock**... if these exist they represent the dependencies of the project and are used to create a _virtual environment_ for the project on your machine that is used by everyone developing the project itself. Confusingly **poetry** projects may have a **poetry.lock** file instead that does the same job. There's a bit of a war going on in Python packaging, and no one has won it yet.

3. The **tests** file or directory (which hopefully exists) holds all the unit tests for the project. These are not typically installed with the project itself, but if you download the source you can run them to verify the program works. More helpful to the reader though the unittests do a _very_ good job of explaining the usage of the program and the expectations it's various units have. Don't go to it first, but go to it at some point, especially if you ever have questions about the program that aren't answered in the documentation or obvious from the source itself.

4. The source... this will typically be either a Python package named for the project itself (the **requests** directory here), or it may be inside a **src** directory that itself holds the package or single **.py** files. In some very small cases it might actually be as basic as a single **[project name].py** file.

Once you start looking at the source it gets complicated, because it's up to the author how they decide to structure the program. In packages look at the contents of the root `__init__.py` first, as that will typically be used to assemble the actual public API of the program... what it imports and where it imports it from will be the breadcrumbs that lead you through the various primary files. What they in turn import will help you see the rest of the support structure of the program. It all depends on how deep you intend to dive, and how big the project is.

In the case of **requests**, you'll find that it reads pretty naturally... all the files are well named by what they contain, and everything is quite well organized without a lot of ""junk drawer"" files and folders. This is what a package looks like that's been refactored and improved constantly by people who take care and pride in their work.

Sadly _many_ packages out there don't remotely come close to that standard, and over time you'll learn to recognize what smells bad quickly. Unfortunately reading code is a bit of an art that you pick up by practice, but on the good side if you practice it a lot it will teach you to always write your best code first, and to always be willing to apply new things you learn back on to your older projects.

Hope that helps."
5,"Sure, but I'd argue that's a feature, not a bug, of reading the standard library. All successful code will eventually enter maintenance-mode and it's API will freeze and iteration and no more baby-and-bathwater rewrites will become the name of the game. Arguably the more successful a given library is at doing its thing, the quicker it will get there... seeing that progression and what awaits your best code is quite educational."
5,"Sorry, do you mean literally _how_ do you read it (hit the View Code link on the repo main page), or how do you _approach_ reading it?"
5,"Crazy pricy and heavily focuses on a specific stack... I did [this one](https://www.udemy.com/share/100026A0sed1pXQn4=/) a while back and it was pretty good and well reviewed. Not sure if he's updated recently.

They're always putting sales on, shouldn't be more than $19.99 USD. $149 is nuts."
5,"As I said I'd recommend a course on Udemy; just look for ""full stack web"" and ""web bootcamp"" and look for one that's recent and highly rated.

The reality is that back end is a _huge_ topic compared to front end work, mainly because the front end is quite constrained by what the browser knows how to work with natively (HTML, CS, JS), while the back end can essentially be written in _anything_ that can send a stream of bytes over a socket.

That said don't let the size of it stop you, learn to code progressively, building on top of what you learned before. Personally I'd start with a much more basic web app than an e-commerce site...  say something like a calculator. Less moving parts.

A _very_ good series of tutorials that can move you through a simple mix of front and back with **flask** is the excellent [Flask Mega Tutorial](https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world)... that'll get you a taste of what's required without diving into the truly hairy world of customer personal and financial data."
5,"Woops, that should read `normalized.resize((256, 256)).save([the rest of the line])`, instead of the **resize** on one line and the **save** on another."
5,"Just add them to the **planets** list how you want them capitalized in the file name... the dict builds itself from that list. The prompt might get pretty ugly though. The thing you don't want is to make it harder for your user to enter things correctly.

BTW in the real world I'd never do this with **input** at all... I'd use **argparse** and add an argument that would accept the names of planets and moons, and use the **choices** argument to that argument to make sure the user entered a valid body name.

Surprisingly to a lot of people **input** is very rarely if ever used in professional code."
5,"I've always considered [requests](https://github.com/requests/requests) to be a very good example of Python. Kenneth Reitz is relatively opinionated but not egregiously so and his code is always clean... that said it's been around for a while so you get kind of a snapshot view of best practices for something that bridges Python 2 and 3, rather than what he'd likely write today on a greenfield project.

Also don't skip the standard library... I've learned a lot reading **re**, **itertools**,  **logging** and **subprocess**."
5,"First, you're not calling **sys.exit** do it can't do anything at all... you'd need to do `sys.exit()`.

That said your code as written will never reach that point. If the user inputs ""Exit"" then you'll call `make_normal(""Exit"")`, which will likely error out since that file shouldn't exist. Only if it doesn't error out would you hit **continue** -- which is actually unnecessary here, a while loop automatically continues at the bottom of the indented portion of that loop -- then proceed back to the test, at which point you'd print about the program ending followed by _not_ calling **sys.exit**.

That said your program would then immediately exit anyway, as **sys.exit** isn't really necessary at the bottom of your main program unless you want to exit with a specific return code.

BTW, there's a reason why I put all the planets in a dictionary in which the keys were all lowercased... that way the user need only type the right letters, not the right case as well. Plus I made it so the user would _have_ to enter a matching planet.

What you'd want to do is add `lookup[""exit""] = ""Exit""`, then _before_ calling **make_normal** you'd:

    if planet == ""Exit"":
        print(""Exiting"")
        sys.exit(0)

And although 0 is the default returncode I make it explicit to indicate to anyone reading that this is _not_ an error state and that the program ended normally."
5,"If there aren't an unusually large number of arguments the indices only serve to make the format string longer, so leave them out _unless_ you're using them to repeat or change order."
5,"This is kind of painful to look at.

Allow me to introduce _functions_:

    from PIL import Image
    
    def normal(image, box, angle):
        return image.crop(box).rotate(angle)
    
    def make_normal(planet):
        image = Image.open(f""{planet}baked.png"")
        variants = {
            ""yp"": normal(image, (512, 0, 1024, 512), 90),
            ""zn"": normal(image, (0, 512, 512, 1024), 180),
            ""xp"": normal(image, (512, 512, 1024, 1024), 180),
            ""zp"": normal(image, (1024, 512, 1536, 1024), 180),
            ""xn"": normal(image, (1536, 512, 2048, 1024), 180),
            ""yn"": normal(image, (512, 1024, 1024, 1536), 270)
        }
    
        for variant, normalized in variants.items():
            normalized.save(f""{planet}-512-normal-{variant}.png"")
            normalized.resize((256, 256))
            normalized.save(f""{planet}-256-normal-{variant}.png"")
    
    def main():
        planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Neptune"", ""Uranus""]
        lookup = {p.lower(): p for p in planets}
        planet = None
        while not planet:
            planet = lookup.get(input(f""Choose one of {', '.join(planets)}: "").lower())
        make_normal(planet)
    
    if __name__ == ""__main__"":
        main()

Should work since you're on 3.6, though I don't have Pillow on my machine."
5,"Since you're on Linux and assuming that you know the name of some executable that would necessarily be present if the program in question were installed, you could just see if `shutil.which(YOUR_BIN)` returns anything but `None`."
5,"Assuming you're using JS for all the dynamic work you could store the CSS, JS, and HTML on S3, and IIRC you can use S3 bucket policies to restrict access to your org's own IP addresses. Put your data wherever (Aurora, RDS) and use API Gateway to provide the sole endpoints that the JS uses to GET and POST to ... basically [JAMStack](https://jamstack.org/).

Since you're asking in a Python forum, use that in Lambda to coordinate between the Gateway and the DB."
5,"This sounds like very early days, so let's make sure you're clear on a few basics.

At the simplest level the front end is the HTML, CSS, and JavaScript (and images, videos, JSON /XML, etc)  -- collectively the ""data"" -- that gets served to your user and is then interacted with by your user via the interface of the browser.

The back end is _everything_ that serves that data. You can use Python for _many_ parts of that, but typically you use a multitude of tools written in a multitude of languages. On the Python side you might use Flask or Django to respond to requests, and Gunicorn to serve... or you might let Apache or nginx do the serving. Either way at minimum you'll also need a database (to store customer, product, and transaction data) which _could_ be sqlite3 but will likely be a distinct process like MySQL or PostgreSQL, as well as a filesystem the server can access (to store images, you don't store those in Python and you relatively rarely do in the database, instead you store URLs in the db that point to those images). 

So at minimum you've got a server process, the (likely many) WSGI backend process(es) that it serves, almost certainly a database process, and the computer it all runs on. And that's if you're sure you're going to stay small and want to run everything local.

Your other option is to let someone like Amazon do the lifting for you... you write your (let's assume Flask) app in Python but S3 gets used instead of a filesystem and Elastic Beanstalk actually serves it and Aurora gets used to keep your database running, while you use Lambda to handle infrequent things like user signup and triggering thumbnailing of new product images.

It all depends on just how big you want to be. I'd strongly suggest one of the Udemy courses on full-stack web programming to get an overview of just how deep the rabbit hole can be.

Personally I'd also suggest that if your desire is to get paid to run your business, and _not_ to get paid to be a full stack programmer, then hire someone else or look at something like Squarespace. Not at all trying to be rough, just letting you know that scalable e-commerce sites are _hard_."
5,"The way to do this depends a great deal on exactly what your program is doing and how you intend to run it.

For instance if it's a GUI app using PyQt or PySide or Tkinter or whatever framework those all have dedicated tools for getting keyboard input. While the app window is in focus.

If it's a CLI app with no GUI component than **curses** can do this on Linux and Mac, and there are libraries out there like **keyboard** that can handle it to varying degrees on multiple platforms.

But yeah it really all depends on the context and the needs."
5,"1. If it ultimately transpiles to a static .js file, sure. Just remember that there is no _back_end... you can include anything so long as it runs on the client side.

2. You can include it via local file, sure, or you can just include a link to a CDN."
5,"It's the _set comprehension_, new(ish) as of 2.7."
5,"I'm not creating a dictionary, I'm creating a set. Which is how I'm eliminating duplicated domains.

Issue comes down to what's more important, the original file order or the possibility of duplicate items."
5,"You can still open the file properly and use a comprehension without the double split... here's one that even removes duplicates and handles comments, blanks, and (slightly) malformed domains:

    with open(path) as src:
        filtered = {l for l in src.read().splitlines() if l and not l.startswith(""#"") and ""."" in l and l.split(""."")[-1] not in {""gov"", ""edu"", ""qa"", ""br""}}
    print(filtered)

But, that said, I try not to introduce comprehensions until it's obvious the learner has for long-form loops down."
5,"Don't try to in-place modify a list you're iterating over, instead just build a filtered list:

    to_exclude = ["".gov"", ""edu""]
    filtered = []
    with open(path) as src:
        for line in src:
            excluded = False
            for exclude in to_exclude:
                 if exclude in line:
                     excluded = True
                     break
            if not excluded:
                filtered.append(line.strip())
                
The **with** _context manager_ is the proper way to work with a file, BTW."
5,"Sounds like homework. You need a variable that represents the current value and a variable that represents the current amount to decrement by. On each round of the loop you first decrement by the last amount, then increment what that amount is.

The only trick is making sure the loop exits when the value drops to 0 or less."
5,"Yes for the **assert**; they're meant to verify that your logic is correct and act as a self-documenting statement about the assumptions and expectations of your code... in production usage they should be able to be disabled (via -O or -OO) and not effect the outcome. Because of that ability to be optimized out they're not for validating user inputs, though you'll often see them used (incorrectly) for that purpose.

As for doctests, I would really not go so far as to say they're not that useful... in fact they're dead useful, but only for the parts of your code that are going to get docstrings at all, ie the public surface that forms your API. That makes them unsuitable for testing all the other non-public code that actually forms the backbone. For public code though they're a great mix of both test and documentation and a statement about the interface promises you're making to your users, so if you had a library where every member was public and you didn't need the complex setup and tear down of test data that a harness provides then it's entirely possible you could get away with only doctests. So don't eliminate them from consideration, they're a valuable tool, just not the right one for exhaustively testing complex bits of internal-facing code."
5,"Yes, permanently. A temporary test is essentially useless. The only time it's sensible to remove tests is when the business logic itself invalidates them. Essentially tests should usually just grow over the lifetime of a program.

But let's break some seemingly false assumptions here; tests _should_ exceed the code they're testing, in any language. The Apollo missions launched with _miles_ of code, but they didn't smack into the moon because of _many_ more miles of tests and validation code that supported it. Untested code -- especially in compiled languages with no runtime -- have [killed people](https://en.wikipedia.org/wiki/Therac-25) and lead to pretty much every truly serious bug you've ever heard of. If it didn't fall to a poor password choice, odds are it fell to code that was lacking tests.

So, to flip what you said on your head, are you _sure_ you've been looking at professional code? Or just lazy amateurism that hasn't been proven lethal _yet_?

Basically every language has inline asserts, most have some form of doc testing, as well as harnesses for unit and integration testing and we _should_ be using them all. In _addition_ to those we add static analysis tools, which after all is all a compiler really is. I put it to you that any code that relies on the compiler _solely_ for a proof of its accuracy is neither accurate nor proven.

**So** what should you do in Python? Well, there's an entire ecosystem of testing tools out there. The **assert** statements and doctests are inline tests you write into your source code or it's documentation, but they're both more about explaining your source to someone reading it than they are your primary test suite. For that you use **unittest** and likely one of the external test harness suites out there, such as **nose** and **pytest**. By my own anecdotal observation it seems that **pytest** has won out for most projects, so I'd start there.

In addition to those there's _property based testing_ with **hypothesis**, which is a quite new area for Python but has been well tread in functional languages for years. It integrates well with **pytest** and can shave a lot of size off your test files while also making them much more exhaustive (though also slower).

For static analysis there's the previously mentioned **pylint** and **coverage**, which both can also be integrated with **pytest** via plugins.

But don't take my word for it, punch ""Test Driven Development"" or ""TDD"" into your favorite search engine. If it's been written with decent tests, you'll find what you need."
5,"Testing, testing, and more testing, although static analysis (pylint, coverage, etc) help.

Adding a feature? Add a test. Adding a conditional branch? Add a test. Better yet add the test, _then_ add the functionality.

Also don't be afraid of **assert** statements in the body of your code. Test your assumptions as you make them, then (eventually) remove them by running your script with -O or -OO.

It's a different mindset but the problem you're describing where basic typos and syntactical errors don't get found for weeks and months pretty much inherently means you're not testing conditional branches, as Python will only hit the broken path when it's actually told to go down it."
5,"This is not the purpose of **assert**. The **assert** statement exists to allow you to test that your code is working properly at a specific location, it is _not_ meant to be used as part of the business logic of your code.

In fact if you run your Python code with the -O or -OO all **assert** statements will be stripped from the resulting code, so if your business logic relied on it they logic would cease to work in optimized mode."
5,"Depending on how it's called that setup.py does a lot of things. At minimum it builds a directory structure and installs the package and it's dependencies, which are:

    ruamel.showoutput
    ruamel.std.argparse
    python-hglib
    repo
    readme-renderer

However if you installed it with **pip** you should just be able to run `pip freeze` to see if the above (plus `develop` are installed, then `pip uninstall [each of those]`."
5,"Images (and sound files, etc) can be included [as data files](https://pyinstaller.readthedocs.io/en/stable/spec-files.html#adding-data-files). There's no explicit prohibition against doing so anywhere I've seen in the docs, though obviously it will make the resulting exe potentially _huge_."
5,"That will get a warning from **pylint** for the single letter variable, the use of which _very_ often leads to confusion. Besides, semantically speaking **n** just implies _number_ while not implicit a number of anything in particular. Something like **n_balls** or a very verbose **number_of_balls** would serve the same purpose but be even more clear."
5,"Both of those are _equally_ readable, so of the two the first is better because it removes the overhead of inspecting the length of **balls**. That overhead is _never_ zero, so paying three times the cost is invariably worse than paying it once.

That said:

    score = amount + 2 * amount + 3 * amount

Is:

    score = amount + (2 * amount) + (3 * amount)

Or:

    score = amount * 6

Thus:

    score = len(balls) * 6

Is probably the best choice, as now you've eliminated two calls to **len**, one call to `int.__mul__`, and two calls to `int.__add__` while simultaneously being the easiest to read."
5,"The Zen of Python is emphatically _not_ ""readability trumps all other concerns"", and the reduction in overhead above is nowhere near the ""absolute[...] least important"" concern.

There's no universal gradient of concerns."
5,"Short version:

    map(float, p.split())

But that assumes **p** is always legitimate float values separated by white space."
5,Including links to things like this is a nice idea.
5,"It's a -- relatively simple -- object serialization format. The name is an abbreviation for **J**ava**S**cript **O**bject **N**otation, but its use is _way_ bigger than JavaScript and its become the de facto standard for moving simple objects (which you'd recognize as **dict**s and **list**s in Python) around between processes. As such it's an incredibly common output of web APIs, which is what makes it worth learning."
5,"It's not that weird... all arithmetic comparisons to NaN return False, while != is by default not an arithmetic comparison, but is instead the logical negation of ==. Which makes intuitive sense, if anything can be said to make sense about NaN. No other value is equivalent to NaN, which means that all values are _not_ equivalent to it. That's logically more sensible than every value is both not equivalent to NaN and not not equivalent to it."
5,"Yes, as the inverse of _equality_ comparison, _inequality_ comparison will always return True.

Updated the above to clarify."
5,"It is a float, it's just a float with special properties: `==` comparison to _any_ value will return False, and any mathematical operation with NaN will return NaN."
5,"You mean like so?

    # split matrix
    m = [[1,2,3],[4,5,6],[7,8,9]]
    a, b, c = m
    print(a, b, c)
    
    # list to matrix with g-width rows
    l = [1,2,3,4,5,6,7,8,9]
    g = 3
    m = [l[i:i+g] for i in range(0, len(l), g)]
    print(m)

Bit uncertain if that's what you're asking."
5,"Ok, well as you'll have seen already from others there are dedicated tools and algorithms for this, but a dead simple brute approach in Python would be:

    from random import choice
    BASES = ""ACTG""
    GENOME = """".join(choice(BASES) for _ in range(9000))
    PRIMER = """".join(choice(BASES) for _ in range(25))
    
    
    def windows(string, n):
        start, end = 0, n
        term = len(string)
        while end <= term:
            yield start, end, string[start:end]
            start += 1
            end += 1
    
    
    def score(primer, segment, threshold=0):
        tally = len(primer)
        for a, b in zip(primer, segment):
            tally -= a != b
            if tally <= threshold:
                return 0
        return tally
    
    
    highest = None
    for i, j, w in windows(GENOME, len(PRIMER)):
        if highest is None:
            highest = score(PRIMER, w), i, j
            continue
        curr = score(PRIMER, w, highest[0])
        if curr:
            highest = curr, i, j
    
    print(GENOME[highest[1]:highest[2]])
    print(PRIMER)
    print(highest)
    
Though this ignores any possibility of there being two segments with the same score, though with a completely random genome and primer multiple bits of the same score are actually fairly likely, because the threshold is unlikely to rise about half the length of the primer.

Modify the primer to be an exact substring, or one with known mutations and you can test it."
5,"So for any given primer you want the single span which has the lowest Hamming distance? Or do you want the span and the len - distance score? Or do you want the N spans with the highest score, in case the primer matches to the same distance in multiple spans? Or do you want all spans and all distances in some ordered result?

The best approach would likely be determined by what the precise output needs to be for the overall problem, it's unclear if what you've displayed above is the single desired output for any given primer and genome input."
5,"They mentioned it in their post, there's a requirement for std lib only."
5,"Looking through the [source](https://github.com/tqdm/tqdm/blob/master/tqdm/_tqdm.py) tqdm uses [U+2588](https://www.fileformat.info/info/unicode/char/2558/index.htm) and on partial bars caps the bar with [U+2590](http://www.fileformat.info/info/unicode/char/2590/index.htm), at least for non-ASCII bars."
5,Will do. I was planning on putting the Python related articles up on here anyway.
5,"I'd probably start and end with a simple web-book or series of articles on my blog (which I'm in the middle of building as we speak) ... there's only a few dozen keywords in Python, and a few dozen more builtin functions.

I've had a fascination with this stuff for years... English is my only non-programming language, but that's mainly because it's always intrigued me just how good it is at absorbing ideas and roots from other languages. I mean how can ""zeitgeist"" and ""querulous"" both exist in the same language? And things like ""oar"" and ""ore"" and ""or"" and ""our""... I swear you couldn't design a language to be as murderously hard to master."
5,"The point of SQL injection is that a SELECT isn't necessarily just a SELECT if someone controls what's in the middle of it. That's why the joke in that xkcd cartoon is that the kid is named ""Robert'); DROP TABLE students""... the ""')"" ends a SELECT and the ""; DROP"" starts a DROP... he who controls the content of an SQL query controls how many SQL statements actually happen.

And the problem with trusting DB admins is that they can be bypassed. Imagine a situation in which someone, somehow, increases your script's permissions on that DB -- doesn't matter how, the point of security is to assume the worst case -- now all of a sudden your un-sanitized input is a potentially lethal danger to your organization.

The simplest way to minimize the risk as far as possible is to just always use statement parameterization. You never know how your script will be run at any point, or who will run it... so assume the worst and take the best practice precautions."
5,"I don't believe there's any books, but those three I can cover for you.

1. **raise**: as in raise the alarm (call attention to a problem) ... basically the word means to move something from low to high, or from rear to front, or from small to large, which brings connotations of making it more important or prominent. Comes from Norse and Old English roots.

1. **class**: borrowed mainly from the meaning in biology, as in taxonomy or phylum; a way of grouping things together by shared features, traits and behaviors... this one the Latin, where it basically meant a grouping of similar things, but also implied a vertical ordering of those things.

1. **yield**: taken from both the meaning of ""to give way"" (as in yield to traffic) and of ""to produce"" (as in a farm's yield or yield on investment)... the first because a generator ""gives way"" by not holding on to control flow as it pauses and waits for **next** to be called on it, and the second because it produces a new value each time **next** is called on it. Germanic in origin.

The English language is stupidly complex, borrowing roots from every language it encounters. That keyword book isn't a bad idea at all... I could probably write it pretty quick."
5,"Of course, the api will take whatever parameters you pass in each time... it works just like string formatting, except that it escapes the input properly for SQL... the variables you can re-use however you want:

    from getpass import getpass

    monkey = input(""Email: "")
    ape = getpass(""Secret: "")

    while True:
        cursor.execute(sql, (monkey, ape))

Though that could get very boring.

As for the question of table permissions; do you ever _know_ that your user hasn't been granted those permissions behind the scenes? Wether intentionally, accidentally, or maliciously?

**Never** allow un-escaped insertion of untrusted input into a SQL statement, Rule 1. Rule 2 is assume **all** input is untrustworthy."
5,"Weird that 2 and 3 have different performance, since they appear to be the same code."
5,If there's _ever_ the possibility of another person using it OP should use a proper DB-API parameterized query. Even if there isn't any possibility it's _still_ better to do so than use string formatting.
5,"The DB-API already provides a means for parameter substitution that ensures the input value will be properly escaped. From the docs for **pymysql**:

    sql = ""INSERT INTO `users` (`email`, `password`) VALUES (%s, %s)""
    cursor.execute(sql, ('webmaster@python.org', 'very-secret'))

Either of those two values could be given via **input**.

**DO NOT** use Python's string formatting (**str.format** or f-string) to create the actual SQL statement.

Don't be little [Bobby Tables](https://imgs.xkcd.com/comics/exploits_of_a_mom.png)."
5,"I may be misunderstanding your advice, but neither **str.format** or f-strings should _ever_ be used to form a SQL query directly from user input. That's just a direct path to SQL injection."
5,"Just going to note for you that by a _very_ large margin, most _actual_ programs running on this planet at any one moment have no GUI and don't look like anything but one of those lines you see in a process monitor.

That said if what you want to learn is GUI programming, a good place to start is [tkinter](https://docs.python.org/3/library/tk.html). It shares a lot of the ideas that exist in other more popular frameworks, but has the advantage of probably already being installed with your copy of Python. And, after getting some love in the last couple years, it no longer always has to look like something the 90s dragged in!"
5,"Yeah, I'm aware of that. I never said you did. I said that deciding to be one is very possibly the only _worse_ choice you could make than dropping out."
5,"How do I put this in a helpful and respectful manner?

Programming, in any language, is almost exclusively an exercise in well-reasoned decision making. It involves consistently taking a measured, logical approach to problem solving.

Anyone who knows that -- read anyone who might hire you -- is someone who would look on the decision to drop out of high school as the _precise_ opposite of what's required to do the job.

There is, honestly, no single stupider choice you could make for your long-term happiness. Except possibly dropping it all to become an Influencer."
5,"Try `elif x == ""N""` instead.

If **pass** ever appears in your completed code, you're likely doing something wrong."
5,"Sure. Look carefully at what happens when the inner loop exits. You're now back in the outer loop, at the end of the first **if**.

What's **x** at that point? Right before Python reaches the second **if**?"
5,Well if they did you'd end up with a file that couldn't be decompiled without first being decrypted. It would look like gibberish to the decompiler and likely raise something like that.
5,"Well that's an opportunity for debugging _why_ that could or would occur, because if you're handling the **if** case correctly that shouldn't be possible."
5,"Ok, good start, now a few things to consider.

1. You don't really need a variable to control a loop, just `while True` and then use `break` to exit the loop.

2. That said `break` will only pop you out of the loop you're immediately in... if you have _nested_ while loops you may need to use a variable to control exit from the outer loop. However in practice you'll want to do everything you can to avoid nested loops anyway. Moving things inside a _function_ can help, because then you can use **return**, which will exit the entire function regardless of how deeply nested it is.

3. It doesn't usually make sense to end a conditional on an **elif** if the expression in the **elif** matches all cases that weren't caught by the **if** or any previous **elif** ... just use an **else** when what you're trying to do is ""in all other cases"".

"
5,"There any chance the unnamed employee who ""lost"" the source code intentionally obfuscated it using PyInstaller's code encryption ""feature""?"
5,Not if the regex is actually robust... floats can be all sorts of values that ‘\d+(?;\.\d+)` won't catch.
5,"You'd replace **string** in my code with your **rating**.

So immediately after you get the rating text you'd do:

    value = rating[rating.find("":"") + 1: rating.find(""out"")]

And then you'd have the rating value (as a string) to play with. You'd probably want to do:

    value = float(rating[rating.find("":"") + 1: rating.find(""out"")])

If you wanted it as a float."
5,"That Imgur image is unreadably compressed and a picture of your terminal is useless anyway.

Copy and paste the full terminal output into a pastebin."
5,"Assuming that string is _exactly_ how it's returned and that the pattern is _always_ a colon followed immediately by a float followed immediately by ""out"", then:

    string[string.find("":"") + 1:string.find(""out"")]

Should work."
5,"You can't have an **elif** without an expression... like **if** it's intended to check if an expression is a True and do something, otherwise proceed down the conditional towards **else**.

And you cannot have two **else** clauses in the same conditional... that just doesn't make sense. It's always one **if** followed by any number of **elif** followed by at most one **else**.

You must be reading the example wrong, somehow.

BTW in Python 3 you'd need to do `int(input([...]))`."
5,"Don't worry, we're all a lot more talented at screwing things up than we'd hope. Confidence is usually a sign of having overlooked something.

But yeah bitwise ops will make this easier, just need to get over the learning curve."
5,"Bit hard to read all that, but typically you'd want to collect the line numbers with the line:

    with open(file) as src:
        for linenum, line in enumerate(src):
            [...]

If for some reason you want to start with line 1 rather than 0:

    with open(file) as src:
        for linenum, line in enumerate(src, start=1):
            [...]

Then you can eliminate whatever you want but still have the original line position."
5,"You don't need to use any string manipulation. At the simplest level you can just use bitwise operators.

Let's say you've got an arbitrary 8 bit register:

    register = 0b00000000

You can visualize its state using a format string.

    print(f""{register:08b}"")

Now let's flip the 4th bit from the right... the bitwise OR augmented assignment operator  (`|=`) will set to 1 in the register any bit that is 1 in either the register or the number to the right of the register, so we pass in a number that had a 1 in only the bit position we want to flip. Here I use the bitwise LSHIFT operator (`<<`) to put a 1 in the 4th bit position from the right:

    register |= 1 << 4
    print(f""{register:08b}"")

And the 6th bit from the right.

    register |= 1 << 6
    print(f""{register:08b}"")

Now you receive that register, how do you read out the data in each bit? Well because each bit is the next power of 2 you can just compare the register with the appropriate power of 2 using bitwise AND (the `&` operator)... if the result is 0 the bit was 0, if the result is the power of 2 then the bit was 1.

    bits = []
    for i in range(8):
        bit = 8 - i
        state = bool(register & 1 << bit)
        bits.append((bit, state))
    print(bits)

Takes a bit of getting used to, and you've got to be careful with byte ordering, but the basics are pretty simple.

Once you've got that idea down you'll find **enum.Flag** very useful if you're in Python 3.6 or greater.

    from enum import Flag, auto

    class Switch4(Flag):
        UNSET = 0
        A = auto()
        B = auto()
        C = auto()
        D = auto()
        ALLSET = A | B | C | D
	
    register = Switch4.UNSET
    print(register, f""{register.value:04b}"")
    register ^= Switch4.A
    print(register, f""{register.value:04b}"")
    register ^= Switch4.C
    print(register, f""{register.value:04b}"")
    register ^= Switch4.A
    print(register, f""{register.value:04b}"")
    register |= Switch4.A | Switch4.B | Switch4.D
    print(register, f""{register.value:04b}"")

In the above I'm using bitwise XOR in augmented assignment (`^=`) to flip the bit to 0 of it was 1 or 1 of it was 0.

The **enum.Flag** has a bit of a learning curve, but can make it easier to model the state of your interaction with individual bits in a bitflag/bitfield."
5,"Sorry, I tried to indicate this with ""each response's log"" but should have been more explicit: the log message itself, held inside the JSON response, is a string and can be put into a **set**, you then sort that set.

Depending on the server responding the full json response often contains metadata that keeps any two of them from being identical even when the relevant content (the value for ""log_line"" in your example above) of them is identical."
5,"""May not be the best pattern"" does not put limits on what the best pattern is in any given moment, but in this case the example I've been discussing was using unpacking in a way that made the code both less readable and less memory efficient, with no gain in speed... if it doesn't make the code simpler, doesn't make the code quicker, and doesn't save the code space, it's quite likely it's not the optimal choice for the moment. If it _also_ makes the code uglier, then seek a better alternative.

That poster asked for an alternative, I gave them a couple. You're continuing to debate points that don't have much bearing on that. I never said ""unpacking is verboten"", I just pointed out ways in which it _can_ be suboptimal.

But sure, profile the hell out of your code, my point is to be aware of and tend to avoid pre-mature **de**-optimization."
5,"Generically it's an issue... the above example just happened to use numpy, which is reasonably efficient and usually dealing with small primitive values. Imagine instead that it was unpacking some black box operation that wasn't reasonably efficient and was forcing copies of very large and dense data structures. The point is to avoid making those copies in the first place and interact with the object itself.

This whole thread isn't about numpy, it's about whether unpacking into many variables is a decent argument for having very long, un-wrappable lines... it isn't, and it also _may_ involve inefficient memory usage as a side effect, hence may not be the best pattern to employ anyway."
5,"The post I was responding to seemed to be taking an array and unpacking it into a single value for each item in the array, though I might have read that wrong and some of those may be strides.

If you unpack N * float64 values into N variables you've (albeit briefly) got 2 * N * float64 values in memory. If you don't actually allow the array to be freed by exiting scope you'll keep that extra memory allocated. If N is very large that's not a micro-optimization at all.

My point though was that it's often better to interact with the collection / array (or views into it) rather than unpack its values into a bunch of named references and interact with those."
5,"That **sorted** call gives you back a sorted **list** (an **array** is a different thing in Python), and the new list is a copy of the disordered one. To be more memory-efficient you can do `unsorted.sort(key=lambda[...])` which is an in-place sort.

That said since looking at your code above you're trying to produce a de-duplicated and sorted list, I'd tend to say start with a **set** and **set.add** each response's log directly... that saves you having to actually check if the log is in the set, since the **set** can never contain duplicates. I'd then use **sorted** as above to get back your ordered list of unique logs."
5,"Are you sure? I'm not a heavy or even regular user of numpy, but I'd expect this to throw an AssertionError if the unpacking wasn't resulting in a copy:

    import numpy as np
    from io import StringIO

    a = np.loadtxt(StringIO(""1 2""))
    b, _ = a
    c, _ = a
    assert b is not c

And I'd expect this to fail entirely:

    del(a)
    print(b, c)

It's been my understanding that a numpy slice doesn't create a copy (it creates a _view_ instead), but once you unpack that slice I'm not sure how it would be possible to avoid a copy of each component value."
5,"Yeah, that's cause you don't have a string that includes braces, you've got a **dict**, which is what that `r.json()` call is giving you.

    logs = [
        {'log_line': 'Apr 19 07:26:41 app-1 sshd[21210]: pam_unix(sshd:auth): check pass; user unknown\n'},
        {'log_line': 'Mar 29 07:11:22 app-1 sshd[21210]: pam_unix(sshd:auth): check pass; user unknown\n'},
        {'log_line': 'Apr 04 20:04:20 app-1 sshd[21210]: pam_unix(sshd:auth): check pass; user unknown\n'}
    ]
    
    from datetime import datetime
    for log in sorted(
            logs, key=lambda l: datetime.strptime(l[""log_line""][0:15], ""%b %d %H:%M:%S"")):
        print(log)
    
Try that instead."
5,"The chart is good, although the bound method obviously has a parameter as well, since you're providing an argument.

And it's definitely uncommon for class destructors to fire in such a way that it breaks chaining, typically it only happens with classes that are managing some low level network or disk resources for you and the author has tried -- sometimes too hard -- to ensure those resources get freed up when the instance itself is reaped. A good look through the source and some idea what's happening in `PWM.__del__` would likely shed some light on it."
5,"Assuming that what you've written above is the entire log line, including the braces, and that the format is consistent, then something like:

    logs = [
        ""{'log_line': 'Apr 19 07:26:41 app-1 sshd[21210]: pam_unix(sshd:auth): check pass; user unknown\n'}"",
        ""{'log_line': 'Mar 29 07:11:22 app-1 sshd[21210]: pam_unix(sshd:auth): check pass; user unknown\n'}"",
        ""{'log_line': 'Apr 04 20:04:20 app-1 sshd[21210]: pam_unix(sshd:auth): check pass; user unknown\n'}""
    ]
    
    from datetime import datetime
    for log in sorted(
            logs, key=lambda l: datetime.strptime(l[14:29], ""%b %d %H:%M:%S"")):
        print(log)
    
... would do it. The question is how consistent are they, and am I right in guessing a 24 hour clock?"
5,"Overkill can happen, but a pretty simple class can make large collections of data much easier to work with. Of course you could do this with functions just as easily:

    def item(array, index):
        return array[index*2]

    def error(array, index):
        return array[index*2+1]

    array = np.loadtxt(file)
    assert item(array, 1) == 2
    assert error(array, 1) == 0.4

It's all effort that's only worth it if you're working on a task that is going to be repeated, or course."
5,"Sure, though I'm not sure what you don't understand. A contrived example based on your description of your problem set above would be something like this:

    import numpy as np

    class Datum:
        def __init__(self, path):
            self.array = np.loadtxt(path)

        def item(self, index):
            return self.array[index*2]

        def error(self, index):
            return self.array[index*2+1]
		
    # file contains ""1 0.2 2 0.4 3 0.6"")
    data = Datum(file)
    assert data.item(1) == 2
    assert data.error(1) == 0.4

This way you can mutate the underlying array using numpy and yet still access the appropriate indexes... now you don't need six variables, just 1."
5,"First, note that it's impossible for a function in Python to return many values... a function or method _always_ returns a single object. You're _unpacking_ that object (in this case a numpy ndarray) into many variables, but that's your prerogative. Doing so isn't necessarily a good idea (you're effectively doubling the memory cost of your array, for instance), but it depends on your specific use case.

Typically with a collection like that I'd tend to work with the collection directly, possibly wrapping it in a class to make it more ergonomic.

As for things that take many arguments, well that's where `*args` and `**kwargs` come in helpful."
5,"I can't speak to the specifics of the GPIO library itself without looking at the source code, but _usually_ that second line would work fine. There must be something in the logic of that PWM class that causes it to destruct itself when there are no remaining named references to it.

Basically you've got the **GPIO** _module_ and inside it is defined the **PWM** _class_. You're passing in _arguments_ for some or all of the _parameters_ that the class's _constructor method_ takes and initializing an _instance_ of the class that you're _assigning_ to **p**. You're then calling one of the instance's _bound methods_.

It's failing most likely because every instance has a _destructor_ that gets called when the last remaining named reference to that instance goes out of scope... someone has apparently written whatever the heck a **PWM** is so that it immediately closes down or reaps some important resource or IO connection _before_ whatever that method is doing completes its job."
5,"Looks like you want a _regular expression_:

    import re
    
    line = ""[00.00.00, 00:00:00] XY: A B C, D E.""
    
    REGEX = re.compile(
    	r""""""
    	^												# START
    	\[											# [
    	(\d{2}\.\d{2}\.\d{2})		# time 1
    	,\s+										# , + WS
    	(\d{2}:\d{2}:\d{2})	  	# H:M:S
    	\]\s+										# ] + WS
    	([A-Za-z]+:)						# letter + :
    	\s+											# WS
    	(\w.*)									# letter + *
    	$
    	"""""", re.VERBOSE)
    
    print(REGEX.match(line).groups())

But this assumes you've split the input into lines that exactly match the rough pattern you gave... if the item before the last colon is capable of being more than letters it will need adjustment. Also the date and time portion would match illegal date and time values.

But it's in the right direction."
5,"C99 added a Boolean type, look in stdbool.h for `true` and `false`.

And the main argument for the explicit Boolean type is always just clarity. When you compare to 0 in a program it's not immediately obvious if you're testing _logical_ or _arithmetic_ equivalence... could be either one in any given case. By using an explicit Boolean you communicate to anyone reading precisely which operation is in play."
5,"Via [Wikipedia](https://en.wikipedia.org/wiki/Yen_sign):

> Japanese-language locales of Microsoft operating systems use the code page 932 character encoding, which is a variant of Shift JIS. Hence, 0x5C is displayed as a yen sign in Japanese-locale fonts on Windows.[1] It is nonetheless used wherever a backslash is used, such as the directory separator character (for example, in C:¥) and as the general escape character (¥n).[1] It is mapped onto the Unicode U+005C REVERSE SOLIDUS (i.e. backslash),[2] while Unicode U+00A5 YEN SIGN is given a one-way ""best fit"" mapping to 0x5C in code page 932,[1] and 0x5C is displayed as a backslash in Microsoft's documentation for code page 932,[3] essentially making it a backslash given the appearance of a yen sign by localized fonts.

The backslash character (which happens to be displayed as a half-width ¥ symbol in your locale) is commonly used in Windows paths, but in Python (and most other languages) its also used for special characters:

     backslash + n AKA \n  AKA newline
     backslash + t AKA \t AKA tab
     backslash + W AKA \W AKA non-word regex sequence pattern

And many, many others.

So everywhere you see ¥r in a file your computer sees a form feed. If you've got ¥¥ that's a literal escape meant to include the backslash in a path.

Since your locale assigns it to the same codepoint you've basically got to just use the ¥ wherever a backslash would be a required character.

Hopefully you're using Python3, which at least understands the notion of file encodings and doesn't use the backslash to escape Unicode literals, but you may very well need to configure PyCharm to know that you're using a ShiftJIS variant. Unfortunately. I no longer use PyCharm and I've never worked in an ASCII-incompatible locale, so I have no idea what's required to do that. I'd suggest you look for experienced Python programmers in your locale who might have workarounds and help."
5,"I learned them from a book called Learning Python by Mark Katz. A little dated, but a great introduction to the core language.

The basic syntax is simple:

    result = []
    for item in items:
        r.append(item)

Becomes:

    result = [item for item in items]

Basically it's just a short hand version of an explicit for loop."
5,"Basically it's just familiarity and time. The main ""tricks"" are combining of function calls and using _comprehensions_ instead of long form loops.

So the long form version:

    def unique_firsts(items):
        first = set()
        for item in items:
            if item:
                first.add(item[0])
        return sorted(first)

Becomes the short form version:

    def unique_firsts(items):
        return sorted({i[0] for i in items if i})
	
Both do precisely the same job, the latter just uses syntactical sugar that takes a while to recognize and memorize."
5,"GRRM, is that _you_?"
5,"They have their drawbacks though... the equivalent methods tend to take any iterable, while the operators take only sets."
5,"Try:

    from datetime import datetime
    import pytz

    tz = pytz.timezone(""US/Mountain"")
    now = datetime.now(tz)
    print(now.strftime(""%I:%M %p""))

That should give you the current 12-hour time."
5,"Unfortunately if you can't attach a debugger what I'd suggest is paring back to find the minimal crashing example. Have you tried with just a single process worker?

Multiprocessing sets **stdin** to dev null, so I'd tend to make sure nothing in code that's run in another process could ever try to use **input** or otherwise interact with stdin."
5,"Have you tried making that exact request without any of your error handling and outside of a multiprocessing worker?

On a Mac I would tend to associate that error either to a full on seg fault in a C extension -- and multiprocessing has had some issues with for instance **numpy** in that area -- or an attempt to read from stdin in a thread or process that doesn't have access to that stream."
5,"The idea of ""static"" _attributes_ doesn't really have meaning in Python; an attribute, whether its assigned to a class or an instance, is really just a variable name _attached_ to another object's namespace.

A static _method_ has some meaning, it's a callable that is attached to another object's namespace, but which does not require its first argument to be that object's class (that's a class method) or an instance of that class (that's an instance method).

Class variables can be confusing; they're assigned outside of `__init__` and so bind to the class, not the instance.

    class Foo:
	bar = 2
	
    assert Foo.bar == 2
    assert Foo().bar == 2
    assert Foo.bar is Foo().bar

When inherited the subclass attribute is a reference to the superclass attribute:

    class Foo2(Foo):
	pass
	
    assert Foo2.bar == 2
    assert Foo2().bar == 2
    assert Foo2.bar is Foo.bar
    assert Foo2.bar is Foo2().bar

However if you _assign_ to the class attribute you're overwriting that relationship... the new value applies only to the subclass (and its instances), but is not applied back on to the superclass:

    Foo2.bar = 3
    
    assert Foo.bar is not Foo2.bar
    assert Foo.bar == 2
    assert Foo2.bar == 3
    assert Foo2().bar == 3

Likewise if you make an instance and assign to the attribute on the instance that assignment applies only to that instance (you've made it an instance attribute), and does not get applied back to the class:

    f1 = Foo2()
    f1.bar = 4
    assert Foo2.bar is not f1.bar
    assert Foo2.bar == 3
    assert f1.bar == 4

What will boil your noodle though is that if you assign to the attribute on the _class_ that class attribute will change for _all_ instances of the class, even if they were instantiated before that change:

    f2 = Foo2()
    assert f2.bar == 3
    Foo2.bar = 5
    assert f2.bar == 5

Oddly enough, even for the one we assigned an instance attribute to earlier:

    assert f1.__class__.bar == 5
    assert f1.__class__.bar is f2.bar

That's why class attributes are relatively rarely used as variables... it's more common to assign a value to them and then never change that value."
5,"First, assume that the problem is in your code. The **requests** module is far more battle tested than your code, and you're doing quite a bit here that's potentially obscuring the problem. Your statement that your code ""works flawlessly"" without **requests** presumes a lot. Odds are **requests** is throwing a predictable error and you're trying to do something like ask for input in a headless worker or some other issue.

So you're running this at the command line and getting nothing except that precise string?"
5,"Sounds like it.

So I'm not suggesting migrating, my point is they use a templating engine ([mako](https://www.makotemplates.org/) is one option, [jinja2](http://jinja.pocoo.org/docs/2.10/) is another) for the actual code generation.

That way you essentially just write the functional shell script or whatever it is you're trying to build then replace variable parts or that with tags in the templating language. You then just render the script, and call that with **subprocess**.

This tends to be much easier for non-trivial work than building out each of the lines with string concatenation and echo.

The unexpected end of file error normally happens when you're trying to run python code and a required quote is missing. But as I can't see the actual code you're using or error traceback or the output file I can't help much on where that might be."
5,"This sounds like a painfully bad idea. Are you talking about flask-migrate by any chance? If you look inside that you'll find it using the mako templating language to build the files, rather than echo. Going through the shell sounds like a recipe for pain.

And what exactly do you mean it didn't work; error message, wrong string on disk?"
5,"First, you really should be using **subprocess**... the documentation for **os.system** even tells you to.

Second, why are you using shell commands at all, you can just open the file and append the line using Python.

And lastly I _think_ you want `os.system(""echo 'fields_to_insert = fields_to_insert + \""'\"" + key + \""'\""'"")`."
5,"Basically, yes. If an exception occurs (including by an intentional **raise**) while  _inside_ an exception handler block, that block will prepend the traceback with the original exception's traceback and:

> During handling of the above exception, another exception occurred:

Which is meant to act as a breadcrumb trail.

So yeah to fix you need to either avoid doing whatever is raising that new exception, or nest an exception handler for the new exception."
5,"It did execute, it just didn't handle the exception that got raised in the middle of trying to handle the initial exception, when `driver.close()` failed."
5,"A quick Google says that **enzyme** can't write back metadata, but if you can already use `mkvpropedit` to do it on the command line then you can use the tools in **subprocess** to have Python run that tool for you as an external process.

Which part of subprocess depends on what version of Python you're using, but if you're on a recent version of Python 3 **subprocess.run** is the simplest."
5,"If the number is stored as a string in a locale that uses commas as the decimal, I think you want something like this:

    from decimal import Decimal
    from locale import atof

    def significant(value: str) -> int:
        return len(atof(value, Decimal).as_tuple().digits)
	
    print(significant(""0,00123""))

That should give you the number of significant digits for a decimal string stored in your locale. The **locale.atof** function is the bit that handles the locale conversion, as **decimal.Decimal** only works with dot-notated decimal, not comma-notated.

If your number is stored as a float then things get a little complicated, as **Decimal** will automatically add precision places to try and not lose any of the significant digits of the binary representation... `len(Decimal(0.00123).as_tuple().digits)` will be 60.

The simple fix there is `significant(str(0.00132))`,  but note that _trailing_ zeros will be truncated in that case.

Hopefully that points you in a helpful direction."
5,"Yes, pick up Git as fast as you can, you want the basics of working in a repo to be muscle memory; learn as much of the standard library as you can, I'd tend to say **re**, **itertools**, **sqlite3**, and **subprocess** are all going to give solid return on time invested. As are support modules like **logging** and **argparse**,  both of which you're going to be seeing a lot of. Try to develop solid chops writing and running unit tests, it's very helpful to know **unittest** for that.

Outside of Python try and be at least conversationally familiar with concepts like Agile Development, Continuous Integration/Deployment and Test Driven Development, as in you've read the Wikipedia entries on those terms and know some of the bywords. You'll find that's going to help with getting through the filter screen of first pass HR people."
5,"At the top of the [documentation for DataFrame.replace](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.replace.html) you can see the signature; it takes **self** plus 6 arguments that are optional because they have default values. That means the method takes at minimum 1 argument (the DataFrame itself) and at most 7... you're passing in 9, plus **self**.

I _think_ what you want to do is pass in 1 **dict** with 9 keys, instead of 9 **sets**, but it's a bit hard to tell."
5,"Stop posting your stupid code and read.

See that item where it says **list.append(minName)**? That's the point at which ""wym"" gets appended to your **list**, if for instance you answer ""angus"" to the input prompt.

And _only_ ""wym"", ever.

Why, because you've only got two items whose ""items"" is gold, and you're using **continue** to skip appending any station that isn't your current station (""angus"") and doesn't have item=gold (""eko"").

So if you answer ""angus"" you'll get [""wym""] and if you answer ""wym"" you'll get [""angus""] and if you answer ""eko"" you'll get [] because, and here's the important part for you, IF A PROGRAM DOESN'T DO WHAT YOU EXPECT, YOU WROTE IT WRONG.

The problem with your code is 3-4 feet from the screen you're looking at."
5,"Why don't you read your code and see _why_ it would skip adding any item that isn't ""wym""?"
5,Yes. So ... how do I put this gently ... READ and LEARN.
5,Sigh. Tab in the **list.append** so it's inside the for loop. Your code as you have formatted it appends exactly one item. Which was None because you don't understand the return value of functions.
5,YOUR CODE ONLY APPENDS 1 ITEM TO THE LIST!!
5,"Literally everything we have shown you has been relevant to your code. We are not going to rewrite your homework / program / whatever for you. Unless, that is, you want to pay my normal hourly rate, which is $85 USD / hour, ten hour minimum callout."
5,"First, it's so difficult to understand because you're communicating TERRIBLY.

Try changing your last two lines: 

    list.append(minName)
    print(""Closest station"", list)

The **print** function doesn't return a value, you were appending None to your **list**.

Now, stop being a perfect example of how _not_ to get help on Reddit."
5,"By any chance is the problem that your list comes back as [None, None, None, ..., None]?"
5,"I have looked at your code, you're not saying _anything_ useful to anyone that's trying to help you. What I've just shown you is how you append to a list and how you sort a list, neither of which you seem to be doing in that code which you keep posting over and over and over again like a child with a serious attention problem.

Where, exactly, did you find that code, what is it you expect it to do, and what do you mean when you say it's not working?"
5,"Then, first, delete all your spam posts and stop reposting the same question.

You have a list:

    lst = [1, 2, 3]

To append to it you call **list.append** on that list:

    lst.append(4)

Your list now includes the number 4, it's been added to the end of your list.

If you want to sort your original list in place you can use **list.sort**; it takes keyword arguments for the key you want to use for sorting (by default it will sort in increasing order) and a key for reversing:

    lst.sort(reverse=True)

Now your list is in reverse sorted order (ie [4, 3, 2, 1]).

It seems from your questions you want to do a complex sort based on the distance between the current station and each station in the list. To do this you'd pass a function as the **key** keyword; that function needs to take a single argument (the item in the list being checked) and it needs to calculate and return the distance to the item being tested.

So let's assume a current station has a value of 3 and we want to sort the above list by distance from 3... well that distance could be negative or positive, so we'd need to compare the absolute value of the distance:

    def by_distance(item):
        return abs(item - 3)

    lst.sort(key=by_distance)

For problems like this Python provides the **lambda** syntax which allows you to define an anonymous function on the fly that does the same thing, so you
might see examples like this:

    lst.sort(key=lambda i: abs(i-3))

But it does the same thing.

If you want a sorted _copy_ of your list, used **sorted** instead:

    new_lst = sorted(list, key=lambda i: abs(i-3))

That should be enough to get you what you need; how you perform your specific sort will depend on how you want to calculate distance and what sort of object each item actually is, but basically that's the idea."
5,"Why are you spamming this subreddit with basically the same post over and over and ignoring anyone telling you that you need to read the documents for **list.append** and **sorted**?

This is NOT going to get you help."
5,"Your editor should take care of that, being consistent with what was hard for the indentation above. Typically there's a ""show whitespace"" feature that will indicate tabs and spaces differently. The main thing is don't mix the two.

The typical approach with Python is to set the editor to replace _all_ hard tabs (the \t character) with a soft tab of 4 spaces, however most editors will only do that as you're typing, not when you open a file someone else created. I believe both yapf and black use spaces for all indentation by default.

This drives some very pedantic types from the C++ and Java worlds very, very crazy... but it works for Python."
6,"A code point is just a number, and each character has a unique code point associated with it. So the character `a` has the code point 97, the character `π` (pi) has the code point 960, and the character `■` has the code point 9632. Python's `ord` function converts characters to code points. These code points are the same regardless of what encoding you're talking about (or even if you're not talking about any encoding). It just so happens that if a character is representable in latin1 (and thus ascii too) then the code point is the same as the byte (when converted to an integer). Though this is not a coincidence; unicode was designed this way. All the examples of code points that you gave are actually bytes. `b'\xc3\x9f'` is the utf8 bytes corresponding to the character with code point 223 (eszett).

The visual depiction of a character that you see on the screen is usually known as a _glyph_. A character is semantic information such as whether it's a letter/number/whitespace/punctuation/etc or what writing system it belongs to. You can turn a character (or a set of them) into a glyph using a font renderer (together with a font). For example, a and _a_ are the same character, but different glyphs (one's italic).

Yes, every character exists in the computer as a collection of bytes, but the character is an abstract idea that exists independently of the bytes that make it up. An `a` is an `a` regardless of what underlying bytes are being used to represent it in the computer memory. The underlying bytes sometimes matter, such as when you need to write those bytes to a file or socket, but most of the time you don't know or care what the bytes are. Can you tell me what bytes python uses to represent the `a` character in RAM when it appears in a string?

> When the OS went to print his bytes, he should have been using code page 1252, but it seems like he was using 437.

I'm not sure what you're trying to say here. Latin1 has nothing to do with this. The OP is trying to get at the character with code point 9632, but did so by passing the cp437-encoded byte for that character to the `ord` function. This doesn't work because `ord` converts characters to code points and doesn't care about bytes. Also there's no reason to use cp437 just to get a specific character. Characters in python don't have to have anything to do with a particular encoding. The best way to get that character is to put it directly in a string `'■'`. Alternatively you can pass the correct code point to `chr` which converts code points to characters: `chr(9632)`."
6,"> There are two types of encodings: single byte encodings like ASCII and LATIN1 and multi-byte encodings like JIS and UTF. As you can see from my code, both encodings have different binary expressions for the same character glyph. A ""codepage"", as you say, is nothing more than an alias for an encoding.

Do not disagree with any of this. My issue is with the specific phrase ""two byte code points"". Code points and bytes are different concepts.

Saying _characters are bytes too_ is kind of like saying that integers are bytes too, or that functions are bytes too. Yes, everything in a computer is ultimately made out of bytes, but it does no good to think of characters in terms of bytes outside of the context of a specific encoding. Nobody thinks of the `max` function in terms of the bytes that make it up because the exact bytes differ depending on the machine/os/compiler and knowing which bytes are involved tells you little about how to actually use that function.

A character is a character; it has certain properties and semantics, and you can also use bytes to represent that character. The trouble is that what bytes represent what characters is an arbitrary choice. That choice defines an encoding. An encoding is a mapping between bytes and unicode characters.

`'■'` is a character. Cp437 says that this character corresponds to `b'\xfe'`. Utf8 says that it's `b'\xe2\x96\xa0'` (interestingly: three bytes, not two). Utf16 says that it's `b'\xa0%'` (little endian). Ascii and Latin1 both agree that there are no bytes that can represent this character. If characters are also bytes then what are the bytes for `'■'`?

[CP437](https://en.wikipedia.org/wiki/Code_page_437#Character_set). [Latin1](https://en.wikipedia.org/wiki/ISO/IEC_8859-1#Code_page_layout). Compare the tables there with OP's table and the output of your code."
6,"`ord` and `chr` have nothing to do with utf8, or any codec. They convert between unicode code points and unicode characters.

The extended ascii table shown there is not based on latin1; it is actually codepage 437.

All codecs are unicode codecs (including latin1), in the sense that they convert bytes to unicode characters and back. The table relates bytes to characters. It does contain unicode because these days all characters are unicode characters. If you are working with strings in python then you are working with unicode.

Your first code block takes the bytes from `b'\xb0'` to `b'\xe0'` and converts them to unicode characters using latin1. Your second code block takes those same unicode characters and converts them back to bytes using utf8. Code points are not involved anywhere in this process. There is no such thing as ""TWO BYTE code points"". Those are just two bytes."
6,"> 0xc3 0xb1.

This is utf-8, not utf-16. Post your code, data, and exact output."
6,"The real problem here is that `nargs` doesn't make a lot of sense with options. `./script.py Test --tags foo bar abc` isn't consistent with the way commands are supposed to work. A person who sees that command invocation would assume that `Test`, `bar` and `abc` are positional arguments and `foo` is the value of the `--tags` option.

It would be better to use one of the following:

    ./script.py Test foo bar abc
    ./script.py Test --tags foo,bar,abc
    ./script.py Test --tag foo --tag bar --tag abc

(All positional arguments, a single option with custom parsable format, or multiple uses of the same option.)"
6,80 by 24 is the standard size for terminals. Why do you want to change it?
6,There's no need to do any real coding here. Just put a line invoking youtube-dl with appropriate arguments in your crontab.
6,"In python 3.8 they're adding a `=` format to f-strings that does something pretty similar:

    >>> print(f'{len(train)=}')
    len(train)=80000

Note that your use of `str.rstrip` leads to a pathological case if you run something like `p(',,,')`. For that matter, you should probably output reprs instead of strings: `{exp!r}`."
6,Python 2.6 is more than 10 years old and hasn't even had security patches for 5. It's well past the time you should have upgraded.
6,The python from the command prompt _is_ `python.exe`. Possibly you have multiple versions of python installed and you're running different ones in different contexts. On windows you generally want to run python using the `py` launcher. What does `py scriptname.py` do for you?
6,"Part of the reason that we use virtual environments is to help alleviate this problem. It is possible to have both projects installed at the same time as long as you have them installed in the different environments. You can't use both `twitter` modules together in the same project because they conflict, but venvs let you use one `twitter` in one project and the other in the other."
6,I have given you two code samples of me creating a `pylint.rc` file in python. If those don't do what you want then I don't know what you want.
6,"There are techniques for playing games that don't require you to run the minimax algorithm on the entire tree of possible game states. Just because minimax requires millions of runs, doesn't necessarily mean that you require minimax."
6,"Accessing a variable ""directly"" is the same thing as accessing a key in a dictionary. Python stores it's variables in dictionaries internally.

Do not try to optimise your code without first measuring it to see which parts of it are slow. In all likelyhood, the call to `exec` is costing you considerably more than you might save by doing the assignment directly. All that string formatting probably isn't helping either.

Another promising angle of attack would be to find a different algorithm that doesn't require you to run the code several million times. I'm not entirely sure what you're doing, but it's not clear to me that you actually need to define these variables / create this dictionary. The data you need is already available from `Match_Ups` and you just need to make the api a little easier to use."
6,"The python shell (also called the _repl_ or _interactive intepreter_) is a way that you can type python code  and have it run immediately. It's the program where you get the `>>>` prompt. It's confusing why you would specify that for two reasons:

1. Code that is typed into the python shell is run once and then discarded. If you're solving a recurring problem then you would have to re-type the code every time. If you're not solving a recurring problem then it would be faster and easier to create the file manually.

2. Code typed into the python shell is not significantly different than code typed into a file.

Please don't be offended, but you ask questions here every couple of months and each time I'm perplexed by them as they're uniformly brief and you almost seem to throw terminology together in a random fashion. I don't know if it's because English isn't your native language or for some other reason, but it would help if you could give more details about what it is you're doing and also try not to use specific terminology unless you're absolutely sure you know what it means. Useful details would include: _what your ultimate goal is_ and _what you have already tried_. These details would help to give context to what you're doing and make it less likely that we have to pick apart your word choices.

---

You target a specific directory by giving the path to that specific directory:

    >>> with open('C:\\1\\pylint.rc', 'w') as file:
    ...     file.write(contents)
    ..."
6,"The first thing you have to understand is that there's no json here. `peoples_json`, despite the name you gave it, is just a regular old python dictionary and you handle it as such.

The `peoples_json` dictionary contains one key; `'people'`. So start by extracting it:

    people = peoples_json['people']

Now look at what `people` is and try to work with that."
6,"You just said the same thing twice. I was hoping you might use different words and give more details. For example, what do you mean by ""within the python shell""? Do you just mean ""with python""?

You create files in python using the `open` function. Give it the path and write to it:

    with open('/path/to/pylint.rc', 'w') as file:
        file.write(contents)"
6,"That doesn't trigger the error that you posted.

The real fix for this issue is to get your source to output consistent data, but this should be fine for a work-around:

    import datetime

    import pandas

    def date_parser(date):
        try:
            return pandas.to_datetime(date, format='%b-%y')
        except ValueError:
            return pandas.to_datetime(date, format='%d-%b')

    df = pandas.read_csv('data.csv', parse_dates=['Date'], date_parser=date_parser)"
6,"If you only want to run some code once, then don't put it in the loop:

    while True:
        try:  
            numCats = int(input('How many cats do you have?'))
        except ValueError:  
            print('You did not enter a number.')
        else:
            break

    if numCats >= 4:  
        print('That is a lot of cats.')  
    elif numCats == 0:  
        print('Not a cat person eh?')  
    elif numCats < 0:  
        print('You can not have negetive cats buddy.')  
    else:  
        print('That is not a lot of cats.')"
6,"That error implies you're not running it on a pandas dataframe.

Please post some sample data and the code you're using to load it."
6,Could you explain what you want in a little more detail?
6,"Well, you could only keep the log around for a single turn if that's a concern. An action log is useful for encoding things that happen that aren't based around cards (if you have any such things in your game). If all actions are based on cards then an action log and a card log are effectively the same.

But the fundamental point here is that your game object is supposed to represent the game state, so use it to represent the game state."
6,    df['A'] = df['A'].to_datetime(format='%b-%y')
6,"Try it with some external package that isn't quite so complicated as numpy and scipy. Can you import a ""Hello, World!"" package?"
6,"Make a way to represent a card having been played in the game state, and then pass that game state into `Player.choose`.

    class Game:
        def __init__(self):
            self.action_log = []

        def do_turn(self):
            self.action_log.append(start_turn)
            action = self.active_player.get_next_action(game)
            self.action_log.append(action)
            if action.type == 'Play card':
                action.card.act(self)
            self.action_log.append(end_turn)

The player can look at `game.action_log` to figure out what has happened most recently in the game."
6,"The number is three because there is one reference for the parameter of `sys.getrefcount` and there are two references held by the parser. Python's parser will cache integer literals (and others) so that they can be reused if they appear again in the same stretch of code. This cache apparently requires two references. You can see this by comparing with an integer that isn't used as a literal:

    >>> import sys
    >>> sys.getrefcount(int('2323232323'))
    1"
6,"Having separate player classes would help you to keep track of each player and make it possible for the cards to interact with a particular player.

    class Player:
        def __init__(self):
            self.points = 0
            self.hand = []

        def choose(self, choices):
            ...

    class Game:
        def __init__(self):
            self.turn = 0
            self.active_player = Player()
            self.inactive_player = Player()
            ...

        def swap_players(self):
            self.active_player, self.inactive_player = (
                self.inactive_player,
                self.active_player,
            )

    class GoodAngel:
        def act(self, game):
            choices = ['get 3 points', 'set opponents points to 0']
            answer = game.active_player.choose(choices)
            if answer == choices[0]:
                game.active_player.score += 3
            else:
                game.inactive_player.score = 0"
6,"Yes, there are internal variables that hold on to values. The most notable one is that function arguments are variables; when you pass `2323232323` to `sys.getrefcount` it gets assigned to a variable so that the function can keep track of it. All of these internal variables are temporary and so they don't interfere with the garbage collector."
6,"If I were doing this I'd probably go for something more like this code:

    import dataclasses

    @dataclasses.dataclass
    class City:
        name: str
        latitude: float
        longitude: float
        summary: str
        temperature: float
        raining: bool
        humidity: float

        @classmethod
        def load_from_internet(cls, key, name, lat, lon):
            url = f'https://api.darksky.net/forecast/{key}/{lat},{lon}'
            data = requests.get(url).json()
            return cls(
                name=name
                latitude=lat,
                longitude=lon,
                summary=data['currently']['summary'],
                temperature=data['currently']['temperature'],
                raining=data['currently']['precipIntensity'] > 0,
                humidity=data['currently']['humididy'] * 100,
            )

That is; keep the object itself fairly dumb and have a separate constructor that can make a city using information from the internet. This way the request only gets made when the object is constructed. If you need to keep it up-to-date then you can keep track of a datetime when the city object was constructed and if it's too old just make another one."
6,"It seems pyinstaller is unable to find modules that register entry points.

* https://github.com/jaraco/keyring/issues/227
* https://github.com/pyinstaller/pyinstaller/issues/1188"
6,"    plugin = importlib.import_module(f'get_vcs_info.plugins.{options.plugin}')

`importlib.resources` has replaced `pkg_resources`."
6,"Only one or two. And you should obviously remove any sensitive content (or all the content, if you can still trigger the issue like that). I'm trying to get you to make an [sscce](http://sscce.org). Isolating the problem is the first step towards fixing it."
6,"    with open('hackeronesubdomains.txt') as file:
        for line in file:
            print(socket.gethostbyname(line.strip()))"
6,Could you post a small sample tar file that shows this problem? I'm unable to reproduce your issue.
6,So the command that you should have used was `py -m pip install pyperclip`. This is the correct command to invoke pip on windows. It would not have needed you to reinstall. On windows you always want to run python using the [`py` launcher](https://docs.python.org/3/using/windows.html#python-launcher-for-windows).
6,> _Deprecated since version 3.4_: The `imp` package is pending deprecation in favor of `importlib`.
6,"Don't have scripts inside your package. Factor out the joint code so that your scripts no longer need to import each other and can instead import from a shared package.

    project/
    - main.py
    - source_1.py
    - source_2.py
    - package/
      - __init__.py
      - code.py

The correct thing to do here would be to use `setuptool`'s [`entry_points`](https://packaging.python.org/guides/distributing-packages-using-setuptools/#entry-points)."
6,"The problem is that setuptools doesn't know that your subpackages are supposed to be subpackages and so it doesn't install those directories. You need to include `managedState.listeners` and `managedState.registrar` in the packages list in your `setup.py`. Also give them `__init__.py` files.

If you don't want to have to list every subpackage you have in your `setup.py` then you can use [`setuptools.find_packages`](https://setuptools.readthedocs.io/en/latest/setuptools.html#using-find-packages)"
6,What's the name of the package on pypi (if we can see the code for ourselves we can give concrete suggestions)?
6,What is the purpose of this program? Why would someone want to use it?
6,The [`thumbnail`](https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.thumbnail) method only takes a single size value.
6,"It's fine. Python caches modules in `sys.modules` so if you import the same module more than once python will reuse the same object.

[More than you ever wanted to know about python's import system](https://www.youtube.com/watch?v=0oTh1CXRaQ0)"
6,"Instead of getting questions from the database one at a time, get all 10 in one query."
6,"It's not bytearrays that work differently, it's strings. The old `str` type became `bytes` and the old `unicode` type became `str`. `bytearray` still takes a `bytes` object (the old `str`) just as it always did.

    message = bytearray(codecs.decode('520000', 'hex'))

Note that `str(...)[2:-1]` is a dangerous way to convert bytes to a string. It will corrupt your data the moment you try to use any weird characters (non-ascii or unprintable ones)."
6,[Loop like a Native](https://nedbatchelder.com/text/iter.html)
6,"The problem is that you're removing 13s from the list in a loop. If you do that enough times then eventually there will be no more 13s in the list, and so you get that error.

You want to update the value of `count` so that it goes down whenever you remove a 13."
6,Introducing a server to a purely local application seems like overkill. Decoupling the front-end from the back-end and have them communicating through a well-defined API is good. But do it in-process.
6,"1. [`datetime.datetime.replace`](https://docs.python.org/3/library/datetime.html#datetime.datetime.replace)
2. [`datetime.datetime.astimezone`](https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone)"
6,https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_make_variable_variables.3F
6,"Let's verify that you actually are running the version you think you are. Put the following at the top of your code and run it:

    import sys; print(sys.version)"
6,A [backport](https://pypi.org/project/importlib_resources/) is available.
6,[`importlib.resources`](https://docs.python.org/3/library/importlib.html#module-importlib.resources)
6,Are you sure you actually need the index? What's your true problem?
6,"I tried various things (`pip install .`, `python setup.py sdist`, `python setup.py bdist_wheel`) and the `test` module was never included. What reason do you have to think that it is?"
6,"If you want to save typing then you should use the `str` function directly, rather than making an alias with an even longer name than the original."
6,"What exactly do you mean when you say that you ""added the PATHS to python.exe and site-packages""?"
6,"Not using a for loop won't make your code more efficient, it'll just hide the loop. The `print(*list,sep='\n')` example still contains a loop, it's just implicit."
6,"I see. You shouldn't really be running this code in the interactive interpreter. Click `File` -> `New Window` to open a new window that allows you to save code to a file. This was discussed back in chapter one.

That said, when you're writing functions (or anything that uses indentation) in the interactive interpreter, you need to leave a blank line before you write any more code at the top level (no indentation), so that the three arrows come back. Here's what it looks like:

    >>> def hello(name):
            print('Hello ' + name)
       
    >>> hello('Phillip')
    Hello Phillip

The reason you get all that output is because you are putting a call to `hello` inside the `hello` definition. This means that the `hello` function will call itself after it prints, and then this second call will also call itself, and then the third one will, and so on, forever."
6,You can't. You need to file a bug with the author of that module.
6,Is there a reason you  haven't posted your solution?
6,"Not quite. The lambda itself is evaluated during the loop. The problem is that the `i` variable is reused through out the loop and gets dereferenced (its value is worked out) at the time that the lambda is run. It's analogous to this:

    i = 1

    func = lambda x: i * x

    i = 2

    print(func(3)) # prints 6 (2 * 3)

The lambda is the same, but the `i` has changed its value. Note that this works exactly the same with `def`-based functions too."
6,Could you show a screenshot of you running this code? There's no reason why the code should output more than a single line.
6,"Attack the problem at its source; instead of trying to handle `None`s here, don't produce any `None`s in the first place.

What are you doing that's giving you all these objects whose types you don't know? Show us the code that defines `myObj`."
6,"Redownload a fresh copy of the file and this time don't open it in notepad and resave it. The file is already valid `utf-8`. 

When you saved the file as ""Unicode"" in notepad you were really using `utf-16-le`. Notepad doesn't fully understand `utf-8`. The thing that is calls ""UTF-8"" contains an additional BOM character that shouldn't be there. This incorrect form of `utf-8` is called `utf-8-sig` in python.

If you really need to edit the file then you should use an editor that can produce valid `utf-8`."
6,"`p1` works the same way as every other variable. There is a sense in which you could say that `p1` stores the address of the object, but it's not special in that way. You could equally say that in the code `a = 1` the variable `a` stores the address of the `1`. All variables store addresses; that's what variables are.

I think you may be getting confused because when you `print(p1)` you get something like `<__main__.Person object at 0x7f79a64ec198>` which shows you the address of the person object (with some other stuff around it). This has nothing to do with the `p1` variable. This is just what `Person` objects look like when you print them, in the same way that a list looks like `[1, 2, 3]`. You can change your class so that doesn't print out the address, if you want.

[Facts and Myths about Python names and values](https://nedbatchelder.com/text/names1.html)"
6,This is normal and to be expected. There's no need to do anything about this.
6,"Get rid of that launcher script and all that mess in your `setup.py` to deal with it. Replace it with a [console script entry point](https://packaging.python.org/guides/distributing-packages-using-setuptools/#console-scripts).

* https://packaging.python.org/
* https://packaging.python.org/guides/distributing-packages-using-setuptools/
* https://packaging.python.org/guides/packaging-binary-extensions/"
6,"Please don't move files around inside the python installation directory indiscriminately. `site-packages/` is the correct place for `pyperclip` to go, because it's an external ""package"" that has been installed to this specific installation (or ""site""). Move it back."
6,"The ""ingrained"" modules are part of the standard library. This basically just means that the python creators thought that they were so useful that lots of different people would need them. Doing maths and working with time are both things that happen frequently in code. But most programs aren't games, so pygame isn't included.

`curses` is actually part of the standard library just like `time` and `math`. If it isn't working for you, then it's probably because you're running windows, which curses doesn't support."
6,"Please don't modify `sys.path` or use `PYTHONPATH`.

The reason you can't import it in pycharm is because pycharm creates virtual environments for each of its projects. If you want to use pygame inside a pycharm project then you either need to install pygame into that project's virtual environment, or you need to tell pycharm not to use a virtual environment."
6,"You can loop over files directly; no need for `read` or `split`:

    for word in fileObj:

Post the complete error."
6,"Put the following line at the top of your code and see what it prints when you run it.

    import sys; print(sys.version)"
6,"Even if you solve that error, your code still won't do what you want.  
https://www.reddit.com/r/learnpython/wiki/faq#wiki_why_does_my_loop_seem_to_be_skipping_items_in_a_list.3F"
6,You're running you code under an old version of python. Upgrading will fix it.
6,Do you mean `posts.user_id`? You'll need to do some sort of join for that to work.
6,"The reason you don't want `word` to be a string is because strings are immutable and thus string concatenation is `O(n)`. This means that doing it in a loop like this is `O(n²)`, which quickly becomes slow even for relatively small values of `n`."
6,"In that case you have two different variables, and they both happen to be named `x`. The one inside the function is local and the one outside it is global.

    def func(x_local):
        print(x_local)

    x_global = 5
    func(x_global)

[Facts and Myths about python names and values](https://nedbatchelder.com/text/names1.html)"
6,"A variable cannot be both global and local at the same time in the same function. When your code is compiled, python needs to know whether each variable is global or local. To figure this out, python uses a few rules. One particular rule is relevant here; when you assign to a variable inside a function, python assumes that it's local. Writing `x = ...` tells python that `x` is a local variable, and so you get an error about `x` not being defined. In the other examples, you never write `x = ...` so python can assume that `x` is global and everything works as you intended.

This has nothing to do with the interpreter assuming you made a mistake; it's a limitation of the compiler.

If your function received a variable as an argument then that variable is, by definition, not global (that's the other rule)."
6,"Yeah, the whole point of using `super().method` instead of `MyParent.method` directly is that super doesn't necessarily call the method on your the parent class. Instead it calls a method based on the inheritance hierarchy of the class it was originally called from. `super()` doesn't refer to one of your superclasses; it refers to one of your child's superclasses. If you haven't seen it already, [Super considered super!](https://www.youtube.com/watch?v=EiOglTERPEo) is a pretty good explanation of this.

I don't doubt that this technique solves your immediate problem. The issue is all the potential complications that might arise in a real word situation."
6,"Yes, multiple inheritance can be used to solve this problem:

    class Biased(Operator):
        def __call__(self, x, y):
            return super().__call__(x + 1, y)

    class BiasedSum(Biased, Sum):
        pass

    class BiasedDifference(Biased, Difference):
        pass

But if you're not careful then multiple inheritance can bring with it a whole bunch of other problems, so I'd advise not using it, or restricting it's use to highly rigid systems. In fact, your example here is so simple that it almost seems like it's tailor-made for multiple inheritance, which suggests to me that it's too simple. You might get better answers if you described your real problem."
6,That function keeps track of the pressed keys using the event system. If no events are being processed then the return of that function won't change.
6,"Right now you have this code:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            notExit = False

One of the events you will get as part of this loop has the type `pygame.KEYDOWN`. Use this to detect when a key has been pressed down."
6,"You can use poetry or pipenv if you want to, but like with your IDE, I would recommend learning the concepts independently first so that you understand what those tools are doing for you. They're not _necessary_, though they might be _useful_.

You should not share virtual environments between computers, and it should not be checked in to your version control. Virtual environments are supposed to be fairly disposable. You create one when you need it and maybe you keep it around for a while, but it should be possible to delete it and create a new, fully-functional one at any time. There should be nothing in the virtual environment that can't be easily recreated. Your list of packages that need to be installed in order for someone to use your code should be in a `requirements.txt` file or some similar format (this is one of the things that poetry and pipenv try to handle for you).

You generally want to have one repo per project which contains all the code in that project. I would recommend keeping all of your stuff together in one place, unless you have a good reason not to. Is your `orglib` code being used separately from `automatedata`?"
6,"You should be using the event system to detect keypresses, not `pygame.key.get_pressed`."
6,"Note that a BOM is inappropriate in utf8 encoded text and should not be there. If you find a utf8 file that contains a bom then that file is technically invalid and ought to be considered corrupted. Unfortunately, there's a lot of Microsoft software out there that produces such files because microsoft has never really got along well with utf8. Notepad is the most common culprit.

The correct solution to your problem is to switch away from software that produces such inappropriate files. If that's not feasible just now then you can use `utf-8-sig`, but that should only be considered a work-around."
6,Don't use `range(len(`. Just loop over the entries directly. [Loop like a Native.](https://nedbatchelder.com/text/iter.html)
6,You can convert bytes into strings using `bytes.decode`. The base64 functions return ascii-encoded bytes.
6,"I cannot think of a reason why there should be a difference between `pytest` and `python -m pytest`, other than the potential version difference which you already mentioned.

If you run `which pytest` it will tell you what file the `pytest` command is coming from.

Please post your project structure (what files are where) and the full error that you get."
6,[Facts and Myths about Python names and values](https://nedbatchelder.com/text/names1.html)
6,"I would start by reading through the [`subprocess`](https://docs.python.org/3/library/subprocess.html) documentation. It gives several examples of how to use it, and you can find more on the wider internet. One of the examples they give looks like this:

    >>> subprocess.run([""ls"", ""-l"", ""/dev/null""], capture_output=True)
    CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,
    stdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\n', stderr=b'')

Here they're running the `ls -l /dev/null` command, but I'm sure you can adapt that to your own needs."
6,"I have no idea. You don't need to make subclasses just to use mutiprocessing, but there's also no reason I can see why you wouldn't be able to. I tried subclassing and it worked for me, so it's not that. Or not just that. There's something weird going on here that you haven't mentioned. Render your code down to an [sscce](http://sscce.org/)."
6,"`Process` already accepts an `args` argument. You don't need to subclass it just for that.

    >>> q = multiprocessing.Queue()
    >>> p = multiprocessing.Process(target=print, args=(q,))
    >>> p.start()
    <multiprocessing.queues.Queue object at 0x01243890>

All of the examples in the documentation use it this way."
6,"I'm not entirely sure what's happening here, but it might have something to do with you subclassing `Process`. Maybe attributes get serialised differently to arguments. Have you tried using `Process` directly and sending it a target the normal way?"
6,Don't read stuff from the terminal; have the subprocess send it's output to you. Use `subprocess.run` with the `capture_output` argument.
6,[`pygame.transform.flip`](https://www.pygame.org/docs/ref/transform.html#pygame.transform.flip)
6,[Loop like a Native](https://nedbatchelder.com/text/iter.html)
6,"> I'm running pytest on script.py.

What do you mean by this? Please post a complete transcript of your terminal running the command that you're using and all the output that you get."
6,https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_make_variable_variables.3F
6,"I suppose it was a set up, although I don't mean anything by it.

That elif statement will trigger no matter what the user types, so it's exactly equivalent to using an `else:`.  
https://www.reddit.com/r/learnpython/wiki/faq#wiki_variable_is_one_of_two_choices.3F

I see now that, in context, your code happens to work well enough because the other possibilities have already been tested for earlier. I wouldn't recommend you use a recursive solution like this though as you will eventually trigger a stack overflow."
6,It looks like you were in the middle of installing django when you cancelled it. Or at least something weird happened at that point.
6,"Coordinating different versions isn't a terrible inconvenience, but it is an inconvenience. I don't think you should split them up unless you gain something by it, such as being able to use your database-backend in multiple projects (and you actually make use of that feature)."
6,How thoroughly did you test this?
6,You should not have your entry points inside your package. If `processor.py` is designed to be run directly then you should move it out of the package down a directory to `app/processor.py`.
6,"Modules can be imported from many places at once, so there is no ""path of the file where the module was imported"". If `os.getcwd` gives you the path you want, it is only by some coincidence."
6,"In a linked list you would detect a cycle by having two pointers into the list and advancing one of them one node at a time and advancing the other two nodes at a time. If one of the pointers arrives at a dead end then there are no cycles, and if both pointers end up pointing at the same node (except at the very start) then there's a cycle.

This technique can be adapted to directed graphs, but you have to advance in multiple directions at once, keeping track of two independent sets of nodes that are being pointed to."
6,"The `os.getcwd` gets the ""cwd"": the _current working directory_. This is the directory that is used to resolve relative paths. It will probably be the directory that your terminal was in when you started python. It could potentially be any directory on the system, and doesn't necessarily have any relation to the location of your code.

I'm not really sure what you mean by ""from where it was imported"". Modules don't really get imported ""from"" anywhere."
6,"You could configure pycharm to not use a virtual environment, or you could use pycharm's environment from the command line, or you could install the same library twice."
6,"Then you would probably be in violation of the [user agreement](https://www.redditinc.com/policies/user-agreement) (section 6, final bullet point)."
6,Pycharm automatically sets up virtual environments for you. If you installed it in pycharm then you only installed it in pycharm. You will need to install it to the full system if you need to run it there. But consider setting up a virtual environment yourself and using that.
6,https://www.reddit.com/wiki/api
6,"Note that you can chain comparisons together. Also, the result of a comparison is already either `True` or `False` so you can just return that directly:

    return 1 <= value <= 10"
6,"This doesn't really have anything to do with json. The problem is that you can't send unicode strings over a socket, you can only send byte-strings. `json.dumps` gives you a unicode string and you need to convert it into a byte-string before you send it over the socket. You do that using `str.encode`. Note that you will need to `bytes.decode` it on the other side before you can pass it to `json.loads`."
6,What's the contents of `user_info.json`?
6,Quite the contrary; radians are much more modern than degrees. Mostly used by mathematicians and programmers. ;)
6,"I expect you're storing your angle in degrees. Those functions need radians. That's why it's spinning too fast. The `math` module has functions for converting one to the other.

Also, your `self.angle` looks like it has 0 degrees pointing north, but because of the way the coordinates work, the code I gave will result in 0 being down. You'll need a minus sign."
6," You're definitely going to want to brush up on trig; it's pretty essential for doing anything involving rotations in games.

Their full names are _sine_ and _cosine_. They're the basic functions of trigonometry. In python, there are corresponding functions available in the [`math`](https://docs.python.org/3/library/math.html#trigonometric-functions) module."
6,"`sys.stdout` is already open and you can just write to it.

    sys.stdout.write('Hi!')

This is effectively the same as calling the `print` function, except with a less convenient interface.

Probably best not to close it."
6,"Do you know your trigonometry?

    new_x = center_x + sin(angle) * radius
    new_y = center_y + cos(angle) * radius

Those equations will give you a point `new_x, new_y` that is `radius` pixels away from `center_x, center_y` in the direction of `angle` (in radians)."
6,I don't really understand. You move the hitbox to where it needs to be; you don't rotate it.
6,Your code is not self-contained; you never define `shuffledCards`.
6,"Pygame's rectangles are axis-aligned bounding boxes (aabb), which means that they cannot be rotated.

You generally don't want to be rotating your hit box. Part of the point of having a hit box instead of just colliding with the image directly is to simplify the collision code and not have to account for complexities like this. In your case you should probably create a small square hit box that doesn't change size and just follows the tip of the knife."
6,"Your parent process is quitting before the shell can do anything. Use `subprocess.run`.

Do not use `shell=True` unless you're actually using shell features. The command you have now will use the shell to launch the shell, which is redundant; remove that argument and just launch the shell directly."
6,"Please post the full and exact output of you making a virtual environment and trying to activate it, including your `which` and `pwd` commands, and also any errors you get. English descriptions are often too vague."
6,I would consider this code to be malware. It's trying to make changes to my system in a way that pretty likely to break something. You absolutely should not do this. You need to rethink your approach.
6,"The code you posted does not seem to correspond with your output. That code should fail with a `NameError` about the `thread` variable not being defined.

Perhaps there's some sort of caching going on. What is the output of `ls -la`?"
6,"Catching an exception and doing nothing is only permissible _when doing nothing is the correct way to handle that exception_. Or to put it another way: you should always handle exceptions, and sometimes you handle them by doing nothing.

So yes, it is permissible in some cases. However, you should consider it a code smell. Doing nothing for an exception isn't bad in and of itself, but it's sometimes an indication that there's something wrong somewhere else in your code.

Other posters have talked over your actual use case, and I mostly agree that this is a sign you shouldn't be using a dictionary here. A set makes more sense."
6,"If you just want to make your dictionary iterable then you should implement `__iter__`, not `__getitem_`."
6,"This question is so general that it doesn't really have an answer. At least, not a satisfying one.

You use a tool for a job if that tool helps you to complete that job.

There is no best way. Some ways may be better than others in certain circumstances.

You complete common tasks by researching them, breaking them down, and then making attempts to complete them until one works."
6,"You need to specify an encoding when you open the file since your computer's default encoding doesn't support cyrillic. `open('test.txt', 'w', encoding='utf8')`"
6,If you're going to use another gui library anyway then you should find one that does everything that you need and use that instead. Do away with tkinter altogether. Trying to make two different gui libraries interact would be more trouble than it's worth.
6,"You don't need to run `pygame.quit` as that will be called for you when you exit. There's no reason why either of those codes wouldn't work, but all you really need it this:

    while not game_over:
        for event in pygame.event.get():
            if event_type == pygame.QUIT:
                game_over = True"
6,"You absolutely should not be installing your custom fonts to the system without the users permission.

The normal way that you would do this is to have your program load the font from the file directly without installing it system-wide. Unfortunately, I don't think tkinter is capable of that.  
https://stackoverflow.com/questions/11993290/truly-custom-font-in-tkinter"
6,"Add `print(repr(stmts))` to your loop, run your code again, and post the output here."
6,"When I linked you to SSCCE, it's not because I wanted your code to be shorter. It's because your code is not self-contained.

The problem is that those variables are not defined, so you need to define them somehow. Exactly how you should do that depends on the parts of your code that you haven't posted."
6,"The code that you posted does nothing because you never call any of these functions. I understand that you just didn't post that part, but it's important because it matters what order your functions get called in.  [SSCCE](http://sscce.org/)

The fact that this kind of function calling order matters is one of the reasons that everyone tells you not to use global variables."
6,"    help(sys.stdin)

Part of the problem is that you're using a legacy version of python but trying to look up docs for the most recent version, and `sys.stdin` changed type since then. The actual docs you want are [here](https://docs.python.org/2.7/library/stdtypes.html#bltin-file-objects). In python 2 `file` is one of the built-in types and so is documented on the page for built-in types. There is no inheritance hierarchy for `file`; it's a subclass of object and that's it.

Another problem that you're having is that in python 3 ""file"" is an interface, not a concrete class. It's an interface in legacy python too, but there it's also a concrete class as well. The python docs are not particularly good at documenting interfaces because there's no actual code associated with them so there's nothing to attach the documentation to. That's part of the reason why you often find information in a tutorial-like format.

The python docs are organised by module. You look things up in them by starting with the module that contains the thing you're looking for. There are special pages for the built in functions and types that don't have a module. For example, you start at the [library reference](https://docs.python.org/3/library/index.html) and look for the module you want. This takes you to the page for the [`sys`](https://docs.python.org/3.7/library/sys.html) module and then to [`sys.stdin`](https://docs.python.org/3.7/library/sys.html#sys.stdin). There's some information in that entry, but not the stuff you're looking for. The important thing to notice there is the sentence ""These streams are regular text files like those returned by the open() function"". There's a link to [`open`](https://docs.python.org/3.7/library/functions.html#open) there. This next entry is complicated, but there's one paragraph that starts with ""The type of file object returned by the open() function depends on the mode"". This paragraph contains the information you need.

Admittedly, I'm using python 3 docs here because the python 2 docs aren't great for this particular example. But in general the ""starting at the module"" approach is the one you should use. You skipped past `sys.stdin`, leaped straight to `file`, and ran into a dead end because of the version mis-match. You looked for types and methods. Look for modules."
6,"Yes, except the ""(or whatever language)"" part. The shebang is a thing from unix, and it's not normally used at all on windows. Windows itself won't notice if you have a shebang or not. But the python devs decided to look at the shebang even on the windows port of python to help it figure out what version to use, since files written for unix will already have it. On windows the shebang is specific to python and won't work for any other language.

This is why the windows version of the shebang that's in all the resources only contains the version number and not that `/usr/bin/env` thing. Windows only needs the version information. However, without `/usr/bin/env` it's not a valid shebang on unix. It does no harm to include the whole thing and that way the shebang will work on all operating systems and your code will be more portable."
6,"1. Geany is an IDE that has an ""execute"" button that starts up your code inside a testing environment for your convenience. This is great when you're writing your code, but most people aren't going to want to download geany just to run your code the same way you do.

2. It's an exercise in learning how your computer operates. You don't have to use the command line if you don't want to, but the concepts that it teaches are more widely applicable. For example, if you don't know what a current working directory is then you might have trouble when it comes to opening files from python code.

3. The batch file just adds another layer of indirection. It's useless and I don't know why tutorials insist on making you write a script to run your script.

4. You should put the shebang in all your files that are intended to be run directly (as opposed to imported from other scripts). The shebang you should use is `#!/usr/bin/env python3` despite what many resources will tell you. This one works everywhere. Don't use `#! python3`, as that's only useful on windows. The shebang serves two functions.

    It tells the operating system which version of python to use. This is only really useful if you have multiple versions installed, but that's pretty common.

    On unix-like operating systems (everything except windows) it tells the os that this is a python script and not some other language. Without the shebang you can run your code with a command like `python my_script.py`, but with it you only have to type `./my_script.py`."
6,"Please post an outline of the structure of your project, not an english description.

Probably, you either need to install your code properly, or you need to get rid of the src directory."
6,"Its difficult because one of the things you did was to update pip and setuptools, and I don't think it's a good idea to try to use pip to uninstall pip. I think the best place to start is to reinstall (overwrite) all the affected packages using pacman:

    sudo pacman -S python-setuptools python-pip python-requests python-urllib3 python-chardet

The pip versions of these packages and the pacman versions should be fairly similar so this will mostly mean that pacman overwrites the files with the same contents. I expect that you will get some warnings about pacman not being able to find some of the files; these warnings are okay, but if you get any other warnings or errors then stop what you're doing and post the output here so that I can debug.

That takes care of the files that should be there, but you also want to take care of the files that shouldn't be there. You need to search for [lost files](https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks#Identify_files_not_owned_by_any_package). That link gives a few ways to find them, but we're not interested in every lost file on your system. We only care about those files that may have been placed there by pip. Probably all of the relevant files will be in `/usr/lib/python3.7/site-packages` and you can use this command to find them:

    find /usr/lib/python3.7/site-packages | LC_ALL=C pacman -Qqo - 2>&1 > /dev/null | cut -d ' ' -f 5-

It might be worth running one of the other suggested commands and looking for files in other directories, but know that you will see a bunch of false positives.

These lost files will need to be deleted. Be _very careful_ when you do this. You will need root access. If you find files in this list that don't seem to have anything to do with the packages that we're working on then leave them alone for now. It's better to have an unnecessary file than to lack a necessary one. You may want to go back and investigate why those files are also lost, but that's a job for later.

Once you've done this your system should be clean, but it might be a good idea to re-run the above pacman command again just to make sure that you didn't delete something important by mistake and that there are no errors now. You will probably get the `RequestsDependencyWarning` again, but that's fine. It will go away once you get an update from pacman.

This last step is optional, but I recommend it. You used pip to install stuff into your home directory. These home installations will override your system installs any time you're running as your own user. This is fine and working as intended, but pip doesn't do automatic upgrades which means that you're going to have to make sure that you run `pip install --user --upgrade whatever` every now and then for every package that you have installed there, otherwise you'll be running out of date versions. It doesn't make much sense to have a home installation when you also have the same thing installed with pacman, especially since pacman gives you automatic updates. Uninstall any home packages that also have system packages (unless you have a reason why you want a home install):

    pip uninstall setuptools pip requests urllib3 chardet

Do not run this as root. It will ask you if you want to uninstall the packages before it does so. Check the file listing that it gives and only uninstall the ones that are actually in your home directory."
6,"There's a module in the standard library called `argparse` that will help you parse command-line arguments.

To get it into package managers you have to create a package and maybe convince a distribution to put your package in their repo. The process for doing this is different for each one."
6,"You should not have done any of this. This is not an error, it's just a warning. It's mostly harmless. The fix would have come through pacman soon (it's already in arch, don't know how manjaro works here) and the issue would have been resolved. By running `sudo pip` you've remade your previous mistake. You've overwritten files that pacman wants to control, and now when the fix comes through there's a chance that pacman will get confused and cause you trouble when upgrading. You should not run pip as root."
6,https://bugs.archlinux.org/task/62592
6,https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_make_variable_variables.3F
6,"I think you're looking for code like this:

    for custom_style in CustomStyles:
        style = styles.add_style(custom_style.value['name'], WD_STYLE_TYPE.PARAGRAPH)
        style.base_style = styles[custom_style.value['base_style']]
        ...

I'm not convinced that this is better than what you already had. It might be, but I feel like I'm missing some context here. Your enum feels weirdly disconnected from your problem. Could you justify why you want to move to an enum?"
6,"It's really hard to answer this question in a satisfactory way. I can give you an abstract description of how do to certain things, but different structures work best for solving different problems. You won't be able to apply this knowledge without a lot of hands on experience, because of all the various exceptions and complications that come up. Ultimately, you learn this stuff by trying out various structures in different situations and seeing how well they work. There are lots of resources out there on the web that can give you ideas:

* https://docs.python-guide.org/
* https://docs.quantifiedcode.com/python-anti-patterns/
* https://aosabook.org/en/index.html
* Search the web for phrases like ""architecture"" and ""design patterns"".

But there's no substitute for just writing a lot of code."
6,"While it is possible to look for other programs running on the computer, including copies of yourself, this is likely to be pretty brittle and requires making lots of assumptions about what exactly it means to be another instance of the same program.

I think you would be better served by making it so that you don't have to answer the prompt in order to start playing a new sound. Honestly, that sounds like a bug. Two different processes should be completely independent unless you've explicitly made them communicate with one another. Post your code and explain how you're currently running it."
6,"One simple improvement would be to not run `re.escape(keyword)` every time through the loop.

Another possibility is that you don't actually have to read the file line by line here. You can run the regex on much larger chunks of data at a time and that should give you a boost."
6,"All objects in python are passed the same way in python. It's just that mutable objects can be mutated, while immutable ones cannot."
6,[Facts and Myths about Python names and values](https://nedbatchelder.com/text/names1.html)
6,http://people.cs.ksu.edu/~rhowell/asymptotic.pdf
6,"Strictly speaking the classification of your function is `O(n)`. You will see some people use multiple variables like your `O(a+b)` to try to capture the idea that there are two independent variables involved. This second form isn't technically correct, but it is useful."
6,Don't create files there in the first place. You can't assume the package directory is writeable. Create the files somewhere else (exactly where depends on what you're doing).
6,"The key concept you're missing here is the difference between an _iterator_ and an _iterable_. They are not the same thing. An iterable object is any object that you can iterate over; that you can use in a loop. Iterable objects have the `__iter__` method defined on them. Lists are iterable. When you call `iter` on an iterable you will get back an iterator. Iterators are objects that know how to loop over their associated iterable. Iterators have the `__next__` method. To solve this problem you need two objects; both the iterable and the iterator.

[Loop like a Native](https://nedbatchelder.com/text/iter.html)

To help point you in the right direction, here's a skeleton that you can use. You should only have to fill in the ellipses with code of your own. No other changes are required.

    class ReverseList(list):
        def __iter__(self):
            return ...

    class ReverseListIterator:
        def __init__(self, ...):
            ...

        def __iter__(self):
            return self

        def __next__(self):
            ...

    reverse_list = ReverseList([1, 2, 3, 4, 5])
    for item in reverse_list:
        print(item)"
6,"    >>> int.from_bytes(b'\x04\x00\x00\x00', byteorder='little')
    4"
6,I see. You mean you just want to see what's been imported into the current file. That code is easy to read; in the sense that it does what it does in as straight-forward manner as possible. The only simpler thing you could do is to just scroll up to the top of the file where all the import statements are.
6,"The locations of the variables (what scope they're in) are decided at the moment the function is defined, not when it's run. This is called _lexical scoping_.

Think of it this way; if `set_global` used other functions that were defined in `Script1` I wouldn't want to have to import those functions (and the functions that those functions use, etc.) into `Script2` just to be able to run it."
6,"The code that you have does what you want. It shows you all the modules that have been imported. You can get them in a list using `list(sys.modules)`, but it will contain all the same information."
6,"Your functions sets the variable `Script1.x`. It doesn't set `Script2.x`. Global variables aren't truly global in python, they're module specific.

Don't do any of this though. Have your function return its results."
6,"Those aren't folders, they're files; you don't want a trailing slash. But other than that, yes I think that's the only change you need to make.

Note that you might have permission issues with these files if you're not a part of the right group. The exact permissions necessary will depend on how your os is configured. `udev` is usually the program that handles this on linux, so you'll want to look into that.

I wouldn't have a list of filenames that are exactly the same except for one letter. Use `pathlib.Path('/dev').glob('sd?')` to get a list of files that match that pattern."
6,"On linux, sd cards are accessible as files under names like `/dev/sd?`. You're right that you can't mount an sd card that has no filesystem, but you don't need to mount them to read their raw contents.

It would be helpful if you showed the linux version of your code, and described the problem you're having with it."
6,"If you're doing testing properly then you write unit tests and run them with a test runner. If you just want to do some simple manual testing then you open a repl, `import e.Ciao`, and start poking around."
6,"I saw your edits and you other posts. I don't have a lot of experience with ansible, vagrant, or centos so take this with a grain of salt.

If you get permission errors without root then you might want to consider if you shouldn't be modifying those files. Obviously, you will occasionally need root to make perfectly legitimate changes, but permissions are there to protect you, and a lot of the time the correct way to do something is the way that doesn't require root. Case in point: you don't generally want to use pip to install to a python installation that is managed by your package manager. If pip and yum are both trying to manage the same python installation then they will confuse each other and cause problems. Use a non-root user as much as possible; don't become root everywhere.

You want to switch to your virtual environment as soon as possible, because that's where it's safe to run pip. If you can use yum to install virtualenv from a repo then do so, but it looks like that's not possible. Fortunately, python 3.6 comes with the `venv` module as part of the standard library, and you can use that to create your virtual environment. It looks like you can tell ansible's pip module to use it with something like `virtualenv_command: python3.6 -m venv`.

I'm not completely clear what exactly you're doing with the symlinks, but that sounds like a bad idea. Let the system handle stuff like that."
6,"This is working as intended. You're not supposed to run modules that are inside a package directly. The entry points to your code should be outside your package (like `Hi.py` is).

Step back and figure out what you're really trying to do here. Why do you want to run `Ciao.py` directly?"
6,Sure. But why are you doing that? Is the default user not sufficient for some reason?
6,"If there's thai script in your data then it should show up as thai script (`ไม่`), not unicode escapes (`\u0e44\u0e21`). The fact that you're seeing unicode escapes means that you're not unescaping your data somewhere in the process, or you're escaping it one time to many. The fact that your regex works is nice and all, but it doesn't fix this underlying issue. There's still a bug in your code, somewhere."
6,"Those aren't emojis. That's Thai script:

ไม่ไหวแล้วแม่ควานลินไม่ส่งให้เราไม่เป็นไรเราส่งให้แทนกะได้

If `.encode('ascii', 'ignore').decode('ascii')` doesn't work then there's something weird going on. Looks like you don't actually have any non-ascii characters in your string because they've been escaped for some reason. Post more of your code. Focus on the part that is loading in this data.

(By the way, don't decode with a different encoding than you used to encode, unless you know what you're doing. It doesn't hurt in this case because utf8 happens to be ascii-compatible, but in general that's a great way to corrupt your data.)"
6,"I think what's happening here is that one thread is connecting to the database, starting a transaction, and then being interrupted by another thread before it can finish it's transaction. This second thread tries to start a transaction and fails, causing the error that you see. The GIL means that only one piece of python code can run at time, but python periodically pauses threads so that another one can start running.

You should nominate one particular thread as being responsible for writing to the database and have all the other threads send their data to it. As you say, you should use a queue for this."
6,The `color` import doesn't work because there's no module called `color`. The module you're looking for is called `extensions.color`.
6,"You compile a python project by running `python entry_point.py`. Those `.pyc` files that python creates are compiled python code (the `c` stands for ""compiled"").

But I'm betting that that isn't what you mean. It sounds like you want to run your python code without python being installed on the target computer. The most common way that you do that is to bundle a python interpreter along with your python code using something like [PyInstaller](https://www.pyinstaller.org/). This process is called ""freezing"". A less common, but still viable, way is to compile your python down to x86 bytecode using something like [Nuitka](https://nuitka.net/).

Note that there's not any good way to make something that will run on a different operating system than the one that was used to create it. If you want something that will run on windows then you need a windows installation to make it."
6,"I don't understand. Your tests should not need to import kickoff in order to know the environment. Instead, kickoff should tell them the environment using whatever mechanism you've set up for that. Tests don't _pull_ environments from kickoff, kickoff _pushes_ environments to tests.

There's a reason people tell you to use function parameters instead of global variables."
6,"The two most important shell concepts that are relevant to python are the _current working directory_ and _$PATH_. You should make sure you understand those two things.

The shell is a whole separate programming language and you can dive down that rabbit hole just a deeply as python, but you don't necessarily need to know every command available. Something like [LinuxCommand](http://www.linuxcommand.org/) will teach you the basics (the macos shell is the same as linux, mostly).

As far as ""set up"" goes, my best advice would be to learn how to use [virtual environments](https://docs.python.org/3/tutorial/venv.html). Venvs are intended to allow you to install things that conflict with each other at the same time. But they will help you keep things straight by giving you a specific, known directory containing a python installation that you can freely peek inside and explore, without touching your system installations.

Also, if you don't know about them, these are useful:

* https://docs.python.org/3/installing/index.html
* https://packaging.python.org/
* https://docs.python-guide.org/"
6,"The command I gave you is a terminal command. The bit of code at the end just tells you which python installation your idle is using.

Probably what's happening here is that you have multiple python 3 installations that are all scrambling to own the `pip3` command. You're going to want to take stock of your python installations (where each is installed and what versions) and try to keep them under control. In the future, don't run a command until you know exactly what version of python is going to be used for that command. You need to keep them straight or you'll just make a mess. If you run `pip3 --version` it will tell you what installation that command is associated with."
6,"Your root user's $PATH doesn't include `/usr/local/bin` which is where pip is. Is there a reason that you're running as root? That's a pretty bad idea, generally."
6,You can run pip through python by doing `/path/to/python -m pip install pyperclip`. This will install pyperclip to the version of python specified by `/path/to/python`. You can find out which python your idle is running under by running this python code under idle: `import sys; print(sys.executable)`.
6,"You can do something like this:

    def upper_function(variable, i=None):
        kwargs = {}
        if i is not None:
            kwargs['i'] = i
        print_values(variable, **kwargs)

This allows you to have `i` as part of your interface and be able to pass it to `print_values` without having to duplicate the `3`."
6,Where did you move your images to and what exact changes did you make to your css?
6,"That line doesn't need to know what `a` is in order to run. It only needs `b` to be defined, and since you never assign to `b` within the `f2` function then python knows it isn't a local variable and looks further out and finds the `b` in `f1`.

Variables are tied to the function they are assigned in. If you assign a variable inside a function then that variable is a ""new"" one that has no relation to other variables elsewhere that might share the same name. Inside `f2` you assign to `a` so `a` is local, but you don't assign to `b` so `b` is non-local."
6,"You are getting confused because the variable you call `a` in `f1` is a completely separate variable to `a` in `f2`, even though you gave it the same name.

If you assign a variable inside a function then python will assume that it is a local variable. All four of your alternatives assign a value to `a`, so python reasons that `a` must be a local variable of the `f2` function. But that variable is undefined up until that point. When you use a variable that has not been defined you get an error."
6,What error did you get when you tried it?
6,"My computer doesn't even have a C drive, so if I look at your website it will try to load `C:/project/img/bkg.png` and fail because that file doesn't exist. You need to give the urls of the images as they would appear on the website, not the paths that exist on your hard-drive. Put the images in your `static/` folder and use something like `background-image: url(""bkg.png"");` (if you don't specify a folder then it will look in the same place as the css file)."
6,> * Posting screenshot of the code is (generally) not allowed. Read posting guidelines.
6,"You're seeing the `None` because you're printing whatever value your function returns. If you don't want to see it then don't print it.

It would help if you posted your code so we could see what's going on."
6,"There's not really any good way to set these properties directly unless you own the window, but you can (probably) get qterminal to set `WM_NAME` for you be setting the terminal title. To set the terminal title you send a particular ansi escape sequence that looks something like this:

    this_scripts_name = 'example123'
    print(f'\x1b]0;{this_scripts_name}\x07')"
6,The whole point of `with` is that it exits the context (closes the file) at the end of the block.
6,"It seems that `get_forecast_weather` should just return a list of all the data that you want to put in the database. You're already making a list in that function; put the data you want in that list.

https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_make_variable_variables.3F"
6,"Probably, all you need is a line of code that looks something like `paddle.y = ball.y`.

https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F"
6,"You just set the y position of the paddle to be the y position of the ball (possibly with an offset to keep everything centred).

We don't know how to track the position of the paddle either, because we can't see your code."
6,Show us some actual data and the table you wish to make from it. It's not clear to me why you can't just add the data into your database directly from the list.
6,Because you're decoding using the wrong encoding. Post your code.
6,Pass the `--editable` flag to pip when you install the library and any changes you make will be immediately reflected in the installed version.
6,"What you have there are `bytes` objects. In the same way that you need to encode data on the way into the serial port, you need to decode it on the way out.

Look into the difference between `str` and `bytes`."
6,Absolutely you would need to do that. You may also need to change `iter_unpack` to something else depending on what you're doing.
6,You don't get any output because you're not printing it.
6,"I would suggest converting to `pathlib`; it was at least written this century.

    lst = pathlib.Path(szDir).glob('*.xml')

Does that work any better?"
6,"I don't think I can say much more than this: Do it. Start. Write the code.

I doubt you're going to find a library that is more useful here than what you already have; `struct` and `json`/`xml`.  Those are the tools you will need. You just have to sit down and work your way through the logic necessary to achieve this task.

You unpack your example format like this:

    for string, number in struct.iter_unpack('6si', data):
        print(string, number)

You need to adapt this code so that the `'6si'` depends on your json or xml."
6,https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_make_variable_variables.3F
6,"This comes down to the way python is compiled. A global variable lookup compiles to a `LOAD_GLOBAL` instruction while a local variable lookup compiles to a `LOAD_FAST` instruction. Therefore python needs to know which variables are global and local during compilation before a single line of code gets run. The normal way that it does this is to look at whether the variable gets assigned within the function. Assigned variables are local.

Python does not read one line at a time."
6,"This means that one of your variables is set to an instance of [`jinja2.StrictUndefined`](http://jinja.pocoo.org/docs/latest/api/#jinja2.StrictUndefined). It's complaining that it's not iterable, which probably means the variable in question is `ci.device.display_name` because that's the only variable you're trying to iterate over. Double check that that variable actually exists and that you spelled it correctly."
6,"I converted your generator expression to a list comprehension and added appropriate prints:

    $ python test.py
    156.2590993809863
    155.94003613298992

A better test:

    $ python -m timeit --setup 'def foo(x, y): return x + y' 'foo(1, 2)'
    5000000 loops, best of 5: 92.3 nsec per loop
    $ python -m timeit --setup 'foo = lambda x, y: x + y' 'foo(1, 2)'
    5000000 loops, best of 5: 85.3 nsec per loop

Seems like lambdas are faster (ever so slightly, on my machine, used in this exact way, for these particular tests). Are you getting different numbers? Lamdbas and named functions actually compile down to the same bytecode, so it's hard to imagine there's a real performance difference:

    $ echo 'def foo(x, y): return x + y' | python -m dis
      1           0 LOAD_CONST               0 (<code object foo at 0x7efce9c43930, file ""<stdin>"", line 1>)
                  2 LOAD_CONST               1 ('foo')
                  4 MAKE_FUNCTION            0
                  6 STORE_NAME               0 (foo)
                  8 LOAD_CONST               2 (None)
                 10 RETURN_VALUE

    Disassembly of <code object foo at 0x7efce9c43930, file ""<stdin>"", line 1>:
      1           0 LOAD_FAST                0 (x)
                  2 LOAD_FAST                1 (y)
                  4 BINARY_ADD
                  6 RETURN_VALUE
    $ echo 'foo = lambda x, y: x + y' | python -m dis
      1           0 LOAD_CONST               0 (<code object <lambda> at 0x7fb49f3f4930, file ""<stdin>"", line 1>)
                  2 LOAD_CONST               1 ('<lambda>')
                  4 MAKE_FUNCTION            0
                  6 STORE_NAME               0 (foo)
                  8 LOAD_CONST               2 (None)
                 10 RETURN_VALUE

    Disassembly of <code object <lambda> at 0x7fb49f3f4930, file ""<stdin>"", line 1>:
      1           0 LOAD_FAST                0 (x)
                  2 LOAD_FAST                1 (y)
                  4 BINARY_ADD
                  6 RETURN_VALUE"
6,"Both named functions and lambda functions are created whenever the code that creates them is executed. If you put that code in a loop then it will execute once for each time around the loop. If you put that code inside a function then it will be executed each time that function is called. People tend to put lambdas in places where they are likely to be re-executed, but the same thing would happen if you put a named function in the same place. There is no difference between `def` and `lambda` in the sense you're talking about."
6,"Could you elaborate on ""extra overhead""? I've not heard that."
6,"The way that it works is that python puts the location of your entry point on `sys.path`. Your module root exists at the same level as your entry point. In order to get `import config` to work, your entry point needs to be in the same directory as `qed/config/` (namely `qed/`).

Note that an entry point is not the same thing as your app. You can keep the majority of your code inside `qed/source/app/` if you want. All you really need is a file in the base of your project with code something like this:

    #!/usr/bin/env python3
    import source.app
    source.app.main()

(Assumes that the `source.app` module defines a `main` function, which it probably should.)

Note that `source` and `config` are common names and it would be easy for them to conflict with other packages. You would usually put all your code into a single package and keep it relatively flat:

    - qed/
        - qed/    (the package is called ""qed"")
            - __init__.py
            - config.py
            - api.py
            - whatever.py
        - entry_point.py
        - readme.md
        - ..."
6,"You can take _small statements_ and put them together on the same line, but you can't do that with _compound statements_. _Small statements_ are any statements that don't introduce a level of indentation. Example A contains three _expression statements_, which are considered _small_. B contains a _for statement_ which is _compound_, so it's not valid.  
https://docs.python.org/3/reference/grammar.html

Using more than one statement per line is almost always unpythonic."
6,You need to put your entry point at the base of your project. Move `qed/source/app/main.py` to `qed/main.py` and everything will work as you expect.
6,"What command was giving you the ""Requirement already satisfied"" message? What exactly have you done to try to get further forward with this? Did you try removing the files that you copied over and reinstalling pygame properly?"
6,"Well, this query would be written with parameters something like this:

    cursor.execute('''
        SELECT EmployeeID
        FROM Shift
        WHERE
            EmployeeID = ?
            AND ClockIn IS NOT NULL
            AND ClockOut IS NULL
            AND (
                Start LIKE ?
                OR Start LIKE ?
                OR Start LIKE ?
            )
    ''', [uid, f'{hourAfter}%', f'{hourBefore}%', f'{dateHour}%'])

If you have trouble converting other queries then we should be able to help with that.

There was a time when sql injections were the single biggest cause of security problems. A lot of people thought they weren't vulnerable, but their code ended up being executed in a context that they didn't expect and they got their database stolen anyway. Nowadays they've mostly been overtaken by javascript injections (cross-site scripting), because of sql parameters and other features that help to protect us. But, you can understand why people are still a little paranoid about them. Even if you aren't vulnerable, it's not a good idea to encourage bad habits."
6,"Break it up so it's not all on one line:

    cursor.execute('''
        SELECT EmployeeID
        FROM Shift
        WHERE
            EmployeeID = '"" + uid + ""'
            AND ClockIn IS NOT NULL
            AND ClockOut IS NULL
            AND (
                Start LIKE '"" + hourAfter + ""%'
                OR Start LIKE '"" + hourBefore + ""%'
                OR Start LIKE '"" + dateHour + ""%'
    ''')

This should make the problem much more obvious, and as a bonus you will get meaningful line numbers in your errors.

Also, you really should fix the sql injection. I know you said you're already aware of it, but there's a reason everyone is freaking out about it. In your evaluation, you should just mention the bad version of your code and then you can explain why you decided not to use it."
6,You can see the cwd of a python process by running `import os; print(os.getcwd())` (the equivalent of the shell's `pwd`).
6,"For code formatting, I personally just invoke `black` when needed. If I'm adding or removing indentation during refactoring I use the standard `>` and `<` commands.

If you're going to spend all your time in insert mode and use the arrow keys a lot then there's not much point in using vim. Any other editor will work for you just as well. Vim wants you to stay in normal mode the majority of the time and only occasionally enter insert mode (as your \^O point suggests you're trying to do)."
6,"There is no double slash there. That's just what a python string looks like in this context; in the same way that you write a tab character as `\t` you're supposed to write a backslash as `\\`.

Python doesn't generally give you an error without a good reason. If it says that there's a problem with the permissions of that path then there's probably a problem with the permissions. Try a different filename in a different directory and see if that works. Maybe it's the shared drive that's causing trouble, or some obscure acl policy that the IT department has put in place? Also, try writing a simple script that does nothing else but open that one file and see if it runs."
6,"You just need to find the first filename that isn't already in use, or you need to potentially do something with every filename? The former would just look something like this:

    start_at = 0
    for num in itertools.count(start_at):
        fname = f'image{num}.jpg'
        if not os.path.exists(fname):
            break
    print(fname)"
6,Are you sure that directory exists and they have permissions for it?
6,"Note that some databases allow you to enable compression in the database itself and have it handle all that for you transparently. Look into this possibility before implementing something yourself.

Also, a lot of different kinds of binary data are already highly compressed, so it may be that adding more won't free up any space."
6,"Please post the complete error, and simplest template you have that causes it."
6,"Yeah, so it's as I suspected. For you the `pip` command is linked to python 2. When you want to run pip for python 3 you need to use `python3 -m pip`. You may also be able to use `pip3`, but that's not recommended.

When you post the output of a command, please make sure to include the exact command you ran to get that output (I assume it was something like `python3 -m pip install pygame`). It's saying that pygame is installed, but that may be because the files that you copied over earlier are confusing it. Does pygame work now?

You don't need to worry too much about the out-of-date pip, as the old version will work just fine right now. You can upgrade it if you want, but it might be best to focus on one thing at a time."
6,"> .txt files only support ascii

That is not at all true. What characters you can use in a text file depends on what encoding it's using. When you read and write from a file you need to tell python what encoding to use, or else python will pick your operating system's default.

Python literals are not a valid serialisation format. You should be using something like json instead of `ast.literal_eval`. That said, json won't give you any performance improvements over what you're currently doing.

Fundamentally you will need to decide whether you want to store your data in memory (limited and fast) or on disk (plentiful and slow). Aside from that tradeoff, the only thing you can really do is to improve the time it takes to find the particular string that you need. For that, In memory you would put your strings in a dictionary, while on disk you would put them in a database."
6,What is the output of `pip --version`? Also run `python3 -m pip --version` and post the output of that.
6,"Which website? python.org?

What specific command did you use?"
6,"It looks like you didn't move everything over and now you have a broken install. Don't manually move files around.

You need to run the install again, but get it to install in the correct place this time. Probably this means running pip using the correct version of python. How did you install python and pygame originally?"
6,"Python imports aren't file paths; `from .. import whatever` doesn't mean ""Go up a directory and import from there"". It means ""Go up to the parent package and import from there"". You are not currently in a package, so there is no package to go up to, so you get an error. It's sort of analogous to how `/../file.txt` isn't a valid file path.

If you want to run this script manually then it needs to be at the base of your project. But you would generally want to run tests using a test runner such as pytest."
6,"I guess I've misinterpreted your question. You've already fixed the problem I'm talking about and now you just want to try to recover your broken data? If that's the case then I apologise. If you're no longer doing `str(some_bytes)` then there's no issue.

It has never been my intention to make you feel bad. Again, I'm sorry. I was just trying to convey my (apparently unneeded) point. This is not the first time that someone has come here wanting to convert byte literals back into bytes, and in those cases they usually don't realise that byte literals are a bad way to work with data. Such people often resist fixing their original mistake and it seemed to me that you were one of those."
6,"One thing you can do to measure the effectiveness of your tests is called ""test coverage"". Basically, you run your tests and you see which lines of your code got run by your tests. This technique is really good at telling you when your tests aren't good enough (because a particular line of code wasn't run, so it can't have been tested), but poor at telling you when your tests are good enough (just because a line of code was run, doesn't mean it was properly tested). Obviously, you can only use this technique after you've written the actual code. Look into `coverage.py` if you're interested.

Your tests cases look fine. One thing that might be worth testing would be what happens when you pass in some data that is iterable but isn't a string; try calling your function with something like `['A', 'a', 'A', 'a', 'A']`."
6,"Imagine you need to send a person to the other side of the world. You decide to put them into a package and send them over the mail. But they're too tall to fit into the box, so you saw off the person's legs. Now they fit perfectly. You bundle the person and their legs into the box and mail it to the other side of the world. You receive the package at the other end and now you left wondering just how you're going to reattach the person's legs.

In this analogy /u/Vaphell is a talented master surgeon who is an expert at sewing limbs back on. Isn't it amazing how they can solve your problem in exactly the way that you needed! I guess you are justified in doing what you're doing so long as there's someone who can put it right afterwards! It works just fine, so how could anyone possibly object to amputation?

You should have just bought a plane ticket.

---

Please forgive my slightly hyperbolic metaphor.

Your problem is that you are corrupting your data. Calling `str` on a bytes object like that is almost always the wrong thing to do. Line two is incorrect and you need to change it. Sure, if you're smart you can find some code to put on line three that makes everything work, but it's a hack.

You haven't given enough specifics for me to say exactly what you should replace it with. You mentioned json, so possibly you should be using base64?"
6,"One thing you can do to speed up the script is to bail early if you find a difference. Instead of storing just the hash (which requires you to read the entire file), you can store information that is less onerous to compute and only calculate the hash if those things fail.

    import pathlib

    class File:
        def __init__(self, path):
            self.path = pathlib.Path(path)
            self._size = self._hash = self._header = None

        def __eq__(self, other):
            return (
                self.size() == other.size()
                and self.header() == other.header()
                and self.hash() == other.hash()
            )

        def size(self):
            if self._size is None:
                self._size = self.path.stat().st_size
            return self._size

        def header(self):
            if self._header is None:
                with self.path.open('rb') as file:
                    self._header = file.read(100)
            return self._header

        def hash(self):
            if self._hash is None:
                self._hash = hash_file(self.path)
            return self._hash

    print(File('file1.txt') == File('file2.txt'))"
6,Why do you need to do this? Are you trying to find a non-conflicting filename or something?
6,"Simplify. The following code works for me:

    try:
        try:
            raise Exception('first')
        except Exception as inner:
            raise Exception('second') from inner
    except Exception as outer:
        print(repr(outer)) # prints ""Exception('second')""
        print(repr(outer.__cause__)) # prints ""Exception('first')""

Does it work for you?"
6,"Your English descriptions of what's going on aren't useful because they don't contain enough detail. Somewhere in your code you are doing something that is corrupting your data. We need to find it and fix it. Maybe it's not in the file handling, but it's somewhere in there. Post your code.

If you don't want to post your exact code for some reason, then post an [sscce](http://sscce.org)."
6,"Printing a bytes object shows it in a human readable form (a python byte literal), which is not very useful for a computer. Printing bytes helps you to see what's happening, but you should not try to use this format in code or put it in a file.

Show the code that writes to the file."
6,"The data that you currently have is not binary data; they're python byte literals. You should not try to take these byte literals and do anything with them. Instead you should follow the data back to find out where these byte literals came from and try fix the problem at its source.

Show us your code that reads from the socket and writes to the file."
6,"Huh. I couldn't find any example of someone else doing that in the documentation, but I suppose I should have tried that out myself first.

Okay, so the real issue is that you're trying to do  stuff like `{% set ci.status.label = 'Active' %}`. Jinja's `set` statement won't let you use dots in variable names. It's only supposed to be used to set simple variables, not set things inside a deeply nested structure. You can refactor it to something more like this:

    {% if ci.status.label is defined %}
        {% set label = ci.status.label %}
    {% else %}
        {% set label = 'Active' %}
    {% endif %}
    ...
    { ""status"": {{ label | to_json }} ...

Or maybe just this:

    { ""status"": {{ ci.status.label | default('Active') | to_json }} ..."
6,You launch python on windows by typing the `py` command. You typically shouldn't edit PATH.
6,"That makes your question much clearer.

It's not possible. You can't put more than one statement of code in a single statement section. `{% for x in y if z %}` won't work; you have to use `{% for x in y %}{% if z %}`."
6,"Also [Nuitka](https://nuitka.net/), which is 100% python."
6,"Sure, and that's what I meant by ""in the very generic sense that all files are nothing but linear sequences of bytes"". Files can only be read one character after another; there is no other way to access files. So there is a sense in which you're right, but only the simplest sense. Reading in a file is barely the first step of parsing. After that the characters are grouped up into tokens, and then the parser starts jumping around between those tokens —sometimes looking ahead, sometimes backtracking— building up a tree as it goes.

Is this really the hill you want to die on?"
6,"It's not a character, it's a token.

Look, we can keep doing this if you want, but my original point was that the IndentationError happens before the NameError because they happen at completely different parts of the pipeline, and it has nothing to do with the fact that the indentation comes before the `pritn`. That's all I was trying to say."
6,"Maybe, in the very generic sense that all files are nothing but linear sequences of bytes. But python grammar is LL(1) which means that the parser needs to look ahead by one token before it can decide to do with the current one. So in this sense not even the parser is strictly one-by-one."
6,"When I say that `main.py` _imports the package(s) that it needs_ I'm referring to the package that `main.py` needs, which is usually just the package from the current project. So in your case a `main.py` would look like this:

    #!/usr/bin/env python3
    import gui
    gui.main()

All `__init__.py` does is it turns a directory into a package. Any code you put in there will get run when you import that package. So if you run `import calculations` then you're effectively doing `import calculations.__init__`. You can put any code there you want, but many people leave that file empty or nearly empty. It's common to reimport stuff in the `__init__.py` that's defined deeper in the package so that it's accessible under a simpler name.

I don't have any resources at hand, but if you're not already aware of them then you should know that the following deal a little with these concepts:  
https://docs.python-guide.org/  
https://packaging.python.org/"
6,"If the `supercomputer_scripts/` don't import `calculations` or `gui` then they're not entry points to your project and you can put them wherever you think is best.

Most projects have a `main.py` file or something like it in their project root that imports the package(s) that it needs."
6,"Your entry point (`add_find_po.py`) should not be inside a package. Move it into `./` and you'll be able to import it with `import models.CSV`.

Note that you only need `__init__.py` files inside packages. `./__init__.py` isn't necessary."
6,"You don't have to reinstall the package every time you make a change. Just pass the `--editable` flag to pip when you install it for the first time and it will install with a symlink or similar.

You generally don't run scripts from within a subdirectory. Any scripts (entry points) that your project has should be in the `project_root/`, not nested deeper. As a special case of this, you should run tests with a test runner like pytest."
6,"Python does not read one line at a time, one character at a time.

Broadly speaking, python code is run in three stages:

* Parsing; where the code is read in and it's structure is worked out.
* Compiling; where this structure is compiled down to a simpler form.
* Executing; where the newly simplified code is actually run.

Errors can occur in any of these stages and the one that happens earliest is the one that you will see. Indentation errors happen during parsing, so they're pretty early. A misspelling like `pritn` will cause a name error and that is only detected during execution, which is late in the process."
6,"It is expected behaviour when the file itself has no tests. Modules can contain docstrings directly and you can put tests there too.

    '''A module docstring

    >>> 1 + 1
    2
    '''

    def a_function():
        '''A function docstring

        >>> a_function()
        0
        '''
        return 0"
6,When you give it a relative filename then python will look for that file relative to the directory given by `import os; print(os.getcwd())`. Post the output of that code.
6,"`googletrans` does not seem to work with emojis. By encoding the string, all you are doing is corrupting your data in just such a way that the emojis are broken, which allows `googletrans` to work. The correct solution is to fix `googletrans`, and I see you've already filed a bug. In the meantime, what you should do is remove just the emojis and any other problematic characters.

Something like this might work. It remove all characters outside the basic multilingual plane:

    SampleText = ''.join(c for c in SampleText if c <= '\uFFFF')"
6,"My answer? What exactly did you try?

It has nothing to do with converting into a string. `phobia_name` is already a string. It's that the sql string you're building is not correct.  ` WHERE phobia = Storm` is the string that you're currently making (print it out and take a look). This tells sqlite to check if the `phobia` column is the same as the `Storm` column. You want to check if the `phobia` column is equal to a string value whose contents are `Storm`, and for that you need quote marks. Except you shouldn't ever use quote marks like that; you should use prepared statements. Use `WHERE phobia = ?` and add `phobia_name` to the list of bindings that you're using (the second argument to `cursor.execute`)."
6,"You're trying to execute `WHERE phobia = Storm` when you actually want `WHERE phobia = 'Storm'`.

You shouldn't be building sql queries like this, because you've opened yourself up to sql injections. Use prepared statements (the question mark)."
6,You shouldn't use `print` and `sys.exit` there. Raise `NotImplementedError` instead.
6,"`pygame.sprite.spritecollide` expects a sprite group as its second argument, not just a regular sprite. You can use `pygame.sprite.collide_rect` to test between two sprites."
6,Show us a thing that you tried to do and the error you got when you tried it.
6,Post all of the output.
6,What is the output of `python -m pip --version`?
6,Note that you don't need to manually download wheels. If you have the `wheel` package installed then `pip wheel some_package` will download all the wheels necessary for `some_package`.
6,"Virtual environments don't let you run code under multiple versions of python. Not by themselves anyway. They're about having multiple ""virtual"" installations of the same python version.

Virtual environments are used to keep your main python installation(s) clean by not installing every random thing to the same place. You have a virtual environment for each project and you install anything your project might need into the virtual environment instead of into your main environment. This means each project only has access to the exact stuff that it needs and can't accidentally use something else. This is also useful if you have multiple projects with mutually incompatible needs.

If you don't have at least a basic understanding of how to use them then you're going to get confused when pycharm does something in a way that you don't expect."
6,"The `a` variable certainly _is_ defined. It happens on line 3 of your code. `for a in word` means that `a` will take on the value of each of the _things_ in the `word` variable. For a string (`word` is probably a string), the _things_ in it are the individual characters that make up that string.

[Loop like a Native](https://nedbatchelder.com/text/iter.html)"
6,"The reason your updated code is only working on one post (actually the last one, not the first) is because you only ever make one dictionary. Move `post = {}` inside the loop so that you're making a new dictionary for each post. You'll also need to do something else to save the dictionary for later, but I'll leave that for you to figure out."
6,What code have you written so far?
6,You're already using virtual environments because Pycharm makes them for you to keep your projects separate from one another. They have nothing to do with which version of python you're using.
6,"Yeah, you didn't install the library itself. I don't know why it doesn't tell you to in the instructions. After step three you need to run `pip install .`. Honestly, you should just use the pip installation instructions. The standard instructions are really for someone who wants to develop this package (fix bugs or add features), not for someone who just wants to use it.

 I'm not sure how supported this package is, because there's an 8 month old pull request fixing this exact issue (in a suboptimal way) that hasn't been merged, along with 43 other pending pull requests. The author doesn't seem to have done anything in nearly a year."
6,"Are you sure you need to send `Content-Type: application/json` in a request. That's usually something that you would only find in a response. You're not sending them any json, after all."
6,"You can't fix broken data. So don't break it in the first place.

It's your call to `str` that is adding those characters. If you don't want those characters then you shouldn't add them. `textwrap.wrap` returns a list of lines. `str` converts a list into a string, but not the way you want. You could use `str.join` here, but it might be better to use `textwrap.fill` which just gives you a string back, side-stepping the list entirely.

Also, the commands module has been deprecated for more than a decade and has big red warnings not to use it all over its documentation. Use `subprocess`."
6,"That error is consistent with your answer being used as a function argument. Their system is running code that looks something like this:

    def check_answer(answer):
        return answer == 45

    answer = 'dataA = 2\ndataB = 3\ndataC = ...'
    exec('check_answer({})'.format(answer))"
6,That's consistent with what I said. Your last line of code is the only one that's an expression. The other lines are _statements_.
6,I don't think you're supposed to define these variables yourself. The quiz platform is possibly only looking for your last line.
6,"Show us your project structure, how you are running your code, and the complete error that you get. Don't worry too much about red squiggly lines; those might just be your ide getting confused."
6,"It's probably just IT being lazy. Ask them what's up. I'll bet it's nothing to do with licensing

It's not a complicated license. Read it; it tells you exactly what you can and cannot do. Are you redistributing pypdf2's source code? Are you redistributing it in binary form?"
6,"In fact, /u/cyberst0rm's code only works on legacy versions of python, because since python 3.0 `dict.values` has returned a specialised view object of type `dict_values` that does not have an `index` method."
6,"While it's fine to look for a workaround, make sure that you also file that bug so that the problem gets fixed at the source too."
6,"The state of iterators is an internal implementation detail; you're not supposed to care where and how they keep track of their state. You're just supposed to use the `iter` and `next` functions. `str_iterator` objects in particular are written in C and don't expose their internals to python.

`__setstate__` is intended for use in serialisation."
6,https://www.reddit.com/r/learnpython/wiki/faq#wiki_why_is_my_list_of_lists_behaving_strangely.3F
6,"There are installation instructions on both those pages that tell you exactly what to do. Generally you don't want to be using the code straight off github unless you're a developer of that code.

If you've successfully run `python setup.py install` then these libraries are installed and you can use them with no further action. You can `import pexpect`. You should know that the way you installed these packages means you will be running an odd and potentially buggy version of their code and that it may be difficult to uninstall them. Next time, follow the instructions and use pip."
6,"I'm not completely sure what you're asking, but it doesn't sound like you understand. When you write `import x` python will look for the `x` module relative to the file that was originally run, and not the file where the code is currently running. You should never directly run a file inside your package (say, by double-clicking it, or by using `python program/subpackage/test.py`). Have all the entry points to your code outside of any packages."
6,"You cannot run files inside your package directly, as python counts its module root from the same directory as the file that you're running. If you run `./program/subpack2/test.py` directly then python will look for modules in `./program/subpack2`. Anything outside of that is effectively invisible. Entry points to your code need to be in `./` in order to be able to `import program`.

You shouldn't run tests directly anyway. Use a test runner, such as pytest."
6,If you're on a modern version of python then those are not bytes; they're strings. If you're not using a modern python version then you should consider upgrading.
6,I'd like to note that having a little _side-car_ variable running alongside your for loop is not considered good practice. [Loop like a Native.](https://nedbatchelder.com/text/iter.html)
6,"You haven't shown us the exact wording of the assignment. Is is possible that you're misinterpreting it? It's not saying that the `__repr__` should literally print out that format, but that you should write a `__repr__` such that it that makes the object look like that when printed. Obviously, `repr(my_object)` shouldn't print anything; but `print(repr(my_object))` should. It sounds to me like the assignment is assuming the second, since it's pretty common for reprs to be printed.

Also note that reprs are supposed to use a very specific format. You don't really get much choice in what your repr returns. ""This is a 10 year old black cat."" is not at all a valid repr. If you want something like that then you should use `__str__`."
6,Show us an example input and the output that you want to get from it.
6,All that editing you've done to your output makes it really difficult to see what's going on. Just post your true output.
6,https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_make_variable_variables.3F
6,`ast.literal_eval` will not help the OP because they need to parse more than just a literal.
6,https://nedbatchelder.com/blog/201608/lists_vs_tuples.html
6,[Facts and Myths about Python names and values](https://nedbatchelder.com/text/names1.html)
6,"It's possible that you have multiple python installs and that you're running your code under a different version than what you get with the python command. That's why I told you to run the code.

Your problem here is that you're mixing up unicode strings and bytestrings. The `\x` stuff that you posted are the bytes (bytestring) that make up these emoji when you encode them as utf8, but `requests.get(...).text` will give you a string (unicode string). Bytes and strings cannot be directly compared. You either need to use all bytestrings or all unicode strings.

Windows has nothing to do with this, as far as I can see. You can use emoji on the windows version of python just fine. Printing them to cmd may be difficult, but you're not doing that. Also, I have no idea what you mean by ""all the combinations""."
6,The thing you're describing is called a database. Start with sqlite.
6,Because it looks like the OP is using bytestrings. `'\xF0\x9F\x94\x8E'` has nothing to do with the 🔍 character in python 3.
6,In modern versions of python `'\xF0\x9F\x94\x8E'` will never match 🔍. You would need to use `'\U0001f50e'` for that (although you can also just type `'🔍'` directly). If it is matching then you must be using python 2.7 or earlier. Run `import sys; print(sys.version)`.
6,"You're overthinking this.

* You have a problem. You write some code to solve it. You now have a script.

* Some time later you have a closely related problem and you realise that you can make some small changes to your code and it will cover this new case. You do so. This happens several times.

* Then your friend notices you running your code and asks you if she can use it to help solve her problems. You add a proper interface to it so it's easier for her to use.

* After a while you notice that your code is a little crusty, so you split it up into several pieces to keep it more organised.

* Your friend comes back to you and asks you to add a few new features. Some of these ideas are good, so you implement them.

* Your friend has told some of her friends about your code and they come to you with questions about how to use it, so you write a user guide for your code.

* Somewhere in here, your script became an application.

There is no sharp dividing line between script and application. Lots of people have listed many important differences between the two, but in practice an application is just a large script that has been used a lot in many different situations. Just write whatever code you need to write in order to solve the problem at hand. You don't need to decide up front what kind of project you're making."
6,"Your problem is that you're running a script inside a package directly. You can't do that. If your run your `module_c` then python will assume that `PACKAGE_FOLDER_1` is your app folder and the other modules will be completely invisible and un-importable. Keep your entry points outside of your package.

Structure your package something more like this:

    app_folder/
        package/
            __init__.py
            module_a.py
            module_b.py
        script_c.py

You run your project using the entry point; `script_c.py`. The other modules can then be imported with `import package.module_a` and `import package.module_b` where needed.

The extra `package/` folder isn't strictly necessary, but you said that you want to keep your app folder clean and this is the way to do it. Having multiple modules and packages in the app folder is pretty rare."
6,Is there a reason you're using an ancient version of python?
6,https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_make_variable_variables.3F
6,Does it matter? `python3 -m pip` is the recommended way to use pip these days anyway since it makes it clear which python install you're interacting with.
6,`cls` is `Table` in this context.
6,If you're going to use a class method then you might as well make use of the `cls` parameter on the last line instead of hard-coding `Table`.
6,"I just tried it on my computer and it seems like gmpy2 supports python 3.7 just fine.

If you run a program directly that requires a console in order to work then windows will open cmd for that program automatically. It is cmd, ...or a version of it; windows consoles are complicated.

If you can't figure it out then you should just open cmd and type python. That's a better way to run python anyway as it gives you more control over things like the current working directory and command line arguments."
6,"You should probably update to a version of python that isn't a decade old.

It sounds like you're talking about cmd; the windows built-in terminal program. The features of cmd have nothing to do with python. https://duckduckgo.com/?q=copy+and+paste+in+cmd&ia=web

I'm just talking about the things that are printed. Past a certain point you won't be able to scroll upwards (probably). Python keeps track of the code that you write separately, and you should be able to press the up arrow to recall the last line of code you ran. If you want to keep your code around for longer than a single session you should save it to a file."
6,"How are you running your python shell? In cmd, idle, or something else?

No, the shell should not crash. If it does then that's certainly a bug. Your shell might not remember everything you printed though; it has to forget history at some point otherwise your machine will run out of memory."
6,"I'm not talking about forcing downstream packages to make changes. Deprecation is not the same as removal. You can keep the old names still accessible without actively encouraging their use.

If I write a completely new project that uses the new version of your code and I need to use stuff in folderAA, would you rather I write `import mypackage.folderA.folderAA` or `import newpackage.folderA.folderAA`?"
6,You need to slowly step through this code one piece at a time and try to understand what it does. How much do you understand so far?
6,Don't change `sys.path` yourself. Use a test runner such as pytest.
6,If you're moving some of your code to another location then that should mean that the old names are deprecated and you shouldn't be using them in new code. Your IDE not being able to autocomplete the old names seems like it should be an advantage.
6,It looks like this code does what you want; it creates multiple instances and adds them to the list. What makes you think it isn't doing that?
6,"You're confusing the representation of a string (what it looks like) with the contents of the string (what it actually is). `'path name\\image1.jpg'` is what the correct path looks like in this context. Python lets you write strings like `'path name\image1.jpg'` and will interpret them the way you want in many situations, but not always.

    >>> 'path name\image1.jpg'
    'path name\\image1.jpg'
    >>> 'path name\\image1.jpg'
    'path name\\image1.jpg'

    >>> print('path name\image1.jpg')
    path name\image1.jpg
    >>> print('path name\\image1.jpg')
    path name\image1.jpg

    >>> print(repr('path name\image1.jpg'))
    'path name\\image1.jpg'
    >>> print(repr('path name\\image1.jpg'))
    'path name\\image1.jpg'

    >>> ['path name\image1.jpg']
    ['path name\\image1.jpg']
    >>> ['path name\\image1.jpg']
    ['path name\\image1.jpg']

Notice how the strings act exactly the same in all these contexts regardless of whether they started out with one backslash or two. These are just two different ways of writing the same string. The problem comes when you use other strings:

    >>> print('path name\next_image1.jpg')
    path name
    ext_image1.jpg
    >>> print('path name\\next_image1.jpg')
    path name\next_image1.jpg

These strings are not the same because they happen to contain the sequence `\n` which is a valid backslash escape. `\i` is not a valid backslash escape, which is why it acted differently.

`os.listdir` and `os.path.join` give you valid paths (assuming you use them appropriately; you can't list a directory that doesn't exist, for example). This distinction really has nothing to do with those functions. It has no bearing on your issue, but I'd recommend using the `pathlib` module for handling paths, instead of the functions in `os`."
6,"If python sees an escape that it doesn't recognise then it won't do anything and just let it through unchanged. There is no `i` escape so python sees `'\i'` as being equivalent to `'\\i'`.

Not properly escaping backslashes is dangerous though, because while `path name\image1.jpg` will work as expected, paths like `path name\next_image.jpg` and `path name\UnknownImage.jpg` will cause issues."
6,I suspect IPC is not what you're looking for. Please post your code.
6,Your list is called `question` when I think you meant to call it `questions`.
6,"Your first point is not true at all. You can't write `1.5.round()` because there doesn't happen to be a method with that name. You can, however, write `1.5.is_integer()`.

When calling methods on integers you only have to be careful not to let python confuse the attribute dot with a decimal point. Spaces or brackets do the trick; `20 .to_bytes(1, 'little')` or `(20).to_bytes(1, 'little')`."
6,"This error is happening because `/usr/bin/pip` is from the system's version of pip, but the pip modules are from an upgraded version of pip. `/usr/bin/pip` is trying to import `pip.main`, but that got removed in a recent update.

You're running into these problems because you're haphazardly updating things. You should never try to update your system python install using pip. Your system python install is managed by apt and it has to stay that way. Your system expects certain versions of things to be in particular places and changing that will cause these kinds of breakages. If you want to use pip then you need to keep anything you do with pip separate from your system install. The best way to do that is with virtual environments. _You should never run pip as root._

Trying to fix this issue isn't easy because it's very difficult to know exactly what kind of mix up your have. What are the contents of `~/.local/bin` and `~/.local/lib`?"
6,[Loop like a Native](https://nedbatchelder.com/text/iter.html)
6,"If the config is part of your site then why isn't in in your site directory?

Don't break python to fit a broken structure. Fix your broken structure."
6,"Just because you can do this, doesn't mean that you should. For one thing, nested loops are often not the best way to do iteration. [Loop like a Native](https://nedbatchelder.com/text/iter.html). Also, you mentioned using except pass; [the most diabolical python antipattern](https://realpython.com/the-most-diabolical-python-antipattern/)."
6,"Maybe. I don't use windows so I can't test it, but in my experience it can be a little finicky about things like this. I was just trying to narrow down the OP to a specific test case. I didn't mean to imply that other methods wouldn't work."
6,"No. It's a common cause of this problem. Newbies make files and folders with the same name as something they want to import and they then accidentally import the file or folder that they just made rather than the module.

Please post the full error that you're getting.

https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F"
6,Did you put your code in a file called `pygame.py`?
6,"There's your problem. `pack` is a package, but you are trying to run `pack/__main__.py` as though it were a script. You shouldn't run things inside your package directly as the imports will not be set up correctly. Instead, you should make an _entry point_, which is a script outside your package that imports stuff from it. As a temporary stop gap you can also run something like `python -m pack`."
6,What is the exact path for this `ItemPurchase.py` file?
6,"It would be helpful if you showed the interactive code that you are typing. I get that you're calling these functions in some combination with some arguments, but different combinations and different arguments will give different results. We need to be able to reproduce the problem for ourselves.

The `f` function inside `save_html` (why are you defining this function inside another?) takes a string as its argument. If you give it something other than a string then you will get an error. The `contents` attribute of beautiful soup objects is a list, as explained in the [documentation](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#contents-and-children). Lists are not strings.

You can [convert a beautiful soup object into a string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#non-pretty-printing) by calling the `str` function on it (in python 3), but I don't think that's guaranteed to be the same bytes that you got from the website. If that's what you want then you should get beautiful soup out of the picture and deal with requests directly."
6,"How are you running your code as a standalone app (what commands do you run, what do you click on, etc)?"
6,"I see. You talked of grabbing image urls but the image urls that you post aren't urls of images that you're grabbing. This confused me. The screenshots are just a distraction. What matters here is the html (which I see you also posted).

I think that this is a wordpress configuration issue. It looks like wordpress is applying javascript filtering when you happen to use urlopen, but doesn't do any filtering with chrome. It should always be doing filtering for security reasons. Perhaps you disabled it, but only partially?

From the looks of the html, wordpress may or may not be interpreting your post content as markdown or some such similar formatting language (the html output contains code block information for some reason)."
6,"> When I use urllib.request.urlopen in my Python file to execute the same URL, I get this: https://i.imgur.com/tg3Z5Xg.png

I'm missing a whole bunch of context here. How does the image that you posted relate to the fact that you used urlopen? Urlopen will download whatever is at that url. It does not by itself create images. If there is an image at that url then urlopen will just download it. The content of that image is determined by whatever code is running on the server. Urlopen has nothing to do with it. You say ""I get this:"", but how do you get that? What is this an image of?

You need to show us a reproducible example of your issue. That means that we need to see all of the code necessary to be able to experience this problem for ourselves."
6,"You do know that you can have more that a single function per file, right? Your code is spread so thin that it's difficult to puzzle out which parts even get run. It would also help if you told us how you're running your code, as what you posted does nothing on it's own.

Your problem is caused by `file.write(str(save.encode(""utf-8"")))`. It makes no sense to call `str` on a bytestring. You should just use `file.write(save)`. If there's a problem with `save` then you need to fix that at the source, not try to haphazardly patch it up here."
6,"By default numpy uses 64-bit floating point numbers (`numpy.float64`), which is 8 bytes. So yes, that array is approximately 28 GiB."
6,"So you're entering exactly `C:\pyScripts\picnicTable.py` in the dialog box, clicking the run button, and you get a window flash and nothing else seems to happen?"
6,That makes sense. Your fix is a little hacky but I suppose it works. Don't forget to file a bug with your visualisation tool.
6,"Possibly there's an error happening. Your script runs until it encounters the error, then python prints the error and immediately stops running, closing the window with it and preventing you from noticing the error.

Are you relying on a specific value for the current working directory?"
6,"I'm confused. If you start with a time like ""2019-03-04T15:00:00-07:00"" then the utc naive version of that time would be ""2019-03-04 22:00:00"". ""2019-03-04 15:00:00"" is the naive version in your timezone.

Why do you want a naive time anyway? Naive times are usually best avoided."
6,https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_make_variable_variables.3F
6,The generator itself will use almost no ram until you iterate over it. Your issue is (probably) how this line interacts with the rest of your code. Post your code.
6,"Hang on. You're using `Accept: text/plain` which makes the site return the content in a different format. This is good because it doesn't require parsing html, but it means that requests can't actually detect the encoding. So you do need `r.encoding = 'utf8'` (although ideally the site would include the encoding in its headers so that requests could figure this out for itself).

My best guess at the problem is that your sdk (cosmo?) isn't correctly converting the characters before sending them to the robot. This might be an issue with the sdk. It would help if you could give an example of a joke that doesn't get pronounces correctly and what the robot actually says.

You can get rid of the randomness here by finding a joke that doesn't work and setting `raw_joke` to that string directly, just temporarily for testing."
6,"Maybe. I don't have enough information to figure out what the problem was in the first place. Utf8 does seem to be the correct encoding for that website, so deleting that line shouldn't have changed anything as far as I can tell."
6,There should be no need for you to set the encoding here as requests should be able to detect it easily. The problem is elsewhere in your code. Post the rest of it.
6,"You can convert a json string into a dictionary with `json.loads`, as explained in the documentation. From there it's just a regular python dictionary."
6,"Macosx comes with 2.7, but you can install other versions. If you install 3.7 you will get 3.7."
6,https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_make_variable_variables.3F
6,"Your edit is incorrect. The concept of a line doesn't make much sense for binary files, but they are still read line-by-line, with the line separator being byte 10 (the newline character in ASCII)."
6,The library presents all the same attributes regardless of whether they exist on the mp3. Just extract what you need. If you need all of them then extract all of them.
6,There's no reason to access them dynamically because the list doesn't change. Just extract what you need.
6,"It's a bad idea to dynamically access attributes like that.

Any embedded images are available from `my_mp3.tag.images`."
6,https://nedbatchelder.com/text/iter.html
6,"The ""word.txt file"" that you linked (and then deleted) appears to be a _Rich Text Format_ (rtf) file, not a text file."
6,There's something really weird going on here. Somehow your code is escaping characters from your file. Please post your entire code and the `words.txt` file.
6,My whole point is that it doesn't work fine. You just don't notice the problem until you start doing more complicated things.
6,"Ah, that exercise is vaguer than I'd hoped. Nevermind.

I think the biggest issue you have here is that you're trying to `return self` as your iterator. This kind of object is not really supposed to be it's own iterator. You need to create a new object that knows how to iterate over your sparse vector:

    class SparseVec:
        ...

        def __iter__(self):
            return SparseVectorIterator(self)

    class SparseVectorIterator:
        def __init__(self, sparse_vector):
            self.sparse_vector = sparse_vector
            self.index = 0

        def __iter__(self):
            return self

        def __next__(self):
            # put some of your own code here"
6,It's not really clear to me what you're trying to do. Please post the full text of your exercise.
6,"Like I said, it's probably a newline character that's causing part of this issue. But that doesn't explain why you're you're seeing a backslash in your output. Add `print repr(word)` immedately after `word = b` and post the output that you get from that line.

Also, it's long past the time when python 2 was relevant to new learners. Consider upgrading."
6,Show the code that actually does the outputting. Probably this has something to do with newlines.
6,"Namespace packages aren't just a way for you to skip having an `__init__.py`. They're a completely different kind of package that are unlike the regular ones. A namespace package is a way to collect together code from disparate sources under a unified name. They're most useful for packages that need to be extensible, such as when supporting plugins. You should not use a namespace package when a regular one will do, because they are slower and more complex to reason about.

In my opinion it was a mistake to make them so implicit. Newbies often assume that `__init__.py`s aren't needed because everything seems to work without them. Then they run into problems like the ones you experienced. You need an `__init__.py`."
6,"Note that your second example will run `c` and `d` (ignoring the obvious typo) even when `b` raises an error, which is not what the first example does and probably not what you want to happen. A more direct comparison might look like this:

    a()
    try:
        b()
    except:
        print('uh oh')
    else:
        c()
        d()"
6,Why do you have your data as the keys of a dictionary instead of the values? What are you really trying to do here?
6,"Honestly, if you're trying to work out when shutdowns are happening then you should get the operating system to tell you, rather than trying to infer it for yourself. The OS knows when shutdowns are actually happening (because it's the one doing them) and can probably be made to alert your code in some way.

On linux, I would write a systemd unit that runs on shutdown (systemd is the program responsible for starting and stopping the system). I don't exactly know, but there has to be some shutdown equivalent for the Task Scheduler on windows."
6,"You might want to crank the number up higher than one second. No point sleeping for a second only to do nothing but sleep again.

I'm not sure why it wouldn't work. I don't know the details of how atexit works on windows (windows works differently to other OSs here), or how it interacts with pyinstaller.

There's not really any guarantee that you can do anything when your process exits. The operating system has the capability to just stop your code dead and not allow it to do anything at all. The OS is usually nicer than that and gives you a little time to exit cleanly (or write to a file, in your case), but as I said; no guarantee."
6,You named your own file `googlesearch.py`. When you `import googlesearch` you are importing yourself.
6,/u/Deezl-Vegas was trying to detect when the class has been inherited. `isinstance` wouldn't be helpful for that specific purpose because it would treat subclasses the same as the parent.
6,No. Do them in the order that I said them. Register your function _then_ go into a loop.
6,"The ""certain ephemeral network conditions"" you're talking about is actually ""any kind of failure what-so-ever"". Why even bother having error handling if you're not going to actually handle any errors? You've got this big question about how truthiness is weird to you when the actual cause of your problem is a massive wtf sitting right in the middle of your code. Catching exceptions, not doing anything with them, and pushing them to the caller to handle is... weird. It undermines the point of having exceptions in the first place.

If you write your code more like this then it does the same thing, except you get an actually meaningful error message when something goes wrong:

    def status(self):
        response = requests.get(self.geturl('GET'), self.getauth(), self.get_headers(), self.maxwait)
        parsed = self.parse(response)
        self.print_summary(parsed)
        return response

    def probe(self, **kwargs):
        try:
            response = self.status()
        except Exception as e:
            logging.exception(e)
            return 0
        return 1

In answer to your actual question, `and` acts as though it were defined like this:

    def and_function(left, right):
        """"""calling `and_function(left, right)` is equivalent to `left and right` """"""
        if not left:
            return left
        return right

It always returns one of the objects that it was given. When you write `ok = response and not any(...)`, `response` is sometimes `None` so `ok` is set to `None`."
6,Have you tried to write it yourself?
6,"The [google package on pypi](https://pypi.org/project/google/) does not contain a google module. You have to run `import googlesearch` to use it.

Also, using root to install stuff to your home directory is a bad idea."
6,Register your function with atexit and then enter an infinite loop. Make sure you use `time.sleep` so you don't hammer your cpu.
6,Those seem fine. How are you installing this google library?
6,"You're right; this shouldn't matter.

Tell us more about the actual issues that you're having: what errors you get or under what circumstances exactly you have issues. Also, post the output of `python -m site`."
6,I'm not sure why you would check the name of the class when it's easier and more correct to check the class itself: `if cls is MyClass`
6,"The fact that you need that `changeAttribute` method in the first place is a sign that you're doing something wrong. You usually don't want to be setting attributes dynamically like this.

What is the actual problem that you're trying to solve here?"
6,"Currently you're doing something like this:

    def react_to_verification(message):
        verification_data = ...
        return do_verification(message, verification_data)

    react_to_verification(message)

I'd advise a structure more like this:

    def determine_verification_data(message):
        return ...
    
    verification_data = determine_verification_data(message)
    result = do_verification(message, verification_data)

In other words, refactor your code so that the bit that you want to change (`do_verification` in my example) is no longer part of your function. The parts of the code that should stay the same (`...`) stay inside the function. In general, you should push io and other high-level decisions out of your functions and closer to the top level of your code.

You should work on reducing the nesting of your code. I think that try/else is a perfectly good pattern to use and that you certainly shouldn't put things in the try that don't belong there,. But it's important to note that you don't need an else when all the other branches do a return:

    if condition:
        return something
    else:
        try:
            whatever
        except SomeError:
            return something
        else:
            do_something()

Is the same as:

    if condition:
        return something
    try:
        whatever
    except SomeError:
        return something
    do_something()"
6,Why do you want the current loop to finish?
6,What is the contents of your `config.py` (the one you're importing)?
6,"No, self doesn't have everything that's needed. In order for super to work it needs to know what class it's currently being called in so that it can work out what class to call next.

    class One(object):
        def __init__(self):
            print('Calling One.__init__ with {}'.format(self))
            super(One, self).__init__()

    class Two(One):
        def __init__(self):
            print('Calling Two.__init__ with {}'.format(self))
            super(Two, self).__init__()

    class Three(Two):
        def __init__(self):
            print('Calling Three.__init__ with {}'.format(self))
            super(Three, self).__init__()

    Three()

In this example `super` is being call three separate times with the same object as self each time, but each call has a different effect. When super sees `super(Three, self)` it knows that it needs to do the equivalent of `Two.__init__(self)` and when it sees `super(Two, self)` it knows that it should run `One.__init__(self)`. It uses the class to figure out which one to do."
6,"I don't really understand your question. These words don't get a different meaning just because they're being used by the super function.

    class Car(object):
        def __init__(self):
            print('Running Car.__init__')
            print(self)
            print(Car)

    class ElectricCar(Car):
        def __init__(self):
            print('Running ElectricCar.__init__')
            print(self)
            print(ElectricCar)
            super(ElectricCar, self).__init__()

    print('Creating instance of ElectricCar')
    electric_car = ElectricCar()
    print('Instance created')

    print(electric_car)
    print(ElectricCar)"
6,No. It's the same self as it ever is.
6,"There is no built-in function or method like this, as far as I know. You will have to write your own."
6,It needs to know what class it was called from so that it can work out what's next in the order.
6,https://www.reddit.com/r/learnpython/wiki/faq#wiki_why_does_my_loop_seem_to_be_skipping_items_in_a_list.3F
6,"Makes sense.

Argparse isn't really made to handle highly non-standard formats. You might be able to finagle it to work somehow, but honestly, there's so much reduncancy in this format that it would be easier to parse it yourself.

    project = None
    tags = []
    for argument in sys.argv[1:]:
        if argument.startswith('project:'):
            _, _, project = argument.partition(':')
        elif argument.startswith('+'):
            tags.append(argument.lstrip('+'))
    assert project is not None"
6,Is there a reason you're not using the standard format?
6,"`event.type` might sometimes be equal to `pygame.K_RIGHT`, but it will never be equal to `[pygame.K_RIGHT]`."
6,"One easy fix here is to just move `main.py` to the same level as `app/`. One way that python figures out where your packages are is to treat them as being relative to the file that you execute. When you run `main.py` python sees `subpackage` and `subpackage2` as being root packages. As far as python is concerned, `app` doesn't exist.

In other words, the way you have it now python sees this:

    main
    subpackage
    subpackage.sub
    subpackage2
    subpackage2.sub2

What you want is this:

    app
    app.main
    app.subpackage
    app.subpackage.sub
    app.subpackage2
    app.subpackage2.sub2

You should packages stuff properly the way that /u/julsmanbr describes, but this can help tide you over until you're ready for that."
6,"I'm not quite sure what you mean. Python never makes copies when it passes values to functions. Here's the same code but using dictionaries and regular functions instead of classes and methods:

    def State(name, population):
        state = {}
        __init__(state, name, population)
        return state

    def __init__(self, name, population):
        self['name'] = name
        self['population'] = population

    mass = State('Massachusetts', 6932015)
    ny = State('New York', 19875625)

    print(mass['name'])  # Massachusetts
    print(ny['population'])  # 19875625

Dictionaries use a different syntax for getting and setting their contents (brackets instead of dots), but you can see that the structure of the `__init__` function is still the same. It doesn't return `self`.

The `State` function that I wrote here is a representation of a method that python calls `__new__`, which you should loop up if you want to dive deeper."
6,Just to let you know that python has a built-in scientific notation you should use to write big numbers; `1.99*10**30` can be rewritten as `1.99e30`.
6,https://www.reddit.com/r/learnpython/wiki/faq#wiki_why_is_my_list_of_lists_behaving_strangely.3F
6,It looks like the gmail api ([`gmail.users.messages.get`](https://developers.google.com/resources/api-libraries/documentation/gmail/v1/python/latest/gmail_v1.users.messages.html#get)) already takes care of parsing the message for you. When you ask for `raw` you get the raw encoded message. Use the other keys to access the data you need. You probably want `payload`.
6,Yes.
6,"Now try it with `my_list = [5, 0, 1, 2, 3, 4, 5]`."
6,"I guess I missed that. Still, some component is trying to use cp1250. The traceback should tell you. Narrow down from there."
6,"I'm not certain what I'm looking for either. You have your encoding misconfigured, either in your database itself or the code that interacts with it. The error isn't in the code you posted.

You have a string and you're trying to encode it as cp1250. cp1250 doesn't support the characters in your string so you get an error. cp1250 often shows up because it's the default on a lot of english windows machines and if you don't explicitly specify an encoding to use you will get cp1250. This suggests that somewhere somehow you have forgotten to specify the correct encoding. I lack the information required to know what the correct encoding is or where you have to specify it. Start by finding out what encoding your database is using."
6,There is no `5` in `list(range(5))`. Your code is adding fake data.
6,We need to see the full error and at least the lines of code surrounding the one that the error points to.
6,"I don't like this design where you have `active+'xp'`. You don't want to be dynamically building table names. I'm not quite sure what you're doing, but it might be better to make gatomon and garurumon separate rows on the table:

    ""UPDATE users SET xp = $1 WHERE user_id = $2 AND type = 'gatomon'"""
6,"Lists have a method specifically for making copies:

    lst2 = lst1.copy()"
6,"A multipart message contains multiple parts. If you remove the break then you get a print out for each part. You're printing the same email twice, first with the text part (`1 2 3`) and then with the html part (`<div dir=""ltr"">1 2 3</div>`).

The reason it shows the more recent message is because you're actually printing the body from `emailMessage` and the headers from `message`, which are completely unrelated as far as I can see. I think you should just get rid of `emailMessage`, but it's hard to tell without knowing the origins of `messages` and `mssg`."
6,https://pyinstaller.readthedocs.io/en/stable/when-things-go-wrong.html#listing-hidden-imports
6,"What is `encoded_email` here? Post the rest of your code.

Emails contain encoding information. In order to properly decode them you need to read that information and make use of it. Don't just guess."
6,Why do you have a list of such disparate types in the first place? That's probably the real issue here.
6,"Your code samples only appear to work because you happened to use a simple case. Set `x = [1, -1, -2, 3]` and you'll see that none of your loops do the correct thing.

[Loop like a Native](https://nedbatchelder.com/text/iter.html)"
6,"This is usually solved using a pid file, which is basically a specific kind of lock file.

The idea is that you have a file in a particular location that contains the pid of the currently running instance of your program. When your program starts up it opens the file, reads a number from it, and checks to see if there is a program running with that number as its pid. If all of that happens successfully then the program exits, otherwise it writes its own pid to the file and continues running.

This means that you're not relying on a particular value for the process name. The reason to have a specific pid in the file is so that you can protect against the situation where the program crashed and didn't release the lock."
6,"`foo` will not be defined in the subclass. You need to call the superclass's method using the `super` function.

You might be better served by looking up a tutorial rather than asking every small question you have. [Learn x in y minutes](https://learnxinyminutes.com/docs/python3/) is good if you already know how to program and you just want to know the syntax.

I'm wondering if you really need cube as a separate class. Can you write a function that makes a 3dmodel and adds triangles to it in the shape of a cube (you might know this technique as a constructor or factory function)."
6,"I'm not sure I understand your question, unless you're just asking about the syntax; you put the superclass after the class name in brackets `class cube(3dmodel):`.

This may not be a good design. What is your ultimate goal here?"
6,"    def pairwise(list_):
        return zip(list_, list_[1:])"
6,The `itertools` module documentation has a [recipe](https://docs.python.org/3/library/itertools.html#itertools-recipes) for this called _pairwise_.
6,https://packaging.python.org
6,"There are three places where python will create a new scope: functions, classes, and comprehensions."
6,"I think the best way to understand this is to run the following code and see what happens:

    print('defining Hand class')
    class Hand:
        print('defining __init__ function')
        def __init__(self):
            print('running __init__')
            self.deal()
        print('defined __init__:', __init__)

        print('defining deal function')
        def deal(self):
            print('running deal')
        print('defined deal:', deal)
    print('defined Hand:', Hand)

    print('creating hand instance')
    hand = Hand()
    print('created hand:', hand)"
6,"Neither PATH nor PYTHONPATH should have that directory. There's no executables in there that you might want to use PATH to run, and python already knows that directory exists so it doesn't need to be told about it with PYTHONPATH.

In general, you should not need to edit either of these variables, despite what some guides will tell you."
6,"Part of the problem here is that have both a module and a function with the name `encrypt_text` and this similarity is confusing you. Currently, the function that you want is called `w_encryption.encrypt_text.encrypt_text`. If you try to use your `__init__.py` to make it accessible as `w_encryption.encrypt_text` then the function will shadow the module and cause all sorts of problems with inconsistency. Rename either one or both of them.

If you have a function called `package.module.function` and you want to make it available as `package.function` then you need to put `from package.module import function` in the package's `__init__.py`."
6,"For future reference, the command that you wanted was `python3 -m pip uninstall pip`."
6,"I agree. There doesn't look like there's anything there that might be causing this.

What happens once the file is on s3? How does alexa know that it's supposed to access this particular file?"
6,"There are potentially a bunch of different steps between the moment that you create this file and the moment when alexa reads it. Any of those steps could be causing this bug. The problem could be in your submission process. The problem could be in the skill. The problem could be in the parts of your code that you didn't post because you didn't think they were relevant. And yes, the problem could be with alexa herself.

> Then it connects to amazon's api for s3 buckets and submits the json file i made from the quote.

Earlier you said this. I want to see the code for this. It seems like a good candidate."
6,"I feel like I'm stuck in a loop.

I understand that this is the behaviour that you are observing. I'm telling you that this behaviour is incorrect. If you give her a json file with `\u2019` she should see it as an apostrophe."
6,"It _is_ preserving the original string. The file that you got was valid json. `\u2019` is just as correct a way to represent an apostrophe in json as `’`. It's called a _unicode escape sequence_ and it's a common way to allow the use of non-ascii characters even when the intermediate technologies only support ascii. They're so common that even python uses them in its own string literals. Run `print('\u2019')` in python and you'll see that it prints an apostrophe.

The fact that it's not being read correctly means that some code that is handling this data somewhere along the way is messing with it or not interpreting it correctly. That is the bug I'm talking about, and the ultimate cause of the problem. Whether you have the ability to fix this bug is not yet clear to me because we haven't yet been able to figure out where in the pipeline it is."
6,"I don't know if this is a problem with the alexa engine. That's exactly what I'm trying to find out. A surprisingly large number of people come here asking how they can solve a problem that happened to be caused by a completely different part of their own code. Checking for this case is my version of due diligence.

Even if the problem does lie with alexa and amazon, you can still file a bug report and use your work-around in the mean time."
6,Everything works now because you found a work-around. You didn't fix anything.
6,What I'm saying is that your problem is caused by a bug somewhere in the code that is making all this happen. Is this a skill you wrote yourself?
6,Show the code where you actually hand this file over to alexa.
6,"If you're running `myproject/app.py` then `myproject/` isn't a package, isn't importable, and shouldn't contain an `__init__.py`. To get `myproject/common/util.py` you would `import common.util` and to get `myproject/resources/foo_folder/foo.py` you `import resources.foo_folder.foo`."
6,You're having Alexa read out json directly? That doesn't sound right. You're supposed to translate the data back before you use it.
6,"It's not. Virtual environments are not a sandbox and should not be considered a security feature. It's trivial to escape them just by explicitly running another python binary. For example, the command `/usr/bin/pip freeze` (on unix) will tell you the system packages even when you're in a virtual environment."
6,"This isn't actually a problem. The `\u2019` is just another way to write an apostrophe in json. Arguably, it's better because it allows your json to work on all systems that are ascii compatible."
6,Wanting to do this is a sign that something might have gone terribly wrong. You would probably benefit from thinking more carefully about your program's flow and restructuring it so that this isn't necessary.
6,"What's happening here is that tab2opf is assuming that your system's default encoding is utf8 when for you it happens to be euc_kr. So it writes out a html page that says it's utf8 but is actually euc-kr and your browser gets very confused. As a temporary work around you can force your browser to set the text encoding to Korean and it should look correct.

Ultimately this is a bug in tab2opf and needs to be fixed there. The fix is that all of the lines that use `open` need to specify an encoding. Change lines [186](https://github.com/apeyser/tab2opf/blob/master/tab2opf.py#L186) and [263](https://github.com/apeyser/tab2opf/blob/master/tab2opf.py#L263) to be `    with open(fname, 'w', encoding='utf8') as to:` and that should do it. Consider filing a bug report.

The `-s` and `-t` flags are for specifying languages and have nothing to do with the encoding."
6,"There doesn't seem to be anything to download at that link.

I asked you to upload both because copy and pasting into a reddit post can give you different bytes than what was actually generated. I need to see the content of the files themselves, not the contents after they've passed through your clipboard, your browser, reddit's database, and my browser."
6,This is probably just a buffer issue. Try passing `bufsize=1` to `subprocess.call`.
6,"What do you mean by ""gibberish""? Show us; upload a sample txt and resulting html file."
6,"Mutating a mutable data-type that you didn't pass in is still using a global variable. Anything from outside that you didn't pass in to the function as an argument is a global, and changing globals is bad. Doesn't really matter whether you do it by mutation or rebinding."
6,"There is no module called `main`. There's one called `app.main`, and that's what you need to be importing. The only reason you were able to run your code before with a broken import is that you were running it incorrectly. You should not be running code in your package directly. You should be outside your package in the `project` directory. You can use the `-m` flag to run your code, but in the long run you'll need to create an _entry point_, which is a script outside your package that imports and runs it.

Please follow /u/spitfiredd's suggestions. They covered everything quite well."
6,"`os.path.basename` is doing the right thing here. `\\server\studies` has no basename. It's just like asking for the basename of a path like `C:\` or `/`. What you have here is called a UNC share. Whatever you're doing, you'll need to handle it in a different way.

https://youtu.be/0u04fm61LBc?t=768"
6,"Take this code:

    class DataProvider:
        def adjustment(self):
            if datetime.datetime.now().date() < datetime.date(2019, 4, 1):
                return 1
            else:
                return 2

    class Contract:
        def __init__(self, data_provider):
            self.value = 1
            self.adjusted_value = self.value * data_provider.adjustment()

    provider = DataProvider()
    contract = Contract(provider)
    print(contract.adjusted_value)

You want to know how best to update `contract.adjusted_value` when the data provider's adjustment changes? Does this get closer to your issue?

As I've been saying, the simplest solution is just to use a method:

    class Contract:
        def __init__(self):
            self.value = 1

        def adjusted_value(data_provider):
            return self.value * data_provider.adjustment()

    provider = DataProvider()
    contract = Contract()
    print(contract.adjusted_value(provider))"
6,"Doing which thing exactly?

The problem with the second code block (the one with with `update_current_time`) is that it means that you're creating and carrying around extra state. State is often hard to reason about so you want to avoid having more of it than you need to. The code that uses that version of `MyClass` has to be aware that it is stateful and has to take responsibility for updating that state. This means the external code needs to figure out when the state needs updating, which may not be an easy task.

Sometimes state is necessary for performance or for other reasons, which is why I showed the third code block; an example of a cache. This code is still stateful, but the calling code doesn't need to concern itself too much with that state. It gets updated automatically. There's still the issue that bugs in the `cache_is_invalid_somehow` part will cause weird issues elsewhere (they do say that cache invalidation is one of the hard problems of computer science, after all), but at least this way `MyClass` is the one taking responsibility for it.

Note that it's really the updating of the state that is problematic. If you never have to update the state in any way, then you can use the second code block and just not have an equivalent of the  `update_current_time` method."
6,"I'm just using `datetime.datetime.now` as a stand in for a function that gives a different value every time you call it. I'm really trying to focus on the structure of your code; the exact semantics aren't too important, I don't think."
6,"So it's more like this:

    class MyClass:
        def current_time(self):
            return datetime.datetime.now()

as opposed to this?:

    class MyClass:
        def __init__(self):
            self.current_time = datetime.datetime.now()

        def update_current_time(self):
            self.current_time = datetime.datetime.now()

You should prefer the first one, as it's simpler to write and simpler to use. The only real reason I can think that you might prefer the second one is if your code (`datetime.datetime.now` in this example) takes a long time to run. Even then you should still use the same interface as the first one and add a cache:

    class MyClass:
        def __init__(self):
            self._current_time_cache = None

        def current_time(self):
            if self._current_time_cache is None or cache_is_invalid_somehow():
                self._current_time_cache = datetime.datetime.now()
            return self._current_time_cache"
6,"Sorry, I'm not really sure what you mean. The function is given on lines 2 and 3 of my example. That function is just a regular old function that happens to be defined inside a class. There's not really much of a difference between a function inside a class and one outside it. Functions inside classes only become methods when you access them from instances (the bottom line of the example).

You can define a function completely separately from the class and it acts the same:

    >>> def schedule(self, event_handler, path, recursive):
    ...     pass
    ...
    >>> class Observer:
    ...     pass
    ...
    >>> Observer.schedule = schedule
    >>> 
    >>> Observer
    <class '__main__.Observer'>
    >>> schedule
    <function schedule at 0x7f404f917a60>
    >>> Observer.schedule
    <function schedule at 0x7f404f917a60>
    >>> Observer()
    <__main__.Observer object at 0x7f404f8ce240>
    >>> Observer().schedule
    <bound method schedule of <__main__.Observer object at 0x7f404f8ce278>>

This is all pretty advanced stuff that's not really necessary to know just to use classes."
6,"Just to clarify your question; you have code that looks something like this:

    class Person:
        def __init__(self, first_name, surname):
            self.first_name = first_name
            self.surname = surname

        def full_name(self):
            return self.first_name + ' ' + self.surname

      jane = Person('Jane', 'Doe')
      print(jane.full_name())

And you want to know if it's okay to write it like this?:

    class Person:
        def __init__(self, first_name, surname):
            self.first_name = first_name
            self.surname = surname
            self.full_name = self.first_name + ' ' + self.surname

      jane = Person('Jane', 'Doe')
      print(jane.full_name)

Yes, this is okay in many situations. Obviously, this changes how the class is used, but if that's not a problem for you then go ahead.

If you question is something else then you're going to have to be more clear. It may help if you gave more specific examples of what exactly it is that you're doing, rather than generic names like `Zero` and `att1`. Maybe also use the before/after trick like I did here. Fully executable code is good too."
6,"You can't really reduce the number of loops in this code that I can see. It's pretty inherent in the problem you're solving.

The biggest issue in this code is that you're storing your transactions as strings. You want a more complex data-structure so that you can store the information separately and not have to parse those strings every time. Use a dictionary or a custom class or something.

Instead of having a list of toggles, make a set of toggled transaction ids.  If its id is in the set then a transaction has been toggled and if it isn't then it hasn't been toggled. The advantage of this is that you don't have to depend on the order of any of the transactions in the list and so you don't have to bother with all that enumeration and indexing nonsense.

Have the user type in the ids in order to select a transaction, rather than a number that corresponds to its position in the list. That's what ids are for; uniquely identifying things."
6,"It's usually good to use the more abstract type, but only if your function can handle all of the instances of that abstract type. If it can't, then you should use the more concrete one. Use the most abstract type that your function can actually handle. If you only intend for your function to handle lists then it's okay to just use `List[Int]`, but your function won't be quite as flexible as it might otherwise be."
6,"If it's exactly what you want then you should use it, obviously.

I can't say if it's what you want."
6,`/dev/disk/by-uuid/781184D8-A540-4678-828B-0BFFCB26348E` should be a symlink to the appropriate device. Just use that.
6,"Sure, I get that. But `Sequence` doesn't just mean ""List, Tuple, etc"", and it doesn't mean _not mappings_. There are things which are iterable, but aren't sequences or mappings. If your function needs to handle objects like that then you can't use `Sequence`."
6,"I mean, if you define sequence to be the correct answer then it will be the correct answer. I'm trying to pick apart how much you know about sequence and whether it really is what you want. That is why you asked this question, right?"
6,https://nedbatchelder.com/text/names1.html
6,"You can't define a type by what you don't want. You need to think more carefully about what this function is, what it does, and what you want it to accept. We would be better able to help you if you shared some of this information with us.

Which of the following would be acceptable and why or why not: `list`, `bytes`, `set`, `collections.Counter`, and a generator?"
6,"That is not correct. Python does not do things like this for you implicitly. If you want an instance of the class you have to call it.

`Observer.schedule` is just a function.

    >>> class Observer:
    ...     def schedule(self, event_handler, path, recursive):
    ...             pass
    ...
    >>> Observer
    <class '__main__.Observer'>
    >>> Observer.schedule
    <function Observer.schedule at 0x7f22819d5ae8>
    >>> Observer()
    <__main__.Observer object at 0x7f228198c2b0>
    >>> Observer().schedule
    <bound method Observer.schedule of <__main__.Observer object at 0x7f228198c2b0>"
6,"Another good pattern is that instead of testing if everything is okay, you should test for the exceptional condition and bail early. This saves an indentation level and so reduces the amount of context the programmer has to keep in their head:

    if self.return_count <= 0:
        continue

    if this_line == '1':
        ..."
6,"I'm not really sure what your problem even is, as you've provided almost no details about it. The one comment that looks like it might have contained some info has been deleted. My best guess at the moment is that you need to run something like `python3 -m pip install --user whatever`.

Posting the commands you've tried and the output you got when you ran then would be supremely useful.

Obviously, you don't have to break your mac in order to use python."
6,"In addition to the reassigning variable issue (remove lines 6, 7, and 8), you are also using `scount` in a couple of places when you wanted the other count variables."
6,"When you said ""declare the count variables outside the loop"" you we're correct. You need to do something like `scount = 0` at the start of your code to declare the counter variables. And then during the loop you need to add the number of new vehicles you found on that particular line. You do that with `scount = scount + line.count('xoox')`. So a version of the code that only counts the small vehicles would look like this:

    lines = [line1, line2, line3, line4, line5, line6, line7, line8, line9, line10]
    scount = 0
    for line in lines:
        scount = scount + line.count('xoox')
    print scount, ""small""

You should be able to expand this to include the other sizes. Good luck.
"
6,"My time is mine to choose to spend how I will. If I thought you were wasting my time I wouldn't be replying.

> To put it another way: if I tell you that there are 2 vehicles on the first line, 5 on the second line, and 4 on the third line, then how would you work out how many vehicles there are on all three lines together?

Try to answer this. Forget about python code for now, just answer it in plain English."
6,"Exactly. Right now `scount = line.count('xoox')` counts how many vehicles there are on the current line and sets the `scount` variable to that value, overwriting whatever information was there before. If we don't want those variables to get overwritten then we shouldn't overwrite them. Instead of overwriting, we want to do _something else_. What do you think that might be?

To put it another way: if I tell you that there are 2 vehicles on the first line, 5 on the second line, and 4 on the third line, then how would you work out how many vehicles there are on all three lines together?"
6,"It doesn't really seem to me like you're nesting the parsers themselves here. The xml parser is being used to gather information out of an xml document. It doesn't care what that information is or what you do with it. A link is a link; the parser doesn't even really know that it points to another xml document.

You just write a loop that gets the next link in the chain until you reach the end."
6,"You just happen to have caught me in a good mood. ;)

No, that's not the kind of thing you need. It might help you to get a stronger handle on what the problem actually is. Please write in your own words a short description of what the code currently does, and explain how that's different from what you need it to do.
"
6,The correct way to invoke pip on windows is with `py -m pip`.
6,"Don't worry. Learning is a process and it takes time. The important thing is to stick with it and try not to get too frustrated.

You're definitely making progress. Here's the kind of thing that I was expecting you to write:

    def replace(lst):
        scount = lst.count('xoox')
        mcount = lst.count('xoxox')
        lcount = lst.count('oxoxxooo')
        return scount, mcount, lcount

    lines = [line1, line2, line3, line4, line5, line6, line7, line8, line9, line10]
    for item in lines:
        scount, mcount, lcount = replace(item)
        print scount, ""small"",
        print mcount, ""medium"",
        print lcount, ""large""

Notice how I just copy and pasted the code you already had into the loop. It may be worth comparing this looped code with your original non-looped code and exploring how these changes affected it.

What you wrote doesn't quite do the right thing, but it's almost there and in some ways it's better than the above code. Getting rid of the function is a good idea, as it's not really helping here. I'm going to take your newest code and make a few changes to it so that it does the same as the code above:

    lines = [line1, line2, line3, line4, line5, line6, line7, line8, line9, line10]
    for line in lines:
        scount = line.count('xoox')
        mcount = line.count('xoxox')
        lcount = line.count('oxoxxooo')
        print scount, ""small"", mcount, ""medium"", lcount, ""large""

This is the code I want you to work with now. The main difference here is that I added the print, and that you need to be calling the count method on each `line` individually, not on the `lines` as a whole. I also renamed `item` to `line` which is a slightly more descriptive name.

There's actually only one (-ish) more thing that needs to be done to this code to make it work. We're in the final stretch. I want you to look at this code and try to work out what's wrong with it before you run it. Once you have a guess in mind, run it and see if you were right. After that, see if you can identify the problem and fix it."
6,"The thing that you want to loop over is the lines themselves, not the names of the lines. So the first thing should be `line1`, not `""line1""`.

You don't want to print the lines, you want to count them. You need to take the code that does the counting and put it inside the loop."
6,"So your answer is technically correct, but it's also too vague. We need to really zero in on the dividing line between these two things. If you look at what we're trying to do here; we have some code that is able to count the number of vehicles on one line, but we need to count the number of vehicles on every line. If we write a loop that runs multiple times and it keeps the counting the same, but it changes the line that's currently being counted then we will have code that counts every line.

The part that stays the same is the counting:

    scount, mcount, lcount = replace(...)
    print scount ""small"",
    print mcount ""medium"",
    print lcount ""large""

And the part that changes is the line that we're currently counting:

    line1... line2... line3... and so on

Once you know these two pieces of information you can write the loop something like this:

    items = [things that need to change]
    for item in items:
        things that stay the same

In other words, you make a list of all the different changes, then you write the loop, and then you write the unchanging part indented. Have a stab at doing that. (Don't expect the result to give us the correct answer just yet, we're only trying to get one step closer.) If you get stuck here, take a look at your fruit example and try to relate it to what I just explained."
6,What data are you referring to?
6,"One trick that I find useful when writing a loop is to identify the two different parts; the part of the loop that is going to stay the same, and the part that is going to change. In your fruit example, the part that is changing every time around the loop is the name of the fruit; the first time around the loop the name is `apple`, but the second time around it is `banana`. The part that is staying the same is the printing; each time around the loop you want to do some printing and the thing that you print is always the name of a fruit.

Do you think you can identify these parts in your problem? Even if you have trouble with this, make a guess."
6,"You should usually be using virtual environments to develop in python, but even if you're not, the `--user` flag is almost always a better option. You might be able to find some contrived situation where you have to run pip as root, but it's still not something that you should be recommending to newbies.

Overriding python 2 on a mac is equally problematic for more-or-less the same reason. But the alias thing is fine, because it's not system-wide."
6,"Typically, when you want to do the same thing many times you would use a loop. Do you know how to use a loop?"
6,You should not run `pip` as root. It can break your system and it also has security issues.
6,"The problem with the syntax error is because python doesn't know what `scount ""small""` is. `scount` is a variable and `""small""` is a string, but you just put them together and expect python to know that to do with that. The easiest fix is probably to put a comma between them. Just to double-check; are you using python 2 or 3?

That would be the output if you were processing all 10 lines. You're only counting `line1`."
6,"That's not actually the output I would expect from the code that you wrote. It would actually give a SyntaxError because your print statements aren't quite right. I assume you've fixed that issue?

Lets focus on the first half about it not printing the correct numbers. Why do you think that this code should print `12 11 7`?"
6,"I want to help you work out what's wrong with it, so that you can fix it yourself. What error do you get? Details are important."
6,"That's 50% of the way there. ""Got no clue!"". As if.

What happens when you run that code?"
6,"You need to _try_. That's the most important thing here. It doesn't matter if you fail, you need to get out there and _write some code_.

There's a pretty good chance that this exercise will use some of the concepts that you just learned about in your last class. So, what did you learn about most recently?"
6,That seems like a backwards way to say that. A directory is a place on your computer where you can put a bunch of files. A package is a directory that contains an `__init__.py`. The reason you want to turn a directory into a package is so that you can import it.
6,The first step is to become familiar with anki's database format. Something like [sqlite browser](https://sqlitebrowser.org/) would be helpful for discovery. You'll probably want to use the [`sqlite`](https://docs.python.org/3/library/sqlite3.html) module to do the actual editing.
6,"I'm not sure if this is impossible, but it's certainly not something you want to be doing. What you want here is some sort of IPC mechanism. What's available is going to depend on exactly what program you want python to interact with."
6,    py -m PyInstaller MC_Fuel.py
6,Anaconda _is_ python; it's a wholly separate python installation that has nothing to do with the one you installed with apt.
6,"You're installing with the system's python3, but trying to run code using anaconda. "
6,"What is the _complete_ output of each of the following commands?:

    pip3 --version
    pip3 install requests
    python3 -m site
    python3 -c 'import requests'"
6,"What? Python already does this by default. If you don't catch an exception then python will catch it for you, print it, and exit.

It's usually a bad idea to catch exceptions that you're not going to handle."
6,"Just so you know, there's not really any casting going on here. The word you want is _convert_. You are converting the result of `enumerate` into a list."
6,"What you're asking about isn't really what we mean when we say ""more efficient"". That refers to the amount of time it takes for the code to run. You mean ""more general"". You want a version of your code that works in more situations (different numbers of digits)."
6,"It might be worth noting that there is a [backport](https://pypi.org/project/pathlib2/). More dependencies comes with it's own problems, but using backports can help ease your future porting efforts when you do eventually upgrade."
6,"You're still using `shell=True` and you don't have the `f` on the f-string.

I just noticed that there's a subtle problem here that you're using `cwd` to set the current working directory, but you're also calling your script with a relative path `bin/ac3`. The shell will try to find your script relative to whatever `dir_path` is, which my not be what you intended. This shouldn't be a problem right now (with you typing `ok`), but it might if you type anything with a slash.

You should get rid of the `stdin`, `stdout`, and `stderr` named arguments, because you're just setting them to their default value. They're effectively doing nothing."
6,"The directories that python will look for imports are listed in the `sys.path` variable. However, most of those directories are for modules that have been properly installed. You should use the _current working directory_ (the empty string, the first entry in that list).

The `ls` is just there in my example to show you that I'm in the same directory as the `atmospheric.py` file. You need to go to the directory where that file is, and then start python. Presumably you would do that by running `cd ~/gee-atmcorr-S2/bin/atmospheric.py`.

There's no need to move the file, move _to_ the file."
6,"Okay, so you need to make sure that that file is in a place where python can find it. Generally this means putting it in the same directory where you start python.

    $ ls
    atmospheric.py
    $ python
    Python 3.7.2 (default, Jan 10 2019, 23:51:51)
    [GCC 8.2.1 20181127] on linux
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> import atmospheric
    >>>"
6,"Honestly, I wouldn't do this. The fact that you only sometimes want to print the values is a pretty good sign that this function shouldn't be printing anything itself. Split this function up so that it only does the computations and put the code for printing into a different function. People who don't want the printing will write `my_func()` and people with do will write `print_values(my_func())`.

Keep side-effects away from pure functions."
6,"Yes, that's my mistake. Sorry. There should indeed be a comma after the `'-c'`.

The purpose of the f is that it tells python that you're writing an _f-string_; that is what allows you to write `{filename}` inside and have python replace it with the value of the `filename` variable. OnlineGDB is using an older version of python that doesn't support f-strings, which is why you get the syntax error.

What do you expect to happen when `bin/ac3` runs (what does that program/script do)?"
6,"One really simple technique if you don't mind tying yourself very closely to that specific output:

    print(local_address_decode.replace('\nIPAddress', '\n\nIPAddress'))

Instead of decoding the output like that, you should pass an `encoding` named parameter to the subprocess functions and they will return strings. You should definitely be using the higher level api."
6,"It looks like you added an extra `""` quote before `sh`, for some reason. Remove it.

The quotes in your original commands are instructions to the shell. They are not part of the command itself. We're trying to take the shell out as much as possible because it's a security risk, a performance drain, and it complicates all the quoting you need to do.

The equivalent of the command I'm trying to get you to run would be something like `gnome-terminal -e 'sh -c ""bin/ac3; exec zsh""'`. The command that ""works"" invokes the shell twice and uses bash for no good reason.

The error you get is also telling you that you should replace the `-e` with `--`. It actually should allow you to simplify the shell command even further by getting rid of one level of quotes: `gnome-terminal -- sh -c 'bin/ac3; exec zsh'`. Python equivalent:

    args = ['gnome-terminal', '--', 'sh', '-c' f'bin/ac3 {filename}; exec zsh']

I think you're getting confused because you're using to thinking of command lines as strings. They're not strings; they're lists. One of the things the shell does is it takes the string that you type in and converts it into a list using a set of rules. The simplest rule is that it splits on spaces. It takes a command like `cat file1.txt file2.txt` and splits it up to `cat`, `file1.txt`, and `file2.txt`. The problem is that sometimes we want to use spaces as part of the command. If I want the arguments to be `cat` and `my file.txt` then I can't type `cat my file.txt` because that will be split into `cat`, `my`, and `file.txt`. The shell solves this with quotes. The quotes tell the shell not to split an argument up. A command string like `cat ""my file.txt""` gets converted to `cat`, `my file.txt`. Notice that the quotes themselves are not part of the arguments. They're just instructions to the shell.

In python we don't have to deal with this mess because we can just use lists directly."
6,"What is your full code now and what exactly do you mean by ""won't run""?"
6,"The basic idea here is that you always want to be in the project's root directory whenever you run your code, and you don't want to run any of the things in your packages directly.

For debugging it can be helpful to use python's `-m` flag to run modules. So `python -m econ.gui` instead of `cd econ; python gui.py` or whatever. But that's not really a long-term solution. You'll want to make _entry points_ which are scripts outside your package that import it and run the code there. `setuptools` can help you to automate their creation, but for now just put a `run.py` in `project` and something like this in it:

    #!/usr/bin/env python3
    import econ.gui
    econ.gui.main()

Frankly, I don't really understand why the gui is part of your economy package in the first place.

Consider consolidating your packages under a single larger package to help avoid name collisions.

You'll want to run your unit tests with a test runner like pytest.

Moving your imports to a different place in the file doesn't avoid the circular imports, it just hides the symptoms. You definitely need to restructure that somehow, although I can't say how without looking at the code."
6,How are you running the notebook file; from what directory?
6,Are you on windows? Did you try running `py -m pip`?
6,We can't debug code we can't see.
6,"That's not the same thing; your list has five strings in it, mine only had three.

If you want to create a string that contains the contents of another then use string formatting. Note that you will need to escape any tricky characters so you don't create a shell injection vulnerability.

    filename = shlex.quote(command_line)
    args = ['gnome-terminal', '-e', f'sh -c ""bin/ac3 {filename}; exec zsh""']"
6,Do you mean something like https://docs.python.org/3/reference/datamodel.html#object.__getitem__ ?
6,"Generally, needing to use a hack like this is a sign that there's something wrong with the structure your project. How are your files laid out and how are you running your code?"
6,"I think you're looking for something like this:

    args = ['gnome-terminal', '-e', 'sh -c ""bin/ac3 <user_input_here>; exec zsh""']

I've simplified your command a little, as you have an extra unnecessary call to the shell. Also note that you shouldn't use `shell=True` here:"
6,Why specifically that string though?
6,Why do you need to create a string like that in the first place?
6,The problem here is that you shouldn't be running `sandbox.py` directly. Use a test runner like pytest.
6,"Writing to the file while you've got it open for reading is probably not a good idea. Also, if you're going to use pathlib to write the bytes then you might as well use pathlib to read them too."
6,Properties aren't supposed to be used with new code. You only use them when you need to add functionality to old code and you need to preserve the old interface.
6,"It's more accurate to think of the things in sets as being keys. Sets contain unique keys, with no values."
6,That's just pylint saying that it doesn't think `pygame.init` is a thing. It could be mistaken. Have you tried actually running this code?
6,Yes.
6,"Your text file looks like it contains python byte literals. This is a pretty terrible format to use, for exactly the reason that it's difficult to read the data back out again. Did you create this file?"
6,I can't think of a good reason why someone might do this. You should ask them.
6,Does it have to be `q`? If you're not taking input for any other reason then you should probably just rely on the operating system's term signal to quit your program.
6,Post the full error.
6,"That's odd, because I'd expect `/usr/local/bin` to be in your path. What's the output of `echo $PATH`?"
6,I suspect you installed it to `/usr/local/bin/black`. Is that file present on your system?
7,"I've often answered people's questions here, but now I have one of my own!

I need to look up a value based on combinations of other values, it's sort of a decision or interpretation matrix. Right now (in code I'm trying to improve) it's a very complex, nested series of `if` statements which is hard to understand. I might do this as a database query, and hope that the query returns no more or fewer than one row, but the table doesn't have that many rows so `sqlite` feels like too much tool.

What's the best strategy for a ""find the value associated with this combination of values"" lookup? Dictionary lookup with `frozenset` as key? (I'm not sure the individual values are unique, though.)"
7,"When you make system subshell calls, there's not a TTY, so commands like `cls` don't do anything.

Moreover this code is practically nonsensical. What's the point of defining a lambda and then calling it right away?"
7,"Luckily the answer to your question is quite simple - you can't do this at all. No browser will run Python in an HTML file, only JavaScript."
7,"Sorry, I still don't understand what you're asking for. What is a ""case study of a problem to solve""?"
7,"> Can someone ELI5 why I get this error if x is defined globally?

Recall first that `x += 1` is the equivalent of `x = x + 1`. That's an assignment.

Why do you get the error? Because you're attempting to assign to `x` in local scope. It can't be in both places, and the Python preprocessor sees that the *assignment* occurs in local scope, so it tries to reference the symbol `x` in local scope, where it doesn't exist. Hence the error."
7,"A case study of what?

Programmers don't make ""case studies"", we write code to solve problems."
7,"	if __name__ == '__main__':
		# load cows
		cows = Cow(load_cows('ps1_cow_data.txt'))

One rule of thumb is that your class names should be *grammatically correct*, because it helps clarify your thought process. For instance, your class is named `Cow`, which suggests that it's the prototype for *one cow.* There's a really obvious mapping from one Cow object in your code, to one cow out in the real world. That's how data modelling is supposed to work.

But actually your `Cow` class represents a *collection* of cows, which is a herd, which suggests you should have called it `Herd`. Moreover, your implementation is just that you rename a bunch of dictionary methods, so what's its purpose? That's 15 lines of dead code.

        def combine_list(*argv):

Generally, define all of your functions in top-level scope. There's a purpose for nesting functions and I'm not sure you have the need."
7,"> But one course I'm taking now is introducing classes and I feel like my whole world has been turned upside down.

Yeah, because it seems like there should be more there than there is. Like, classes don't *do* anything. What's the point?

Classes aren't for the Python interpreter. Classes are for *you*, the programmer. Like modules they're a tool for code organization; they're a way to document the *state* your program relies on and make it reusable.

Don't concentrate on trying to ""get"" classes. There's nothing more there to get, you already get all of it: a *class* defines a namespace and a new *type*. Objects of a class are of that class' type, but they're also all of the types of the class' superclasses, if they exist. (By definition, every object of any type is also of type `object`.) An object encapsulates state and behavior, and both are defined by the object's class.

That's it - everything you need to understand about classes fits into a paragraph. The rest is just reading code to see what people do with them."
7,There's only one top-level namespace and your variable names have to share it with the names of everything else. Don't call a variable `list`.
7,"If you're doing it for your boss, you are."
7,"> Just don't want a oversight by me costing me my job in the long run.

Then don't make any oversights. That's what professionals get paid for."
7,"> any ideas for a project

If we help you come up with a project, aren't we helping you mislead a potential employer that you're somebody who can come up with their own projects?"
7,"> Dicts probably suit me better, but ultimately I think I need to just learn how to use Pandas as /u/coder_skippy suggested.

Well, maybe. Overall I'm not a fan of Pandas; it's a heavyweight dependency that takes a long time to load, and it presents a really clumsy interface over tables and is poorly documented."
7,"> I need to learn Python as quick as possible.

That's not different than how anyone else learns Python, you just need to spend more hours in day doing it than most people will.

> Courses, books, tutorials, videos, blogs, other subreddits, anything that can be of use to a non-programmer in need to learn Python.

Bouncing around like a dilettante from book to book to video is going to slow your progress, not enhance it. You've got a book, stick with it. If your deadline is closer than average you just need to spend more time each day working on it."
7,"Oh, sorry. Somehow I missed that the function is called *binomial* but it calls *factorial.*"
7,"I guess I don't get it. If your data is stored in CSV files then where are these list literals in your code coming from?

> I've tried using dictionaries but that just creates more problems

Specifically what additional problems does this create?

You kind of have to make a choice about how you want to interact with your data to know how best to represent it. If you want to access fields in rows by their header, then dictionaries typically make more sense, and `csv` has a method to return a CSV table as an iterator over dictionary rows. If you want to access fields in rows by the index of their column (the Xth, Yth, Zth column, etc regardless of what it's called) then you're going to want an iterator over tuple rows. If you use tuple rows, though, you can use a pattern like:

    for column_a, column_b, column_c in data:

which typically reads a little more fluently. If you just want to iterate over one of the columns, that's easily done as well:

    for _, column_b, _ in data:

Named tuples give you the same flexibility but with attribute names for the row, which can be nice - but it means you're code-locked into a particular table format, which is or isn't what you're looking for.

Dictionary insertion order won't matter until you need to write out the table, and then in most cases, whether you're using `csv` or not (and you should be using `csv`) you'll need to specify a tuple of the headers so that the writer knows what order to write the columns in. Again, `csv` does this for you but it's basically equivalent to:

    with open(""my.csv"", ""w"") as file:
        for row in data:
            file.write("","".join([row[key] for key in header])"
7,"Help me understand. If it calls itself once for every time it runs, and there's no branch through the function where it *doesn't* call itself, then it calls itself *every time* it is called, which means it recurses infinitely.

Explain to me how this function can *ever* return."
7,What are the circumstances under which this function returns before it calls itself again?
7,"Use things you understand whether or not you've ""learned them in class."" There's no purpose to learning to do things the wrong way out of a misguided desire to hobble yourself.

Don't write Python with one hand tied behind your back - use any feature of the language you're able to."
7,"This function recurses infinitely. You have to have at least *one* condition under which your function won't call itself, or you recurse infinitely."
7,"If you’ve been researching it, why don’t you tell us?"
7,"Nothing in here refers to the C drive (`C:\`). Why do you think this is a not-Windows problem?

> result = locale.setlocale(locale.LC_ALL, '')

This refers to the `LC_ALL` environment variable, which you can view in your terminal by running `locale`. This has nothing to do with the C drive."
7,"[Jinja](https://palletsprojects.com/p/jinja/) is the templating framework that ships with Flask, and this is what it's for."
7,"When I say ""the return value of a function"", is it clear what I'm talking about? You may want to review functions in Python if it isn't."
7,"> I currently do not have the .proto file that was used in the transport service...

It's going to be easier to get the `.proto` file than to reverse-engineer the protocol."
7,"Your function has to return data, not just print it."
7,`print(‘hello’)` won’t return a NameError under any circumstances. You need to show us what you’re actually doing and actually getting.
7,"	xOrginal = x
	x = y
	y = x
	yOrginal = y

If the value of `x` starts at `1`, and the value of `y` starts at `""a""`, then what's the value of `x` at the third line, when you assign that value to `y`?"
7,"You can only call `readlines` once per open file, because it consumes the entire file. After that there’s no more lines to read, the file handle is at the end of the file."
7,How would `self` enter the namespace if it’s not a parameter of the method?
7,Have you written a generator or a decorator?
7,"Sorry, I guess I wasn't clear, so I'll just say it: tell us what the error says."
7,"Your function doesn't return anything or contain any print statements.

> So, anyways now the code is giving me an error.

Yeah, that error is probably important, don't you think?"
7,"Is there a question? You can get started by opening a new file in your text editor, saving it as ""my_file.py"" or some such, and then writing Python code in it."
7,"These don't seem like private attributes, to be honest. If you hold a reference to an `ApiUser` object then you'd reasonably want to interrogate it about its userid and permissible roles.

It's not the underscore that's the problem, here, it's the imported-from-Java assumption that even the *public* attributes of an object should be marked private, and then access controlled through the getters."
7,"Start by starting. Start writing the code you know how to write. You don't have to tackle this in the order given in the problem, you can assume parts of the solution you haven't written yet and just get to them later.

> Create a loop to print the number and the months of the year from the list. 

Assuming you have a list of the names of the month called `months`, can you write a loop that prints the names of the month and the number of the month? Hint: if the list contains the months in calendar order, then the number of the month is one higher than its index in the list (because lists are indexed starting with zero, but human beings count starting with one.)"
7,"If your function is intended to return a value, that value should be the function's return value. Functions shouldn't operate by side effect."
7,"> Anyone know why this happens?

""Globals"" are actually only global in module scope. They're not global across your entire program. If you want to access the name `numplays` from your other module you have to import that, too.

This is the kind of limitation that's supposed to prompt you to stop using globals."
7,Then you should probably `return False` at some point in the function.
7,https://docs.python.org/3/library/json.html
7,It’s not different than handling any other JSON file.
7,"Sorry, what’s the question?"
7,"Classes are a construct for defining reusable state, and building UI's effectively involves both writing reusable code (many of your UI elements will be variations on a similar theme) and managing stateful objects (windows, widgets, buttons, and other display elements often have complex state to be managed.)"
7,"No, and there's no point to it. Anything you write can be decompiled by a sufficiently interested party; were *you* sufficiently interested, you could decompile all of the code you run on your own computer.

Ultimately if you're going to distribute code, people are going to be able to find out what it does. That doesn't mean they'll bother to try, but you won't be able to stop them from doing it if you distribute the code for them to run."
7,"Overall, there's a substantial difference in readability between:

    t = get_collection(iterable, type=tuple)
    l = get_collection(iterable, type=list)

and

    t = get_tuple(iterable)
    l = get_list(iterable)

and that's before we get to using ""command"" strings like `""output_list""` instead of using the actual `list` type. I know which of those *I'd* prefer to have to read. Make the important parts explicit. Clear, readable code is the code with the least bugs and that's easiest to maintain."
7,"In that case I still think it's going to be easier for you to get access to the database (through `pyODBC` and the MS Access driver) than to try to write a program that will click the right stuff in Access' UI.

If this is your job, it's the DB admin's job to let you do it."
7,"    if count(name, password) in account:

This will never be true - a new object won't be the *same* object as any object already in the collection."
7,"> I have an excel file with a bunch of fields that I need to add to an Access database using only an existing user interface in access itself, created by the DB admin. I won't have access to the DB structure nor tables names etc.

If you can't manipulate the DB structure then you can't add *any* fields to it."
7,https://ole.michelsen.dk/blog/schedule-jobs-with-crontab-on-mac-osx.html
7,I don't even know what site it is.
7,"That's a message from the website, not from `requests`. You'll have to contact the website operators and find out what the problem is."
7,"I hate this error because nothing is ambiguous about the truth value of a Series - if the Series is non-empty, it’s True. It’s a stupid fuckup by the Pandas devs they refuse to fix."
7,"Your OS has an API for rendering windows, and typically through a *lot* of layers of abstraction, libraries like Tkinter are sending messages to that API to tell your OS what to display. Additional to the OS's windowing API, there's usually an API for rendering directly to the display, and you've probably heard of some of these technologies: DirectX, OpenGL, etc. 

If you really wanted to get low level, that's where you'd go - access the display frame buffer and write directly into it, via DirectX or OpenGL. At that level it's really just a matter of setting pixels in a 2d array that maps to the displayed image on the monitor. It's about as straightforward as can be - and deeply, deeply tedious in which to implement a windowing system."
7,"`requests` doesn't have a JavaScript engine, so if the page dynamically loads anything after the initial load, it won't be available to `requests` because it'll never be requested.

Dynamically-loading pages are difficult, if not outright impossible, to scrape. That's often by design - not every web host wants their page scraped. If the operator of the site exposes an API, you should be using that instead of scraping. If they don't, and they don't make it easy to scrape their site, then they probably don't want you scraping it in the first place."
7,"The ""workaround"" is fixing your mistake. Take all of the `return` statements out except for the one that returns the value you're asked to return."
7,Returning a new list is actually the right answer. Modifying a list in-place is typically a bad idea.
7,The error is quite clear and written in English. What's confusing you about it?
7,You can only `return` once from a function; your function ends as soon as the flow of control reaches a `return` statement. So you're returning the sum of the values of the first hand.
7,"I had to read your post a couple of times to arrive at the heart of your question, and I guess also not be tired as hell, but I think I finally know the direction to point you in. Two things:

>	I know I can create a class outside the frames and store variables there

So, you should definitely be doing this - your display logic shouldn't also be your *data model*, rather your display logic should simply be a *view* onto your data model. Your data model would be the actual structure that holds something you might call a `Character`, with each character's attributes, inventory, features, whatever. Your UI elements have the job of displaying that information, but *not* the job of storing it. That's the key distinction of the ""Model-View-Controller"" design pattern, and I think it's key for this.

But that doesn't actually solve your problem, which is that your UI elements don't respond to updates of the data model. For that, there's typically a ""redraw"" or ""refresh"" method on UI elements that prompts them to update themselves; this is something you could call on the top level `MyApp` object, and it should cascade all the way down through the various sub-elements, including the panel you're concerned about.

But I don't use Tkinter so I can't tell you what it is. ""How do I refresh a Tkinter window"" should get you there on Google, though."
7,"No, there's no way around this, by design. The behavior would be underdeterminable and inconsistent - subsequent invocations of the same code wouldn't run the same way as the first invocation. That's undesirable behavior in most programming languages."
7,"Have your boolean expressions just be lambdas, and then you can call them with your values."
7,"You need to define your names before you use them. We’re not going to fix your code line by line, come on."
7,What does that mean?
7,"If Mr. Smith is your dad, and Mr. Smith visits the barber, then does your dad come home with a shave and a haircut?

Yes, of course. Intuitively we understand that ""Mr. Smith"" and ""Dad"" are two names that refer to the same person, so we can interrogate the characteristics of that person by reference to either name.

    l = s

means that `l` and `s` refer to the same value, so when you make changes to that value, you see those changes at either reference."
7,Return a list that has only the elements you wish to keep. You can't remove items from a list as you iterate over it.
7,"You have to stay aware of the types of your values. Write code deliberately, don't just throw stuff at the wall."
7,"    lambda x: (-len(x), x)

and then reverse the sorted list."
7,The alternative is not attempting to subscript an unsubscriptable type.
7,"Overall your code is slow because you iterate over the same collection as many as five times, for each of a couple collections:

    #Visible calc
    for i in range(vis_longs[0],vis_longs[len(vis_longs)-1]+1,10):
      #print(f'{i}          {trans[longs.index(i)]}')
      tvis9050 = tvis9050 + trans[longs.index(i)]*vis_factors[vis_longs.index(i)]

Remember in the worst possible case - the value you're looking for is at the end of the list - `list.index` iterates over your entire list every time you call it. It's not a lookup, because lists don't support lookup. (Dictionaries do, more on that in a sec.) It's a scan of the list for the value, one element at a time.

Similarly here's a pattern you repeat a couple of times in your code:

	for row in uv_range:
		uv_range_ful.append(row)
	for j in range (0,len(uv_range)):
		uv_longs.append(uv_range_ful[j][0])
		uv_longs[j] = int(uv_longs[j])
		uv_factors.append(uv_range_ful[j][1])
		uv_factors[j] = float(uv_factors[j])

This has me scratching my head because you have to know that this is two different ways to do the same thing (iterate over a list) so there's no possible need to do it *twice*, you can perform all these operations in one pass over `uv_range` and in fewer lines:

    for row in uv_range:
        #uv_range_ful.append(row) # you don't need to do this at all - uv_range is already the collection of rows
        uv_longs.append(int(row[0]))
        uv_factors.append(int(row[1]))

and this is more than twice as fast since we iterate half as much.

But moreover, lists aren't the lookup type - dictionaries are. I'd explain how to use them to replace:

	for i in range(vis_longs[0],vis_longs[len(vis_longs)-1]+1,10):
		#print(f'{i}          {trans[longs.index(i)]}')
		tvis9050 = tvis9050 + trans[longs.index(i)]*vis_factors[vis_longs.index(i)]

but I genuinely don't understand it. Your range expression is way too complex and there's no explanation given for the various constants.

At any rate, if your tables all obey the constraint that the Nth values always align (that is, they're separate observations on the same time series) then it's pretty trivial to get one table out of all of them:

	with open('iso9050_uv.csv') as uv_file:
		with open('iso9050_vis.csv') as vis_file:
			with open('TransTest.csv') as spectrum_file:
				table = []
				for uv_row, vis_row, spectrum_row in zip(csv.reader(uv_file), csv.reader(vis_vile), csv.reader(spectrum_file):
					table.append(uv_row + vis_row + spectrum_row)

and that's in a single pass through all three files."
7,"> FROM HERE... I DONT UNDERSTAND!!!!!!! 
> GPIOn = [0x12, 0x13]     WHY THIS VALUES?? WHAT THEY MEAN???

These are memory addresses, or ""registers"" - 00000012 and 00000013 . On something like a MCP23017 IO port expander, or just on the kind of general-purpose system-on-a-chip you'd find on an Arduino or RasPI, the way that you talk to the IO pins, and therefore any peripherals on those pins, is that the pins themselves are wired electrically into the chip's RAM. Therefore when you write bit 1 into the right place, the pin turns on, and when you write bit 0 into that place, it turns off. Alternatively there's a register you can set to alter the mode of the pin, turning it into an input. If the pin is connected to ground, you read a 0 from that bit - if it's connected to VCC, you read a 1.

> GPPUA= 0x0C  # Register for Pull ups A //WHAT THIS VALUES ARE?? WHY 0X0C?? WHY IS NECESSARY THIS PULL UPS????

On yet a third register, on most chips you can enable the internal ""pull-up resistors"", which make wiring the pins to switches a little easier. You wire the switch from the pin to ground; the pull-up holds the pin at 1 unless you push the switch, and then the pin is taken to ground which reads 0. You can detect that transition in code, and that's how you can make a physical button that causes something to happen in software."
7,"Well, no need to keep yourself in suspense! It’s an open source library, you can just read for yourself:

https://github.com/PythonTurtle/PythonTurtle/blob/master/pythonturtle/application.py"
7,Maybe you could ask some questions about it.
7,"I would say the problem is insufficiently specified for a truly *general* solution. For instance, consider a list of 4 elements - which 3 elements are the ""middle 3""? Your middle 3 either abuts the beginning or end of the list, so is that indices 0,1,2, or 1,2,3? Or does is a list of 4 elements assumed to not *have* a middle 3, and that only applies to lists of length 5 or greater?

What if the length of the list is even? Then there's still not an unambiguous solution, since your list's ""middle"" actually falls between two elements. Is it the 3 closer to the beginning, or closer to the end? Or should we simply not consider any even-lengthed list to have a ""middle 3""?

Since they don't specify how to handle these corner cases, I think it's clear they just want you to think about slicing, not to implement a robust ""middle 3"" solution to any indexable collection. No harm in a little overengineering, though."
7,"> Im incredibly confused. 

You're confused, I suspect, because you're trying to solve this word problem all at once, when it specifies a *step by step* solution. That's like trying to write a whole 5-page essay in your head.

*Think on the page.* Just as you'd tackle an essay or an art project. Start by writing down the parts you know how to write; you don't have to write a program starting at the top, you can start at the bottom or in the middle or even at the end. Write the parts you know how to write and then solve the rest afterwards. You'll delete a lot more code than you'll write, just as though it were an editing/draft process (because it is.)

> I understand that i have to write something akin to int(input(Enter the...)

Ok, so you *kind* of have one part of the solution - the part where you need to collect input from the user and assign it to variables. Programming is about connecting the bits you know about in different ways, like Legos. If you know about `input`, and you know about `int/float`, and you know about assignment using the assignment operator `=`, then you can combine those things into ""prompt the user for input, cast it to a numeric type, and assign it to a variable."" You're asked to do that three times, to collect two initial velocities and time.

So start with that. Once you've written that (it's like three lines of code) then that's point 1 settled; move on to the next step. You'll probably want to define a function (or three separate functions) that relate x-velocity, y-velocity, and time to horizontal distance, vertical height, and vertical velocity. You have equations for these already.

> I’ve already tried messing around

Don't mess around. You're not going to get here by trial and error; just as you can't write an essay that way. Write deliberately."
7,"    blank_worksheet.update_cell(1,2, dimension)                          
    blank_worksheet.update_cell(1,1, value)

Is it clear to you that the first two integer arguments to `update_cell` are the X and Y coordinates of the cell? That should make the syntax pretty obvious, I'd say."
7,Overall are you having trouble with the level of abstraction in the class? That's fine; talk with your instructor or a TA about it. You're not the first and programming is often the first really *abstract* thing that students have ever been asked to do.
7,"I'm not being negative, I feel like there's something fundamental about programming you're not understanding. The point isn't to get the computer to repeat an answer you already know; it's to solve a problem in the general case.

Your program has to work on input you don't know ahead of time. Try it with different numbers - your program is correct when it gives you the correct max and min, not just the two numbers you hard-coded. Just printing `10` and `2` because you know that's ""the answer"" isn't correct."
7,"Well, ok, you're cheating. You have to actually *compute* the maximum and minimum, not just hard-code it. Your program should give the right answer no matter what numbers you put in."
7,"There's not nearly enough information to help you - you didn't even provide your code.

What are you ""typing"" it in? Is this some kind of homework system?"
7,"If you just want column 8 of the row, then access it directly; your inner iterator is pointless.

    content = row[8]"
7,Avoid it by not attempting to subscript your integers.
7,"Maybe you could elaborate on what you find confusing about the error you’re getting, as it directly points to your mistake."
7,"It's a `for` loop:

https://docs.python.org/3/tutorial/controlflow.html#for-statements

It's one of Python's *flow control* constructs. The `for` loop of the form `for foo in bar:` assumes `bar` is an iterable type, and successively unpacks its elements one at a time, binding them to the name `foo` which is made available to the enclosed code block. The code block is then executed on each element, once per element.

You can name the iteration variable whatever you want - if you have a list called `magicians`, it makes sense that every element of such a list is a `magician`. Python doesn't care what you call your variables."
7,Nobody can debug on the basis of a code screenshot. Use a Pastebin or something.
7,"Think it through. For *each item in the list* you're going to do one of two things, based on whether the item is already a key in your ""inventory"" dictionary:

1) If the item is a key in the dictionary, then set it to its current value plus 1.

2) If the item is not a key in the dictionary, then set it with a value of 1.

You can test whether `item` is a key in the dictionary `inventory`:

    if item in inventory:"
7,"    print(""some"", ""stuff"", sep='')"
7,"Write this in an IDE and run it on your computer so you can see important debugging information like the traceback. If you’re a learner, don’t learn with handcuffs on."
7,"> I should give as value a list of objects but at that point I can't really know if in the list there is a value I don't want, for example, or an unusable value.

Right, that last one in particular - not *every* string can be an object attribute. There can't be a space, for instance, and it can't be one of Python's reserved keywords. For instance, you can't have an attribute called `return` or `def`. That's something you'd have to check for and handle, and by the time you're done you have some really complicated code that challenges readability and mantainability.

> I have a last question, then: do you think that if my .csv file has like 2000,3000 rows the iterator (and the script in general) will become too slower to read and execute?

No, not at all. `csv.readers` are lazy, so they only consume your file as you ask for rows. It never gets slower as your file gets larger; it just might take longer if you're doing something with each row of the file. Overall, though, the operation will still be IO-bound. It's faster to parse a row into a tuple or dictionary than it is to read a row from the filesystem, so generally your code will be waiting for the filesystem to catch up.

> What is a general maximum acceptable for an object like this? 

I've parsed several gigabytes with `csv` before. Like I said, the *size* doesn't matter to `csv`, because it only parses rows as you ask for them and it's usually waiting for the filesystem."
7,"> Is that correct?

Sure, more or less.

> Basically a code someone else made that won't run func1 and func2 but would run func3.

Uh, no, this code *never* runs `func3`, whether it's imported or invoked as a script. It defines `func3` but `func3` is never called, so it never runs. Here's typically what you're going to see:

	import some_lib
	import sys

	def long_running_function(opt1, optb):
		do_much_work()
		runs_so_long()
		take_forever()
	
	def main():
		some, option = sys.argv[1:] #get the command line arguments from the system argument vector
		long_running_function(some, option)
	
	if __name__ == '__main__':
		main()

This demonstrates the ""etiquette"" I'm talking about - if you run this as `python my_script.py -i -f` or whatever, then the script does what it's supposed to - it collects the command line options `-i` and `-t`, then runs the incredibly long-running `long_running_function` where a bunch of (we assume) useful shit occurs. (I apologize if you're not familiar with `sys.argv`, this is part of the POSIX interface for how scripts should communicate with command-line users. Don't sweat it.)

But that stuff is useful, so maybe I want that functionality in another script. In that case, I can import this script as a module without making any changes to it - I can simply

    from my_script import long_running_function
    #later
    long_running_function(an_arg, another_arg)

without any fear that the `long_running_function` kicks off before I want it to, or that it consumes any of the command line arguments (since the script enclosing it may offer the user entirely different command line options.) Compare that to this ""rude"" script:

	def long_running_function():
		args = sys.argv
		do_much_work()
		runs_so_long()
		take_forever()

	long_running_function()

at the command line, it probably works the same, but as a module it ""goes off"" as soon as I import it and fails strangely if the user didn't invoke the command line correctly. Python etiquette says, if you're an imported module, you should initialize yourself (define your functions and get set up) but you shouldn't run until asked."
7,"> I get the point anyway: if I can't know which attributes my class will have from the beginning, maybe there is little or no point in building a class at all.

Having taken the point, I'll now tell you the answer to your original question - you can programmatically set an attribute on an object given a string for the attribute name and the value you wish to set using `setattr`:

    setattr(self, ""dog"", ""Fido"")

is the equivalent of

    self.dog = ""Fido""

But the reason we don't give that out right away is that it *invites trouble.* It's almost never the right answer. When it *is*, it's exactly the right answer, and that's why Python has it. But it almost never is."
7,"> Still, it doesn't tell me if the code is imported or original, nor why should it initialize.

Python indicates that your module is the ""main"" or *entrypoint* module by giving it the name `'__main__'`. If it's an imported module, it's given the name of its module. In either case, a module can access its own name via `__name__`.

Ergo, if your module's name is not `'__main__'`, then you're not the entrypoint module and you should define but not run your functions. That's what `if __name__ == '__main__':` tests for - whether the module in which it appears is the main module or not.

> Isn't run automatically these functions reckless or confusing?

Well, it would be if the module *wasn't* the main module. It would be like a gun that goes off as soon as you pick it up - unintended functionality is likely to occur (to put it mildly.)

On the other hand, when you, the user, type

    python some_module.py

then that's taken as your intent that you *do* want the module to do whatever it does when it's run as a script and not simply imported as a module.

It's a kind of etiquette - if your module has functions, then they shouldn't ""go off"" as soon as you import the module into another script. But if your module *is* the script, *is* the entrypoint module being called by the user, then it's ""main"" functionality *should* occur. The `if __name__ == '__main__':` construct - popularly called *the guard* - serves to implement this desired behavior. It's a Python convention, and following convention is a favor you do for the other people who might use your code."
7,"    for <foo, bar,... N> in zip_longest(*[iter(seq)]*N):

Iterate over `seq` `N` elements at a time. (`<foo, bar,... N>` indicates that you can unpack into N variables, it's not real Python.)"
7,"> If you want to know if the module is imported or the original? Why would that change anything?

Because ideally you're not the only person who runs your code.

Maybe that comes as a surprise? I mean it shouldn't; you use a lot of Python libraries, where did you think those came from? At any rate, the reason it matters is that when your code is the *main* module, it should do something; when your code is not the main module, it should initialize itself and then wait to be asked to do something by the main module.

So it has to know the difference."
7,"Django's got a way to synchronize the database against your model:

https://docs.djangoproject.com/en/2.2/ref/django-admin/#migrate"
7,"> How is it not experience?

One of the things that comes with actual employment experience as a programmer is the skill of writing code to someone else's standard. On your own hobby projects, it's all your show. In a workplace situation, your bad habits and idiosyncratic style create more work and wasted time for other people.

Programming in a professional context isn't just banging on a problem until it works; it's about creating a high-quality, maintainable shared codebase. You kind of have to be doing it to learn it. A hobby project doesn't rise to that level; being a productive contributor to an open-source project might, though, since they'll hold you to the same standards."
7,You'd have to log into your database and examine it.
7,"> django.db.utils.OperationalError: no such table: casino_finder_casino

This seems pretty important. Does this table exist in your database?"
7,"> What I really needed to do was creating a class that manages a .csv object.

Sure, but it's worth looking at how `csv` [handles this.](https://docs.python.org/3/library/csv.html) Again, the purpose of a class (in part) is to document the attributes an object of that class will have; if you won't know that at the time the class is defined, then it's worth thinking about whether you actually want a class. `csv.DictReader`, for instance, returns an iterator over dictionaries, each dictionary being a row, each key of the dictionary being the header of the column, and each value of the dictionary being the value for that row in that column.

Overall I think what you'd want to ask yourself is how your intended functionality improves on `csv`. What problem are you solving that the library doesn't solve?

> I imagined reading the file in the __init__ method and set attributes for each column to show the values.

In my experience, given a table, people want to access and compute on the *rows*, not the columns. That's why the iterator you get back from `csv.reader` is row-major. Because generally you want to ask questions like ""what are the jobs of everyone older than 40"" and that's a row-major question, since it depends on the row-relationship between various values."
7,"Maybe the connection is timing out, due to idleness. It works the first time because there's not much time between opening the connection and using it, but then you go off and do some work and the connection has been closed when you come back.

I'd open and close the connections right when you use them, in the `telnet_ems` function."
7,"It's coming from the fact that your floating point values are approximate representations. Here's a simpler example of the same thing:

    >>> .05 * 3
    0.15000000000000002"
7,Where does `tn` come from? Your functions just pluck it out of space.
7,Because you [can't accurately represent all real numbers](https://en.wikipedia.org/wiki/Floating-point_arithmetic#Accuracy_problems) on a computer that approximates real numbers as scaled powers of two.
7,"This is not enough of your code to see your connection lifecycle, and that's going to be the important bit. `tn.read_until` will fail if the connection has been forced closed before you reach that line, but that's when and where you'll get the error."
7,"> Is there a way to do this?

Yes, but I'm not going to tell you what it is.

Here's why - you can't say *why* you want to do this. And it defeats the purpose of a class, which is to *document* the attributes that an object will have. Remember the Python interpreter doesn't care what anything is called - an attribute called `xyxx333ebd` works just as well as one called `dog`, as far as the interpreter is concerned.

The readable names, therefore, are for the *human beings* who will encounter your code. Particularly yourself. Therefore, your code should contain the readable names that make up your attributes - not names that contain the *names* that make up your attributes. Imagine I'm coming into your code base from the other end, and I have an instance of the `Example` object and I'm trying to figure out what the `dog` attribute is supposed to contain. I want to go to the class definition and see where that attribute is set, so I CTRL-F for `self.dog` to try to find it, and surprise, there's nothing like that. Then why does an object of type `Example` have a `dog` attribute? Now I'm confused, even if I go to `__init__` I don't see anything that says `dog`, so in order to *understand* your code, I have to know the values contained in `list_one` and `list_two`, and where even are those? They're just names that get plucked out of space, unless they're right there in the class definition.

So don't do this. Don't do runtime definition of attributes - it defeats the purpose of writing a class, and for what? To type 20 fewer characters? Did somebody break your fingers? (They might, if they have to maintain a codebase that does runtime dynamic setting of attributes.)"
7,"Yes, but it's clearly a link to an unrendered template, so it's useless. It's the wrong URL."
7,"Functions shouldn't work by side effect, ideally. Moreover, you have a pretty good case for using generators here, but that's impossible if you're only thinking in terms of ""how do I have to modify this list?"" instead of ""given this iterator over elements, what elements should I give back?""

In Python, *generally* we expect that anything that works on a list would work on a tuple or another immutable collection, unless it's really obvious that the only solution would be mutating the list in-place (at which point the function shouldn't have a return value at all.) In Python 3, we generally expect that anything that *could* be done via a generator is being done that way; it's more memory-efficient and compatible with streams."
7,"Well, it's not the right one."
7,How did you obtain the URL?
7,"    2019-08-28 16:00:45 [scrapy.core.scraper] DEBUG: Scraped from <200 https://wemar-autozubehoer.de/?cat=c30050_Kegel-60---kegel-30050.html>
    {'Time_Scraped': datetime.datetime(2019, 8, 28, 16, 0, 45, 356138), 'LLLLen': 16, 'Title': ['{{ cat.categories_name }}'], 'product_features': ['{{ short_name(prod.products_name) }}'], 'Product_Number': ['{{ prod.products_model }}'], 'Price': ['{{ brutto(prod.products_price).toFixed(2) }}'], 'Image': [], 'Path1': ['Startseite', 'Felgenschlösser', 'Suche nach Gewinde', 'M12x1,5'], 'Path2': ['Kegel 60°'], 'Description': ['<div class=""col-md-8"" v-html=""cat.categories_description""></div>'], 'CurrentURL': 'https://wemar-autozubehoer.de/?cat=c30050_Kegel-60---kegel-30050.html'}

Seems fairly obvious that you somehow scraped an unrendered template (that's what `{{ cat.categories_name }}` and so on are, template placeholders.)

How did you obtain this URL?"
7,"`os.listdir` returns filenames, not paths."
7,Yeah.
7,I'm getting a result of `339.28` with your code.
7,`a` is append mode.
7,"Whenever you open a file with `w`, it erases all of the contents. If you'd written anything there before, it's gone."
7,"*Starting* is the best way to learn programming. Don't wait around for conditions to be perfect or to know the best way to proceed, just start."
7,"Are you sure it's not writing?

    f = open(""ClipRecord.txt"", ""w"")

This is going to truncate the file every time you execute this line."
7,"The only thing you loop is the `sleep`, so the first time this actually works, it writes to the file once and then terminates. If you want it to constantly happen you need to loop the whole thing."
7,"Well, that's why Python programmers stop using `input` - if that's how you get input into all your scripts, you're locked out of anything else - you *have* to stop everything and have a user type something in. It doesn't work any other way.

What you have to do is re-write your scripts so that they contain functions that are parameterized appropriately, and then you import those functions and call them with arguments. If you've been putting off understanding function parameters and importing modules, well, you can't, now. This is when you need to use those features."
7,"Generate the filename first and test whether it exists; if it does, increment the number and repeat."
7,"A lot of people come in from other subjects (where test-taking and completing assignments is largely a function of *recalling information* they've learned in class) and then struggle with problems in programming that ask them to write even a simple problem, because they look at the *whole problem* at once and say ""we never learned how to do *that.*""

That's not how programming works. You've been given a collection of Legos but you have to do your homework by putting them together. It's creative problem-solving - you need to tackle the problem step-by-step, clause by clause:

> ask the user to enter a number  
> reject the user's input if the user does not enter a number  
> find all the factors of that number

In this case it's only three clauses, so really easy - provided you understand the math behind factorization. What's the math behind factorization? A number is a *factor* of another number (N) when:

1) the number is smaller than N  
2) the number is an even divisor of N

How do we test whether a number is an ""even divisor"" of another number? That's the function of the *modulo* operator `%` which you probably learned about, but didn't yet understand the purpose of. A number X is an even divisor of Y if the follow is true:

    X % Y == 0

And there you go. Those are all of the *facts* you need to solve this problem - now you have to compose them into a program. Write *deliberately*, not by trial and error. Know the purpose of *every line of code you write.*"
7,Did you try anything at all?
7,"It's not adding them, it's just displaying them."
7,"It's happening because you're attempting cross-site request forgery. In particular, your replay attack here:

    'csrf-token': 'ajax:7919273984241373439'

is pretty easy for the server to detect and reject. You have to use the *next* csrf-token, you can't re-use a previous one."
7,"    for info in infos.items()

Look up what `dict.items()` returns."
7,"A *variable* is a named reference to a value, that name being valid within a particular namespace. A ""namespace"" is just the context in which a name is valid, it being invalid outside of that namespace. For instance, the name ""dad"" validly refers to your father, or perhaps to yourself, within the ""namespace"" of your family, but within mine, it refers to a totally different person. (This frequently catches children by surprise, as you may recall from being that age.) When you assign to a variable using the assignment operator `=`, the *value* on the right is assigned the *name* on the left, and the name is valid within the local namespace. If you're at the top level of the module (the leftmost level of indent) the local namespace is called the ""global"" namespace, or sometimes ""top-level scope.""

A namespace can *enclose* another namespace; for instance, when you import a module, you create a namespace within the local namespace, whose name is that of the module. We use the dot operator `.` to access names when they're members of an enclosed namespace:

    import os #put os in the local namespace
    print(os.environ) #environ is a name located in the os namespace

A namespace is also created by any code block that creates a *scope.* When you enter a scope, a new namespace is created that becomes the local namespace. When you leave the scope, the local namespace is deleted and the names in it become inaccessible.

Assigning to a variable and reading *from* a variable are not equivalent operations. They differ in this way - when you try to read *from* a name, *all* enclosing namespaces are searched for it - starting locally, then whatever namespace contains the local scope, all the way up to global scope. But when you assign to a variable and thereby create a new name, that name is created in the most local accessible scope. Python offers two ways to modify this behavior - declaring that a name is `global` will allow you to assign to it in top-level scope, and declaring that a name is `nonlocal` will allow you to assign to it one scope up from where you currently are (this doesn't get used a lot.)"
7,"Oh, I guess it should be the other way around, right? I frequently forget what the `p` and `f` stand for."
7,"    mydateparser = lambda x: pd.datetime.strptime(x, ""%y-%b"").strftime('%m-%Y')"
7,"> But I want to learn more indepth advanced stuff related to how python handles memory etc, the low level stuff (which you have to do manually in e.g C).

The Python source is on GitHub, if you want to see how it manages memory. Other than that? Nothing. Why would there be?

> Is there a tutorial like this?

There would be no purpose to such a tutorial, since the Python end user doesn't need to know how the heap is implemented, only what it promises to do (basically, delete your allocations when the last reference to them is lost.) If you want to know implementation detail because you're going to contribute to Python, then you're expected to read the source since that's what you'll be contributing to.

There's no purpose for tutorial-level information about the implementation of Python's internal memory management - Python programmers don't need to know, and Python contributors don't need a tutorial."
7,"If you do string manipulation on a JSON string, it stops being valid JSON."
7,"AI as a field of study is like a million times harder than just learning Python. You may very well have to be a math genius to implement any practical solution in AI, but the math requirement for Python is basically high school algebra."
7,"Don't think of it as modifying the file. Modify a list or dictionary that you load with values from the file, perform the operation you want to do on that, and then truncate the file and overwrite it from memory."
7,"    data['users'][0]['uid']

and so on. The structure you get back from `r.json()` isn't JSON, it's a set of dictionaries and lists."
7,">	But how long would it roughly take me to get adjusted to thinking about all these new functions when I'm used to do everything manually?

I mean nothing's going to stop you from writing ""C in Python"" - using idioms like

    for i in range(len(my_list)):
        print(my_list[i])

instead of `[print(element) for element in my_list]` if you're lax about making an effort to expose yourself to Python code. Good code that uses Python's idioms. So, ""how long"" is a function of how much code you're reading. The upshot is, reading a lot of code (especially at the beginning) clues you into all these neat Python idioms that you'll be excited to use, so it helps you drive your own projects forward."
7,"You don't need one, just apply what you've learned from each example."
7,The page may simply not permit POST access.
7,Figuring out how to express your thoughts clearly is going to do a lot towards helping you solve your own problem.
7,"So, if `0xB8` signifies the end of your block, and the blocks are all of size `S`, then you'd read bytes until you encounter `0xB8` and then seek backwards `-S` bytes. At that point you can read and buffer `S` bytes, knowing that you've just ingested an entire block."
7,">	Isn't a class just a custom variable with functions associated with it?

A class is a namespace that defines a type. But like everything else in Python a class is a *value*, so when you reassign to the `dot` name, you lose access to the value of your class because you've overwritten the last reference to it.

The names you use for things have to be unique. Python doesn't keep track of separate namespaces for classes, functions and ""simple"" variables - they're all in the same namespace, so if you ""reuse"" a name you'd assigned a function to, you lose the function. Same with a class."
7,"Is your business going to want its process to rely on software written by someone with no experience writing production-quality software?

It’s a big project but you should expect this not to work until the third ground-up revision, at least."
7,"Python is a dynamic-typed language, like MatLab."
7,You're overwriting your class by using the same name (`dot`) as an iterator in a `for` loop.
7,"So, that's a hex dump. The `0x0004D358` at the beginning of the line is the address; it's not part of the dump, it annotates it. Is this a hex dump from a file, or is this a file that contains a hex dump? Because if you're trying to parse this, you need to ignore the hex address at the beginning of the line."
7,"Variables are for the programmer, not the interpreter. You’re defeating the purpose of names when you manipulate them this way."
7,"Because in order to install it, you have to compile the C extensions for Numpy, and that requires a C compilation environment already on the system."
7,It's no sweat - XML is pretty human-hostile. Hard to read.
7,You need to indent code blocks after `if` so that Python knows which part the conditional applies to. That wasn't apparent until you fixed your formatting (which is why we get up people's ass about it.)
7,"I don't see anything on that line (or the previous one) that looks like bad syntax, but later on, this:

    else Item == (""Pot""):

won't work. You can't give a condition to an `else` clause, you need to use `elif`."
7,"> Can anybody point out what or where I'm doing wrong?

Not without, like, *literally any* description of the problem you're having."
7,"> But when the exception runs func(), it as if func() is run for the first time and so the very first key-value pair is the output, which is not what I want.

But it's what you wrote. The obvious solution, like I said, is to handle the exception *inside* the loop."
7,"> Any ideas of how I could approach this with Python instead?

Does the record number matter? Does the order matter? If not, it would be pretty easy to suck up the file with `csv`, drop the Record number column, and then de-dup the Title+URL tuples by adding them to a set (sets can't hold duplicates.)

If you need to keep the lowest/highest/whichever Record Number for the set of duplicate Titles+URL's, then there are slightly different strategies but they're basically the same."
7,"Why are you getting an exception? If you want to continue in a loop, why aren't you handling the exception inside the loop?"
7,"> Those are web frameworks as well?

I would say those are ""webapp frameworks"", but sure, in the JavaScript world you'd want to disambiguate between the web frameworks that operated in the browser and the web frameworks that operated on the server.

In the Python world there *are* no web frameworks for the browser because you can't run Python in the browser. So generally, all Python web frameworks are going to be backend frameworks.

> And what about Django?

It's extremely similar to Flask."
7,"I didn't post any code. I posted plain English:

> In your text sample, the string-literals are anything between two quotation marks that starts on a line, or has only whitespace between it and the start of a line.

Define your rule in English (or whatever language you find natural) and *then* try to express it as a regex."
7,"    n += 10

References aren't transitive and it has nothing to do with looping. If you overwrite the value of `n` it doesn't change the dictionary. You have to actually change the dictionary."
7,I find it's helpful for writing a regex if you can write your rule in English. I took a stab at defining your rule for you - is it close to correct? Are there cases I don't cover?
7,"`regex` is where I'd turn to for this. In your text sample, the string-literals are anything between two quotation marks that starts on a line, or has only whitespace between it and the start of a line.

That's not the easiest regex pattern but it's doable with some experimentation."
7,"Sure, I mean, you start down this path and nobody tells you how much of it feels like failure. But that's basically programming - I write and delete ten lines of code for every one I keep, maybe more. 20-year veterans of the field Google stuff every day. Fluency comes with time and practice."
7,"> It's as if I understand all the constituent parts but get confused when it comes to making them fit and work together.

That's the part no tutorial can cover - it's like learning a language. That's why it's hard, it comes *only* from practice. Your brain has to learn what concepts to [prime](https://en.wikipedia.org/wiki/Priming_(psychology) and it only learns that through failure.

So you're going to fail a lot - you're going to get stumped and head over to Google to be reminded. That's how you train your brain to keep that stuff closer to the surface when you're working with Python. It's all working as intended. Keep at it."
7,"Web frameworks operate in the backend; the ""backend"" is the web server. What's confusing about the terminology?"
7,"Well, don't stop, then. Make it habit, make it happen."
7,"    0xB800000000000000

It might help your confusion to know that this is an integer, not a string. And that it's not equal to

    b""\xB8\x00\x00\x00\x00\x00\x00\x00""

> The next part is, I need to step backward from each instance of the string I searched for and check to see if the byte matches one of several values in a list, and if it doesn't, print the entirety of the block from the last valid byte to the last 0x00 of the searched string to a file.

What is a ""block""? When you read a file, you're just going to get the bytes of the file. They're not structured - the filesystem is agnostic to the structure and data of files. Let's say your file pointer points at byte 10000; how would you know how far back to go to find the beginning of whatever a block is?"
7,"> Within this table, let us assume I store a username and connection column. A user must, of course, be unique. Only one row of each username will be stored. If this user connects from two different devices, all of the sudden a second column is required.

If a user can have multiple connections, then you've already violated the First Normal Form, and that's why this seems unclear. *Connections shouldn't be in the User table.* There should be a Connections table, and each Connection should have a foreign key reference back to a row in User."
7,"That's how, though. You have to use the bracket syntax."
7,Stored in what?
7,Strings don't have a `get` method.
7,"The example given isn't nested, it's just structured."
7,"I'm sure there's a lot OP doesn't understand, but why should any of us put more effort into our replies than he put into his post?"
7,You can't use a name you don't define.
7,"> Have no idea what I have done wrong

I mean the error literally tells you."
7,"    results = map(get_mae, sizes) #apply the function to all of the values
    index = result.index(min(result)) #get the index of the smallest result
    answer = sizes[index] #the element that produces the smallest result in get_mae"
7,Good catch!
7,"Your dataframe has no rows, then."
7,"> TypeError: sequence item 5: expected str instance, Series found

Without a line number nobody can tell you which line the problem is on, but something you think returns a string actually returns a Series. My guess is this:

    line('h1', df['GUESTNAME'])

Typically when you ask for a column from a dataframe you get a Series of values, not a string."
7,"It doesn't have to be recursive:

    for subject_name, subject_quiz in my_json['quiz'].items():
        for question_name, question in subject_quiz:
            print(question['options'])
            answer = input(question['question'])
            if answer != question['answer']:
                print(""No way"")"
7,"Sure. Let's say that you have a `User` class, and it has an attribute `email` to hold a user's email address, but we want to prevent the attribute from ever being set incorrectly - we want to verify that the value we're trying to set is an email address, which we'll define as a string that contains `@` but not at the beginning or end. `@frog` is not valid, `crash@` is not valid, but `crash@frog` is. That's not an exhaustive check but it should catch a lot of obviously malformed addresses.

In Java, in order to do this, you'd need a *method* to set the `email` field, because if you just make the field public and let other parts of the code write into it, there's never a chance to do any checking. This has led to the Java practice of writing Plain-Old Java Objects (POJO's) with getters and setters, and enforcing their use on other users of the class (and indeed, all users of *all* classes) so that you're always afforded the opportunity to intercept attribute access if you want:

    public class User {
    
    	String email;
		
		public void setEmail(String email){
			if (email[0] != '@' && email[email.length - 1] != '@' && email.contains('@'){
				this.email = email;
			} else {
				throw new InvalidEmailException(); #or whatever
			}
		}
		
    }

But now, literally everyone who uses Java has to be trained to access object fields through their getters and setters, because we have to lock off public access to the fields themselves or you can sidestep our verification logic. In order to do this one thing, we have to enforce a style on the entire Java community. Which I guess we did, huh.

We could do that in Python, too:

    class User:
    	
    	def setEmail(self, email):
    	    if type(email) = str:
    	    	if email[0] is not '@':
    	    		if email[-1] is not '@':
    	    			if '@' in email:
    	    				self.email = email
    	    				return
    	    raise ValueError(""Bad email"")

but then anyone who uses our object has to call `crashfrog.setEmail('crash@frog')` instead of doing the instinctual Python thing `crashfrog.email = 'crash@frog'`. Using `@property`, though, we can intercept attribute access transparently, without forcing other users of our class to change how they interact with it:

        	    
    class User:
    
    	@property
        def email(self):
            return self.the_actual_email
            
        @email.setter
        def setEmail(self, email):
        	if type(email) = str:
    	    	if email[0] is not '@':
    	    		if email[-1] is not '@':
    	    			if '@' in email:
    	    				self.the_actual_email = email
    	    				return
    	    raise ValueError(""Bad email"")

Basically the same code, but annotated with the idea that `User.email` is actually a *property* instead of just a simple object field, and so *stuff happens* when we try to write into it. But you still access it as though it were an object field: `crashfrog.email = 'crash@frog'`. It's a setter, just like in Java, but we don't wind up enforcing an entire style on *literally everyone writing Python* and using any class, whether the field being set requires additional logic or not."
7,"Keep it simple for Python. If your attributes *act* like simple object fields, just use simple object fields. There's no *actual* way to prevent another actor in the runtime from reaching in and modifying your object, so don't even try to stop it (what's the point?) Use `@property` for *when you want to create a property* - when you need to intercept access of something that *looks* like an object field but is more complicated than that.

`@property` is there for you when you need it, so use it when you need it. If you don't need it, don't use it. Python isn't one of those languages that has a bunch of features you're not supposed to use. Object attributes are available from any reference to the object; there's no reason for you not to use objects that way."
7,"> So what happens if I create an instance of a class where the attributes orginate from the file and then change the file's contents?

Nothing happens. `__init__` only runs once when you create an object. It's not going to ""live update"" when you make changes to the file."
7,"You don't need `i` - `name` is the elements of `list_interface`:

    for name in list_interface:
        print(name['name']) #etc"
7,"> /home/qualia/anaconda3

Can you check which part of this path doesn't exist or isn't writable?"
7,"> I could do something like list_interface[0] but then I just get all this output for the first interface.

Sure, you get a dictionary. So you can access the value that comes back like a dictionary:

    list_interface[0]['name']

Like that. You can ""stack up"" modes of access like this, it's just algebra."
7,"    json.dumps(list_interface)

*Dump* is for going from Python objects *to* JSON; it's not for *reading* JSON. What you're getting back from the API is likely an object structure (it looks like a list of dictionaries.) Typically API libraries take the JSON response from the server and deserialize it for you, which is why you're interacting with a JSON API but you don't need to worry about the JSON. The API library is going to handle that for you."
7,"Neither one of these stores the dataset in memory. No data goes into memory when you open a file, you just get a file handle from the operating system that permits you to read data from the disk.

But also the file handle is stateful. It keeps track of its position in the file. If you parse 10,000 rows from the file handle, then the next time you read from the same handle, you start at row 10,001. If you read the *entire* file the first time, then the second time you try to read from it, there's no data there (you've exhausted the file.) Generally that's why you'll see file handles opened over and over again - that part of the code wants to read the file from the beginning. Eventually programmers adopt the near-superstition that they need to close their file handles as soon as they're done with them, and that's generally a good practice - hanging on to open file handles for a long time increases the risk of damage to the file system or to the file you have open."
7,"> What happens when I import my_funcs into another script?

Nothing - they're defined but not run.

But that also happens when your script is the main module, too - in this case you've created a module that doesn't do anything when you run it on its own. That's fine, if that was your intent; but to produce a module that both runs *and* is importable, that's what the `if __name__ == '__main__':` guard is for."
7,Why are you seeking to the beginning of the file?
7,"Just start writing code. This isn't a ""recall it all from memory"" problem, it's a challenge you're meant to figure out by the attempt."
7,"`os.listdir` returns filenames, not paths. You have to join the two yourself."
7,"The top object of a JSON document has to be a single object. But that object can be a collection, like a list or a dictionary.

It can be a number, like you're using it, but it can't be two numbers. It can't be more than one of anything."
7,"> So my question is: if I know some of the basics of Python (I don't know ALL of the content in chapters 1 to 6) should I go through the start of the book and do all the projects and assignments, OR should I jump into whatever's after chapter 6 and go on from there.

Honestly it doesn't matter; either way you go, you're going to hit problems that are total stumpers. That's by design - you're meant to run up against these brick walls and then find a way around them. Maybe that means going back to Chapter 1 of the book; maybe that means going to a totally different source. Maybe it means Googling the answer.

It doesn't matter - the important part is that you keep writing code and keep solving problems."
7,"> When trying to run the below code, I end up getting a ""name 'var1' is not defined"" error. But aren't I assigning var1 in func1, and then returning that variable to be used outside of the function, elsewhere? Why is it not letting me print the variable that I've returned by calling the function?

You don't return variables, you return *values.* `return` doesn't mean ""move this variable into the enclosing namespace"", as you're assuming it does. It means `go back to where this function was called, and replace that call with the return value.""

`var1` is a name that goes out of scope when your function returns. As a result, you can't refer to it from enclosing scope - it doesn't exist there. That's why Python is telling you it's not defined - it was ""un-defined"" when you left the scope where it had been defined."
7,Don't write a second number.
7,Right - it stops being valid JSON when you have the second number.
7,How many numbers will be in the file the second time you run the script?
7,"Ask yourself - what are the circumstances in which this code will print a number, and when it does, what number does it print?"
7,"> I have the problem that i need to get random numbers in my while loop

The way you wrote it, *do* you get the random number in your `while` loop?"
7,"Think of something like

    @ntimes(2)

as a call to a function that *returns* a decorator. Remember, a decorator is just a function-valued function that returns a function, called with a particular syntax:

    def my_dec(a_function):
        return some_function

    @my_dec
    def my_func():
        pass

meaning ""look up the function at the name `my_dec`, call it with the function named `my_func` as argument, and whatever comes back, assign that to the name `my_func`. It's fairly abstract but once you get the hang of it, a decorator with a parameter is just one step more abstract:

    @ntimes(2)
    def my_func():
        pass

meaning ""look up the function at the name `ntimes`, *call it with the argument `2`*, then whatever function is returned, call *that* with the function `my_func` as argument and assign whatever is returned to the name `my_func`.

It's indirect to say the least, but suffice to say that the way you ""step up"" from a ""naked"" decorator to a decorator that takes parameters is to write a function that accepts those parameters and *returns a decorator function.*"
7,"Generally you would do this by having your code pull the API key from the environment variables:

    import os
    api_key = os.environ['API_KEY']

and then you can set the envvar when you run your code:

    $ API_KEY=""AAABBBCCC"" python my_code.py

That way there's never a risk of committing your code to a GitHub repository or something, because it's never a part of your codebase."
7,"Right - API keys, encryption/code signing keys, etc."
7,"No planning at all. When I encountered interesting problems, I tried to make useful solutions.

It's good to experience doubt. You'll fail a lot.

Reflect upon the [Three Virtues of the Programmer.](http://threevirtues.com/)"
7,"They don't have to be ""tech savvy"", they can pay someone in Fiver to do it.

> potentially use it to attack a server for example?

The first thing you should always assume about your attacker is that they know every detail of your system *except* the keys. (And then you should make sure nobody gets your keys.)"
7,Did you try not doing what the error is telling you not to do?
7,"I'm not sure how I'm not being clear. The first one and the second one are the same string. One of them is what it looks like when you see the unicode in ASCII, and one of them is what it looks like when you view it in something that is unicode-aware. But they're the same string."
7,"> Saying something ""has to be a value"" isn't very helpful. 

I disagree. OP's question is whether he can map a key to an *action*, to a statement that is then evaluated on retrieval, and the answer is ""no."" You can only map keys to *values*, not to statements.

But some values are ""things that act"", i.e. functions, and those *can* be mapped to. But retrieving the value of a ""thing that acts"" isn't the same as the action, just as a singer isn't the same as a song. So, the extra step is that after you've retrieved the actor, you have to tell it to act. In Python terms, that means retrieving a callable value and then calling it with the calling operator `()`."
7,"https://docs.blender.org/api/current/

Did you start with this?"
7,Then there's newlines in your strings. They're not coming from the print statement.
7,"Split on the newline only: `data.split('\n')`. You want to split on as few characters as possible, ideally only one."
7,[They don't do exactly the same thing.](https://stackoverflow.com/a/10012710)
7,Those are the same thing. They're the same text; you're just seeing the unicode in the first one.
7,"`split` will split on all whitespace, including the newline `\n`. But it's also splitting on *all whitespace*, including the spaces. That's why you can tell it what to split on, too:

    lines = data.split('\n')
    print(lines[1:])"
7,Hopefully I haven't dissuaded you - your project is very doable.
7,Translate from what to what? There's nothing there to translate.
7,"When you import a module, everything at top-level scope runs. If you have a function call to `main` in top-level scope, it runs whenever someone imports the module.

Typically this is undesirable behavior, so a common Python idiom is to put the long-running computational work ""under guard."" `if __name__ == '__main__':` is the guard. The code block under it will run if it's the main module - the entrypoint of the program - but not when it's imported by another module.

Thinking of your code as something other code could import and run is a necessary step for the programmer - you should be thinking about code reuse at all times. The guard is one of the ways Python promotes code reuse."
7,"Generally for this (""web scraping"") there's two third-party libraries you'll want to use: `requests` for getting web content, and `BeautifulSoup` for actually doing the scraping. BS provides an API for basically saying ""go into this HTML webpage, and find me the content of the element that has the tag `<span>`"" or whatever.

Generally just downloading and using a library is beyond the scope of what a beginner should do - not because it's hard, but because it's really easy to run off the rails and you won't yet know why. Especially on Windows where it's harder to find instructions (most programmers are on more standardized operating systems, like Linux or Mac.) Just run basic Python tutorials until you've had a few successes, and then you'll be ready to tackle this project. Gotta walk before you can run, unless there's somebody there who can show you how to do this."
7,"> what i want is to translate from the requests to text

It *is* text. It's not an HTML character, it's a ú."
7,"    print (printfrom,printdate, printsubject, sep = ' | ', file=f)

This works in my testing. What's the result you're getting? Are you sure you're looking in the right file?"
7,`'penúltimo'` is a valid string literal in Python. Type it with your keyboard.
7,"Yes, but no. A dictionary maps keys to values. Whatever the key is mapped to, it has to be a value.

Functions are values, so you certainly can have a function mapped to a key:

    def my_func():
        #do stuff

    d = {'a name':my_func}

but *calling* a function doesn't happen automatically, you need to use the calling operator `()` to call a function no matter how you're getting a reference to that function. So just `d['a name']` won't call the function - but `d['a name']()` will. That's prone to failure, of course, when your dictionary contains some values that are callable and some values that aren't."
7,"`penúltimo`

Just like that. Python 3 has Unicode support for strings by default."
7,"> i have tried to use the sep="" "" command but either it gives me eveyrthing in one line with parenthesis and other characters not on the original text or it doesn't do anything

`sep` is definitely what you want to use, but you'll need to terminate the line yourself or subsequent `print`s add to the same line."
7,"    for char in text:

This iterates over the lines in the file (lines are the default iterator for files.) A line will never be equal to the single character `;`."
7,"> I'm not sure what I did wrong.

So, ""not getting any output"" means that your code is managing to follow a branch where there's no print statements. Since you only call `search_shoe`, what's the branch where the function returns without printing anything?

Well, it's if `self.shoeList` is empty. So why is it empty?"
7,"I mean if you're not getting the syntax right, your programs aren't running. But as in natural human languages, there's a difference between *fluency* in the language and fluency in the language of grammar or linguistics. Plenty of novels have been written in English by people who couldn't define an adverb or diagram a sentence. The part of your brain that handles language isn't the conscious part you would use to formalize grammar or describe a language linguistically.

Similarly plenty of people use Python's syntax without being able to formally explain it, or read the EBNF (Extended Backus-Naur Form) definition of the language. The people who can often go on to write their *own* programming languages, or define Domain-Specific Languages (DSL's) for other purposes. I saw an interesting talk at PyCon this year by a person who defined a formal DSL and parsing engine for ""blazon"", a 12th-century written language based on Normandic French and used to encode heraldic patterns for knights and nobles and stuff.

I guess that's the kind of thing you'd do if your brain wraps itself around EBNF and other topics. Mine doesn't, but it was an interesting talk!"
7,"Well, so one really obvious strategy is to note that the only difference between yesterday, today, and tomorrow is the date; having noted that, it becomes obvious that instead of one collection of a lot of text elements, you have three instances of a *single* element that displays the weather conditions for an arbitrary day:

    class WeatherWidget:
        def setupUi(self):
            self.avg_temp = QtWidgets.QLabel #etc
            self.sunset = QtWidgets.QLabel   #etc
            self.humidity = QtWidgets.QLabel #etc

        def updateWeather(self, weather_data):
            self.avg_temp.SetText(weather_data['avg_temp']
            #etc, set the rest of the values

and then a main window that has three of them:

    class Ui_MainWindow:
        def setupUi(self):
           self.yesterday = WeatherWidget()
           self.today     = WeatherWidget()
           self.tomorrow  = WeatherWidget()

When it comes time to update these UI elements, we've put the logic for that in `WeatherWidget`, where it makes sense for one of these objects to know how to update itself given a record from your weather API or whatever, and we can just tell the main window to update itself:

    main = Ui_MainWindow()
    #etc, I don't actually know how Qt works
    main.yesterday.updateWeather(loadWeatherData(yesterday_date))
    main.today.updateWeather(loadWeatherData(today_date))
    main.tomorrow.updateWeather(loadWeatherData(tomorrow_date))

As you can see, there's no need for a lot of elaborate metaprogramming of variable names if you just take advantage of abstraction. And you can see that my solution is already a lot like what you want, because you were almost on the right track. Your instinct that you only wanted to write the update code *once* was entirely correct, but the way to achieve that is with abstraction, not with metaprogramming."
7,They're the same type of loop.
7,"Nobody cares about your certifications in programming because it's trivial to determine the quality of a programmer from reading their code.

It's like hiring a wedding photographer. You don't check to see if they're a Certified Make-you-look-good Black Belt ISO 9000 Six Sigma whatever, you simply look through a book of their photographs and see if they're any good."
7,"    for file in os.listdir( r""C:\Users\myname\Desktop\pictures"" ):
        add_attachment( msg, file )

The filenames you get from `os.listdir` are just filenames; they're not *paths.* You have to join the filename to the enclosing path yourself:

        add_attachment(msg, os.path.join(r""C:\Users\myname\Desktop\pictures"", file))"
7,Which part of that is unnecessary?
7,Sure.
7,"> My question is how can I create multiple dictionaries using loops?

The same as you can create them outside of a loop. Loops aren't some weird land where everything works differently; all Python is the same regardless of whether you're looping or not.

I suspect what you mean is ""how can I maintain references to a number of dictionaries, the precise number being unknown before runtime"" and the answer is, add those dictionaries to a list."
7,"> Can’t I just use functions?

They don't do the same thing. Functions define reusable behavior; classes define reusable state."
7,"> Which begs the question, how and why are these files written with the .XML extension in the first place?

Well, I mean, I think you're *actually mistaken* and the end tags are in there somewhere, you're just not seeing them. XML documents are hard for people to read.

You *can* have a single-line tag of the form `<some_tag />`, but not otherwise. If the tags aren't closed it's not a parseable XML file, which has nothing to do with whether it ends in `.xml` or not. One reason to send invalid XML over the wire is to *prevent* anyone else from being able to conveniently parse it, which I could imagine a company doing if this was some kind of proprietary format."
7,By definition a document that opens but doesn't close tags is not an XML file. It doesn't matter what the file extension is - the definition of an XML document is one where the tags are closed. There's just no way around this.
7,Then it's not XML and you can't use an XML parser with it.
7,Autocomplete is just tab in VS Code.
7,"> Is there something I'm missing?

A properly-formed XML tag has a beginning and an end. You can't parse a beginning tag only, you need to close the tag. That's what the parser is telling you:

    lxml.etree.XMLSyntaxError: Premature end of data in tag Title line 1, line 2, column 1

In other words ""this document is badly formed; it ends before all of the tags are closed."""
7,What does it do?
7,Too vague to answer. Please look at the posting guidelines on the sidebar.
7,"> Can I write code somehow to just catch two different exceptions?

Well, like I said, if the driver doesn't distinguish between the two error conditions, your code won't be able to. And many drivers don't - they just map broad categories of SQL exception to a particular Python exception type.

In particular the error you're seeing seems to indicate that the uniqueness constraint is that the *combination* of both values is unique. It's actually `(inputOne, inputTwo)` that's non-unique."
7,"Catch the error when the insert fails, then actually query - SELECT - the rows for which the value of column 1 is the value you tried to insert, and if no rows come back, query the rows for which the value of column 2 is the other value you tried to insert.

If *both* of those queries return no rows, then you had an operation error that isn't related to the uniqueness of those columns."
7,"If the driver doesn't map the SQL exception to a Python exception - and many drivers don't except to broad categories, like `OperationException` - then there's nothing specific for you to catch. You'll just have to make two queries, asking for the matching values in the first column, and then the second. The one that returns a non-zero number of rows is the one that's non-unique."
7,"    c.execute(""SELECT * FROM user_data WHERE user_ID=:ID_input"", {'ID_input': searcher.search_ID})

I don't think this is [how you parameterize a query](https://docs.python.org/3.7/library/sqlite3.html) in sqlite."
7,"> I’m having trouble finding the correct path to loop through my list and add my items to a new list.

Make all possible combinations and filter out the ones where the sum is lower than 75 and higher than whatever your lower bound is (however ""close"" to 75 you want to get.)"
7,">	Therefore each text label in the GUI has a unique variable name (i.e. _todays_temp_value, _tomorrows_temp_value, etc...).

If you build a UI element and define it as displaying one of your variables - `GUI.newTextBox(value=todays_temp)` is a made-up example - then when you change the value of `todays_temp`, nothing will change in the UI element. That's not how Python works.

So it doesn't matter what the variable names are. Use a dictionary. Don't ever try to use ""variable variables."" The whole point of variable names is that they stay constant in the code - they're a convenience for the programmer, not for the interpreter. The interpreter doesn't care what anything is called.

>	alter the variable name a little through each iteration of the for loop so that I can assign everything in weather_data[0] to _todays_xxx_value, weather_data[1] to _tomorrows_xxx_value, and so on without having to explicitly type out ""todays_xxx_value_gui_label = 'foo'"", ""tomorrows_xxx_value_gui_label = 'foo2'"".

Yes, but we're telling you it's a bad idea to want to do this. You also shouldn't type out 300 variable names either, though - that design is also bad:

    todays_xxx_value_gui_label = 'foo'

You don't need a variable for a value you're only going to use once. Just set the UI element's label as a literal value:

    GUI.newTextBox(label='foo')"
7,"They're never unavoidable; they're preferred when you're writing frameworks, however. Flask is a good example."
7,"That's not ""binary output."" What you'll get from a computer vision library is a statistical confidence that the image sequence represents a person skipping rope, from 0 to 100%."
7,"Seaborn needs a 2D array (from `numpy`), it doesn't look like it'll work with a DataFrame."
7,">	here is where I face my problem. The lists are always named the same.

Well, they're not. One is named `JSONObjects['item1'][0]` and the other is named `JSONObjects['item2'][0]`. You don't need to rename these references, just work with `JSONObjects`."
7,">	Normally the call would be test123 = [], but I want it more generic and I dont know what the value of name is in the beginning.

Then that entirely defeats the purpose of variable names. Variable names are for the benefit of the programmer reading the code, not Python. Python keeps track of references on the heap; it doesn't care what anything is *named.* So generating names at runtime is pointless - the whole point of named variables is so they can exist while you're *writing* the code.

If you want to *look up a value* avoiding to a string you're getting from a function, use a dictionary."
7,"We need the error message, too."
7,"Then you wanted to use the square brackets, I think."
7,"Variables are references to values, not to other variables. `b = a` creates a reference named `b` to the *value* at reference `a`, but if you change the value of `a` it doesn't change what `b` is a reference to."
7,"So, that's called having ""variadic parameters"" (because the number of them can vary) and in Python, we'd handle this with the splat operator:

    class FishTypes:
        def __init__(self, *fishes):
            self.types = fishes

and then you can use any number of arguments you want:

    fish = FishTypes('cod', 'salmon', 'kipper', 'guppie')
    fish.types[0] # >>> 'cod'"
7,Why did you define three parameters if you're only going to use two of them?
7,"It matches the definition, as all of its elements are of the same type and it's an array."
7,"Most people find the shift over to classes and objects pretty confusing, because it's not like the programming they've been doing to-date. So far, to you, Python is a big Lego box and everything you've been doing is about learning how different Legos fit together and what they do.

In come classes, now, and classes are like building with Legos you make up. That's the purpose of a class - it defines a new *type* that you're going to extend the environment with. 

So to solve a problem with classes, you need to look at your problem and think of it in terms of the pieces *that don't exist yet. * You're trying to implement Blackjack, a game played in casinos with cards, hands, shoes, money, a dealer, and one or more players. But the Python interpreter knows about dictionaries and lists - it doesn't know about games, cards, hands, or players.

That's what the classes are for - *you're* going to define a `Game` and the states it can be in. You're going to define a `Card` and what attributes it has (suit, face value.) You're going to define a `Shoe` and what it can do, or be told to do (shuffle, deal the top card.) You're going to add a bunch of new types and tell Python how they relate. The reason Blackjack is a common example for new programmers is that the game has relatively few moving parts and the number of actions a player can take is pretty small, so let's start from the top, the game of blackjack:

    class Blackjack:
        def __init__(self, hands=1):
            self.dealer = Dealer()
            self.hands = [Hand() for _ in range(hands)]
        def hit(self):
            pass
        def split(self):
            pass
        def bet(self, bet=5): # $5 minimum!
            pass
        def hold(self):
            pass


There's a lot of `pass` in there because I don't know immediately how I'd implement this game, but I do know how I'd *model* it because I can sit at a Blackjack table out here in the real world and identify the objects and actors that are a part of it. A game has one dealer and one or more hands. That's where you should start - define the actors in your game and name the ways they can interact. In the above, a `Blackjack` game can be interacted with by hitting, by splitting, by holding, and by betting. How do those work? Write that part last. Define the moving parts, first."
7,"Subprocess won't help; each subprocess is it's own interpreter so each process incurs all the overhead of starting up. 

There's no way to do what you want, and you wouldn't want it to work, anyway."
7,Dictionary keys have to be unique.
7,"> The http link generation is through hypothesis strategies.from_regex.

Regexes are hard for `hypothesis` to generate and shrink. It's not entirely random but this strategy generates a lot of false positives that have to be tested and excluded against the regex.

[Here's](https://github.com/buguroo/more_strategies) a library that extends `hypothesis` with strategies for URL's specifically, among others."
7,">  I can't work out what the code would be to solve it.

Don't do it in your head, work it out on the page. I know you're trying to do it in your head because otherwise you'd have shown us some code.

In general you should start writing code to solve these problems before you know what the right code is."
7,"> So imho, that is why I require two separate functions.

But that's not exactly what I asked, is it?

>> You really want to stop and ask yourself why you want two functions to ""share data"" rather than communicate via their parameters and return values, as intended.

Overall, your approach is likely to run into substantial race conditions and concurrency issues. Not to mention - if you use threads that refer to the same object, you'll encounter GIL (global interpreter lock) issues where you actually *can't* run these threads simultaneously; if you use processes, you'll evade the GIL but the processes won't be able to share a reference to the same dictionary."
7,"You really want to stop and ask yourself why you want two functions to ""share data"" rather than communicate via their parameters and return values, as intended.

It's best to think of a function as a disposable context - it's called, it runs, it returns, it's gone. It's not a place for data to *live*, it's a place for data to enter (as parameters), be acted on or in response to, and then leave (by returning.)

If the solution to your problem feels like a *persistent* context - data is going to dwell here, and be acted upon by exterior forces to which the context is going to respond - then you have a *state* problem as well as a behavior problem, and that's what classes address. Here's why: if you're defining behavior based on mutable state (state that can change, like when your other process reaches in and changes some of the data in response to whatever it's doing over there) then you need to be able to define both a valid initial state, and the valid transformations that can occur on that state. Otherwise you're introducing a lot of bugs - state changes will be possible that don't make any sense in terms of behavior, and your code will fail as a result.

A dictionary supports *no* verification of state - any combination of keys and values is valid provided the keys are hashable and unique. If your code requires the value of `'handedness'` to be *either* `'left'` or `'right'`, there's no logic you can attach to the dictionary that prevents me from setting the value to `'up'` and breaking your behavior. On the other hand, you *can* do that with a class:

    def Glove:
        @property
        def handedness(self):
            return self._handedness

        @handedness.setter
        def set_handedness(self, hand):
            if hand not in ('left', 'right'):
                raise ValueError(""hands only come in left and right"")
            self._handedness = hand

And now I not only prevent the attributes of this object from entering into nonsense states, I *document* that I do so right where it matters - in the part of the code someone would look at in order to educate themselves about what `Glove`s do."
7,"With some exceptions, overall it's not going to *click.* It's more like sanding down a rough finish - there's no point at which the surface goes from rough to suddenly smooth. It doesn't ""click into place."" You do a long, hard grind that seems repetitive from the outside but really isn't and it's right about when you've forgotten why you even started, you look down and realize how smooth everything is.

You're not going to have an experience where `for` loops suddenly click into place. You're a lot more likely to have the experience where the thing you've just learned seems totally obvious and perplexing in its pointlessness, until you realize it solves a problem you're only just finding out about."
7,`print` writes a message to the terminal. `return` gives a value back to the calling site.
7,"> The console says ""user_path_list is not defined"", but it is. 

Are you assigning to it somewhere else in this code?"
7,"Yeah, that sounds like a good approach!"
7,"For any given class, you should be able to answer the question ""what *state* is this class responsible for?"" For instance, in a system that multiple users interact with, you might have a `User` class, and then the answer would be ""objects of class `User` manage the user's name, display name, email address, and the state of their current login and session."" Or whatever.

Class names are generally singular because a single instance of the class is meant to represent a single *thing* in your problem domain. You want an `Account` object, not an `Accounts` object, so the name of the class should be `Account` and not `Accounts`. But `accounts` might be the name of a list of `Account` objects.

One thing I would ask is why none of your classes have very elaborate `__init__` methods? The purpose of `__init__` is to set the initial valid state of the object. That's typically the *minimum valid state* of the object - the *least* information it needs to function. If you're writing code in a couple of places where you instantiate an object and then have to set a bunch of its attributes before you can use it, that's an indication you need to move that stuff into `__init__`."
7,"`File(File>0)`

`File` is a DataFrame, and DataFrames aren't callable. What was your intent for this part of the code?"
7,"Then you need to count it in the destination list, not the source list."
7,"Remember, you step over the elements of the list one at a time, so if an element is a member of the list multiple times, you'll encounter it multiple times. You need to add it *only* if it's not already a member of the destination list."
7,"`for` loops don't return anything. Functions return the first time `return` is encountered. That means that

    for y in x:
        if do_stuff() == something:
            return True
    return false

will return `True` if `do_stuff` ever evaluates non-false."
7,"If your functions have 10 mandatory parameters, that indicates that they're trying to do too much. A function should have a single clear responsibility, not do a grab-bag of things. Same with classes, although the responsibilities of a class are typically a little broader than those of a function.

> So Name1.x is some value I've given it, but Name1.totalx is a sum of all instances of Name1, and totally separate from Name2.totalx

Name1 and Name2 are instances of the same class, though. Also instances don't know what you call them, so there's no way for an instance to know that you're calling it `Name1` anywhere in your code. That's the name of a *reference*, not the name of an object. Also, look at this:

    Name1 = Name1 = Name2 = testclass(x)

That's valid Python, and it means that `Name1` and `Name2` are references to the same object. If the object *was* keeping track of what it was called, what would it think it was called? If you asked for `Name1.totalx`, what would you expect it to return, given that `Name1.totalx` *has to* equal `Name2.totalx` because they're the same attribute of the same object?"
7,"What does `positive_root = (-b + discriminant1) / (2*a)` do if `a=0`?

> I'm a bit confused as I've explicitly stated what the program should do if the discriminant is less than 0.

One thing that isn't *explicitly* communicated to new programmers, often, is the fact that the interpreter runs your statements one at a time, in order. It doesn't try to run them all at once or derive the correct output given all stated conditions.

That means that the the code where you check for a condition that results in a code problem has to happen *before* the problem. You need to check that the discriminant would result only in imaginary roots *before* you try to divide by zero or take the square root of a negative number. It's not going to calculate a negative discriminant, then *skip ahead* to your `if` statement."
7,"    for name in list:
        print(list[name])

This isn't how you access the items of a list. `name` is *already* the item, you don't need to try to access it through the list within the loop."
7,"> It feels neater to do it the hackish way. 

No, it doesn't. For one thing, how do you add one new card, or one new game? Using globals locks you into certain rules, forever. Use lists, though, and you can easily extend your code in the future."
7,"WTF is a “memory log”? My OS better not be logging memory writes, holy shit"
7,"If it's not an attribute and not a key, then you can't get it."
7,"> I can’t tell you how many Django tutorials I’ve done and then when I go to start a project I become clueless.

Yeah, I mean, that's the expected state after *any* Python education - you're supposed to muddle your way through the project anyway. That's the next step.

The tutorials did what they were supposed to."
7,"At 300 records performance won't be a concern. Design around convenience and correctness, instead."
7,"It looks like a `dict` - what happens if you treat it like one? I.e.:

`update.document['_']`"
7,">	Also, like I said that there is going to be GUI, so the reason for this parameter class is so that the user can set the parameter from the GUI, without accessing the code (of course).

Functions already accept parameters in Python, so there's no reason to reinvent this wheel. GUI's can run functions as well as classes. Nothing about your problem seems to require this be a class.

>	I didn't get this line.

The purpose of classes is to define reusable state, but there's no ""circle detection state"" that you need to preserve in between detection of circles. Typically detection is a yes-or-no event - ""here's some input - is there a circle or not?"" ""No."" And then done - there's no state you have to preserve until you look for the next circle, so there's no particular reason you need to model this as a stateful ""circle detector object."""
7,"> Or am I making an absolute mess of this.

It's a bit of a mess. Generally classes work best if you think of them as the ""noun actors"" in your system:

    class House:
        def __init__(self, address, color, num_doors=2):
           #this is where you ""build the house"" - what's the initial state of a House?
           self.address = address
           self.color = color
           self.windows = [Window() for _ in range(num_doors)]

        def get_current_temp(self):
            return <some way to get the temp of the house>

    class Hvac:
       def __init__(self):
           #what's the initial state of a furnace?
           self.ac_point = 75
           self.heat_point = 62

       #my thermostat has a high setting for when the AC comes on,
       #and a low one for when the heater comes on. let's model
       #these as properties we can set, i.e. thermostat.highpoint = 75
       #these could be simple attributes, but as properties we can
       #actively respond to changes.
       @property
       def highpoint(self):
            return self.ac_point
       @highpoint.setter(self, temp):
            self.ac_point = temp
            if self.house.get_current_temp() > temp:
                self.furnace.turn_off()
                self.ac.turn_on()

And so on. The scope of a Python *project* is a category of problem (""SmartHomeSystem""). The scope of a module is a subcategory within the system (""heating.py"", ""lighting.py"".) The scope of a function or method is a single task in the category (""unlock_front_door()"", ""list_current_occupants()"".) The scope of a class is somewhere in between, but best thought of as the *concrete actors* within the system (""House"", ""HvacSystem"", ""Window"".)"
7,"> Any hints to keep my projects manageable and readable in the future?

Good code hygiene. Organize categories of behavior into modules. Functions should have single, clear responsibility that is reflected in the name and parameterization. Classes might encompass a wider variety of behavior but they should still reflect a single domain of responsibility (i.e. it makes more sense to have a `User` and `Profile` classes than a `UserProfile` class.)"
7,"If you don't ask the user for input in the loop, nothing ever changes so the loop runs forever."
7,"It isn't just something you can ""make work."" You have to actually make a decision about how you're going to compare list values to non-list values, and then implement for that edge case."
7,"Sure, but the thing they're trying to teach is problem decomposition. One of the ways you do that is to ask someone to solve a problem that's already been decomposed."
7,"> If the author gives that exercise as a challenge then there should be a way to solve it within the limited knowledge a beginner has.

There's definitely a way to solve this within the limited knowledge you possess - the issue isn't that you don't *know* the answer, because you're not supposed to read this problem and *remember* a solution.

The problem is that this:

> After countless and countless different methods, deleting and rewriting code code, nesting conditionals within conditionals, copy and pasting chunks of code to different places, i just can't get to an answer.

sounds like you're trying to *stumble* onto the answer, and that's never going to work. This isn't multiple choice, so you don't have a 25% chance of getting the right answer. This is a test of your creative problem solving and so there's an infinite number of wrong answers. Your odds of getting the right one by anything less than deliberate software design are literally zero. You have to *deliberately write software.*

But, sometimes it's not clear how that's supposed to work. [Here's an example](https://www.reddit.com/r/learnpython/comments/cnmzcm/beginner_here_struggling_with_indexes_and_lists/ewcfkh2?utm_source=share&utm_medium=web2x) of what it looks like when you deliberately work through a problem.

> Sure, i could say that the author is at fault for giving such a difficult challenge to beginners without showing an example of a situation where a conditional applies only once and then ""disables"", or without properly explaining how to reactivate a conditional or without get into a task as complicated as this one, instead just focusing in describing how statements work.

Conditionals are *quite a bit simpler* than you're apparently imagining them to be. There's no conditional form for a conditional that ""disables"". There's no way to ""reactivate"" a conditional. There's just Python's plain-old if-then-else conditional logic:

    if some_test:
        #branch A
    elif another_test:
        #branch B
    else:
        #branch C, the ""fall-through""

Just the same old conditionals you've been writing. There's no special conditional form you're missing that is the key to solving this problem. I would only blame the author for getting you wrapped around the axle of features Python doesn't actually have *if* the author is the one who told you it had them. But I kind of think these are features you've *imagined* are the solution to the problem, and then wrapped yourself around the axle of trying to figure out the syntax to access them.

They aren't there and there's no such syntax."
7,"When you assign to a name, the assignments are local in scope. When you look up a name, you look it up in *every* scope you have access to - local first, then whatever scope encloses local, and so on up to module (aka global) scope."
7,Stop using Python 2. It's end-of-life in January.
7,"Maybe you could elaborate - I don't think of any of the elaborate boilerplate Java constantly forces you to write as ""programming fundamentals."""
7,"> Also the way the 1/0 aka GPIO.HIGH/LOW aka True/False thing works is really confusing me. In the code below, I ended up turning the GPIO pins off by using ""1"" but it seems like logically it should be ""0"". Then they turn back on with ""0"", it all just seems so ass backwards to me lol.

It's not uncommon to wire these things up with inverse logic like this - the pins on a SOIC like the Raspberry Pi have a pretty low limit to the current they can source and sink, so often you have to use the pins as low-current signals to a transistor or relay to control a high-drain device or you'll run so much power through the GPIO unit that you'll destroy it. Most of the transistors that will do this efficiently exhibit reverse logic - they'll allow power to flow when the base is low, and stop power when the base is high."
7,"`len()` returns an integer that is the size of a collection (the number of elements it contains.) `enumerate` accepts an iterable and returns an iterator over 2-tuples, where the first element of the tuple is the index, and the second element is the element of the iterable at that index."
7,Have you ever successfully written anything in this IDE before? There's some differences between working interactively in the Python REPL and writing Python files in the IDE.
7,"This isn't something that protobuf handles for you? My understanding of protocol buffers is that you don't work directly with the bytes, you generate a serializer/deserializer from the protocol definition."
7,"> I have started off as reading the file into a bytearray. I then search for the header that represents gzip compression. I then split the header and body up. Then when I attempt to uncompress I get the following error.

The GZIP library needs the header in order to decompress the file - you can't strip that off and expect the file to still be decompressible."
7,"You'll have to elaborate on what you mean by ""get"" - if the file's already memory-mapped, you've ""got"" all of it. The fastest retrieval option is simply to seek the file handle to the place in the file you want and start reading bytes - if it's memory mapped already, this is literally the fastest possible access.

> I am guessing using a GPU might be needed to this.

Your GPU is quite a bit slower than your RAM, because it's further away on the bus. Anything you want to do there involves a copy *out* of your system RAM to the GPU's VRAM, which is slower than working with your data in RAM even though VRAM is a lot faster."
7,"If they can't read Python, they're not going to be able to read your comments, either."
7,"Your script is crashing. But it's literally impossible for any of us to know more about why it's crashing than you do.

There's *literally nothing* we can know about your script besides what you tell us - do you genuinely feel like you've provided enough context for anyone not there with you to troubleshoot?"
7,"> According to Larry Wall(1), the original author of the Perl programming language, there are three great virtues of a programmer; Laziness, Impatience and Hubris...

http://threevirtues.com/"
7,Try to imagine that the person you're trying to explain your problem to isn't sitting there looking at your screen.
7,"> Thinking about it now, that makes it seem more likely that the error is happening in the .author to me, what do you think?

That seems reasonable - if it's a property and not simply an attribute, then there's possibly another API call here, and it wouldn't go through your logic."
7,"> I'm specifically confused on the parameters used.

What's specifically confusing? Is it clear to you what `pickle` actually does?"
7,"> Save me friends

Sure, let me just read your mind. Hrm, not working. Can you go over and stand by a window? I'll tell you when to stop."
7,Too vague to be able to help.
7,"> praw.models.Inbox.unread = redditRetry(praw.models.Inbox.unread)

I'm extremely iffy that this has the effect that you intend, and I think the fact that the error isn't being caught is evidence that it doesn't. Do you actually see the line 

    return f(*args)

in your stacktrace?"
7,"> for message in (m for m in reddit.inbox.unread() if m.author):

I read this error as coming from the call to `reddit.inbox.unread()`, and there's no try/except logic here to catch any errors."
7,"There's no natural order in dictionaries:

    attrs = amaz.__dict__.values()

This won't return the values of the objects in the order you originally set them, or in any particular order whatsoever. 

Also this is Python, we don't write attribute getters and setters. That's about 200 lines of boilerplate code you don't need.

Overall, use `csv` to read and write, instead of parsing manually:

    input csv
    with open(""input_file.tsv"") as inp:
        with open(""output_file.csv"", 'w') as outp:
            rdr = csv.reader(inp, delimiter='\t')
            rows = list(rdr)
            rows = [row for row in rows if ""free shipping"" not in row[39]]
            rows = sorted(rows, lambda r: r[6]) #I assume the date is the seventh column
            wtr = csv.writer(outp, delimiter=',\t') #you write a TSV file"
7,"> I don't understand why that error isn't being caught.

The error isn't being thrown by anything that's happening in your try/except block. It's happening at line 21."
7,"The key is not to read a description of function and then try to write it in your head, but to do your thinking on the page. Write down the parts you know how to write and build from there. Here's what that might look like for me, as I read through the description. Imagine that what I'm doing is typing into a code editor, and making several revisions of this function as I read the requirements:

> Create a function named remove_middle 

    def remove_middle():
        pass #it's helpful to try to always write code that is valid Python, even if it doesn't do anything

> which has three parameters named lst, start, and end.

    def remove_middle(lst, start, end):
        pass

> The function should return a list

    def remove_middle(lst, start, end):
        return_val = list()
        pass
        return return_val

> where all elements in lst with an index between start and end (inclusive) have been removed.

Ok, so here's where we need to think ahead a little bit - it's harder by far to *remove* elements from a list than it is to simply create a new list with all of the elements except the ones we don't want, so we're actually going to do the second one. Practically, there's no difference (in terms of this particular problem) between changing `lst` and returning a new list that meets the criteria. Part of programming is knowing when you can meet a requirement by doing something different that is easier - laziness is the first of the programmer's [Three Virtues.](http://threevirtues.com/)

So let's take a first stab at that - we need to add all the elements at indexes 0 to `start`, and then from `end` to the end of the list, and I combine my knowledge of *iteration* and *slicing* to do that:

    def remove_middle(lst, start, end):
        return_val = list()
        for value in lst[0:start]: #from zero to <start>, and this won't include the value at index <start>
             return_val.append(value)
        for value in lst[end + 1:]: #the problem specifies ""inclusive"" removal, so we can't include the value at index <end>
             return_val.append(value)
        return return_val

And that's it. Now, that's our first pass - using some better practices, we can now rewrite this to better reflect that the correct answer is more or less the sum of two slices of the list:

    def remove_middle(lst, start, end):
        return [v for v in lst[:start]] + [v for v in lst[end + 1:]]

but that's just a reflection of *my* coding style; you don't have to rewrite yours. Python programs are step-by-step descriptions of behavior, so overall when you're handed a step-by-step description of function, you should take a step-by-step approach to solving it. And most importantly - you don't have to know the solution to *start.* You can figure it out on the page!"
7,"It's a dev server, not a production server, so yeah, you have to kill it with Ctrl-C. It's not a service you're intended to run in the long term."
7,"> Been wanting to learn some coding for a bit, and it seems overwhelming

Just start at the beginning - there's a wealth of resources for the beginner over on the sidebar. But it's more important *to start* than to worry about how long it's going to take."
7,"> I am a very visual person and I don't understand how it is all connected.

A *list* is a collection of values, in the order they were added (appended) to the list. We call the values contained in a list the list's ""elements."" You can access the Nth element in a list via its index, using the indexing/slicing/subscripting operator `[]`. The indexes start at 0, because you can think of the index as *displacement from the first element*.

Lists are *iterable*, which means you can step over their elements one at a time, using `for`:

    for some_element in my_list:
        print(some_element) #or whatever

> I need some way to visualize what in the code is connected to what.

Code isn't a matter of *connection*, it's a matter of *expression.* Python is an imperative programming language so you write Python by telling the interpreter what to do. Statements are ""commands"" that tell the Python interpreter to make some kind of change to its state, for instance:

    x = 3

is a command to the interpreter to create a *name* called `x` and assign to it the integer value `3`. A name that refers to a value is called a ""variable.""

> I am a very visual person and I don't understand how it is all connected.

[Learning styles are a myth](https://www.theatlantic.com/science/archive/2018/04/the-myth-of-learning-styles/557687/) - you're not a ""visual person."" The reason you're not learning Python visually is because it's not a concept that best translates visually - it's a language, so you need to try to learn it with the language centers of your brain.

I know that sounds harsh but it should actually give you hope - nothing's holding you back, here. Your brain isn't broken in such a way that it can't learn Python the way Python needs to be learned. Your brain is perfectly capable of learning things that don't easily adapt themselves visually because nobody's brain is ""visual learning only.""

> Also I am fine with If statements but I am struggling with Elif and Else.

`If` statements create branching logic, but there's a lot of different kinds of branches. A simple `if` statement is ""if the test is true, then do this thing; after that continue as normal."" `elif` and `else` add different kinds of alternatives to the branch - mutually exclusive options in the case of `elif`, or a default option in the case of `else`."
7,"If your functions don't depend on statefulness, then I wouldn't put them into classes. Modules, yes; classes, no. Nothing about what you're describing suggests there needs to be a stateful ""circle detector object"" for circle detection to work, and the idea of a ""parameter class"" seems unnecessarily abstract - functions already let you declare parameters in the definition, and if you want early-binding, late-calling behavior, that's what `functools.partial` is for."
7,"That's a lot more code than you had before. Here's your mistake:

    input = input()

You can't name a variable after a function - Python doesn't keep the two separate, it overwrites the reference to the function. You have to keep your names from colliding - you can't call a variable by a function's name."
7,"Well, why wouldn't it? It would defeat the whole purpose of threads if you sat there at `thread.start()` until the thread was done."
7,"This would be more helpful if you'd format your code correctly - flow control in Python is determined by the indentation.

Generally you're going to need to figure out the flow through your code that results in infinite recursion."
7,"You can't have `return` outside of a function - while loops aren't functions, they're loops."
7,You have to `return` the base case so that the recursion has an endpoint.
7,What line does the error refer to? What are you inputting when the error occurs?
7,"You don't seem to have a base case, so your function recurses forever."
7,"> I'm still not entirely clear on why its so necessary here

It's a check for whether the value is subscriptable, since it's subscripted as part of the function. It's also a check that the value is *not* a string, which are subscriptable, but which nobody generally wants to consider ""flattenable""."
7,"Yeah, I wanted you to know it's not just us being dicks, we want clear questions because often the effort in structuring your thoughts, and in doing a couple tests on your code to determine the scope of failure, is often all it takes for the solution to present itself."
7,"> Any help would be appreciated.

Help with what? You didn't ask a question. ""Just can't get it to work"" isn't sufficiently specific about what's going wrong - since we don't know what you *intended* to write, we can't determine how the code differs from your intent.

Generally if you think through your problem so that you can describe with with specificity to people who can't read your mind, there's a very good chance you'll solve it yourself."
7,"> Why does the solution not work when root.left and root.right are on separate lines?

Because

    x, y = y, x

isn't the same as

    x = y
    y = x

In the first example, the assignment proceeds through an intermediate tuple that preserves both values. In the second example you wind up with `x = y` and `y = y` because you didn't store the value of `x` in an intermediate variable before you overwrote it."
7,There's no way to do that. You need to either overwrite your file or write a new one.
7,"This isn't how you run a Python script. Don't use the IDLE shell, run it in your OS's terminal (`cmd` or powershell on Windows.)"
7,`import` is typically covered early on in Python tutorials. Keep working whatever you're working.
7,"That isn't something you can, or should, do. Don't copy and paste code - use `import` to make functions in one module available in another."
7,"    obj1 = class1()
    obj2 = class1()
    obj1.call_page()
    obj2.call_page()"
7,"    obj1 = class1()
    obj2 = class1()
    obj1.call_page()
    obj2.call_page()"
7,"If you're doing useful work that other people depend on, IT should install Python for people who need access to the report.

IT's not there to stop you from doing work - they're there to stop unauthorized access to systems. But it's not actually their call what's authorized. Now's the time to start working with them to get used to the fact that data analysis scripts are coming from in-house, and a bunch of different people need to have access to them."
7,"You need to actually *call* your class to construct an object from it; the way you have it now, `obj1` and `obj2` are just two more references to the class.

> from my understanding object is a blueprint of the class

Classes are blueprints for objects, but you don't actually have an object until you call the class."
7,"> My question is how data scientist switch to python from R?

The same way everyone else does. Work through a Python tutorial and try to think Pythonically while using the language. For instance, `%>%` is a pretty good example of an R thing no one would do in Python because it's completely unreadable."
7,"How many numbers are between 0 and 0, not inclusive of 0?"
7,"Unit tests typically include `setUp` and `tearDown` methods so you can put stateful objects into the appropriate state to test their behavior (and take them out of that state, if that's necessary.) I think you'd be looking at a `setUp` method where you call your setters, and then one or a couple of tests to test for the correct behavior of `find_circles`.

Overall, though, this seems like an architecture problem. Why is this a class at all?"
7,"If you don't call it, the function doesn't run so there's no return value to assign. You can't run a function and not run it, that doesn't make any sense.

If you don't want to print then take the prints out of the function."
7,"> Line 15, I put the For Loop in there to replace S with the variable T.

Well, you didn't replace anything. One, you used the comparison operator `==` instead of the assignment operator `=`; but two, even if you had all you would have done would be to overwrite the value of a variable; you didn't actually make any change to the file at all."
7,What actually in this code does the text replacement?
7,Start by writing the parts you know how to write.
7,"Figuring out a problem isn’t failing, it’s succeeding. You’re doing great, man, keep it up."
7,"There needs to be one empty line after the line that includes `return`, so that the interpreter knows you're leaving the function body."
7,"There's no way for me to know what you're doing wrong if you don't get the formatting right - Python is a language where the formatting matters, I can't just assume you're getting it right in the interpreter."
7,"> What if I don't want to pass self as a parameter? 

The purpose of `__init__` is to set up the object's attributes - indeed, you reference the object in the method you wrote:

    def __init__(rootdir, file_ext):
        self.rootdir = rootdir
        self.file_ext = file_ext

If `self` isn't supplied to the method, how would that name be valid in your method? How would you have access to the object to set its attributes if the object isn't in scope?"
7,"If you call method that's a member of an object (and when you call a class, it contains an implicit call to the instance's `__init__` method), then the object is *always* supplied as the first argument to the method. Generally the parameter for that argument is called `self`, but you accidentally called it `rootdir`. Or more likely, you *forgot* to provide the `self` parameter to ""catch"" the object instance. Try this:

    class Recursor:
        def __init__(self, rootdir, file_ext):
            #etc"
7,"It's helpful here to see the entire error message, since it'll point to the position in the line that triggers the SyntaxError. If it's the beginning of the line, then the error is actually on the previous line.

As it is I have no trouble with your code:

	>>> def area(base, height):
	... 	return base * height / 2
	...
	>>> area(3, 4)
	6"
7,"> I've grasped the mechanism of OOP, but I still can't figure out when should we use a class.

You should use a class to manage state and behavior. If you only have behavior, and no particular state (that is, the function of your script doesn't really depend on the state of any variables) then you don't have much use for classes.

But if your program depends greatly on combinations of variables, and especially if *some* of those combinations are invalid, then classes are a way to manage and document both state and behavior."
7,"If the function of your script depends on complex state, and transitions of that state, that's when you'd want to write a class."
7,"Ow, it would be really helpful if you could fix your formatting."
7,Reverse the odd rows.
7,"Well, like I said:

    if string_name in globals():
        if callable(globals()[string_name]):
            print(""yes"")
    else:
        print(""no"")"
7,"Yeah, but you have to do it yourself - ""table"" isn't a native type in Python, there's just collections of rows."
7,"Well, fair enough. My code snippet should get you most of the way.

Also note that there's two different approaches depending on whether you want to check whether the string is a name defined in the current module's scope, or whether you need to look in another module for the function. `globals` gets you the named attributes of the module you're calling it from, and `hasattr` lets you check whether a string is the name of an attribute another module has. In other words, `globals` is ""look here"" and `hasattr` is ""look in there."""
7,"> So it would also fix the problem if I were to change it to [...]

Well, I mean, I would question whether ""loading gamestate from a file"" is properly under the responsibility of your `main` method in the first place. That feels like something you should tell the game state object to do - ""hey, set yourself to the game state that was saved to this file."" In other words I think it's a method of the `Summary` class, not something you do to a global variable.

> But then another question, the assignment of gameState inside of the function doesn't happen until after the print(gameState.playerSave) statement, so why doesn't it run this statement with the global gameState then run into an error later when it tries to assign gameState?

Because scope enforcement is something the Python interpreter checks as part of the syntax check, *before* your code runs."
7,"> Sorry if this could of been shorter, but now on to the main question, does this matter to employers or is all they care about that you can do the job correctly? 

As the old joke goes: what do you call the guy who graduated last in his class from the worst medical school in the country?

*Doctor.* If you completed the course, nobody cares how long it took you to do it."
7,"I'm going to assume you mean ""how do I tell if a given string is the name of a function defined in my namespace."" That's actually *two* tests - is the string the name of a symbol in the namespace, *and* is the value of that name a function, or something else:

    if symbol in globals():
        if callable(globals()[symbol]):
            #do something

There's a number of caveats to this approach, like some versions of Python in which `callable` is deprecated and the fact that *actually* you shouldn't try to look up functions via their string names unless you have a very good reason. Do you have a good reason to be doing this? Under about 95% of circumstances I'd caution you to choose a different approach."
7,"> Code is below, any idea why this wouldn't be working?

Yes, either your `gameState` reference is local, or it's global - you can't treat it as both local and global:

    gameState = summary() #creates the save/load info
    ...
        else:
            gameState = saveLoad('load','')

If your intent is that there's a single global `gameState` (this isn't an unreasonable idea) then you need to declare that `gameState` is global within the `main` function."
7,"> Is there a way to reorganize my code so that I can still run the whole procedure in one line but limit the number of arguments in the function?

If you set defaults for the parameters, you could omit them in the function call (they'd use the defaults.)

Ultimately if you parameterized the function that way, you have to provide values *somehow.* You're deliberately vague so I can't provide any concrete suggestions. Generally if you have a function with 20+ parameters (!) that's a sign that you should break it up into many smaller functions."
7,"I think he's probably doing an OK job explaining it; you just don't understand why it's important yet so it feels like you're missing something.

Loops let you perform the same operation on a sequence of values, once per value."
7,"*You* wrote where it should be saved - in your `__init__` method of the class. You define two parameters for object creation, and I'm providing a value for both of them. That results in the creation of a `User` object with the attributes `username` and `password` because that's what you wrote `__init__` to do.

Since you wrote it, I don't have to - I just call your class the way you wrote it to be called."
7,Why do you think that doesn't?
7,"Sorry, I think you misunderstood. I'm not saying ""use a dictionary instead of a class"", I'm saying ""use a dictionary to store your objects."" They're values, so they can be the values of a dictionary:

    my_dict = {""Bob"" : User(""Bob"", ""bobs_pass"")}

or the values of a list:

    my_list = []
    my_list.append(User(""Charlie"", ""charchars_pass""))

or whatever. Objects are just values, you can store them however you like."
7,"As simply as possible:

    def add_user():
        return User(input(""username:""), getpass.getpass(""password:""))"
7,"When you start up Python, a portion of your computer's RAM is allocated to the software by the operating system. Python divvies this up into the *stack* and the *heap*, as is common for such languages. The stack is where the functional sequence of operations is stored; the heap is the memory that is used to allocate values. Lists, dictionaries, objects, strings, numbers, and so on.

A process called the *garbage collector* periodically looks through the heap, looking for orphaned values - values for which no reference is currently held. This is transitive so if you hold a reference to a list, and the list holds reference to several objects, then those objects aren't marked for garbage collection (GC).

When you lose reference to one of your objects - usually because the variable holding it went out of scope at the end of a function call - then it's eventually marked for GC, and the heap memory it was sitting on is thereby recovered."
7,"The issue here is one of code design. You need to generalize your solution over a list of values, not have variables 1 through 8 and hope nobody ever runs your code with 7 or 9 values. The whole point of programming is to develop general solutions for problems."
7,"If you had done any of the work to make a post that would make it possible for us to help you, you probably would have had some insights into the problem."
7,"The name of the object isn't `user1` - the name of the *reference* is `user1`. You don't need to increment the name of your reference in the function, so just use the same name every time. It's a new object every time you call `User()`, even if you name the reference the same name as you used before."
7,">	 The thing is, I want my 'add-user()' command just add a new instance to the class without me having to name it (e.g. user1) every time

Store it in a list or dictionary or other collection. Objects are just values, they don't need (or have) names. Named references (variables) are *one* of the ways you maintain a reference to a value but they're hardly the only one.

You *do* have to maintain some kind of reference to the object, or it'll be deleted by the garbage collector."
7,Add them to a collection - a list or dictionary.
7,What leads you to believe that there's an attribute called `get_response` on objects of the `ListTrainer` class?
7,"You can only return from a function once:

    for name in names1:        if substring in name:            return name

This will return only the first matching result in `names1`."
7,"If you remove the `staticmethod` decorator, then the method is one parameter short. Based on the way you're calling the method you need to add a parameter to accept the string."
7,"> Do you see a sort of best path for getting from point a to point b?

Well, I don't really understand your output, is the thing. Typically the way I'd approach this is to start at B and work my way back to A."
7,"Well, first you need to collate floors. That's probably going to look like a list of list-valued dictionaries. I recommend `defaultdict` from `collections` for this."
7,"Classes define reusable state, and GUI's are often *extremely* stateful. For instance, even if your GUI is a window that contains a single labeled button, look how much state your program would have to keep track of:

The size of the window  
The position of the window  
Whether the mouse is located in the window or not  
Whether the last click was inside the window or not
Whether another window is over the window  
The size of the button  
The location of the button  
Whether the button is active or greyed out  
Whether the button is currently in the process of being clicked  
What the button's label is  

and so on. That just spirals out of control if you add menus, more windows, more buttons, other kinds of buttons (radio buttons need to keep track of *shared* state so that only one of them can be selected at a time), etc.

Hence, classes. You're breaking all of this statefulness into pieces that are easier to think about, and more modular and reusable (you don't need to reinvent the ""did someone click me?"" logic of a button *every* time you want to place a button.)

Overall, every one of the components of your GUI should be an object of a class. It doesn't have to be a class *you write*, though, unless you need to extend the GUI's classes in some way."
7,"Sort the dataframe on the value, and then on the date."
7,"> I am completely aloof on the basics for the set up to write and run the code.

You need the Python interpreter and a text editor.

That's as basic as it gets - there's a wide variety of text editors intended to cater to the wide variety of programmers, their habits, and the various operating systems they prefer. You're meant to try a couple just to see which one you like the best - it may very well be that you switch between them as you grow in experience. I'm a proponent of Microsoft's Visual Studio Code - it's free, works the same on every platform, and doesn't overwhelm you with features.

> Relationships between the Shell and IDE programs of Python 3.7.

The IDE is just a simple text editor that ships with the interpreter. You don't have to use it. It doesn't have any relationship to the Python shell except that you can access it through the IDE.

> The saving of code locations for use with the basic python software.

You save your code wherever you want. As the programmer it's intended that *you* decide how to organize your files, same as anything else. Part of the process is discovering a good set of organizational habits.

> How to use download modules (like SciPy), call on them in scripts, and ultimately use them.

Use `pip` to download modules; when you do, they're made available to the Python interpreter. To use them in a script, you need to import the name - that makes the module available to your code."
7,There's no logic to it. Numpy/Pandas are what it looks like when you write a statistics library without any regard to the API you're creating.
7,"After `json.loads` it *isn't* JSON, it's a list of dictionaries. So, just do whatever you would normally do with a list of dictionaries."
7,"> It has tensorflow==2.0.0a0.

Sorry, I'm looking right at it and I don't see that. The last entry in your output is `Keras-Preprocessing==1.1.0`. I think your formatting is fucked up."
7,"You can't access `self` inside a `staticmethod` - the definition of a *static* method is one that isn't tied to an object instance. Ergo when you call

    chatbot.interact(""hello"")

on

    @staticmethod
    def interact(self):

the string `""hello""` is bound to `self`."
7,"That would be important context, then. Let's see the method - for whatever reason, `self` is winding up with the value of a string."
7,"Don't you mean

    for i in myObject.myList:

?"
7,"Yeah, it’s not possible. Keyword arguments with defaults are how you handle this in Python."
7,"> My question is why does this work yet the first method doesn't?

`os.listdir` returns a list of filenames in a directory. You can only call `os.unlink` on a path to a file - how would it know where to look, otherwise?

>  I would have thought that the path is already defined at the start of the loop and so when iterating through each file there is no need to join the file to the path each time.

Well, it turns out, none of this works by magic. Python doesn't know anything you don't tell it, and you generally can't handwave being precise because the interpreter ""will just know."" It's just a piece of software - it doesn't know anything."
7,"Your `pip freeze` doesn't seem to include `tensorflow`, which I find odd. I didn't just now have any trouble installing and importing either `tensorflow` or `keras`."
7,"Yeah, this boundary is not nearly clear as the proponents of test-driven development make it out to be.

Generally when I write code, one of two things is true:

1) My intent is fully-formed and documented somewhere, and now it's just a matter of implementing in code, or  
2) I'm determining my intent as my ideas clarify by writing code.

I find it's generally only useful to write tests for 1). You can't write tests for 2) code because you have no idea what to test until you've written the code, and then simply running the code is a sufficient test, because you'll see what the code does and therefore what your intent was. And you're very likely to discover that your intent was wrong or poorly-formed, which means any tests you've written simply lock you into doing the wrong thing.

I think if your tests test whether arithmetic still works, those are pointless tests and you've locked down an API you might have wanted to preserve design flexibility on. If 2 + 2 suddenly doesn't equal 4, we all have much bigger and more obvious problems."
7,"You can't define the list inside the function; it needs to be defined in enclosing (global) scope. Variables defined inside of functions aren't accessible outside of the function, or accessible to subsequent invocations of the function. That's the rule of *scope*.

Define your list at the top of the script, *outside* of the `user` function."
7,"I would recommend following the Django tutorial if you're very new to database-driven app development on Python. Not necessarily because it's the framework you'll wind up using, but because the tutorial goes through almost *all* aspects of developing a Django site, which is itself a pretty substantial education in the architecture of a database-backed web app.

One thing I would note is that Django draws a distinction between a *site* and an *app* that almost nobody else does, which I found confusing at first; if it's helpful, a *site* is intended to mean ""a location that contains one or more apps."" These days a site usually only hosts a single app anyway, so it's OK to name both your site and your app the same thing."
7,"`int(some_value)` will raise a ValueError if the value of `some_value` can't be converted to an integer (i.e., it contains anything but numeric digits.) This is by design - it's not an error you can avoid, you have to explicitly handle the errant case. (This is often a new concept for the beginning programmer: errors aren't *necessarily* always an indication that your code is wrong.) You need to catch this ValueError using try/except (and repeat the prompt if the conversion fails):

    Val = None
    While not Val:
        try:
            Val = int(input(""Enter an integer""))
        except ValueError:
            print(""not an integer"")"
7,">	How do I do this do that if I just called

Did you try running the code you wrote? You'll have to define `c` first, of course."
7,"The [canonical pseudocode implementation](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm) doesn't stack loops three-deep, so I remain unclear why a Python implementation would have to."
7,"Yeah, that's typically the pattern for stuff like this:

    def __init__(self, param=None):
        if param is None:
            param = NewThing()
        self.val = param"
7,"> I don't understand what I'm doing wrong.

Method default values are set at the time the function is defined, not when it's run. That means there's only *one* `A1` that all your classes share, because it's the method default and you're not overriding it in the call."
7,"Well, ok. Why does it exceed a 5 minute run time, and which part would you direct OP to optimize?"
7,"""decollect""?"
7,"I think you should just write two tables, honestly; that's probably how it's represented in the database underlying the API you're getting this data from, anyway."
7,"> It doesn’t matter how many loops there are it matters how much work they do.

No, this is wrong. Work that's trivial when performed once has serious performance implications when it's the hot code of a third-order nested loop, simply because it runs so often. Not to mention that there's an overhead you pay in the second and first loops to set up the inner loop. Again, not substantial *on its own* but three loop levels in, the time complexity is actually the *cube* of the line on its own."
7,When it's the thing that solves your problem.
7,"> Is there a way to write out each item in the array as a (previous header +1) for the header and then the value of that cell?

Remember the header gets written once, at the beginning of the file. So you'd have to scan over all your data and figure out the number of headers you'd need first, *then* go over your data a second time and convert it to the new format."
7,"Nothing about what you want to do is simple (which is why pro audio software costs so much) and you're going to have to implement both an event-driven timing system *and* an audio buffer (that's how you prevent skips and lags in playback.)

It's probably *possible* in Python but it's a bit like programming games in Python. Actually, it's a *lot* like programming games in Python, so you should look at PyGame."
7,"> But I'm not sure the best way to stay on the same row.

You have to decide - nested data structures can't be simply flattened to tabular ones, so you have to make a decision about how you handle the case where a record encloses one or more sub-records. Nothing is going to do that for you automatically because the correct decision depends both on what your data *means* and how you intend to use the table, and nothing can know that ahead of time.

> I still just want all those values to be in a single cell under that specific header...so that if the array is [1,2,3] that cell is ""1,2,3""

You can't do that in a CSV file because the comma is the cell delimiter in a CSV file, and thus can't appear in any single value."
7,"> Suddenly the terminal font turned red. 

You just copied some control codes, that's how terminal colors work. Just close your terminal window and open another one.

> As you can see, I'm using anaconda.

Then install packages using `conda`. Don't use `pip` in a conda environment, they don't mix."
7,I can't follow an imgur link at work. Maybe you could cut and paste it?
7,"You already have a `Hero` class, you said. I'm saying have more classes - including a class for `Game`, or `App` or whatever you want to call it. And then it's easier and more straightforward to write methods that do things like ""add a hero to a lane"" or ""calculate a score"" because everything you need is already within the method's context, and you just have to think about it in terms of ""when a Hero should be added to a lane, how does the Game change?""

You could do this with a dozen global variables instead, but the advantage of *starting out* thinking of your game as a stateful object is that it becomes a lot easier to do things like:

Handle two or more games at once

Write a game state to a file, or read one from a file

Transmit a game state over a network

Render a game state graphically to a screen

and so on."
7,But what happens if you run that command?
7,You have three levels of nested for loops - that’s murder on your runtime.
7,"You should have a class that represents the app, too. You can call it `App` if you want. That's where you put ""global"" logic like ""add to a lane"" or ""calculate the score based on the lanes."""
7,"> The only problem is that with time this class will get more complex, I'll be adding more parameters. 

If all the parameters are scalars, and the ones you add after this are optional, then I'd just write them as rows to a CSV file. You don't really need to store the *object* at all, just the parameters."
7,"`""""[0-9]+""""`

`""""` is the empty string."
7,"`""35,37,27,37,54""` isn't a string you can directly convert to an integer - integers don't have commas. You need to split it on the commas and convert each token to an integer, like I said."
7,"Split the string on the commas, then convert each one to an integer using `int`."
7,"    for i in dictlist:
        for key in i.keys():
            #body of inner loop

If `dictlist` has three dictionaries, and each dictionary has three keys, how many times will ""body of inner loop"" run? How many times *should* it run?"
7,"You can access the value of a key in a dictionary using the `[]` operators. I think the issue here is that you've chased yourself down a small rabbit hole by using `items` - you don't want the item set of a particular dictionary, you want the key set of a particular dictionary and then to access *each* dictionary using the same key."
7,"> It does however, and I just can't seem to figure out what's causing this.

Between you and your computer, 90% of the time it's going to be you that's wrong. What happens if you do `ls /path/to/image/Aoff.png` at the shell?"
7,"Sorry, what? You're not using any of these terms correctly so I think we're having a lot of trouble understanding you. ""Init variables"" and ""method objects"" aren't things."
7,"Let me pull out a couple of lines:

	match_name = (schedule_time, home_team, away_team)
	match_fixtures[match_name] = (home_team_score, away_team_score)
	return match_fixtures #return from show_tomorrow_matches
	objektet = match_fictures(**show_tomorrow_matches())

This shows the sequence of transformations on the `match_fixtures`/`show_tomorrow_matches` dictionary that you then unpack for the keyword arguments of `match_fictures`. But look at the first line - your keys are tuples.

Tuples are hashable, so they can be the keys of a dictionary; but it's meaningless for them to be the keywords of a function. That doesn't work, and that's what Python is telling you. Whatever you think you're doing in line 1, you're creating a tuple, not a string. When you unpack a dictionary to be the keyword arguments to a function, the keys have to be strings."
7,We don’t.
7,"Classes in Python aren't typically very long (really long class definitions suggest you're trying to write a Magic Object, which is viewed as an anti-pattern) so generally Python programmers will wind up grouping several related classes into a single module. One to a file is typically seen as overkill, but above all you should try to avoid extremely long modules; if that means breaking it up into one class per file, that's fine."
7,"> But i would prefer to avoid using defaultdict, how would i go about solving this issue?

A dictionary key has to exist before you retrieve it, which is why you get the error - your dictionary doesn't contain a key `0` when you ask for one. `defaultdict` changes this behavior by saying ""well, every time a nonexistent key is asked for, first set the key by calling the constructor's argument, then return it."" It's hardly ""magic"", it's doing something convenient."
7,What do you suppose that method does?
7,"Download Python 3.7.x (the third version number doesn't matter, just get the most recent version of 3.7) and then use literally any book that will teach you Python 3. If it says to download Python 3.5 or 3.6, ignore that and use Python 3.7. If it says to download Python 2, put that book down and get another one."
7,"I mean, I don't know how to make it any clearer for you because all your data looks like nonsense and nothing in your desired format corresponds to anything I can find in the JSON. Where in the JSON is ""frame""? Where is ""keypoint""? Where are ""X"", ""Y"", and ""Z""?"
7,"""State"" is the collection of values on which the function of your code depends."
7,"Often a program depends on *combinations* of values to function correctly; some of those combinations are valid and some are invalid. Those combinations on which your program depends are called *state*. 

Classes give you a way to define *reusable state* via certain features:

1) the class has a name and thereby defines a *type* to which instances of the class belong. It's helpful to nave names to refer to particular collections of values, like the combination of values that might define a user within the system, for instance.

2) The class defines, and thereby documents, the attributes that an instance object will have when it is created. These attributes define the initial state of new objects. That's the respect in which the state is *reusable* - you can instantiate new objects of the class and they start in an initial state that you've defined.

3) Via methods, you can define the behavior of objects. Usually that behavior is a change to the object's state, which is why the object itself is made available within the method's scope via `self`.

Like functions, classes aren't a tool for the interpreter - they're a tool for the *programmer.* They don't enable anything you can't already do with variables and functions (which is what beginners frequently find confusing about them, they don't seem to *do* anything.) What they do is make you think about your software in terms of *both* behavior and state, which produces higher-quality code than just thinking about behavior alone."
7,"In the way that functions define reusable behavior, classes define reusable state."
7,"There's no ""way around"" Python doing what you're telling it to do. If you've written code where it returns as soon as it finds a result, it's going to return on the first result."
7,You just have to look directly at the structure of data in the JSON and figure out where the data you want is located.
7,"It’s stopping when it hits the first result because you’re returning, and that terminates your function."
7,"WSGI defines the standard for web frameworks, but obviously it’s not an interoperability standard because why would two web frameworks need to interact?

For what it’s worth, there is a Flask plugin for OpenID Connect: https://flask-oidc.readthedocs.io/en/latest/"
7,"> Does Java's approach really provide better security?

Java’s approach doesn’t provide *any* security. You can always violate the privacy of a “private” member using reflection.

In Python, direct attribute access is preferred. In the case where you want to intercept attribute access, Python provides the `property` decorator, as others have explained."
7,I mean it's all going to depend on the structure of your JSON source.
7,">     lineList = lineList.append(new_course)

That's your line. Here's my line:

    L.append(4)

What do you notice is different about these lines, viz-a-viz the assignment operator `=`?"
7,"> I’m not sure why lineList’s value is None if lineList should be the formatted data from the file with new_course appended to it

Because you're assigning the return value of `append` to `lineList`, and the return value of `append` is `None`. You're overwriting your list with a `None`."
7,"Sorry, I'm struggling to figure out how to correct your misapprehension in a helpful way. The return value of `append` is `None`, and it works in-place - it changes the list you call it on. Maybe a code example is helpful:

	>>> L = [1,2,3] #a list
	>>> print(L)
	[1, 2, 3]
	>>> L.append(4) #it works in-place, and the return value is None
	>>> print(L)
	[1, 2, 3, 4]"
7,What are you expecting the return value to be?
7,The return value of `list.append` is `None`. Lists are mutable so it operates in-place.
7,"There's a couple of problems:

`get_list` doesn't do anything - the function has no return value and you can't split a string *in-place*; strings are immutable.

A `return` statement in a function immediately terminates the function - any lines in the function after `return` is reached won't run under any circumstances.

When you iterate over a string - `for item in prices` - you get the characters of a string."
7,"> new_dict = dict(zip(keys, [[]]*len(keys)))

You're assigning the same list to all of the keys."
7,I'm pretty sure you can't - only values can be parameterized in the database drivers I'm aware of.
7,You can't parameterize table or field names.
7,"> As i searched online i didn't find any source stating difference b/w them.

The difference is that `read` is a method that these objects have and `reader` is not."
7,"> If I try to add keyLocation = random.choice(keyLocation) to this part to have it spawn in a new place, the game crashes instead of restarting the game loop.

The error it's crashing with is probably important, don't you think?"
7,"If you already have a list and you're thinking of a collection of numbered variables, just access the list by its indexes: `my_list[2]`, etc."
7,"> So there isn't a way that I can have multiple lines being read at once?

You have one hard drive and it reads one bit at a time. There's a *lot* of abstraction and buffering over the top of that but ultimately, at some level your threads aren't going to read from different positions in the file concurrently, they're going to be waiting for their turn to grab the drive and read some bytes and process them.

If ""reading a bunch of bytes"" was a lot faster than the operations you would then perform on those bytes, then it would make some sense to have multiple threads that would take some bytes and then go away and work on them for a while, giving the other piglets their turn at the trough. But disk IO is so slow compared to everything else that you really have to be running extensive operations on each line before you're not IO-bound. And it doesn't sound like you are.

And your problem is actually doubled, because you need each thread to write *out* to a file as well, so there's actually two blocking IO operations that your threads would contend for. I'd expect the multithreaded solution to be quite a bit slower than the single-threaded one, here."
7,"If you're watching disk space you don't want stale values, you want accurate ones. You should just look it up less."
7,"> This source file is 10,000+ lines long, and it takes about a minute to process each file, so it was suggested to me that I use concurrent.futures.ProcessPoolExecutor (since it would be faster than linearly proceeding through the file).

You *have* to proceed linearly through the file because files are linear. You can hop around in them but it takes just as long to seek as it does to read, in most cases, and the operation you're doing isn't slower than disk IO (which is really slow) so I really feel like you're setting yourself up for disappointment. Also the filesystem is tuned for sequential reads, so *anything* you're doing that breaks up sequential access is going to result in longer runtimes.

Overall you can't gain a performance increase by parallelizing the processing of a single resource; you actually lose performance as each thread contends for access to IO."
7,"> Like, if I need to check free space on disks in every 100 calls:

That isn't something that you should cache, though."
7,https://docs.python.org/3/library/functools.html#functools.lru_cache
7,Your operating system has a clock that is always running; what you really want to do is use it to calculate the moon's current phase when a user asks for it.
7,Presumably they're going to teach you how to do that as you go.
7,kay-wargs
7,"Write tests. If the issue is that it takes a long time to get to every line of code, then write tests that get to those lines of code first. If you know there's a particular input data that triggers a bug, add it to your test cases the first time you encounter it."
7,"You would have to know how to write secure applications in Python, obviously. 

Generally its probably a bad idea for a company to turn over all of its physical security control to a programmer for whom this would be their first production software package."
7,"It’ll never work that way - you can’t edit code in-flight in a language that compiles to bytecode, as Python does. VBA is a simple scripting language."
7,"Operators like `==` don't accept multiple options, they test a single thing."
7,"Generators can be iterated over. They’re not collections but you can convert them to one, the way I showed you."
7,"Ah yes, one of the dinosaurs who thought we’d never need more than a two-digit year weighs in. Computers must have seemed like a fad in 1975."
7,"Instead of printing them, use `yield`:

    yield subnet['SubnetId']

That'll turn your function into a generator, which you can iterate over or consume with `tuple`:

    vals = tuple(get_private_subnets())"
7,"People learn to write code by writing code. If you want to get hands-on, the only program you need is the Python interpreter."
7,"I mean, it's doing exactly what you're telling it to do. If you want to turn each object in `part_candidates` into three rows, you have to build three rows and write them. You're only building one row:

                data_list.append([frame, keypoint, X, Y, C])

It doesn't magically know that you want to unpack this into three records."
7,"> I am able to login (it shows my user information) but when I go to the homepage I am no longer logged in.

Almost universally across the web, sessions are handled by the client. If you're not providing your login session on the second request you'll be treated as not logged in."
7,"It's no sweat. The Cisco documentation you linked doesn't do a very good job of noting that this is metadata, they sort of just assume you have a detailed knowledge of how HTTP works.

*Requests* has excellent documentation, though. If you get stuck again, [check there](https://2.python-requests.org/en/latest/) first."
7,"Cookies are in the *headers*, not the body (the content), and `requests` makes those available via `response.cookies`:

    >>> url = 'http://example.com/some/cookie/setting/url'
    >>> r = requests.get(url)

    >>> r.cookies['example_cookie_name']

In this case, you'd ask for `sesh_id = r.cookies['SessionID']`. Then, on subsequent API requests, you *supply* the SessionID: `r = requests.get(url, cookies=dict(SessionID=sesh_id))` ."
7,"> Why is the index of 't' always 0.

That's the guarantee of `index` - it finds the index of the *first* occurrence of the item in the iterable."
7,"Assignment isn't transitive, so the variable `item` in

    for item in data

doesn't refer to a position in the list, it refers to a value contained by the list. If you assign to it:

    item = 0

You're just changing the value the variable points to, you're not changing the list. Assignment isn't transitive."
7,"> Why does python leave some values ​​on the 1st list?

Imagine a simple list: [a,b,c]

Now iterate over it, deleting elements as you do so. Remember that lists can't have an ""empty"" position so if you delete element n, then the elements after n ""move up"" in the index so that there's no empty positions.

So, on the first cycle, you delete the element in the first position: a. Now the list is [b,c]. You now move to the second position and delete the element there, which is c. Now the list is [b,]. You try to delete the element at the third position and there's nothing there, but there's no error when you try to delete an element that doesn't exist so it's fine.

If you delete elements from a list as you iterate over them, you *at most* wind up deleting only about half of the elements, because you skip every other element. Solution: don't delete from lists as you iterate over them; rather, return a *new* list that is the elements you wanted to keep."
7,"Well, it seems to me that there are two ways to approach this:

Calculate whether each day between the start and end date is a weekend day, and if so, increment a count, or

Determine a general-case equation for the number of weekend days between two dates, based on the assumption that there are two weekend days in every seven-day period (and so you'd just need to determine how many weekend days there are in the remainder, which would depend on whether the start day was on a weekend.)

Either way, you're looking at a function that takes two parameters, each dates, and determines the number of weekend days between them."
7,We've all been there - it's just a kind of blindness you acquire when you stare at the same thing for too long.
7,"> Can we also use CMD to edit existing python scripts ? 

You could, but all things being equal, why would you want to?"
7,"> So.....where do I start?

At the top, in a new Python file in your favorite text editor. Then start writing the parts you know how to write."
7,"    temp_list = []

You create a new list every loop."
7,"> But Now I'm Stuck, Do You Guys Have Any Ideas??

I have this idea that you should show us the code with the problem, and describe both the problem and the desired outcome.

Or you could just stay as vague as humanly possible and not get any help."
7,"> It's mostly due to how cumbersome it is to write Planet.planets

If you're going to use it a lot, you can just assign it locally to rename the reference:

    p = Planet.planets

Or whatever."
7,"    ab = sub.Popen([""powershell.exe"", ""C:\\TestAutomation\\ePuse\\ePuse.ps1""], stdout=sub.PIPE)

If this line fails (for instance, because `""C:\\TestAutomation\\ePuse\\ePuse.ps1""` doesn't exist) there's no error and the script will terminate with exit code 0. As a result it's hard to debug because you're not getting any of the error reporting from the powershell subprocess.

Don't use `subprocess.Popen`, nothing about your use-case here justifies it and this script isn't doing the error-handling you need to do to have it be safe. Use `subprocess.run` as the module recommends. Then you can at least see what's going wrong."
7,"> But I'm pretty sure this is not the best way to access the objects.

Overall, this seems fine. What's your concern with this approach?"
7,"> But i dont know how to build one i dont know what kinde of modules i have to import for that particular project, how to start it, how to finish it how to implement it, all i know is the basic things of python creating list printing them slicing them etc.

That's why you do the project, to learn those things."
7,"> I mean frankly if I can get away with it and it doesn't ACTUALLY compromise their site, I just don't get the issue.

I've explained it twice. Is your definition of ""ethical conduct"" ""I get to do literally anything I think I can get away with""? Most people don't actually construe ethics that way. Do you?

> The thing is, I have a very flexible moral and ethical code.

I don't know if you've ever been made aware of this, but when people describe an ethos of self-dealing and disregard for rules that might stand in the way of personal benefit as a ""flexible moral/ethical code"", they were *fucking kidding.* That's a euphemism for being amoral.

If you're amoral, that's fine, you're amoral. I don't care. But why did you think *we* were?"
7,"Typically people take a [cellular automata](https://gamedevelopment.tutsplus.com/tutorials/generate-random-cave-levels-using-cellular-automata--gamedev-9664) approach, which is an approach where each room sort of ""solves itself"" by recourse to a set of simple rules, rules like ""a door can only exist on a wall that is between two rooms"", and by inspecting the cells that neighbor them.

Since you're fine with every room being the same size, you can have a very simple grid and each square of the grid can be one potential room. You can plunk down some rooms into the grid at random, and then follow some simple rules:

If a room has no neighbors to the north, south, east, or west, delete it (you don't want unreachable, orphan rooms.)  
If two rooms share a wall, place a door in the wall.  
Choose a wall on the edge of the grid and place a door in it; this is the ""main"" door to the dungeon.  

You could implement these rules as a function that took a room ""under inspection"", a list of it's neighbors, and then applied the rules to the room. Then iterate over your grid of rooms and apply the function."
7,"My understanding is that multiple tests constitute the same ""test case"" when the setup and teardown are the same for all of them. That is, testing typically works like this:

1) Set up a known *state*  
2) Verify behavior of code is as intended, given that state  
3) Tear down the state

Any number of tests you can do in 2) can be part of the same test case. Another way to think of what's happening at 2) is that your tests are documenting what your intentions actually *are*, given the assumptions of the state created by 1). Either way you think about it, if there's a bunch of behavior you need to test under a different set of circumstances, that setup is going to be different so that's likely a totally different test case."
7,"> Are there any Python Certifications that make you more hire-able?

Nobody certifies programmers. What would be the point? It would be like certifying a portrait artist - who would care about their certifications if you looked at their portfolio and their paintings were bad?"
7,"> It says that it expects an indented block, but my print(v) statement is indented

It's not:

    >>> for v in spam.values():
    ... print(v)

It needs to be indented at least one space in from the previous line."
7,"Well, but they *do* know, because they're throttling your IP.

Again, I'd question you on how you think ""I'm entitled to whatever I can get away with"" constitutes being ""ethical."""
7,"> Frankly, I find that it's alright to break rules as long as they don't hurt anyone.

If the site didn't think your actions hurt them, they wouldn't be trying to stop you. You don't really have any basis to say they're wrong - you don't get to decide for them what ""hurt"" is or isn't.

And we're not talking about a *rule*, we're talking about an agreement you entered into in exchange for access to the site. You don't like the agreement, I guess, but rather than back out of it, you're continuing to try to enjoy the benefit (access to the site.) How do you view that conduct as ethical?"
7,"So, like, consider this line:

    is_negative = num_as_string[0] == '-'

This is a test of whether the string starts with a `-`. But by the time you've made it to line 8 of this operator soup, it's actually *really hard* to concentrate long enough to figure that out. This code is antithetical to being read by human beings with human brains; it's fatigue-inducing because the [cyclomatic complexity](https://en.wikipedia.org/wiki/Cyclomatic_complexity) is high and it relies on infix operators instead of English verbs. But what if the line was:

   is_neg = num_as_string.startswith('-')

? That's a hell of a lot easier to read because it doesn't look like a cat walked over your keyboard, and it actually *means what it says* - `startswith` indicates *intent* a lot more clearly than `if some_value[0] == '-'` even if they *implement* the same behavior.

Since this code isn't written to make its *intent* clear - like, there isn't even a comment that explains *what this code fucking does* - it's basically impossible to tell you why it does what it does, or even if it does.

I think if you wanted to make your way through understanding this code, a good exercise would be to re-write it so that it was readable. For starters, pull the `construct_from_base` function out of its enclosing function; it's not a closure, so it doesn't need to be in there."
7,The problem with unreadably bad code is that nobody can read it.
7,"> I have a master's degree in chemistry/physics with emphasis on computation.

This sounds like a degree program you could describe as ""computational chemistry"".

> I want to make the transition to software engineer career path-wise and I am wondering if I would need to go back to school to get my software engineering degree to add credibility to my resume for any future positions I may apply to?

Between a masters in a computational discipline and development experience with some current technologies, I don't see that you need to go back for anything at all. Apply for whatever you want, you're qualified for a lot - look for positions in backend web dev, data science, bioinformatics, machine learning, or just general computer science, to start."
7,"> They just have a cool down for each IP.

Why do you think that might be, and what's your justification for trying to evade the cooldown?

> How is it unethical to make a program that doesn't hurt the website at all?

It's unethical to assist you in violating a legal agreement you're a party to, such as the terms and conditions of access to a website. How do you figure that's not unethical?

> I just struggle to see how violating a ToS is unethical if it doesn't hurt the site at all?

It's unethical in the respect that you're violating the terms of service. They're the *terms*, it's right there in the name. How could it be ethical to make an agreement and then do exactly what you agreed not to do?"
7,"> Sites usually block that behavior because of people who do use it nefariously to either DDOS them or compromise their site. I am not trying to hurt the site at all.

You're using it in ways that violate their terms and conditions, which is itself harm to the site, and you know you are because you know you have to rotate your IP to evade detection. Presumably you've discovered that the sites *do* ban your IP when they catch you doing this, which indicates that they agree with me that you're attacking their site.

Why are you asking for help doing something that's unethical? How would *I* be maintaining *my* professional ethics if I help you do it? How would anyone?

> I really just need someone to recommend a good API 

If Nord VPN has an API, then without a doubt they'll link to it on their website.

> I would think with how bot friendly Reddit is, you guys would have no issue.

If you want to write a bot for Reddit, please feel free to! We'll even help. But *Reddit* doesn't want you to scrape their site either, they provide an API for bots and that's what we'd tell you to use in that case, too. But it isn't ethical to help you be a bad citizen on the internet."
7,"> I am making the accounts so I can build them up with software and then flip them.

Yeah, I mean, that's an attack. I don't understand why you think that's a legitimate use of the websites you're accessing. They don't want you to do that, which is why you know you have to rotate IP's to evade detection.

> Also, it's not hard to rotate IP's.

Then figure it out. Sounds like you don't need anybody's help."
7,"> I'm just creating a bot that makes a bunch of accounts.

Sounds like an attack.

If you need to rotate IP's to evade the site's countermeasures, you're attacking it. That's fine, I don't control what you do, but if you're going to attack websites you need to be smarter than the people defending them, and you're not."
7,"> I want it as a class because I gonna use it in different scripts and I don't want to add these functions every time.

You can import functions as well as classes.

> I 'd like to use import 'VarType' instead.

Well, you'd have to do `from vartype import VarType` *anyway*, so you might as well write a function instead of a class."
7,"    t1 = VarType(t1)

This is *always* going to return a VarType, since that's what you're asking it to do - construct a new object of type `VarType` with `t1` supplied to the initializer.

What does the initializer do? Well, it calls `convert_variable` but it doesn't *do* anything with the return value. So you basically have an initializer that does nothing (which is fine, some objects don't require any initialization) before the new `VarType` object is returned to the calling site.

Really the question here is, why did you think you need a class for this? `convert_variable` makes more sense as a function - it's a pretty straightforward mapping between input and output."
7,"    x = sqrt(a + b * (sin((rlon2-rlon1)/2)**2)

Your parentheses aren't balanced. Four `(`'s vs 3 `)`'s."
7,"Yeah, I'd expect you'd get a lot of background noise. Do you brew in a transparent container, like a glass carboy? If so, then I think you'd have an easier time detecting the change in optical transmittance."
7,"> I'm making a web scraper that requires that my ip be changed every time I run my program.

Why would we help you attack websites?"
7,"It'd be easier to write the Python from scratch from the description of the problem than it is to convert C++ to Python. Like, a hundred times easier.

Just sit down and write some Python. You're doing literally nothing, here, and wondering why you're not getting an answer."
7,"Ok, but that isn't Python."
7,Ask him to explain it to you.
7,Show us your code and we'll tell you what you did wrong.
7,What did you try?
7,robots.txt
7,"> I just don't get why there's so many of these? So why can't they do each other's jobs/ functions?

There are a lot of different iterable types because *iteration* is an extremely useful abstraction for programmers - many, many tasks can be thought of as doing the exact same sequence of operations to a collection of inputs, and this is how a programmer can write in minutes a script that can do hours and hours of work.

Because the iteration interface in Python is simple to implement, it's very easy to add support for iteration to any type to which it might apply, and indeed you might expect any type that you can think of, roughly, as a ""collection of things"" to be iterable.

> There also is dictionaries, which aren't technically iterables from what I've gathered. This is because they are immutable but still they are very similar.

I think you have a couple of wires crossed - dictionaries are both mutable and iterable. If you iterate over a dictionary you get the keys of the dictionary; the dictionary has methods you can call to get an iterator over its values, or it's key-value pairs."
8,"I'm creating a monitoring event database that uses one-to-many relationships between observations from various objects 'in the field' where object attributes are reused. In pseudocode:

    model Animal 
	   - species
	   - subspecies
	   - gender
	   - etc
	   
	model Observations
	   - datetime
	   - ForeignKey(Animal)

Then for every animal observed, a new Animal instance is created if its attributes are new in the Animal-table. That's because >95% of the time, the monitoring service will detect the same attributes but I still want to log it to confirm later that a certain set of attributes was present at that time. The key here is that there are no unique animals saved in Animals per se (no age or name or other unique properties), it's meant as a reusable set of attributes to reduce redundancy.

I'm confused on how I should implement this. I would expect to create an Animal instance, then I would want to either compare that instance to all Animals to see if a match is found on all attributes. If it is, then use that match's PK as the ForeignKey, or insert then use that object's PK. But would this mean I have to compare each object field-by-field? 

Or should there be a unique constraint on all fields, that should 'prevent' me from entering a redundant Animal and then search for the matching one? Or can the matching one be returned directly? Or should I implement some hashing method to let objects be easily comparable? Use a serializer, then compare its output? I'm getting the feeling I'm reinventing the wheel in some way."
8,"`pip3` is an alias used to differentiate the default Python 3 pip from the default Python 2 pip system-wide. Inside an activated venv it would have no purpose, as the activated venv is tied to a single Python version, so `pip` is always the command to use there. Same for `python` vs `python3` btw."
8,"What are you talking about? He's using BeautifulSoup to extract content from a HTML source, like most webscraping coders here. BS is a frontend for an actual XML parser, `lxml`in OP's case, so it **is** in fact loaded as a XML object. BS just makes it way simpler by providing selectors that are normally available in browser-based environments, like CSS selectors or simple attribute selectors. That's to prevent the use of complex and hard to read XPath's when there is no actual need for them. And thus can do a find_all with just `.find_all(""script"", {""type"": ""text/javascript""})`, as BS translates this to the actual selector the parser needs.

There is really nothing barbaric about this approach, you seem to think that we're using regex or some other bare bones method here (or you have been living under a rock in regard to how people do webscraping in Python nowadays). See for example [Chapter 11](https://automatetheboringstuff.com/chapter11/) of Automate the Boring Stuff for a common use case of BeautifulSoup in web scraping."
8,Did you ship the venv together with the script?
8,"A class is literally a value *after* a `class=` attribute

    <div class=""my_super_div"" etc>
           ^--- note how this says 'class'

Which you would then select using

    find_all(""div"", {""class"": 'my_super_div')}

in your case you are selecting on the `type=` attribute, 

    <script type=""text/javascript"">
             ^--- note how this says 'type'

so you have to use that as the selector's key

    test.find_all(""script"", {""type"": etc

and use the value after `=` as its value, so `text/javascript`:

    test.find_all(""script"", {""type"": ""text/javascript""})"
8,"You don't need to range up to `i//2+1`, you just need to check up to and including `i`'s square root. Also this doesn't produce N prime numbers, it produces all the primes up to and including N:

    >>> from math import sqrt
    >>> N = 100
    >>> [i for i in range(2, N+1) if all(i%j != 0 for j in range(2, int(sqrt(i))+1))]
    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
    >>> print(len(_))
    25

so 25 in case of N being 100."
8,"Could be, I would use irfanview. Or just upload the original gif to imgur."
8,You can use the actual superscript 2 unicode character: ²
8,"This rather seems like a scaling issue and not a color palette issue. Scaling can produce jpeg like artifacts like blended edges and vague new color specks on areas that were monochrome before (like the purple in the grey parts). Color palette reduction causes dithering, see https://i.imgur.com/hE53Hnz.png which is scaled, then descreased the colors to 4. As you can see it doesn't introduce the blended edges (the dithered pixels are still 'sharp').

How did you scale the image(s)? Do you maybe mind to provide the full code? Or at least just the part that does the image manipulation?"
8,Why combine `wget` and `requests` here? Why not use `requests` for the file download too and remove one prerequisite? Also getting closer to 'lighning speed' would for me entail multiple streams through for example aiohttp.
8,"I can't reproduce what you're saying on http://www.pythontutor.com/visualize.html or just from command line python:

    user@server~$: python3 /tmp/test.py 
    [0, 1, 0, 1, 0, 1, 0]

So it seems like you have some kind of lambda evaluation going on in your debugger? It seems a bit weird because lambda's aren't evaluated until called by definition, but also the lambda isn't that complicated that it would cause a loop or recursiveness somehow.

Just to check, are you 200% sure that you aren't running different code there?"
8,"So do a lookup with that key?

    key = random.choice(list(the_dictionary))
    print(key, the_dictionary[key])"
8,"Ok so the problem is in your implementation causing an endless loop and not in the parantheses or some other syntax (weird that a environment like that would confuse syntax problems with endless loops). 

What I would recommend is to paste your code in http://www.pythontutor.com/visualize.html and walk through it step by step while you check the contents of the variables. That should give you an insight what the code is doing once it reaches the endless loop situation."
8,"Pasting your code in an online repl it just works: https://repl.it/repls/TreasuredAvariciousTelevision

So it would seem you're either running different code than you're looking at or whatever you're running it on has some other issue."
8,https://pynative.com/python-range-function/
8,"You've nested re.sub twice. Your call is now

    str(re.sub(re.sub(a,b,c)))

while imho it only needs to be

    re.sub(a,b,c)

Because the `str()` call is redundant anyway (re.sub() returns a string, and input() too by the way) so in the code 

    ParseYahoo(i, re.sub('\ |\ https://finance.yahoo.com/quote/|, |\/|', '', i))"
8,Maybe try some swf parsing library like [pyswf](https://pypi.org/project/pyswf/#description)?
8,"I'm not sure what the f-string adds here, as you are still using just a literal."
8,"Ok it would have helped if you mentioned this at the start, we're here to help but we also expect to get a little bit of a backstory to understand what we're looking at here. Because now at least I know which code you're using, but I don't know which method you used to run it, as the howto there lists 4 options (vagrant, docker, virtualenv and heroku). Can you *please* just explain what exactly you did so far?"
8,"You seem to have missed a specific part on the `args` parameter (so the first one, the 'command') in [subprocess docs](https://docs.python.org/3/library/subprocess.html)

> args is required for all calls and should be a string, or a sequence of program arguments. Providing a sequence of arguments is generally preferred, as it allows the module to take care of any required escaping and quoting of arguments (e.g. to permit spaces in file names). **If passing a single string, either shell must be True (see below) or else the string must simply name the program to be executed without specifying any arguments.**

And lower

> If shell is True, the specified command will be executed through the shell. This can be useful if you are using Python primarily for the enhanced control flow it offers over most system shells and still want convenient access to other shell features such as shell pipes, filename wildcards, environment variable expansion, and expansion of ~ to a user’s home directory. However, note that Python itself offers implementations of many shell-like features (in particular, glob, fnmatch, os.walk(), os.path.expandvars(), os.path.expanduser(), and shutil).

So in simple terms, either do

    call(['echo', 'hello'])

or 

    call('echo hello', shell=True)"
8,"Threads need what's called 'synchronization objects' to allow to propagate stuff like flags or semaphores, the module offers [threading.Event](https://docs.python.org/3/library/threading.html#event-objects) for this specific purpose. Replace your boolean with and .Event() and use its methods (`.set()` and `is_set()`) to communicate through it.

    import threading 
    import time 

    stop_threads = threading.Event()

    def run(): 
        while not stop_threads.is_set():
            print('thread running')
            # to prevent 100% CPU usage (on one core)
            time.sleep(0.1) 

    t1 = threading.Thread(target = run)
    t1.start() 
    time.sleep(1) 
    stop_threads.set()
    t1.join() 
    print('thread killed') 

another trick is to use Event.wait() to incorporate the sleep, it will return False immediately when the Event is set, even if the wait period isn't finished yet.

    def run(): 
        while not stop_threads.wait(0.1):
            print('thread running')

Just a nitpick but technically you can never kill a thread (at least not the one `threading` implements), because a `kill` is merciless. Meaning that whatever the thread is doing, it would stop right at that moment. What you're doing is controlling the flow to stop on the next loop iteration, but say your thread does

        def run(): 
        while not stop_threads.wait(0.1):
            print('thread running')
            for i in range(10000000000000000000000):
                r = i**i

It will just continue because it still has to finish the extremely long loop, only then to find out the Event was set. In general this is called 'terminating' as that's just a request and not a forced destruction. Except for setting the thread to daemonic and killing your main thread (and thus your whole program) using sys.exit(), there's no way to actually force the thread to stop whatever it's busy with. For that you would need to use a subprocess through for example `multiprocessing`, because a process does allow to be killed forcibly, but can also handle a lighter signal like Ctrl-C from your keyboard sends. This is how running a long loop as above in a single threaded program can be stopped using Ctrl-C during runtime."
8,">  it's an optimized form of a list comprehension

It's just a component (or the core) of it. list, set or dict comprehensions are generator expressions too, just put inside a constructor's call. The syntactic sugar is added to translate `[]` to `list()`, `{}` with single items to `set()` and `{}` with double items to `dict()`, but 

    [x for x in something if condition]

is the very same as doing

    list(x for x in something if condition)

So optimizing the syntax to a slightly simpler form.

It's just that because list comprehensions are shown much more often that people tend to see it as the 'basic' example and that other forms are 'optimized' or 'extended' or something similar. The 'basic' form is in fact the generator expression, the others are extensions to it. 

What is true is that a generator expression is lazy evaluated, so combined with a sentinel-breaking loop like `any` you get an optimized implementation of searching for a sentinel without running through the whole iterable per se."
8,How did you deploy your project exactly?
8,"You can call without printing but you do have to save it, so instead of just calling it

    prueba(post)

you assign to a variable,

    resultado = prueba(post)"
8,"Then Yoghurt42's advice is the solution. If your file is also UTF-8 which it should be, but if it still gets into problems set your editor to use it."
8,Are you running your code in Python 2 by any chance? Because afaik Python 3 shouldn't throw this error as it assumes UTF-8 by default.
8,"Python's json library also doesn't have a problem apparently 

    Python 3.6.8 (default, Jan 14 2019, 11:02:34) 
    [GCC 8.0.1 20180414 (experimental) [trunk revision 259383]] on linux
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> import json
    >>> json_str = """"""
    ... { ""my_string"": ""{{value}}""
    ... }""""""
    >>> json.loads(json_str)
    {'my_string': '{{value}}'}

so I really think you have some interpretation issue at your side. Maybe the double braces trigger something that cause the value string to disappear, as you mention 'implicit Null values' which I can't relate at all to the simple example I presented."
8,"I'm not sure if you're missing something in the code block, maybe because of how you're viewing it, because my string actually has the simple common format of `{""key"": ""value""}`. The only thing I changed is to put `{{}}` around the word `value` **inside** the double quotes and thus  the value string, so instead of `{""key"": ""value""}` it became  `{""key"": ""{{value}}""}`. That's the only difference.

edit: here's a screenshot of both my original post and this one https://i.imgur.com/JWHlDpP.png maybe you can then compare to see if your client/device somehow renders the original post differently."
8,"https://jsonlint.com/ disagrees with you, [screenshot](https://i.imgur.com/cBXwkv5.png)."
8,"`in` works on `range` too, so you can do

    for r, c in zip(lst1, lst2):
        if number in r:
            print(c)

but that will print each letter on a different line. If you want `a, b` you could for example add to a list, then use str.join

    letters = []
    for r, c in zip(lst1, lst2):
        if number in r:
            letters.append(c)
    print(', '.join(letters))

comprehended

    letters = [c for r, c in zip(lst1, lst2) if number in r]
    print(', '.join(letters))"
8,"> Would creating a loop print each raise?

A loop on its own not obviously, but if you put a print statement in it, it will. 

> Personally I dont see why it's needed, but we're giving an example of the output and has the years leading up to current year.

Let me see if I get this straight: a loop enables you to print each year right? But then you ask why that would be needed, but after that you say you're struggling with outputting the years up to the current year? Isn't that exactly what you need?"
8,"So the JSON has to look something like

    { ""my_string"": ""{{value}}""
    }

?"
8,"See the guide at https://realpython.com/python-string-formatting/ . `#2` shows the commonly used form, and `#3` is the new f-string method but that's only supported on Python 3.6 and later.

But may I ask why you need `{{value}}` in the first place, because it coincides with the format used for Jinja-based html templates, but I'm not sure why you would need to generate it like that to use it."
8,">  I didn't want to code the math into it until I knew how to do the output. I.e, the clunky way of if years worked == 1 or 2 etc.  Or if there is an easier more tidy way to do it,

I'm not sure if I entirely grasp the problem here, but are you aware that you can create a loop that iterates on an integer range of values using `for` and `range()`? Because that way you can loop over each year worked and then calculate, print the salary for that year."
8,"Would you be able to at least start with the structure of the program, so separate the parts into

- asking user for the parameters
- process the parameters
- calculate the values
- print the results

And then code what you're able to code? Then we can focus on the parts that you have trouble with."
8,"I'm not sure if I follow, Django stores its settings in settings.py, not in base.py. The settings.py is created through [startproject](https://docs.djangoproject.com/en/2.2/intro/tutorial01/#creating-a-project)."
8,"Check the no 1 rule in the sidebar-> 

> General Rules
>
>    Posting only assignment/project goal is not allowed. Read posting guidelines.

and at the posting guidelines

> Posting homework assignments is not prohibited if you show that you tried to solve it yourself.

We're happy to help with your code while you build it, but this sub isn't meant to post just your assignment and wait for others to get you going."
8,"As far as I can see the double zip approach should behave the same as your i/j indexing. 

    >>> latitudes = [['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h']]
    >>> longitudes = [[1, 2, 3, 4], [5, 6, 7, 8]]
    >>> for lat, long in zip(latitudes, longitudes):
    ...     for p in zip(lat, long):
    ...         print(p)
    ... 
    ('a', 1)
    ('b', 2)
    ('c', 3)
    ('d', 4)
    ('e', 5)
    ('f', 6)
    ('g', 7)
    ('h', 8)

assuming that you just want to combine every directly aligned value of the nested structure, no replication (like ('a', 1), ('a, 2), ('a', 3) etc). For that there's another option with itertools.product."
8,And the [docs on combinations](https://docs.python.org/3/library/itertools.html#itertools.combinations) even show a rough implementation of its algorithm.
8,"For me it was noticing that I could help other people to get started with Python and not getting puzzled by questions they asked. If you would still be a beginner, there would still be beginner topics that you didn't comprehend yet. Once you do, you're basically an intermediate. Another thing was being able to get through the coding exercises on sites like coding bat, see the list at /r/learnpython/w/index section 'tools for learning python'."
8,"Maybe check https://github.com/alttch/rapidtables ? Or build a pandas dataframe of course, for which many examples of printing currency values are available, like [here](https://stackoverflow.com/questions/20937538/how-to-display-pandas-dataframe-of-floats-using-a-format-string-for-columns)."
8,"yield makes the function return a generator object, and generators don't do anything until `generator.__next__()` is called, which is what `for` and `next()` do.

    >>> def f():
    ...     print('hello my body is running')
    ...     for i in range(3):
    ...         yield i
    ... 
    # note how nothing happens yet when f() is called and returns a generator object
    >>> my_gen = f()
    # only when next is called, the body of f is being executed
    >>> next(my_gen)
    hello my body is running
    0

next() is just calling it once (like the Next button in an installer wizard), `for` will call it until it raises `StopIteration` which it handles to stop the loop:

    >>> for item in f():
    ...     print('I got this from f:', item)
    ... 
    hello my body is running
    I got this from f: 0
    I got this from f: 1
    I got this from f: 2

So if you want to start the body's execution, you need to use either of them:

    def test_lookup_country_raise_value_error_with_latitudes():
        with pytest.raises(ValueError):
            next(lookup_country(latitudes=[], longitudes=longs))
            pytest.fail('lookup_country accept empty latitudes')

Btw it seems like you're trying to combine two 2D list structures here (I'm taking the role of [clippy](https://en.wikipedia.org/wiki/Office_Assistant) with pride), which you can do a bit easier using `zip`:

    for lat, long in zip(latitudes, longitudes):
        for p in zip(lat, long):

also direct dunder referencing like for `country=country.__str__()` is not advised, rather use `str()`:

    found = CountryPosition(country=str(country), index=index, position=p)

dunder referencing is meant for specific methods that don't have an abstracted built-in function or operator."
8,"Aren't you then looking for supplying an argument?

    def prueba(respueata, elemento):
        if elemento == 'titulo':
            return titulo_de_la_respueata
        if elemento == 'post':
            return post_de_la_respueata
        if elemento == 'imagen':
            return imagen_de_la_respueata

    print(prueba(respueata, 'titulo'))"
8,"> as the loop complained when removing from the set--something about runtime error the set changing content or count or something. 

Maybe that's because I forgot to add a `break` when the column is removed

    columns_with_no_data = set(range(num_col))
    for line in mydata[1:]:  # skip first line = header row
        for idx in columns_with_no_data:
            if line[idx]:
                columns_with_no_data.remove(idx)
                break
    print(columns_with_no_data)

as of course then it shouldn't continue to look for data on the same column anymore.

> edit: ran it on a .csv with 3 columns (one of which blank) and 700K records, finished in 2.0 sec according to sublime :) I don't know if that's good for big data, but good enough for me

Should be even faster with the fix above, but yeah that's what using a list (and thus RAM) will bring you :)"
8,"You don't need `global` to mutate a global object, only to reassign it. Otherwise it's a good solution too."
8,See this sub's wiki /r/learnpython/w/index section 'new to programming'.
8,"Please use an actual code block in the editor, see this gif https://i.imgur.com/HT4Zz88.gifv"
8,"Return the f-string instead of the response?

    def prueba(respuesta):
         titulo = 'soy el titulo' 
         post = 'soy el post' 
         imagen = 'imagen soy'
         return f'1){post}, 2){titulo}, 3){imagen}'

    result = prueba(post)
    print(result)"
8,"You can simply use Ubuntu's own package

    apt install python3-pygame"
8,"> but where to? 
>
> I've been working on pycharm this whole time.

I'm not sure if I understand your question, why not copy it to a Pycharm project?"
8,Real Python has a nice tutorial https://realpython.com/python-json/
8,"    if winner_sets>=3:
        winner_BO5 = winner_BO5+1
    elif winner_sets<3:
        winner_BO3 = winner_BO3+1

the first time that this code is reached and winner_sets is still below 3, winner_BO3 doesn't exist so it can't calculate `winner_BO3+1`. Maybe you should set both 'winners' as 0 at the start of the program?

    winner_BO5 = 0
    winner_BO3 = 0"
8,Your updated code prints None : https://repl.it/repls/LopsidedImpureService
8,"But just writing a function doesn't do anything when you run the code, or is this executed through some website that requires the solution to be as just a function?"
8,The FAQ links some resources on this: [What are classes and how do I use them?](https://reddit.com/r/learnpython/wiki/faq#wiki_what_are_classes_and_how_do_i_use_them.3F)
8,"Can you post your full code? Also please use a code block to maintain formatting, see explanation here: https://i.imgur.com/HT4Zz88.gifv"
8,"No thanks, maybe check the responses in your other topic before you start telling me what to do."
8,"Again with the personal comment instead of debating the point. Because if you could argue why my logic is flawed, you could literally point it out. Instead, the only thing you can respond with is 'you are wrong, read this book', so without an actual argument. I can also call you names and link 10 books on reasoning if you want, it doesn't prove my point in any way. I'm sorry to have spoiled your chance of [""making fun out of pythonic idiots""](https://old.reddit.com/r/programmingcirclejerk/comments/czi19g/the_whole_idea_that_someone_is_an_expert_and/) though, maybe next time ;)"
8,">  The point isn't that experts MUST produce EXCELLENT results. I never made that claim nor would I say so. 

The actual claim you made is that java is 1000x better than Python because it was designed by experts over many years, period. I'm not seeing this addressed in the rest of what you wrote, so I'm not sure about what you're trying to say here."
8,"I appreciate the change of tone here. But that also makes you change the argument: 

> The causality goes like this, a good language is probably made by an expert rather than a novice. A bad language can be made by an expert. But a good language is most probably only going to be made by an expert. 
>
>  It's not a coincidence that Java is a well designed language, it's because it was done by experts who made better decisions than a complete beginner (aka python).

Which is a point of *correlation* not *causation*. Yes of course more qualified people tend to make better products, no matter if it's a language or something else. But saying that a product is better *because* it has been made by qualified people

> java is a 1000x better language than python because it was designed by experts over many years

is a falsehood, because qualified people can make shitty products too. See Microsoft as a prime example. MS made both excellent stuff as shit stuff, but saying because Microsoft uses very qualified people makes any product they make 1000x better compared to that of some group of amateurs or a startup makes no real sense (Google vs Bing for instance?).

IMHO you can qualify any of their products as being good or bad based on that very product, not because MS made it or not. And for that same reason you can qualify both Java and Python based on their properties and practical use, without considering whether they come from Gosling or Van Rossum or any other person."
8,"> you need to put down actual experts in a field because it threatens your self confidence

I think you're missing the point here and are now strawmanning and putting down my person for it. I never put down anyone, I'm saying that you're point 

> java is a 1000x better language than python because it was designed by experts over many years

Is based on a falsehood. Again:

> Java is one of the best languages for obvious reasons **apart from who made it**, but you seem to think that this comes from by whom it was made and that other languages are then disqualified for the lack of the same history.

Saying that something is better apart from who made it is not saying that who made it isn't a qualified or lesser person. I'm well aware of the qualifications of both Click and Gosling, but saying that their role in developing Java doesn't automatically makes Java better (or worse) is not saying that those two people are less qualified... As I said before, there are very qualified people who made shit products and excellent products just the same, so the merit should be in the properties of each product and not on the persons who made it.

> bro you sound very immature to me.   

Just to throw it back at you: failure to understand basic reasoning seems a bit immature to me, so I think you're making a bit of a fool out of yourself by calling other people names here. As if name calling itself isn't immature too. A discussion should rely on the arguments put forward and not if you can think of something bad to say to put the other person down."
8,"And you sound very prejudicial, and I'm suspecting you're trying to fish for an [ad hominem](https://en.wikipedia.org/wiki/Ad_hominem) argument here. I'm all for debating the point but I'm not interested in adding personal backgrounds as an aspect to value mine or your arguments."
8,"See /r/learnpython/w/index at 'new to programming', the section 'new to python' would just be useful if you had at least intermediate knowledge of another language."
8,"See the official django tutorial and mozilla's django tutorial to get you started. You should then be able to develop the form+model driven parts of points 2, 3, 4, 5 and 6. Then I can recommend [this tutorial](https://wsvincent.com/django-user-authentication-tutorial-login-and-logout/) for point 1, altough for mobile OTP I would only research this once the rest is finished. Then I'm not sure where REST comes in here as that's for an API which is not particularly mentioned in your objectives."
8,"I think reality is trying to tell you that you appreciate certain background aspects that don't actually mean it automatically makes something 'better' for others too, but it's not getting through to you. Java is one of the best languages for obvious reasons apart from who made it, but you seem to think that this comes from by whom it was made and that other languages are then disqualified for the lack of the same history. It simply doesn't work this way. Languages are prone to many cultural influences over time and it changes their popularity and their practical use, it's also why we don't use Fortran or Cobol anymore even though they are largely if not completely developed by professional experts. And perhaps Java will fall out of common use too in favor of C#, Python and other languages people find more suited for their requirements. You can keep soapboxing that Java is the prime of 'expert' design but it will not change that outcome anyway, just like for any other properly designed yet impractical product."
8,"> java is a 1000x better language than python because it was designed by experts over many years

The whole idea that someone is an 'expert' and therefor has a better judgement and also produces better results is [appeal to authority](https://en.wikipedia.org/wiki/Argument_from_authority), because there is no actual decisive authority that can say that person A is an expert and person B isn't, nor that A being *seen* as an expert by some or many will automatically mean it can do a particular thing in its field better than any other experienced person. Getting a degree or some diploma in a field just means you're *qualified* in that specific regard, but doesn't say a lot about your ability compared to someone who didn't get that degree or got a different one. That's something I believe the whole Silicon Valley revolution proved because even some famous tech guru's and CEO's are college drop-outs and still designed better stuff (think Wozniak and the Apple II). 

Then saying that because language A is better than B because it has been designed by 'experts' is even a double fallacy, because even experts have developed shitty stuff. Basically most major tech disappointments or straight out failures we're *also* designed by experts, so what does having experts add exactly? We're there no experts left when Nokia missed the smartphone boom, or Kodak missed the digital camera revolution? Weren't it experts that developed Windows ME or the Galaxy Note 7? What about all the failed space projects, sometimes over stupid errors like the [Mars Climate Orbiter](https://en.wikipedia.org/wiki/Mars_Climate_Orbiter)?

I can fully agree that Java is better in certain aspects and Python is better in others (which comes from many specific reasons), but saying something that Java is 1000x better for just the people that designed is rather a false belief than a rational thought."
8,"    for i in range(num_col):
        f.seek(0)
        next(f)

woops, good thing you found and fixed that mistake of mine :) But let's fix this in a better way, because you're now reseeking and reparsing the file for every column and you have to do this again for the final write out (which your code is now lacking). A simple list would suffice to make a single copy of the csv-parsed file to RAM. I would also not open the output file until you're ready for it, just a matter of style to prevent bogus output files when the program crashes before writing.

    import csv

    file = 'users.csv'

    with open(file, 'r') as f:
        # one simple trick to use the RAM from now on
        mydata = list(csv.reader(f))
        
then I can use my original method too

    num_col = len(mydata[0])
    print(num_col)

For the column index group, I would always use a `set` when you need unique values and fast look up (used for the writing part). I would prefer to work with a collection of all the columns that have no data, and start by assuming that's all of them. The subsequent loop will just have to check every column per row to see if it has data, then remove it from the set, decreasing its size quickly.

    columns_with_no_data = set(range(num_col))
    for line in mydata[1:]:  # skip first line = header row
        for idx in columns_with_no_data:
            if line[idx]:
                columns_with_no_data.remove(idx)
    print(columns_with_no_data)

You could add a check for it still having any indexes to check,

    columns_with_no_data = set(range(num_col))
    for line in mydata[1:]:
        for idx in columns_with_no_data:
            if line[idx]:
                columns_with_no_data.remove(idx)    
        if not columns_with_no_data:
            break
    print(columns_with_no_data)

but I'm not sure how much it would add, because it will never help if there's even a single empty column index. But if there isn't, the loop without the `break` would effectively do

    for line in mydata[index_where_the_last_column_was_removed:]:
        pass

which will take milliseconds or so, even on large lists. Then once the filtering is done, we can start the writing part. I would prefer a comprehension to form the row-list for the writerow() to write, using `enumerate` to get the idx and value for each column, then checking if idx is not in the columns_with_no_data

        with open('tstOut.csv', 'w') as g:
            writer = csv.writer(g)
            for line in mydata:  # don't skip first line as we need to write the header row too
                row = [value for idx, value in enumerate(line) if idx not in columns_with_no_data]
                writer.writerow(row)

the same concept could be done with a set of all the columns *with* data of course (changing it to `if idx in columns_with_data`), but I usually prefer checking for the negative and not the positive."
8,"Next() does the same a `for` does repeatedly, call an iterator's `__next__()` method that produces the next 'item'. The difference is that `for` loop catches the `StopIteration` exception the iterator throws when it's finished, while with `next()` it would cause the program to crash if you don't catch the exception yourself. So if you mean to make the program forgiving for an empty file (as then the `for` loop will simply pass silently), use the `for+break` approach as it's much simpler than a `next()` with ` try/except` around it (which is basically reinventing the wheel too)."
8,"First things first: how would the computer know that a string value is a Fruit by using the only data set you have, which is a list of both fruits and non-fruits? Imho the only way to know this is by having a separate set of just the fruits, which I don't see in your code. The computer can't guess this.

Then your current implementation's issue is that your return statement is inside the loop, so for every row it first does

     for i in data:

which will assign 'Apple' to `i`, then compare it,

        if row[""Fruit""] == i:
            val = i 
        else:
            val = ""Not a fruit""

 and then directly do 

        return val

so you're effectively comparing everything to 'Apple'... And that does yield 'Apple' on the first row, which imho differs from the previous situation

         Fruit      Results
    0    Apple        Apple
    1     Pear  Not a fruit
    2   Orange  Not a fruit
    3     Bear  Not a fruit
    4  Chicken  Not a fruit
    5   Banana  Not a fruit
    6   Grapes  Not a fruit


What you mean to do is to see if `row['Fruit']` is part of a collection of fruit strings, which should use `in`

     def fruit_or_not(row):
        if row[""Fruit""] in my_fruit_list:
            return row['Fruit'] 
        else:
            return 'Not a fruit'"
8,"You're right I didn't consider that, the easiest approach is to use `next()` for this:

    num_col = len(next(mydata)[0])

but as a loop you didn't need the index+if anyway, just do

    for line in mydata:
        num_col = len(line)
        break"
8,"Please use a proper code block as shown in this gif: https://i.imgur.com/HT4Zz88.gifv

Your function `f` doesn't actually `return` anything so the result is always `None`."
8,"`x % n` is always in the range `0` to `n-1` inclusive, so `x % 5` will always return in a range `0` to `4` inclusive. Meaning that if you need a result in the range 5 - 10, `n` must be within `6` to `11` inclusive. With that knowledge it should be fairly easy to find the range for `x % n + m` too. If in doubt just try it with pen and paper for x in the range 0 - 15 for example."
8,"    num_col = 0
    for index, line in enumerate(mydata):
        if index == 0:
            num_col = len(line)

Isn't this is effectively doing the very same as?

    num_col = len(mydata[0])

!?

edit: but I spot the error now: the file is at its end by using your enumerate() loop, so after that you don't get any more lines from it. You need to seek to the start before creating a reader and start iterating again:

    file = 'users.csv'

    with open(file, 'r') as f:
        mydata = csv.reader(f)

        num_col = len(mydata[0])
        f.seek(0)
        mydata = csv.reader(f)
        for i in range(num_col):
            for line in mydata:
                print(line[i])"
8,You forgot to set `val` in case it *did* match `j`.
8,Did you call this or another file 'mtcnn.py' by any chance?
8,See the answers at [this SO post](https://stackoverflow.com/questions/21702342/creating-a-new-column-based-on-if-elif-else-condition).
8,"You use `find_all` for both the price and the title

    title = product.find_all('h5')
    price = product.find_all(class_ = 'price product-price')

​so then you get groups of both (which perhaps should have been called `titles` and `prices`) but you write those as just one row

    csv_writer.writerow([title, price])

if you want to write a row *per title/price combination*, actually loop on each item individually, combining them using zip()

    titles = product.find_all('h5')
    prices = product.find_all(class_ = 'price product-price')
    for title, price in zip(titles, prices):
        csv_writer.writerow([title.get_text(), price.get_text()])"
8,"Paste your regex on https://regex101.com/ and it will show you that there's is a problem with the `(` vs `)` there (called 'unbalanced'). If after fixing that the program still doesn't run, be more clear in what is going wrong, like by showing the full error output."
8,"> Is there maybe already a function for this in VSCode?

This. Most IDE's and proper editors (Notepad++, vim and its clones) already translate a tab into 4 spaces if that's how the tab is configured, like for vim I use

    set expandtab ts=4 sw=4 ai

and at least for Pycharm I know it's already configured for this by default.

> It just seems strange that fellow lazy-people like programmers decided that hitting a key 4 times instead of once is acceptable.

Lazy programmers are almost always macro'ing the sh*t out of everything so that wouldn't be a hurdle anyway, it's the non-lazy ones that are more likely to get obnoxious about such a trivial thing (see the online flame wars on tabs vs spaces for some real life examples). Also don't forget that most IDE's/editors include auto-indent, so if you type
    
    if something:

and hit enter, it automatically adds the spaces already. And it works both ways: the pain of fixing indentation shifts coming from incorrectly expanded tabs in a source tree for your project due tomorrow is often much worse than just implementing it right one time and forgetting about it afterwards."
8,"Portability. If you distribute a code snippet with spaces to other environments, there's no way that extra columns can suddenly appear as a column is a space and a space is a column. With tabs you can get different behaviour, so while one editor could translate a tab to 8 columns, another one could translate them to 4. This can give a lot of extra headaches if you want to merge or distribute code snippets. It's not that tabs are bad in an isolated environment though, that's why Python still supports them instead of spaces for indentation. Although industry wide the use of tabs is not preferred, and afaik only Makefiles are explicitly requiring tabs. The rest either supports them or not."
8,"Please use an actual code block, see this explanatory gif: https://i.imgur.com/HT4Zz88.gifv

Then in regard to your question can you show how the output looks now and how you want it to look?"
8,"First a set, then a list yes, to also remove the duplicates."
8,"A set is an unordered collection of unique items with an index based on the hash of each items. The last part makes checking if an item is in the set very quick regardless of the size of the set. It also allows mathematical operations like finding all items that are in set 1 but not in set 2 (difference) or in both (union) etc. So if this is what you're looking for, then `set()` is the tool to use. 

One common usage is to remove all the duplicates from a list (not literally, just to get a set with all the unique items from the list), because as mentioned all set items are unique. If you want to compare the frequency of items in both collections, you would only need to do this for the unique items, as otherwise you would just be repeating the same comparison."
8,"    for each in x

will pull each character from the string, so first it gets 'A', then 'p', then 'p' etc. If you put that in a list comprehension, 

    y = [each for each in x]

you will end up with a list of each character as a separate item, which is just a complicated way of writing

     y = list(x)

I'm not sure what else you would expect to happen here."
8,"The library's [main page](https://pypi.org/project/iexfinance/) even shows an example with a batch

    batch = Stock([""TSLA"", ""AAPL""])
    batch.get_price()

and as per the [docs on Stock](https://addisonlynch.github.io/iexfinance/devel/stocks.html#the-stock-object) it matches the description of the API doc you linked of 100 items max. You could for example use the `grouper` from [itertools examples](https://docs.python.org/3.7/library/itertools.html#itertools-recipes) to get chunks of 100 tickers at a time from your tickers collection."
8,"Add an empty line after your last print, then select from that extra line to the top. That should then include the newline character after the last print and thus 'press enter' by itself when you paste it."
8,"You can also just generate the characters based on the required length

    for i in range(7):
        for j in range(i):
            print(text[j % 3], end='')
        print()

or as a comprehension

    for i in range(7):
        print(''.join([text[j % 3] for j in range(i)]))"
8,"> (oftentimes with duplicates)

This can specifically be tackled by using a set of the collection, so 

    for ticker in set(tickers):

but other than that I'm not sure what you could improve without studying the possibilities of the API, like if there's something that could provide the information of 

- Stock
- its income statement
- its balance sheet

in less than three calls."
8,">  Should i install it through interpeter? 

Yes: https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html

> Is there any difference?

It lowers the risk of messing up your whole system by messing around with libraries in your specific project. It also allows you to work with different Python interpreters, so for example if you must use a Python 2 environment for a specific project (like for code you found on some old blog post).

> cant i use installed python files and not venv? 

You can but I would advise against it.

>  when i create a new file should i make it a project with its own separate vevn??

Yes, which is the default in Pycharm"
8,"Looks fine to me, just a typo at the end 'to' ->  'too'."
8,"This basically applies to any program since the invention of computers, that's why they need 'storage' to be able to hold state outside of a program's runtime environment. In practice you could write your data to storage files like [json](https://realpython.com/python-json/) or xml, or use Python's internal storage format [pickle](https://www.datacamp.com/community/tutorials/pickle-python-tutorial)."
8,"I'm not sure if you follow what a 'list' means in Python. Say you have three items

    a = 1
    b = 'test'
    c= 1.4

then creating a list from it

    l = [a, b, c]

is actually saving something in pseudo-code like

    List(object):
        items = [address_of_a, address_of_b, address_of_c]

In CPython (the 'regular one') this is done as a [vector](https://stackoverflow.com/a/3958322/11032845). So that list object takes some bytes in memory to save the *addresses* of those objects, not the objects themselves. Even if the objects are strings of 10 MB each, it still only saves those addresses which are 8 bytes each (on a 64-bit computer). Add some overhead of course but we're still talking *tens of bytes* here.

By modifying the list in-place, it might be that this size if kept relatively constant because it just has to move the memory addresses around in the vector, to get 

    List(object):
        items = [address_of_c, address_of_b, address_of_a]

as I said above, it might very well be that this happens in the same memory block, but it also might not be. In either case it doesn't matter because we're talking an extremely small amount of memory here (even smaller than a single page it can request from the OS, which is often 4 kB). As Python probably used some extra RAM on startup, it still has a more than enough working space RAM available for doing both in equal time, without needing to use extra RAM from the OS. 

So if it works exclusively in the same memory block isn't the question here, the question is wherther it needs extra RAM from the OS to do it, which is not the case:

    >>> import os
    >>> import psutil
    >>> process = psutil.Process(os.getpid())
    >>> print(process.memory_info().rss)
    13447168
    >>> import random
    >>> long_list = [random.random() for i in range(10**6)]
    >>> print(process.memory_info().rss)
    58949632
    >>> long_list.reverse()
    >>> print(process.memory_info().rss)
    58949632

But trying the `reversed()` option, so the not in-place one, you see the same:

    >>> with open('/tmp/tmpbla.txt', 'w') as fp:
    ...     for l in reversed(long_list):
    ...         _ =fp.write(str(l))
    ... 
    >>> print(process.memory_info().rss)
    58949632

so you see the difference in memory consumption is that small that Python doesn't need extra RAM in either case, so the use of in-place sorting in that regard is negligible."
8,"> But in python, everytime I hit f5

Can you be a bit more specific to what you mean there, because Python is a langue, and the default applications that ship with it (command line interpreter and the IDLE IDE) don't offer a 'clear all' through F5 (F5 is the 'run my code' shortkey in IDLE). So it might be you're using some other Python-based application like Jupyter Notebook, but I can't deduce this just by your description. Or do you mean that IDLE's F5 for you means 'redoing' everything?"
8,"`a` is coming out of the blue here, did you maybe forget to create the `a` list in the first place?

    a = []

then adding to a list is done using [.append](https://www.w3schools.com/python/ref_list_append.asp), not by assigning to an index (that's for modifying)."
8,"The key to modifying a list's value is to assign to `list_name[index]` instead of merely `append()`. Your friend for getting indexes with your values is in a for-loop is [enumerate](http://book.pythontips.com/en/latest/enumerate.html):

    namelst = [""John"", ""Rolf"", ""Scott""]
    for idx, name in enumerate(namelst):
        namelst[idx] = # statement to get initial here

note that I assign to the reference `name` and not `names` as each loop iteration will feature a single name from the list."
8,"That is outside Python's scope as Python just 'describes' what it does, which is converted to for example C in the regular Python interpreter. So while it could be that list mutation effectively uses the same memory space, the compiler might as well work with a new memory space and afterwards drop the original one. Basically, you don't know (or you would have to dive in its implementation), but it's *expected* to be less memory consuming then working with a copy, as most proper compilers do tend to work as optimal as possible in the regard of the operation. 

But don't forget that Python works by reference only, so a 'copy' is just a copy of the administration of the list, not of all the list items themselves, making the memory penalty of working with that is much smaller than it sounds. So in practice you would value CPU time over a tedious amount of extra RAM consumption and focus on getting the least amount of processing work."
8,"You open the file in text mode because you don't supply a mode argument. A binary, non-textual file like an image will probably contain values that can't be processed as text, thus throwing this error. Instead use `'rb'` as the second argument to `open()`."
8,"    a = isinstance(x, (float, int)) and not isinstance(x, bool)
    b = isinstance(y, (float, int)) and not isinstance(y, bool)

but I agree with K900_, you might want to consider another approach to what you are actually trying to achieve with this 'filter'."
8,"https://en.wikipedia.org/wiki/Side_effect_(computer_science)

> In computer science, an operation, function or expression is said to have a side effect if it modifies some state variable value(s) outside its local environment, that is to say has an observable effect besides returning a value (the main effect) to the invoker of the operation.

In simple terms you could say that it modifies something instead of (or in addition to) producing something new. As modification is usually less efficient (CPU wise) than creation, you would generally prefer a function that doesn't have side effects."
8,"I would not use command line arguments in the first place when the user isn't acquainted with using them. Instead just use the classic `input('question')` constructs as that often works fine with any user. In regard to the .exe not working I would focus on that separately, as for example try with a `--onedir` first to see if that makes a difference.

As sidenotes I would advise to follow [PEP8](https://www.python.org/dev/peps/pep-0008/), especially in regard to your variable naming. But also to use English names throughout, even though the only users will be non-English speakers. There's already a language barrier if you would want help regarding your program's implementation."
8,"    binaryList = binaryList.reverse()

`.reverse` reverses in-place, this is specicially mentioned in the [documentation on lists](https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types)

> The reverse() method modifies the sequence in place for economy of space when reversing a large sequence. To remind users that it operates by side effect, it does not return the reversed sequence.

So instead just call without reassignment

    binaryList.reverse()

or use the more commonly used [reversed()](https://docs.python.org/3/library/functions.html#reversed) as that is more efficient

    for i in reversed(binaryList):"
8,"> reddit won't accept tabbing for some reason)

Tabs aren't meant to be used anyway as they are archaic constructs. Reddit still supports code blocks trough adding 4 spaces before each line, but the new layout also supports starting a code block right from the editor, see this explanatory gif: https://i.imgur.com/HT4Zz88.gifv"
8,"I'm not sure what the problem is, if I paste your code on repl.it here https://repl.it/repls/QuickwittedSecondaryChapters and paste your commands after clicking Run then it outputs 4 lists

    Python 3.7.4 (default, Jul  9 2019, 00:06:43)
    [GCC 6.3.0 20170516] on linux
    29
    append 1
    append 6
    append 10
    append 8
    append 9
    append 2
    append 12
    append 7
    append 3
    append 5
    insert 8 66
    insert 1 30
    insert 6 75
    insert 4 44
    insert 9 67
    insert 2 44
    insert 9 21
    insert 8 87
    insert 1 75
    insert 1 48
    print
    [1, 48, 75, 30, 44, 6, 10, 44, 8, 9, 87, 75, 21, 2, 67, 12, 7, 66, 3, 5]
    reverse
    print
    [87, 75, 75, 67, 66, 48, 44, 44, 30, 21, 12, 10, 9, 8, 7, 6, 5, 3, 2, 1]
    sort
    print
    [1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 21, 30, 44, 44, 48, 66, 67, 75, 75, 87]
    append 2
    append 5
    remove 2
    print
    [1, 3, 5, 6, 7, 8, 9, 10, 12, 21, 30, 44, 44, 48, 66, 67, 75, 75, 87, 2, 5]"
8,"Set the SO_REUSEADDR flag on the socket before the bind

    serverSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

You also need admin privileges to bind to all interfaces, so be sure to run your code with sudo (mac/linux) or 'As Administrator' (windows). 

As a sidenote consider following [PEP8](https://www.python.org/dev/peps/pep-0008/) for your coding style."
8,"You can use the modulo operator `%` to calculate a value from any integer that's limited from 0 to whatever value you call `%` on minus 1. For example for `% 3` you get:

    >>> for i in range(20):
    ...     print(i % 3)
    ... 
    0
    1
    2
    0
    1
    2
    0
    1
    2
    0
    1
    2
    0
    1
    2
    0
    1
    2
    0
    1

so by using those values to index the string `'pyy'` you effectively get a circular index."
8,"Still no biggie, you could for example consider how a classic analogue counter like an odometer works. 

    for ten in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
        for one in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
            print(ten*10 + one)
    print(100) # assuming you still want that one too"
8,First option. A lot of questions on this sub come from people just diving in and then getting puzzled by very basic stuff.
8,"Ok so the first value is 0, 

    i = 0

the condition is that you didn't reach 101 yet (assuming that 'to 100' means inclusive), a loop based on a condition is a `while`

    while i < 101:

then the operation is adding 1. As you want to print the first value too, you print before you add

        print(i)
        i = i + 1

so the whole program is 

    i = 0
    while i < 101:
        print(i)
        i = i + 1

Was that so hard to think of yourself?"
8,That's why I advised to check out Automate The Boring Stuff. You might also want to check the section 'Tools for learning Python' on this sub's [wiki](https://old.reddit.com/r/learnpython/wiki/index) that includes a lot of practice websites.
8,Search this sub for 'looking projects' you get a long list of them. You could also check the trending github repositories https://github.com/trending?l=python
8,"You can use os.path.join to combine one or more path components

    full_path = os.path.join(r'c:\specific\directory\', file1)
    with open(full_path, etc)

In regard to argument passing from the command line I would advise to use [argparse](http://zetcode.com/python/argparse/). It's a bit more work to set up but much more dependable than ordered arguments with out any help text and such."
8,"> and I understand that i have to write something akin to int(input(Enter the...), 

That seems to be the correct approach, so use that to ask the variables of step 1. Then would you be able to perform the calculations of step 2?"
8,"And the file actually holds data still? Try a more debugging version

    with open(dbFile) as f:
        contents = f.read()
        print('file length', len(contents))
        lines = contents.splitlines()
        print('no. of lines', len(lines))
        joined = "" "".join(lines)
        db_ip_addresses = joined.split()
        print(db_ip_addresses)"
8,"split already produces a list, that's why your print out shows the `[]` around it... You just need to save it there and then

    db_ip_addresses = "" "".join(f.read().splitlines()).split()"
8,"What are you comparing the generated `num` to? Because if that's a string, you could use one of the [many ways to form a zero padded integer](https://stackoverflow.com/a/339013/11032845). If you're comparing it to an integer too, it already lost its zero padding, so the regular numeric comparison is fine (600 equals a PIN of `0600`)."
8,"There's a complicated way using bit flipping https://www.geeksforgeeks.org/subtract-two-numbers-without-using-arithmetic-operators/

or you could unpack 0xfe as a signed char to get -2

    >>> import struct 
    >>> struct.unpack('b', b'\xfe')[0]
    -2

so to use it as subtraction via adding a negative number

    n = n + struct.unpack('b', b'\xfe')[0]"
8,"Please fix your formatting, see this visual explanation: https://i.imgur.com/HT4Zz88.gifv"
8,"I don't see what's the question then, 

    n = n - 2

or what do you mean? To do it without that operator?"
8,"You can use float.is_integer

    x = input('give x')
    f_x = float(x)
    if f_x.is_integer():
        # do something 
    else:
         # do something else

Or you can multiply first as floats, then see if the result is an integer, if so do `int(result)`. But it's a bit hard to give the best solution without more detail of the actual calculation and what you're using it for."
8,"The only thing I know of 'reduction' is for matrices, see https://en.wikipedia.org/wiki/Reduction_(mathematics). Maybe you mean something else? Could you give an example perhaps?"
8,"This might help to understand them better: [Python List Comprehensions: Explained Visually](https://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/)

What you would normally use to loop on multiple iterables is `zip`. Also use `enumerate` to get both the index and the value(s) instead of range(len()) constructs.

    same = []
    for idx, item1, item2 in enumerate(zip(lst1, lst2)):
        if item1 == item2:
            same.append(idx)

and yes, as shown in the linked tutorial that could easily be translated to a comprehension as

    same = [idx for idx, item1, item2 in enumerate(zip(lst1, lst2)) if item1 == item2]"
8,"2.7 is the last and common Python 2 version, 2.7.0 turns out to be your python-marionette version. So if you reply '2.7.' please forgive me that I assumed you were talking about Python and not specifically the library. That's why I prefer a pip freeze to remove the risk of confusion. That being said you might want to try 2.8.0 to see if it makes a difference, it could be that your Firefox version is too new for your library's version. 

If that doesn't help would you be able to share the full error output that the program generates?"
8,"> Create a loop that counts from 0 to 100"". I can't figure out how to do it without range function 

One of the basic tools for thinking of your own implementation is to do it with pen and paper. If you start out with 0, what would you do to generate the following number (1), then the next one (2), etc etc? That's the operation you want to repeat. Then what do you do to prevent you continuing to 101 and further? That's the condition you want to monitor while the operation should be repeated. Those two are the ingredients for implementing this without a `range` function. 

Btw note that `range` just helps you with a constant interval integer repetition, so like 

    1 2 3 4 5
    1 3 5 7 9
    1 11 21 31 
    100 90 80 70

It doesn't help you with anything else. So if the assignment was

> Given a name and a list of guests in your hotel with their room numbers, find the room number of the given name. 

Range wouldn't have helped you either, you still need to implement your own implementation of a loop-until-you-find/reach-something"
8,"\1. You can save all the failing hosts to a second list

    failed = []

done in the exception handler

    except socket.gaierror:
        failed.append(line.strip())
         
Then do whatever you like with the failed hostnames in that list.

\2. You don't have to present just a filename to `open()`, it can be any path, like

        with open(r'c:\specific\directory\returned_hosts.csv', 'w', newline='') as r:

note the `r` in front of it to allow the use of the Windows `\`."
8,"I'm not asking your Python version, I'm asking the libraries you installed to use together with Python. Assuming you're just using `pip` you can do 

    pip freeze

and it will return a list off all installed libraries and its versions"
8,> Which versions of your libraries are you using?
8,Is this using selenium? Which versions of your libraries are you using?
8,"They replace the last line in your current snippet, because first it runs the argwhere() function as that line does, as well as print() after it."
8,"Just use an if/else statement? You can simply use the fact that an empty result is Falsey

    result = np.argwhere(a==float(input(""which number? "")))
    if result:
        print(result)
    else:
        print('not found')"
8,`else` isn't spelled correctly
8,"It's true that for Python you always need to pick a GUI library and then have to work through its quirks and limitations to get a GUI. You don't have it available natively as in Visual Basic, for which you have simplifications like AutoIT where building the GUI takes 2 minutes for a straightforward program. But that doesn't mean that there aren't easy to use GUI libraries available for Python like [pysimplegui](https://opensource.com/article/18/8/pysimplegui), it just takes more work to build it, nor that other languages don't have limitations on their own.

I wrote a simple 'version agent' program in AutoIt to post an executable's version to a webapp. The GUI was done in a flash, but getting the HTTPS request to work through some dev's personal library took a *lot* of time and still was very archaic (positional required arguments that have to be just right):

       $hw_open = _WinHttpOpen()
       _WinHttpSetTimeouts($hw_open, 5, 5, 5, 5)
       $hw_connect = _WinHttpConnect($hw_open, $url)
       $result = _WinHttpSimpleSendRequest($hw_connect, ""POST"", _WinHttpCrackUrl($url)[6], $WINHTTP_NO_REFERER, $Data)
       $status_code = Number(_WinHttpQueryHeaders($result, $WINHTTP_QUERY_STATUS_CODE))
       If $status_code == 200 Then

Yet on Python we all know that you can just do 

    import requests
    r = requests.post('myurl', json={'version': '1234'}, timeout=5)
    if r.status_code == 200:

and it just works (and I just wrote this from memory)... So yeah every language has its own pros and cons."
8,"I gather that you actually get

    SyntaxError: invalid syntax

with a `   ^` above it underneath the 

    import get-localtime

? Because that's a bit different than getting the actual error message you quote

> SyntaxError: invalid syntax pointing at the get-localtime.

Can you share the actual code of the file where you import it?"
8,Maybe check [this SO post](https://stackoverflow.com/questions/1970807/center-middle-align-text-with-pil)
8,"First of all you might want to incorporate some punctuation in your English writings, as now you wrote a couple of distinctive sentences as one long line of text. But as to which next steps to take I would advise to check Automate The Boring Stuff, but to get on the pro level you actually need to do what a pro (short for professional) does: write productive code. So either find a job (maybe check r/jobbit/) or projects that require you to code, or start working on open source projects if you don't need financial compensation."
8,"I'm not sure if you must transliterate this to 'the other language'. Just look for an implementation of integer to binary conversion, preferably by a library. In Python I would just have used 

    return bin(x).count('1')

as it's way less puzzling and the performance is even better

    In [11]: def my_dirty_one_bitcounter(x):
        ...:     return bin(x).count('1')
        ...:
    In [12]: def onebits(x, width=16):
        ...:     return len(list(filter(lambda x: x == ""1"", (str((x>>i)&1) for i in range(width-1,-1,-1)))));
        ...:
        ...:
    In [13]: %timeit onebits(256*255)

    7.93 µs ± 537 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

    In [14]: %timeit my_dirty_one_bitcounter(256*255)

    323 ns ± 33.8 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

altough I had to add list() to get this to work in Python 3, maybe that adds some penalty (didn't bother to see if this can be done better). But anyways your other language also probably has some easy way to get the binary representation of an integer and string counting would get the job done too."
8,"You could just make a single hybrid generator 

    def generate_order():
        parallel = len(sys.argv) > 1
        for i in range(3):
            yield print(f'Deploy Item {i}')
            if not parallel:
                yield print('Audit')
        if parallel:
            yield print('Audit')         

    def main():
        order = generate_order()
        for step in order:
            pass # to signify that you're not doing anything"
8,"> no matter what (unless I specifically use the sep function)

You seem to confuse 'by default' with 'no matter what'.

In any case I would rather suggest to use [string formatting](https://pyformat.info/) or [f-strings](https://realpython.com/python-f-strings/)

    print('Your gross pay is: ${}'.format(gross_pay)
    print(f'Your gross pay is: ${gross_pay}')"
8,"Fair enough, but using the completely random sequence of all characters would only simplify, not complicate the program (as you use an extra step to pick the character set). Also note that a lot of security holes arise in software because the programmer/admin originally reasoned ""It's only for this very unimportant case, this could *never* lead to something remotely dangerous"". So in practice I rather prefer a bit more security if it doesn't take that much extra work, just for that one case where you forget about it and it ends up in code that does have a risk (like when you would remove the need to change the password after the first login)."
8,"I don't know if you understood what I said above, I'll repeat with more explanation this time. If you have a dict and you keep setting strings to the same key in that dict, you just end up with the last value:

    >>> d = {}
    >>> for w in ['test', 'foo', 'bar']:
    ...     d['my_key'] = w
    ... 
    >>> print(d['my_key'])
    bar

So in that way you can't save multiple values as the same key in the dict. You could use a list as the value instead to which you append:

    >>> d = {}
    >>> for w in ['test', 'foo', 'bar']:
    ...     if 'my_key' not in d:
    ...         d['my_key'] = []
    ...     d['my_key'].append(w)
    ... 
    >>> print(d['my_key'])
    ['test', 'foo', 'bar']

this is what my original example does too, through a one-liner using setdefault

    >>> d = {}
    >>> for w in ['test', 'foo', 'bar']:
    ...     d.setdefault('my_key', []).append(w)
    ... 
    >>> print(d['my_key'])
    ['test', 'foo', 'bar']"
8,"If `m[1]` is equal every time, it will just update the entry for `results[m[1]]` in the dict. If you want to add to all the matches for `m[1]` it found, use a list for its value

    results.setdefault(m[1], []).append(m2)

I simplified the `""%s"" % m[2]` because it doesn't do anything other than `str(m[2])` would, but as this is coming from a regex then you would get a string anyway."
8,"Unless you're programming for microcontrollers with 256 bytes of RAM I wouldn't see the use in thinking about memory usage on that specific detail. And if you were, you would work with a lower level language like C and not Python. Just use whatever works best unless you have a very specific reason to limit the amount of memory used by a simple float rounding."
8,"You could use [random.randint](https://docs.python.org/3/library/random.html#random.randint) to pick from a range of values, so to get a x-coordinate and an y-coordinate based on the pixel ranges you provide. For clicking you could use for example [pyautogui](https://pyautogui.readthedocs.io/en/latest/cheatsheet.html#mouse-functions)."
8,It seems to infer that collatz() should be called on the original number and subsequently on the previous return value from that function. Otherwise it would be an endless loop obviously unless collatz() would have variable return values for the same input (which it does not).
8,"That's the point. An attacker just knows the entire collection of characters is all lowercase, all uppercase and 5 special chars, meaning 57 possibilities. The idea that some are letters and some not doesn't change anything, because they are just binary values to a computer. What would make a difference is if some characters are more likely to occur, because brute forcing can then be done by doing per characters

- try the special characters = 5 tries
- try the letters = 52 tries
    
and as the special characters have a chance of occurring 33% of each character, you will effectively lower the expected brute force time by having just up to 5 tries (on average 2.5) for 33% of the characters in your passphrase. Say you generate 'a$T%eaI@', there are 3 special characters in that password and it will just take a few tries for those characters to be found, leaving just 5 characters to be brute-forced in the 'classic' way of 57/2 = 28.5 tries per character. So you effectively get

    28.5^5 * 2.5^3  = 293,794,949 (rounded)

As the average amount of tries needed, while a completely random passphrase of 8 characters of 57 values will be 

    28.5^8 = 435,270,144,969

so that's an order of magnitude more tries! Of course this means the attacker needs to know of this 'flaw', but in general you don't even want to run that risk..."
8,"    y = -1*m

this doesn't rime with the chart showing `y = -y`."
8,"You reinvented the [`string` library's](https://docs.python.org/3/library/string.html) character collections:

    import string

    characters = [string.ascii_lowercase, string.ascii_uppercase, special]
    password = random.choice(string.ascii_lowercase)

then you have a slight insecurity in 

    random_set = random.choice(characters)
    random_character = random.choice(random_set)

because you select the sets with equal chance, the special characters `['$', '%', '*', '^', '@']` will be more likely to be chosen than the letters (as the chance for 'A' is 1/3 * 1/26 = 1.3%, while the chance for '$' is 1/3 * 1/5 = 6.7%!). The proper way to do this is to form a *single* collection of all the characters. 

    # special needs to be a string for this
    special = '$%*^@'
    characters = string.ascii_lowercase + string.ascii_uppercase + special

then pick just from that whole string

    random_character = random.choice(characters)
    
Also don't use archaic `+` forming of strings

    email_address = first_name.lower() + '.' + last_name.lower() + '@companyname.com'

instead use the f-strings you already use elsewhere, or use string formatting

    email_address = '{}.{}@companyname.com'.format(first_name, last_name).lower()"
8,"print_models isn't actually printing anything, it just appends all items in un_print to compeleted_models. You can do this without a function by doing

    completed_models.extend(un_print)

which will not modify un_print, thereby also removing the need of using a 'safety copy' of un_print for the original implementation. [docs on the various methods on built-in Python containers](https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types)"
8,"But finally would also be executed if the exception did occur right? Shouldn't it do something like

    def add(a,b):
        try:
            result = a+b
        except:
            print(""not an integer"")
        else:
            print(""add successful"")
            return result"
8,"By use of a for loop, you already 'pull' the values out of the `primes` list, so `x` is the actual prime number in the loop. The indexing done by `primes[x]` make no sense, you already have the value, you can just use `x` instead..."
8,"if primes is smaller than 10 items, x will eventually be larger than the highest index in the primes list."
8,"A simple print() statement before the tail/head evaluation

    def checkFlip(playerChoice):
      coin = random.randint(1, 2)
      print(playerChoice, coin)
      if playerChoice == str(coin):
        print(""its head's"")
      else:
        print(""its tails"")

reveals the culprit

    <function playerChoice at 0x7f3244106c20> 1

the issue is that you used `playerChoice` both for the argument to `checkFlip` 

    def checkFlip(playerChoice):

as for an actual function earlier on

    def playerChoice():# get players choice

Sidenotes: 

- please use proper formatting to help us help you, see [this gif](https://i.imgur.com/HT4Zz88.gifv) that shows where to click. 
- it's advised to follow [PEP8](https://www.python.org/dev/peps/pep-0008/) for your formatting and naming styles"
8,"Good point, I did overlook that one. Then it may be more practical to just have two print statements in an if/else instead of formatting the appropriate parts."
8,"My point was not that a condition isn't possible in a list comprehension, my point is *the way* you formed it.

> I'm not really sure if you really comprehend (ha) **how** these should be written,

The *how* was my point, that's why I linked the tutorial."
8,"I'm not sure which code you're running but with a simple test it really doesn't work with that syntax 

    In [9]: SrchResult = re.search(""^(([0-9])|([1-9][0-9]))$"", '15')
    In [10]: SrchResult.group()
    Out[10]: '15'
    In [11]: [for i in SrchResult.group() if i == True: SrchResult.group()+""_1""]
    File ""<ipython-input-11-9f716520578d>"", line 1
    [for i in SrchResult.group() if i == True: SrchResult.group()+""_1""]
    ^
    SyntaxError: invalid syntax"
8,"You have a loose `'` in the os.path.join() argument

    ...    os.path.join('letnumsplit[0]\\letnumsplit[1]  ....
                        ^---- here

 but also an if-claused statement in your comprehension?!

    [for i in SrchResult.group() if i == True: SrchResult.group()+""_1""]

I'm not really sure if you really comprehend (ha) how these should be written, maybe check [Python List Comprehensions: Explained Visually](https://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/) first?

Overall I would advise to work on separate lines with your statements instead of cramming everything on one line, it really helps no one but it does give headache's to both you and the people who try to help."
8,See the resources in this sub's wiki /r/learnpython/w/index
8,When I run it like this https://repl.it/repls/WoefulPaltryOpengroup it seems to work. Hard to say if that's the exact code you're using because you didn't format it properly.
8,"Looks pretty decent. I would opt for objectifying the 3D attributes too. So instead of a flat list use something like [this 3D vector class](https://www.geeksforgeeks.org/python-implementing-3d-vectors-using-dunder-methods/) per attribute, because then you can do stuff like

    def calc_vector_planet_to_sun(self, vec2):
        """""" Takes the suns location as vec2 and returns the vector of the object towards the sun.
            Is used in self.calc_vector_towards_sun.
        """"""
        return vec2 - self.location

and 

    def calc_vector_towards_sun(self):
        """""" Returns the direction of the space object towards the sun
        """"""
        top = self.calc_vector_planet_to_sun(self.sun[""location""])
        mass = self.sun[""mass""]
        factor = (mass * self.G * self.D_TIME) / (self.calc_vector_length(top))**3

        return top * Vector(factor, factor, factor)

and 

    def calc_new_position(self):
        """""" Calculates the new location of the object.
        """"""
        vel_planet = self.calc_velocity_planet()
        mov_towards_sun = self.calc_movement_towards_sun()
        return self.location + vel_planet + mov_towards_sun

and of course also simplify the update
    
    def update_obj(self):
        """""" Updates self.location and  self.direction of an object
        """"""
        new_position = self.calc_new_position()
        new_velocity = self.calc_new_velocity()

        self.location = self.calc_new_position()
        self.velocity = self.calc_new_velocity()

so removing the need to calculating on each axis specifically, which is also slightly re-inventing the wheel."
8,What's the purpose of `zip` in `list(zip(errorjoinmpls01))`?
8,"Specifically use the length check to determine to use either `are` or `is`:

    if len(langs) > 1:
        verb = 'are'
    else:
        verb = 'is'

or in a simplified form

    verb = 'are' if len(langs) > 1 else 'is'

then put it in the string and continue with the rest

    verb = 'are' if len(langs) > 1 else 'is'
    print(name.title(), '\'s', 'favourite languages {}:'.format(verb))
    for lang in langs:
        print('\t', lang.title())

I would employ the formatter for that whole line while you're at it. Also it's better to use `""` as the outer quotes when you want to use `'` as that saves the need to escpae them

    verb = 'are' if len(langs) > 1 else 'is'
    print(""{}'s favourite languages {}:"".format(name.title(), verb))
    for lang in langs:
        print('\t', lang.title())

More info on string formatting https://pyformat.info/"
8,"Btw your prime sieve is a bit inefficient, you don't need to continue the loop once the first `i % j == 0` is found, so you can do

        prime = True
        for j in range (2,i):
            if i%j == 0:
             prime = False
             break
        if prime:
            primes.append(i)

which also opens the possibility of using `else:` on the `for` to cater the case when `break` was never called, losing the need for the `prime` flag.

        for j in range (2,i):
            if i%j == 0:
             break
        else:
            primes.append(i)"
8,"You have a `()` problem on the `if` expression inside that loop. First thing to fix is to simply not use outer `()` in an `if` as they are redundant in Python (unlike C or javascript), then only use `()` when needed. So 

    if i%j == 0:

instead of 

    if((i%j) == 0):

and in the problematic part

    if n % primes[x] == 0 and primes[x] >= GPF:

as you don't even need any `()` there, a comparison operator (`==` and `>=`) will always come last."
8,https://realpython.com/read-write-files-python/
8,"The basic thing you're missing is that many modern webpages use AJAX requests, separate web requests that are coming from active content on the page (javascript). The browser basically downloads the 'shell' of the page as html, parses it, finds all kinds of <link> and <script> tags that link to stylesheets and .js files, downloads those, processes them and then the magic happens. All this isn't happening when you just parse the original webpage with BS, you then either need to run your custom JS engine through for example PhantomJS (hard) or run a regular browser and pull the content from it through for example selenium (much easier). See for example this tutorial https://automatetheboringstuff.com/chapter11/"
8,I never used it in the 5 years of my Python endeavors.
8,"You can't go back in interpreter mode... You can instead write your code in a file, then run the file. See https://www.youtube.com/watch?v=hFhiV5X5QM4"
8,"If someone asks you

> How old are you?

Do you answer

> How old are you?

Or do you answer in some number, representing your age in years? Because now you type the question again for some reason, while idea is that you type the age, so maybe `43` or `15`..."
8,"Np, next time please be clear on your end goal. Asking how to get `null` in your JSON output gives a lot less confusion than asking how to 'remove some characters in the last position'."
8,"    total = 0
    while True:
         number = int(input(""Enter a Number""))
         if not number:
             break
         total += number
    print(total)"
8,"If you want the actual JSON `null` entity use the Python `None` entity instead of a string `'null'`.

    body = ['1232832382n2n32n32n832', 2555,'string3','string',8, None]

also documented [here](https://docs.python.org/3/library/json.html#json.JSONEncoder) and also shown in the first example at the top of that page."
8,"[docs on any() function](https://docs.python.org/3/library/functions.html#any)

> Return True if any element of the iterable is true. If the iterable is empty, return False.

So the `while` loop runs as long as `any` finds a True-thy value in the generator expression between its `()`:

    x in my_string for x in brackets

Checking all strings in `brackets` to be present in `my_string`. So combined with `any` it's effectively doing

    def f(brackets, my_string):
        for x in brackets:
            if x in my_string:
                return True
        return False
    
    while f(brackets, my_string):"
8,"If you use `input()`, it then waits until you enter a line of text that will then save to a variable, `myName` in this case. So instead of typing a new python statement, it expects you to enter something to store in that variable, like 'Andrew'."
8,"Eh those are in that list. Maybe try HackerRank but that's on quite a high level because it's targeted at headhunters who look for qualified programmers, it's not meant as a conceptual teaching website."
8,"If you mean you want to have x tables of 1 to 12, you also need an outer loop on `range(1, table+1)`.

    highest_table = int(input('Which times table do you wish to see?'))
    for table in range(1, highest_table+1):
        for count in range (12):
            print(count+1, 'x', table, '=', table*(count+1))

btw you might want to look into [string formatting](https://pyformat.info/) to form a string to print"
8,"Not sure if the Indian price is always that low, but the 10 USD that's often shown as a 'bargain' is the *actual* price. They sell courses for that price point, the trick is that they make it look like they have a sale going on (all the time)."
8,"Try with first checking the input to be valid

    val = input(""enter your age"")
    if not val.isdigit():
        print(val, 'not a valid number')
    else:
        age = int(val)
        rest of code

Btw you have a bit of a redundancy in your if's as you don't emply elif and else. I would make it like

    if age < 3:
        t = 4
        print(""it costs"" , t)
    elif age < 12:
        t = 10
        print(""it costs"" , t)
    else:
        t = 15
        print(""it costs"" , t)

then again there's no real point in having the same print statement 3 times, you can just do

    if age < 3:
        t = 4
    elif age < 12:
        t = 10
    else:
        t = 15
    print(""it costs"" , t)"
8,"Partial string matching from the front is excellent for tree-based indexes, so basically selecting in groups by the first letter, then the second, then maybe the third thus making hundreds to thousands of groups to select on instead of 80.000 items to individually process linearly. A SQL table is tailored for this, if you create an index on the column that you want to search on. See for example [here](https://pythontic.com/database/sqlite/create%20index) for sqlite, also consider that sqlite supports a memory table by providing `:memory:` as the target instead of a filename in `sqlite3.connect()`."
8,"You need to actually save it to a csv file, see https://realpython.com/python-csv/"
8,See this sub's wiki http://www.reddit.com/r/learnpython/wiki/index section 'Tools For Learning Python' it has a lot of practice websites.
8,This is really impossible to answer without seeing the error output and the actual code. How would we be able to know why it stops after line 23 without even knowing what's on that line...
8,"For some reason a lot of beginners build if/elif/else constructs for one property they're testing, like

    if something:
    
    elif not something:
   
    else:

but `not something` is redundant, because if you even reach that `elif` part, `something` was False. So you don't need

    if dr >= 100:
        if dr is at or above 100
    elif dr < 100:
        if dr is below 100
    else:
        never reached so you just use pass as you don't know what to do

you just need

    if dr >= 100:
        if dr is at or above 100
    else:
        if dr is below 100

as `else` is the literal case your `if`was False, so in binary cases (dr being below 100 or not) you just need `if/else`. `elif` is only necessary if you have a *different* property to test after the original one.

In regard to the string evaluation: don't use `int` directly around an `input()` call. Just use `input`, then use `.is_digit()` as suggested by No_Couple to check if the string is valid for `int()` or not."
8,"There's no easy answer, see the long list of options [here](https://stackoverflow.com/a/11822850). I would personally go for chunked download (stream=True) as then you can leave the loop intermittently."
8,"Please observe the documentation https://docs.python.org/3/library/sqlite3.html 

> Usually your SQL operations will need to use values from Python variables. You shouldn’t assemble your query using Python’s string operations because doing so is insecure; it makes your program vulnerable to an SQL injection attack (see https://xkcd.com/327/ for humorous example of what can go wrong).

you should instead provide the values as a separate tuple and use `?, ?, etc` in the query as a placeholder. Also no need to use `;`.

    # Larger example that inserts many records at a time
    purchases = [('2006-03-28', 'BUY', 'IBM', 1000, 45.00),
                 ('2006-04-05', 'BUY', 'MSFT', 1000, 72.00),
                 ('2006-04-06', 'SELL', 'IBM', 500, 53.00),
                ]
    c.executemany('INSERT INTO stocks VALUES (?,?,?,?,?)', purchases)"
8,Then would you mind sharing your code instead of just the objective (also note the rules in the sidebar)
8,What have you got so far? Do you know how to get the lines from the file? Do you know how to connect to your SQL database? Do you know how to perform queries on it?
8,"I was mistaken, as `x` is the horizontal index (logically as x is also the default horizontal axis coordinate), checking for `x < len(grid)-1` is effectively checking for being on the last *column*. But why this is needed is demonstrated by the second part of the `and` expression

    search(x+1, y)

meaning it will check on the spot x+1 (next column), y (same row) = one on the right. If you're already on the last column, there's nothing on your right. To translate the other conditions too

	        or (y > 0 and search(x, y-1))

if not on the first row, check on the row before it, same x (same column) = one above

	        or (x > 0 and search(x-1, y))

if not on the first column, check on the column before it, same y (same row) = one on the left 

	        or (y < len(grid)-1 and search(x, y+1))):

if not on the last row, check on the one after it, same x (same column) = one below"
8,What's the point of this vs just writing regular code? What is the idea behind building this dynamically?
8,os.walk would come to mind https://stackoverflow.com/a/13068033
8,The problem with zero-based indexing is that the last row will have the index of the grid's length - 1. So `x < len(grid)-1` is effectively checking for not being on the last row.
8,Ah you're right thanks.
8,"Mind you that even if you want to keep using the original list, extending is more efficient

    a_list.extend(range(1,15))

than using the loop."
8,"> and not recognised by anything other than Jupyter notebook. 

That's a bit of the idea, the magic of a jupyter notebook is that it uses a browser to render the graphics. Something you can't do in a cmd window which is entirely text based."
8,"You reply with a typo correction and you ask 

> did you understand the problem

while he's giving the correct answer. so you're focusing on two issues *he* seems to have while not focusing on the help he's giving *you*."
8,"because you can't items to a list just by doing

    my_list(something)

you can either use a for loop

    for item in range(1, 15):
        a_list.append(item)

or simply create a list through its constructor

    a_list = list(range(1, 15))

or as a comprehension

    a_list = [item for item in range(1, 15)]

but that's effectively the same as the `list(range(1,15))` approach"
8,I recommend [this approach](https://stackoverflow.com/a/5910530)
8,"Get the dict as the first item in the list

    full_dict = my_list[0]
    
create a new dict

    end_dict = {}

loop through the items in the dict and only add to end_dict if it is in a group

    for k,v in full_dict.items():
        if k in ['LogName', 'Source', 'EventId', 'EntryType', 'Message', 'Category', 'ComputerName', 'RawData']:
            end_dict[k] = v

or simplified as a comprehension

    keys_to_keep = ['LogName', 'Source', 'EventId', 'EntryType', 'Message', 'Category', 'ComputerName', 'RawData']
    end_dict = {k: v for k, v in my_list[0].items() if k in keys_to_keep}"
8,"What should be the format of your offsets file? Say it found the sequence at 0x33, 0xafee35 and 0x242244 should it look like

    0x33
    0xafee35
    0x242244

or something else? As in text or just bytes? And how much padded in the latter case?

> As well as that, I need it to print the offsets in hex, and they print in decimal. 

Just google 'python print hex', it's one of the most common things asked and really not hard to research"
8,[What are type hints](https://stackoverflow.com/questions/32557920/what-are-type-hints-in-python-3-5)
8,"He's right, you don't need `.member` you can also do classic `[key]` lookups

    china = countries_population[countries_population['Country Name'] == ""China""]

Talking about 'understanding' here vs nitpicking on typos."
8,"The key is not to work in completely isolated cases, to steer you to the solution here:

- first calculate the 0-40 part
- is there's something left, calculate the 41-50 part
- if there's something left, calculate the 51-168 part
- sum all three

So just a series of a few calculations, not depending on the starting value.

Btw you don't need to do

    if x > 2:
        if true
    elif x < 2:
        if not

just do

    if something:
         if true
    else:

because if the user did enter a value between 0 and 168, the 

    elif number1 >= 40 and number1 < 168:

is always True, so what's the point of having another `if` there?

    number1 = int(input('Enter your number:\n'))
    if number1 < 0 or number1 > 168:
        print('Your number is INVALID (Your number must been between 0 to 168)')
    else:
        calculate"
8,Just a shot in the dark but have you also worked through one or two regular Python tutorials to understand the basics of the language?
8,Can you fix your formatting? See here https://i.imgur.com/HT4Zz88.gifv
8,"That would suggest that you didn't import it, which your (if you don't mind my bland opinion) archaic tutorial does using 

    from tkinter import *"
8,"`type(class_name)` and  `class_name.__class__.__name__` are basically the same thing. But you're overlooking something here: VerticalDrill *is* a class right? Just like you are a Human, but a Human is a class. So if you have a person Bob and you do

    print(type(bob))

or

    print(bob.__class__.__name__)

you get `Human`, makes sense. So they are meant to get the class *from an object*, while what you are trying to do now is

    print(type(Human))
    print(Human.__class__.__name__)

to return `Human` from a class `Human`. Why would it? Because Human is a class, not an object, so the Human class *is* a `type` (something an object like Bob can be be). So what you want is not to first get *the class of Human* by doing `Human.__class__` to then get `__name__` from, you want to get the `__name__` from the `Human` directly, because it already *is* a class:

    print(Human.__name__)

so in your case

    function_name = class_name.__name__"
8,"You use `str()` in your code for some unclear reason while the tutorial is using StringVar(), which is the kind of object that would support `.get()` https://i.imgur.com/KvM35yd.png"
8,What is the problem with just writing your story in one clear post?
8,I'm afraid we can't really help just by one line of code. Please show the tutorial that is showing this and the full code of your program.
8,"Why not use a return value?

    def data_base():
        while True:
            command = input('What action would you like to perform next? ').lower()
            if command_shell(command):
                return True

but efmccurdy is right, this can't ever return anything but True unless the program crashes."
8,Can you explain in more detail what files you currently have and what the program should do? As in how would you perform the task by hand?
8,"Put them in a dict? Correcting plural to singular

    for player in root.findall(""player""): 
        players_dict[borndate] = player

then iterated on the sorted form of the dict

    for bdate, player in sorted(players_dict.items()):
        # print the player"
8,"You are brute forcing something that doesn't need to have all possibilities checked in the first place. The only thing you're looking for is all the combinations where 

    if inputfile.split('&')[0] == watermark.split('&')[1]:

meaning that when you parse the dir listings you could save the filenames as linked to their specific identifier, you can simply iterate on those.

    inputpdf = {}
    watermarkpdf = {}

    print(""Overlaying mailmark to PDFs"")
    # append lists of input pdfs & watermark pdfs
    
    # note that you are iterating on each FILE, not FILES
    for filename in os.listdir(original_files):
        if filename.endswith('.pdf'):
            inputpdf[filename.split('&')[0]] = filename
    for filename in os.listdir(mailmark_files):
        if filename.endswith('.pdf'):
            watermarkpdf[filename.split('&')[1]] = filename

    # merges input pdf with watermark pdf if file names match
    for prefix, watermark in watermarkpdf.items():
        try:
            inputfile = inputpdf[prefix]
            watermark_pypdf2(f'{original_files}/{inputfile}',
                             f'{mailmark_files}/{watermark}',
                             f'{output_dest}/{watermark}')
        except KeyError:
            pass  # or do something if there's a mismatch"
8,"We see BlackJack a lot here, it's a good way to learn both UI and object oriented programming. If you're looking for something slightly simpler you could start with Rock Paper Scissors, then Hangman. Tic tac toe is a common one too, it's not that hard conceptually but is easily written in a too complicated way, that's also a good thing to learn how to avoid.

Also [this section](https://old.reddit.com/r/learnpython/wiki/index#wiki_tools_for_learning_python) in the wiki links a lot of exercise sites with simple coding puzzles."
8,"I'm not sure how your question relates to zip files, and also what 'of the N files' means. To get the files in a folder use os.listdir, then see basically any [file writing tutorial](https://www.pythonforbeginners.com/files/reading-and-writing-files-in-python) on how to write text to a file. I personally prefer `print` with its `file=` parameter as it will also write a newline at the end (bringing each string to a new line).

    import os
    with open('files.file', 'w') as fp:
        for f in os.listdir():
            print(f, file=fp)

but you often see `fp.write` with a concatenation for the newline

    import os
    with open('files.file', 'w') as fp:
        for f in os.listdir():
            fp.write(f + '\n')

then to filter on the filename

    import os
    with open('files.file', 'w') as fp:
        for f in os.listdir():
            if f.endswith('.txt'):
                print(f, file=fp)"
8,"This is what I would expect to happen if you didn't close your socket properly on some previous run, like when an exception happened. That's why it's advised to use `with` blocks instead of manual `close()` calls, see the [first example in the docs](https://docs.python.org/3/library/socket.html#example)."
8,Set the socket to SO_REUSEADDR https://stackoverflow.com/a/4466035
8,"This url is for the documentation page, it's not an actual json data feed. See the urls on the right for those."
8,"> But wouldn't running pip install mido in cmd install it on the system's python?

Yes, but you normally want to keep your system's python as 'clean' as possible and install your particular libraries per-project.

> Also I can run it on the system's python, but only if I drag the file to the executable itself

Then that suggests the python in your system's PATH variable is different from the python you drag the file to."
8,"I would put back the mode='rb'. If it then says 'bytes' object has no attribute 'read' then use

    xls = xlrd.open_workbook(file_contents=file)

but afaik using a mode parameter will return a file object"
8,"You can provide a full path to which file you open, so

    with open(r'd:\downloads\{}'.format(filename), 'wb') as fp:
        # use fp to save download to

or you can change the current directory first

    import os
    os.chdir(r'd:\downloads')

after which an opened file (using a relative path or just a filename) will be stored in that folder."
8,"Xlrd also supports to get data instead of a filename, using the file_contents parameter:

> file_contents – A string or an mmap.mmap object or some other behave-alike object. If file_contents is supplied, filename will not be used, except (possibly) in messages.

So then do something like

    xls = xlrd.open_workbook(file_contents=file.read())"
8,"Pycharm creates a virtualenv per project by default, so when you run your script as a program outside of Pycharm, you need to activate your virtual env instead of running the system's python that doesn't have mido installed. You might then want to consider adding pyinstaller to your project to generate .exe builds of your program as then it provides the needed libraries inside the .exe without relying on the environment."
8,"The backend part could easily be done in Python, use any common framework (bottle, flask, django). But then I don't understand why you describe your gameplay if you're talking just the backend."
8,"Browser-based and Python is a hard combination to get working. There are frameworks like [Brython](http://brython.info/static_doc/en/intro.html?lang=en) that allow you to run Python code in the browser, but you are effectively running Javascript that Brython is generating for you. In practice most people simply use Javascript for a browser-based game, optionally with a game framework like gdevelop."
8,"I would just give the url to ffprobe, simple as that

    W:\ffmpeg-4.0.2-win64-static\bin>ffprobe https://thumbs.gfycat.com/EdibleElderlyAlbertosaurus-mobile.mp4
    ffprobe version 4.0.2 Copyright (c) 2007-2018 the FFmpeg developers
      built with gcc 7.3.1 (GCC) 20180722
      configuration: --enable-gpl --enable-version3 --enable-sdl2 --enable-bzlib --enable-fontconfig --enable-gnutls --enable-iconv --enable-libass --enable-libbluray --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libopus --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libtheora --enable-libtwolame --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libzimg --enable-lzma --enable-zlib --enable-gmp --enable-libvidstab --enable-libvorbis --enable-libvo-amrwbenc --enable-libmysofa --enable-libspeex --enable-libxvid --enable-libaom --enable-libmfx --enable-amf --enable-ffnvcodec --enable-cuvid --enable-d3d11va --enable-nvenc --enable-nvdec --enable-dxva2 --enable-avisynth
      libavutil      56. 14.100 / 56. 14.100
      libavcodec     58. 18.100 / 58. 18.100
      libavformat    58. 12.100 / 58. 12.100
      libavdevice    58.  3.100 / 58.  3.100
      libavfilter     7. 16.100 /  7. 16.100
      libswscale      5.  1.100 /  5.  1.100
      libswresample   3.  1.100 /  3.  1.100
      libpostproc    55.  1.100 / 55.  1.100
    Input #0, mov,mp4,m4a,3gp,3g2,mj2, from 'https://thumbs.gfycat.com/EdibleElderlyAlbertosaurus-mobile.mp4':
      Metadata:
        major_brand     : isom
        minor_version   : 512
        compatible_brands: isomiso2avc1mp41
        encoder         : Lavf58.9.100
      Duration: 00:00:38.60, start: 0.000000, bitrate: 579 kb/s
        Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 640x296, 576 kb/s, 30 fps, 30 tbr, 15360 tbn, 60 tbc (default)
        Metadata:
          handler_name    : VideoHandler

then for parsing the output you could instead use json output and show_streams

    W:\ffmpeg-4.0.2-win64-static\bin>ffprobe https://thumbs.gfycat.com/EdibleElderlyAlbertosaurus-mobile.mp4 -v quiet -print_format json -show_streams
    {
        ""streams"": [
            {
                ""index"": 0,
                ""codec_name"": ""h264"",
                ""codec_long_name"": ""H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10"",
                ""profile"": ""High"",
                ""codec_type"": ""video"",
                ""codec_time_base"": ""1/60"",
                ""codec_tag_string"": ""avc1"",
                ""codec_tag"": ""0x31637661"",
                ""width"": 640,
                ""height"": 296,
                ""coded_width"": 640,
                ""coded_height"": 304,
                ""has_b_frames"": 2,
                ""pix_fmt"": ""yuv420p"",
                ""level"": 30,
                ""chroma_location"": ""left"",
                ""refs"": 1,
                ""is_avc"": ""true"",
                ""nal_length_size"": ""4"",
                ""r_frame_rate"": ""30/1"",
                ""avg_frame_rate"": ""30/1"",
                ""time_base"": ""1/15360"",
                ""start_pts"": 0,
                ""start_time"": ""0.000000"",
                ""duration_ts"": 592896,
                ""duration"": ""38.600000"",
                ""bit_rate"": ""576803"",
                ""bits_per_raw_sample"": ""8"",
                ""nb_frames"": ""1158"",
                ""disposition"": {
                    ""default"": 1,
                    ""dub"": 0,
                    ""original"": 0,
                    ""comment"": 0,
                    ""lyrics"": 0,
                    ""karaoke"": 0,
                    ""forced"": 0,
                    ""hearing_impaired"": 0,
                    ""visual_impaired"": 0,
                    ""clean_effects"": 0,
                    ""attached_pic"": 0,
                    ""timed_thumbnails"": 0
                },
                ""tags"": {
                    ""language"": ""und"",
                    ""handler_name"": ""VideoHandler""
                }
            }
        ]
    }

to call it from python I would suggest to use [subprocess.run()](https://docs.python.org/3/library/subprocess.html#subprocess.run), or .check_output if you want the code to be Python 3.0-3.4 compatible."
8,"Have you checked http://www.gilisoft.com/free-video-watermark-removal-tool.htm ? Because it can do batch video processing too

> Batch Processing Videos
>
> If you have lot of videos (even different video formats) need to remove watermarks, this tool also can help you batch processing the videos."
8,"> ,but it does not work, simply flashing a terminal.

Important note from an advanced programmer (and support engineer): don't say that something doesn't work because it doesn't do what you expect it to do. It *does* work, but by default a terminal window shuts itself down if there's nothing to wait on at the end. You could add a last line to wait on input

    input('press enter to continue')

but this will not solve the problem that when you have a syntax error and thus an exception from the interpreter, it will close just as it does now. You can either do

- run a cmd first, then run the script from that session. Cmd supports drag&drop, so when you first type `python ` then drag the file into the window, you get something like `python ""c:\path\to\your\file.py""`. When you run it then, the window will remain open
- use an editor and enter a proper execution command, like for Notepad++ you can do `cmd /k python -i ""$(FULL_CURRENT_PATH)""` which will then by pressing F5 launch a cmd for you with python and the file you're editing.
- use an IDE as these are meant to edit code in and run it afterwards. Python ships with the very basic IDLE, slightly more advanced IDE's are PyDev and Thonny and there are advanced project-oriented IDE's like Pycharm Edu and VSCode. All of these are free"
8,"string.printable is a *reference* of a string by itself, so you don't need to use `''` around it. Just like you do

    name = 'Bob'
    print(name)

to print 'Bob' while

    print('name')

would print 'name'"
8,Not really a Python question but more of a video editing one. See for example [this quora answer](https://www.quora.com/What-is-the-way-to-remove-watermark-from-a-video)
8,Maybe start with https://automatetheboringstuff.com/chapter11/ to understand a bit more what you're doing instead of trying to get a blindly copy/pasted script to work?
8,">  For instance, I want to know the video size (these video sizes are frequently weird): https://thumbs.gfycat.com/EdibleElderlyAlbertosaurus-mobile.mp4

This is already a direct link to the mp4 content, so there is no meta data or ajax requests to check. I'm talking about the page that is showing the content, as that *could* know the size beforehand. But just as well doesn't, as it wouldn't matter to the page either, it just puts a <video> element with an url to the content and the browser will take it from there.

> My problem with that is I'm constantly getting errors with cv2.VideoCapture when I download a small amount. I've had to download multiple megabytes multiple times before cv2.VideoCapture reads the video size without crashing.

Ok but you're basicaly working around a very specific problem in a very cumbersome way (having to dig into the html/ajax landscape) that could also be solved in various other ways. For example you could see if you could forward the content to ffmpeg instead (or its side utility ffprobe) or maybe mediainfo."
8,"You left in a `s` after your function parameter's name, you are providing a **code**  and not **codes**, but as your outer dict is called area_codes too, you lose that reference inside the function. I'm also not sure why you are assigning to `new_area_code` too, it serves no purpose.

    def phone_number_generator(area_code):
        area = random.choice(area_codes[area_code])
        group = random.randint(0, 999)
        trail = random.randint(0, 9999)

        return f'{area}-{group:03}-{trail:04}'

Or better said you are providing a **state** and the random.choice selects an **area code**, not just an **area**.

    def phone_number_generator(state):
        area_code = random.choice(area_codes[state])
        group = random.randint(0, 999)
        trail = random.randint(0, 9999)

        return f'{area_code}-{group:03}-{trail:04}'"
8,"You can use random.sample to get a randomly picked and unordered subset of a collection, which may also be a range() object. 

    x = 53
    while True:
        pick = random.sample(range(1, x), 4)
        if sum(pick) == x:
            break
    result = pick"
8,"Psutil can do this, see https://stackoverflow.com/questions/24136733/find-if-process-is-running-in-windows-psutil"
8,"You say

    print('Wrong Username. Program terminated.')

but you don't actually terminate the program, so the program continues and does *another* check for the username

    if username == 'Evan' :
        password = input()
        if password == 'Great' :
            print('Additional identification confirmation required.')
        else:
            print('Wrong password. Program terminated.')
     
so if the username doesn't match again, `password` is not set.

It seems like you forgot to add `sys.exit()` at the spots where the program should terminate.

Btw for this kind of cases use http://www.pythontutor.com/visualize.html as then you can walk through your code step by step and see what it's actually doing"
8,"Tip: replace www.reddit.com in www.ceddit.com and it will try to recover the post, which in this case works"
8,"Both accounts are brand new and start by posting external websites, I would easily imagine this triggering spam blockers. I would btw also use the reference *mods* in a post that is meant to trigger moderators to chime in."
8,[Add GUIs to your programs and scripts easily with PySimpleGUI](https://opensource.com/article/18/8/pysimplegui)
8,"Ok so you are not reimplementing it, you are referencing it.

Honestly I would start from the ground up, so find a tutorial that builds this kind of workflow, implement in your project. If that doesn't work, implement it in a new project. Then if that works add parts of your project until it breaks."
8,"https://www.jetbrains.com/help/pycharm-edu/commenting-and-uncommenting-blocks-of-code.html

Found by googling 'comment selection pycharm'

>  Is buying software worth it?

Depends, for Pycharm I wouldn't do it unless you found a good reason to"
8,"If by ""their page's meta"" you mean the <meta> tags in <head> then I would look a bit further than that. For example many websites deliver metadata through separate AJAX requests, so by using F12 then go to Network to see all the request and responses that are being made. It could also be that the actual container in the HTML source contains some information about the video that is being played, but most often this is formed from one said AJAX requests."
8,"Using df.loc, see https://www.dataquest.io/blog/settingwithcopywarning/"
8,"    if (root.left and root.right) == None:

should be

    if root.left is None and root.right is None

as Python will execute `and`/`or` first to get a single value from it:

    >>> 'left' and 'right'
    'right'

which is called lazy evaluation (just return the Truethy or Falsey value that determined the outcome). None comparison should be done with `is` as you want to compare to the actual None object, not something that thinks it's equal to it. Also double checking left to be None is also redundant

    if root.left is None:
        return root.right is None

so without the `else: return False` at the end, because if both aren't None, it should proceed, not `return`

but then your while loops puzzle me:

        while root.left:
            Left.append(root.left)
        while root.right:
            Right.append(root.right)

how would these ever stop? Because if root.left is some other object, you are doing

    while some_other_object

this will run forever, as the object doesn't change, so it will be equal to do

    while True:

So it seems that your implementation is lacking a series of loop that actually walk through the trees, so by doing

    current = root.left
    while current.left:
        Left.append(current.left)
        current = current.left

for example to actually change the current object you're looking at"
8,"> only word which can follow card with changing a single alphabet is cord

why not 'ward'? It has only has one different letter too."
8,"Your `get_value` is doing the same as `max(iterable, key=bool)`

    values = [max(t, key=bool) for t in tuples]

But the comprehension can do both in one go

    values = [v for t in tuples for v in t if v]"
8,"Ok but can you explain the logic that is needed here? As in how would you do it manually? Because card-cord is alphabetical, but how does cord connect to word while ward coming later?"
8,"If you check the [source code of http.server](https://github.com/python/cpython/blob/3.7/Lib/http/server.py) you can see that the built-in implementation of do_GET does


    def do_GET(self):
        """"""Serve a GET request.""""""
        f = self.send_head()
        if f:
            try:
                self.copyfile(f, self.wfile)
            finally:
                f.close()

and that its copyfile method is simply handing off the copy to shutil.copyfileobj

    def copyfile(self, source, outputfile):
        """"""Copy all data between two file objects.
        The SOURCE argument is a file object open for reading
        (or anything with a read() method) and the DESTINATION
        argument is a file object open for writing (or
        anything with a write() method).
        The only reason for overriding this would be to change
        the block size or perhaps to replace newlines by CRLF
        -- note however that this the default server uses this
        to copy binary data as well.
        """"""
        shutil.copyfileobj(source, outputfile)

So by implementing this yourself, you could deliver the progress bar functionality. Assuming you are using something like tqdm, and you are using it only for freely seekable files

    class ProgressHTTPHandler(SimpleHTTPRequestHandler):
        def copyfile(self, source, outputfile):
            # seek to the end = file's length in bytes
            length = source.seek(0, 2)
            # seek to the beginning
            source.seek(0)
            with tqdm.tqdm(length) as pbar:
                written = True # for lack of a do while in Python, and := isn't common practice yet
                while written:
                    written = outputfile.write(source.read(8192)) # arbitrary chunk size
                    pbar.update(written)

Then use that handler for your server, following the doc example you would get

    with socketserver.TCPServer(("""", 80), ProgressHTTPHandler) as httpd:
        print(""serving at port"", 80)
        httpd.serve_forever()

Another option instead of seeking is to get the name from the handler, then use os.path.getsize (needs `import os` of course)

    class ProgressHTTPHandler(SimpleHTTPRequestHandler):
        def copyfile(self, source, outputfile):
            length = os.path.getsize(source.name)
            with tqdm.tqdm(length) as pbar:
                written = True # for lack of a do while in Python, and := isn't common practice yet
                while written:
                    written = outputfile.write(source.read(8192)) # arbitrary chunk size
                    pbar.update(written)

Both have pro's and cons. Some storage systems are slow to seek while fast to stat (ask the filesystem for the info on the file, like the size) like S3, while others are the opposite, like GlusterFS. If you are using this on a regular disk filesystem it shouldn't matter."
8,"Do you actually need to sort them through your own implementation? Because otherwise you could just do

    sorted_list = sorted(word_list)"
8,"Is that also set as the actual model in settings.py? So

    AUTH_USER_MODEL = 'yourapp.yourusermodel'"
8,"You open in `'w'` mode, the w stands for *write*. It will also truncate the file, so it could be you effectively erased the file with that. What you want is to keep reading and writing as two separate parts

    with open file for reading
        data = json.load(f)
     
     do stuff with data

    with open file for writing
        json.dump(data,f)"
8,"The shortcut would be determined by the software you use to edit the file, not the operating system."
8,"I would create a shell script to activate the venv and load python. Assuming your project structure is 

    project/
        yourscript.py
        yourvenv/

you can use 

    #!/bin/bash
    cd path_to_project
    source yourvenv/bin/activate
    python3 yourscript.py

Then see [DO's guide on cron](https://www.digitalocean.com/community/tutorials/how-to-use-cron-to-automate-tasks-on-a-vps) to schedule it. Don't forget to give the script execution rights, so say you saved it in 

    /home/yourname/mypythonrunner.sh

use 

    chmod +x /home/yourname/mypythonrunner.sh"
8,Which OS are you using?
8,"multiprocessing's new shared memory class looks useful, as it seems to remove the need for distributing data through slow pipes between processes (or outside storage like a memcache or file storage)."
8,"If you parse the file using the [json library](https://docs.python.org/3/library/json.html)'s `load`, the result will be a regular Python list, so you can do

    my_data.append({'uuid': 'some other uuid', 'name': 'some name'})

then dump my_data back to json.

If you're completely new to this I can also recommend following Real Python's tutorial first: https://realpython.com/python-json/"
8,"Some pointers

* Use spaces instead of tabs, preferably 4, also see the other directives or naming in PEP8 I linked in my other reply
* If you just want to use values from a dict, use dict.values

			for hand in self.playersHands.values():
				self.deck.distributeCard(hand)

* Use [string formatting] instead of complicated print calls. So `print(""Player {}'s hand:"".format(playersHand))` instead of `print('Player ',playersHand,'\'s hand:', sep='')`
* Leave out redundant `__str__()` calls like in `print(card.__str__())`. Print will call that implicitly
* Use `lower()` to prevent a double `if`: `if move.lower() == 'h':`
* Don't use built-in references like `string` (that is used by the `string` library)
* Don't use `+` repeatedly on strings (as it creates new string objects every time), use a list and `'something'.join()` to form a single string from it at the end. 

        def calcCountToString(self):
            counts = [c for c in self.calcCount() if c <= 21]
            return ' or '.join(counts)

* Use `x < i < y` condition instead of two separate ones: `while 0 < self.maxWithoutGoingOver() < 17:` assuming the max can't be negative
* The without-going-over loop can be much simpler

        def maxWithoutGoingOver(self):
            values = {v for v in self.calcCount() if v <= 21}
            return max(values)

* Why use a separate `rankNames` list? Use an OrderedDict for `rankValues` and then it can do both."
8,"Convention, see https://www.python.org/dev/peps/pep-0008/"
8,"Your approach is skewed by conformation bias: you don't have to check for division by 1 as that's always True. You also don't have to check for division by itself (so let the range go to `i+1`) as that's also always True. You also don't need to have a count, because *any* divisor lying between 1 and `i` is already a reason for `i` not being a prime. You basically fell into the [4 card problem](https://en.wikipedia.org/wiki/Wason_selection_task) pitfall.

Another common beginner mistake for prime searching is that you don't need to check for divisors above the square root of i. Because any non-prime can be factored as at least one `i = a * b`, (otherwise it could only be `i = 1 * i` if it was a prime). Then if `a` or `b` are both larger than the root of `i`, they could never produce `i` as a product. Think 143 is divisible by 11 and 13, because `143 = 11 * 13`, but it could never be calculated as `13 * something bigger than 13`, as `13 * 14` is already 182... So the only check needed was to see if 143 was divisible by any integer from 2 to and including 11 (as `sqrt(143)` is 11.95).

So to rewrite this to a proper sieve, you can use the range from `2` to `isqrt(i)+1` and actually stop the loop using `break` when you find a divisor = non-prime. Then use `else:` at the `for` loop to save `i` if it never reached a `break`:

    from math import isqrt
    number_list = [1, 2, 3, 4, 6, 12]
    prime_factors = []
    for i in number_list:
        for j in range(2, isqrt+1):
            if i%j == 0:
                # non prime
                break
        else:
            prime_factors.append(i)

But mind you that there are more efficient ways to sieve, see for example [here](https://stackoverflow.com/a/3941967).

edit: changed sqrt to isqrt as the integer square root is needed"
8,Btw are you also reimplementing the built-in User model?
8,What is the `AUTHENTICATION_BACKENDS ` setting in your settings.py?
8,"Can you differentiate the error messages? So for the second case use

            return render(request, 'projects/login.html',{""err_msg"":""DBG: user not found Your username and password didn't match. Please try again.""})

As of course in production you wan't to obscure both cases, but now you want to be sure which part was reached."
8,"> For some reason the user is unable to login, not sure why.

But your loginview has a diffrentiation in the error cause right?

                    return render(request, 'projects/login.html',{""err_msg"":""Your username and password didn't match. Please try again.""})
            else:
                # return redirect('login')
                return render(request, 'projects/login.html',{""err_msg"":""Your username and password didn't match. Please try again.""})
        else:
            return render(request, 'projects/login.html',{""err_msg"":""Fields are empty.""})  # applied js validation.

so what is shown *exactly* when the login fails? If it's the first message, then change either of the statements to have a different error message, so that you can now which one is the actual case."
8,"They certainly don't. Await is meant to allow the scheduler to switch to another task that can run (use the CPU), so it would only make sense to use it on something that blocks or can block on something not using the CPU, like a sleep, download, input etc. By using it on stuff that can always use the CPU you will only create extra overhead which leads to inefficiency."
8,"You are running Python 3 code with Python 2. On most non-Windows systems, `python` points to the Python 2 install, most often installed by default by your distribution. Python3 code needs to be run with `python3` instead."
8,"If a function returns a tuple, like when doing

    def my_func():
        return 1, 2

then you can directly assign the individual items to variables by also using the comma separated notation:

    >>> def my_func():
    ...     return 1, 2
    ... 
    >>> a, b = my_func()
    >>> a
    1
    >>> b
    2

the `()` around them is redundant here, that's only needed in a statement that has other operators that could give a conflict. For example say you want to create a new tuple from a tuple and two items, using `,` together with `+` gives an error:

    >>> c = (3, 4)
    >>> d = 1, 2 + c
    Traceback (most recent call last):
      File ""<stdin>"", line 1, in <module>
    TypeError: unsupported operand type(s) for +: 'int' and 'tuple'

because Python evaluates `+` before it evaluates `,`. Instead you want to form the left most tuple first (from 1 and 2) so you need `()` to force the order:

    >>> d = (1, 2) + c
    >>> d
    (1, 2, 3, 4)

Just so you know, most functions don't return tuples, as it's seen as archaic and a last resort if you can't combine the data you want to return in some other way. That's also why argparse doesn't do this, it returns a Namespace object."
8,"    [decode_hex(i)[0] for i in f]  

that's why I prefer to use explicit names 

    [decode_hex(line)[0] for line in f]  

so that it's more obvious if you swap a reference somewhere"
8,"Because you use sheet_name=None, it will read all the worksheets in the excel file and returns a dict of each worksheet name mapped to a dataframe of that sheet. Where did you get the idea to use that option? Because if this came from some example, it would also have shown how to get the individual df's from it."
8,Can you supply the full error output (called the 'traceback') and not just the specific error line?
8,"Why tough? Optparse has been deprecated since 2.7 and 3.2, which were released in 2010 and 2011 respectively. It has been replaced with [argparse](https://docs.python.org/3/library/argparse.html)."
8,"I understand what you are doing now, I'm suggesting to not do this in that way and use the built-in `json` library to parse the json.

Kindly read."
8,"Another important thing is that testing a membership in a set takes the same time, no matter where in the set the item is. A list on the contrary has to be iterated through until the item is found, which on average would take iterating half of the list. Or takes the full iteration if the item isn't there at all. Note the time difference:

    In [1]: import random

    In [2]: l = [random.randrange(1000000) for i in range(10000)]

    In [3]: s = set(l)

    In [4]: %timeit 500 in l
    118 µs ± 6.98 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)

    In [5]: %timeit 500 in s
    37.2 ns ± 5.36 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)

    In [6]: l = [random.randrange(1000000) for i in range(1000000)]

    In [7]: s = set(l)

    In [8]: %timeit 500 in l
    12.5 ms ± 1.25 ms per loop (mean ± std. dev. of 7 runs, 100 loops each)

    In [9]: %timeit 500 in s
    33.3 ns ± 3.62 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)

so even tough the second list increased a 100-fold in size and `in` on the list also increased a 100-fold roughly (12 ms from 0.12 ms), the time on the set **didn't change** significantly. 

This is why slow programs that are checking for a lot of items to be present in a certain list repeatedly can be sped up incredibly by using a set instead. It's just that with a small list the difference will be less noticeable. This btw is also related to database structures, where a table is just like a list and can be slow to find stuff in. By using an index on one or more columns, you generate a kind of set of them (using the same underlying mechanism) and then can also dramatically speed up queries as long as you use properties that have been indexed."
8,"yes, because now you have

    with open ('phones.txt','r+')as fp:
        for phoneline in fp.readlines():
            phoneNumber=phoneline.replace('\n','')
        header = {'clientSecret': 'lvc22mp3l1sfv6ujg83rd17btt','User-Agent':'Truecaller/10.41.7 (Android;7.1.2)','Content- etc
        etc etc

so header= is *after* the 

        for phoneline in fp.readlines():
            phoneNumber=phoneline.replace('\n','')

loop. It should instead be *inside* the loop, so

    with open ('phones.txt','r+')as fp:
        for phoneline in fp.readlines():
            phoneNumber=phoneline.replace('\n','')
            header = {'clientSecret': 'lvc22mp3l1sfv6ujg83rd17btt','User-Agent':'Truecaller/10.41.7 (Android;7.1.2)','Content- etc
            etc etc"
8,"the part that does the web-requests, so lines 20 to 30, should be at the same indentation as 

    phoneNumber=phoneline.replace('\n','')

so it must look like

    phoneNumber=phoneline.replace('\n','')
    header = {'clientSecret': 'lvc22mp3l1sfv6ujg83rd17btt','User-Agent':'Truecaller/10.41.7 (Android;7.1.2)','Content-etcetc
    post_fields= {""countryCode"":""ru"",""installationDetails"":{""app"": etc

While in the current code the header= line is placed one space to the left. Btw normally in Python you would use 4 spaces for each level, so 

    with open('pinx.txt', 'r') as fx:
        for lines in fx.readlines():
            deviceId=lines.replace('\n','')
            with open ('phones.txt','r+')as fp:
                for phoneline in fp.readlines():
                    phoneNumber=phoneline.replace('\n','')
                    header = {'clientSecret': 'lvc22mp3l1sfv6ujg83rd17btt','User-Agent':'Truecaller/10.41.7 (Android;7.1.2)','Content- etc
                    etc etc"
8,Where is trim() coming from here?
8,If it's a json file why don't you let the json library parse it? https://realpython.com/python-json/
8,"How does this help? The problem is in your reddit post, I can see that already, you have

    with something
    for loop something
    something in the loop
    
instead of 

    with something
        for loop something
            something in the loop

with indentation, right? So what I'm trying to ask you is to go to the program you wright your code in, select all the code, copy it, go to pastebin.com and paste it there. Then share the link"
8,"You lost all the indents, check this explanation: https://i.imgur.com/HT4Zz88.gifv

or paste your code on www.pastebin.com and share the link here"
8,"> but I feel like this is a weird syntax thing that would have been incredibly difficult to guide you to.

It's a common misconception that tuples are defined by `()`, they aren't. They are defined by using commas without another bracket like `[]` or `{}`, so your tup1 and tup2 could be defined as

    tup1 = 1, 2, 3
    tup2 = 4, 5, 6

it's just that when you want to have the interpreter execute a tuple definition *first*, that you need to use `()` as with any other expression that has a specific order, like for `9 * (4 + 5)`. This happens to also be the case for tuple definitions, as 

    tup1 + tup2[0],

would first evaluate `tup1 + tup2[0]` and only then create a single item tuple from the result. Instead you want to define the tuple first, so you have to use `()` around it

    tup3 = tup1 + (tup2[0],)

but doing it separately would have worked too

    first_tup2 = tup2[0],
    tup3 = tup1 + first_tup2

without the `()`.

>  I know the sidebar says to not just provide a solution

There's no problem with this tough, it says *try* to guide OP, so if it's possible try it, otherwise just give the solution and try to be as educative as possible."
8,... you're right. TIL
8,"sounds like you just need to do

    first_list.append(second_list[0])

but otherwise show the actual code and examples of what you have and what you want to end up with"
8,"The problem is that you use apply_async but get() but you do call close() immediately, closing the pool before it can even get to work. The question is also why you would use async here if you have nothing else to do in your code, because then a synchronous call would be just as fine.

Check the example in the docs [here](https://docs.python.org/3.7/library/multiprocessing.html#using-a-pool-of-workers) and the section on the [Pool class](https://docs.python.org/3.7/library/multiprocessing.html#multiprocessing.pool.Pool). You either need to use map() that blocks until all tasks are done

     test_pool.map(f, fruits)

or comprehend on a .get() of the return values of apply_async, so

    multiple_results = [test_pool.apply_async(do_in_separate_processes, args=(fruit)) for fruit in fruits]
    [res.get(timeout=1) for res in multiple_results]

In other words: study the documentation."
8,"quick & dirty

    import os

    for f in os.listdir('/var/opt/oracle/'):
        name, ext = os.path.splitext(f)
        if name == 'tnsnames.ora' and ext in ['.PROD', '.DMZ', '.SERVICEZONE']:
            do stuff with f

regex based

    import re
    import os

    for f in os.listdir('/var/opt/oracle/'):
        if re.fullmatch(r'tnsnames\.ora\.(PROD|DMZ|SERVICEZONE)', f):
            do stuff with f"
8,No problem. I can also recommend http://www.pythontutor.com/visualize.html to walk through your program's execution step by step. It's then often way easier to spot the problem.
8,"You can compare strings lexicographically, so 

    if s[i+1] >= s[i]:

is effectively checking if the character at s[i+1] is 'larger' (placed further in the character set, not just the alphabet) than s[i]. In other words, 'b' >= 'a' is True and 'a' >= 'b' is False. By that logic it will only append each character if it is the same or in order, so the resulting substring will also be in order."
8,"Because you also `return` on the first value that is *not* ` > 1`

        else:
            return False

the loop will always run a single time in any case, on the first key. The `return False` should just be used at the end of the loop, so when a `return True` was never executed

    for key, value in h.items():
        if value > 1:
            return True
    return False"
8,"This is also redundant though with two times the same input() statement. I would rather do

    def user():
        while True:
            command = input(""Please enter y for cookies, n for cupcakes > "")
            if command == ""y"":
                print(""Here are your cookies"")
                break
            elif command == ""n"":
                print(""Here are your cupcakes"")
                break
            print(""Please enter y or n for your selection"")"
8,"If you move the contents of the files second and subsequent lines to the start of the file, you will end up with the first line removed but also with the last line still containing its original line. So if you have

    blabla
    testtest
    something

in the file, after doing something like

    with open('test.txt', 'r+') as fp:
        next(fp)
        data = fp.read()
        fp.seek(0)
        fp.write(data)

you end up with

    testtest
    something
    something

because you can't make the file smaller than it already was, you can only move data around as you mention. You could overwrite the last line with whitespace or something similar, but that still doesn't mean you have created a file with the original contents minus the first line, as you would with your or K900_'s solution."
8,"Your first approach is a correct one albeit you use `element` as name inside the for loop while you assign the elements to `e`. But fixing that here https://repl.it/repls/PunctualAbleTelephones does print the correct result. So maybe you were working in different files at the same time or something similar? 

Your second approach has the error that the `given_list[i] < 0` is in the `while` condition while it should be an `if` condition for the addition inside the loop, just like in your first approach. 

    total = 0
    i = 0
    while i < len(given_list):
        if given_list[i] < 0:
            total += given_list[i]
        i += 0

but try to stay away from these constructs as much as possible. The `for item in my_list` approach is the correct one in Python and if you somehow do need the index, use `enumerate`

    for idx, value in enumerate(given_list):
        etc"
8,"You can't do this in the same file, you can only append to the same file. What you can do is to either 

- read the whole file to ram first (like in a list), write everything except for the first line to a new file with the original name
- use the solution above and rename the file afterwards

as both options would effectively overwrite the file, which is the same as would happen when you would open the file in a text editor, remove the first line and click Save."
8,It offers zero benefit over the solutions by K900_ and  social_nerdtastic.
8,"Because if the username is correct you don't need to have another attempt, so the loop should stop."
8,"`2 // 10` in Python 3, as `/` is a float division and would thus return `0.2`."
8,"Why would it give an error? If you have 2 eggs you can't fill a carton of 12, as `2 // 12` equals 0. But you still have those 2 eggs, as `2 % 12` equals `2`. They are the *remainder* of the division."
8,"This is also retrievable from Pycharm's project interpreter setting, you don't have to investigate this low level"
8,What is the exact full traceback that it provides when you run it?
8,"This is something a regex can easily do in a one-liner, see https://www.datacamp.com/community/tutorials/python-regular-expression-tutorial"
8,Seems like izdvd can do this https://pypi.org/project/izdvd/
8,"I normally use that style too, but this example was specifically meant to show how it can go wrong *accidentally*."
8,"Normally `pip3` will be linked to pip in your python3 environment. But if that doesn't work you can also just run pip through your favorite python executable

    python3 -m pip install openpyxl"
8,"You can use `or` to form a sequence of expressions that can be True, and then you also don't have to check for the other case:

    def rps(player,computer):
        if player == comp:
            print(""Result : It's a tie"")
        elif (player == 'r' and comp == 'p') or (player == 'p' and comp == 's') or (player == 's' and comp == 'r'):
            print(""Result : Computer Wins !"")
        else:
            print(""Result : Congrats you win !"")

This can also be rewritten with `any()`:

    def rps(player,computer):
        if player == comp:
            print(""Result : It's a tie"")
        elif any((player == 'r' and comp == 'p'), 
                 (player == 'p' and comp == 's'),
                 (player == 's' and comp == 'r')):
            print(""Result : Computer Wins !"")
        else:
            print(""Result : Congrats you win !"")

Instead of the two-step approach of randint and a mapping through an if-statement, you can use `randchoice` to pick from a list

    comp = r.randchoice(['r', 'p', 's'])

Then your playing loop can also be rewritten to a While True with `break` once you want to leave

    while True :
        player = input(""Chose wisely, you are against the computer. Choose anyone of: Rock(r), Paper(p), Scissors(s): "")
        comp = r.randchoice(['r', 'p', 's'])

        print(f""Computer chose : {comp}"")
        print(f""It's {player} vs {comp}"")

        rps(player,comp)

        play = input(""\nDo you want to play again ? (y/n):"" )
        if play != 'y':
            print(""It was nice playing with you. Please visit again."")
            break

Just as a nitpick I wouldn't rename `random` to `r`, it will only makes it more confusing if you would expand your program to keep using an arbitrary reference `r` that could even accidentally be reassigned, like when doing

    for r in my_rows:
        do something with r"
8,"Can you explain a bit more what kind of explanation you really need? Because to me in that topic, 

- [this post](https://reddit.com/r/explainlikeimfive/comments/1pyhng/eli5_objected_oriented_programming/cd7h9vb/)   
- [this post](https://old.reddit.com/r/explainlikeimfive/comments/1pyhng/eli5_objected_oriented_programming/cd7igin/)   
- [this post](https://old.reddit.com/r/explainlikeimfive/comments/1pyhng/eli5_objected_oriented_programming/cd7fdcb/)

are very informative about different perspectives on OOP. And do include explanations on the topics you mention. 

   edit: there's also the [wikibooks link](https://en.wikibooks.org/wiki/Python_Programming/Classes) in the FAQ that explains the terminology one after another. Wouldn't that be enough?

> Also, who downvotes in a discussion thread?? Get a life kid

I didn't downvote you. As you can see I answer a lot of questions in this thread and most of them didn't have downvotes, so this was done by someone else. That's the whole point of up- and downvotes, it's just someone clicking, it could be any obnoxious person, even someone that contributes absolutely nothing to this sub. Don't be bothered by it and certainly don't make those comments just because you can only think of one explanation for a fucking *single* downvote."
8,"0 until not smaller than 4 means it will have the values

    0
    1
    2 
    3

which is 4 attempts in total. So if you want to limit on 3 attempts, you need

    while attempts < 3:

Or start with `attempts = 1`. But in practice you would use [for loop with range](https://snakify.org/en/lessons/for_loop_range/)

    for attempt in range(3):
        x = input('Enter a username: ')
        if x == username:
           print('Correct username')
           break
        else:
           print('Incorrect username. Please try again.')

Which you can also simplify as an `else:` after a `break` is redundant

    for attempt in range(3):
        x = input('Enter a username: ')
        if x == username:
           print('Correct username')
           break
        print('Incorrect username. Please try again.')"
8,"    common_words = [word.rstrip('\n') for word in common_words]

[Python List Comprehensions: Explained Visually](https://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/)

but in general you would avoid using range(len(list)) constructs. If you do need the index, simply use `enumerate`

    for idx, word in enumerate(common_words):
        common_words[idx] = word.rstrip('\n')"
8,"Please observe the rules in the sidebar --->

> General Rules
>
>    Posting only assignment/project goal is not allowed. Read posting guidelines.

What code do you have so far? Would you be able to write something that just works with the example of `n=24`?"
8,"`()` is only needed when you want to extract something. In this case you just need the number right? So it would be 

    regex = re.compile(r'spam(\d\d\d)\.txt')

note the `\` before the `.` because in regexes the `.` means 'anything', so you have to escape it to mean a literal period.

Can you then form a loop that walks through the files and fetches the numbers from the files that match the pattern? Then I would advise to add those to a set, because with a trick you can easily find difference between a set and a range:

    >>> full_range = set(range(100))
    >>> my_numbers = set([1, 2, 3, 55, 77, 88])
    >>> full_range - my_numbers
    {0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99}

that way you can also form a range of all the numerical values that can be used in the filenames. Compare with the numbers you found and you'll have the missing numbers."
8,Do you remember how to use regexes from chapter 7? Would you be able to form a pattern that matches the spam001.txt as provided?
8,What code do you have so far?
8,"% is archaic and isn't used much anymore. Format() is the common format now, but has been augmented by f-strings. The big downside of those is that they aren't compatible with Python below version 3.6, so you have to keep that in mind when building software that could be run on older platforms, like Ubuntu 16.04 that ships with 3.5. This is why f-strings aren't common in most libraries as otherwise you would be required to have 3.6 to run them (and most libraries are just dropping 2.7 support recently)."
8,I would start by following https://realpython.com/python-csv/ to read the data from the csv
8,"You unpack into a literal 'name', which isn't possible but also doesn't make sense. Use an actual variable name like just `name`, so without the `''`. Then to provide the val you can use a lambda. Also note to not use a built-in class or function reference like `list`, and I wouldn't use `i` for something that's not a numeric index or counter.

    for item in my_list:
        name,row,col,val = item
        btn = Button(tk,text=name, command=lambda: val)
        btn.configure(column=col, row=row)

Btw you can also unpack directly in the `for` statement

    for name, row, col, val in my_list:"
8,"[Protip about assumptions](https://medium.com/carwow-product-engineering/assumption-is-the-mother-of-all-f-ups-784f20b8378d)

The shebang only gets read when the file is executed as an executable, so like

    ./myscript.py

because then the shell has to figure out what to even do with it, as in *nix you don't link files to programs through its extension like on Windows. It reads `#!` at the start which tells it to use the path after it to run as a program and provide the file as it's argument. If you already call a program which then takes the script as an argument, like

    python myscript.py

the shell will actually parse the *program*'s file (so wherever it finds that `python` resolves to in the environment's PATH), then finds out it's a binary, runs it, the Python interpreter loads, it sees the `myscript.py` as the filename argument and reads that as a text file. In that pathway there's no option to 'bail out' into another Python executable just because the shebang says so, as `#!` is a shell directive not a Python code construct. It would have been nice if Python would have integrated some versioning directive that could warn or even crash on a mismatch, which could have saved tons of wasted time since Python 3 came about.

> I also would assume python 2 would throw an error for using parentheses on around a print statement

Python2 doesn't fail on simply using parentheses there because they *could* work, see my explanation [here](https://reddit.com/r/learnpython/comments/clsi0b/help_syntaxerror_invalid_syntax/ew0lgkq/)"
8,"`(x, y)` creates a two item tuple first, so by doing `tuple_a < tuble_b` it will effectively check if a is 'smaller', see explanation [here](https://stackoverflow.com/questions/5292303/how-does-tuple-comparison-work-in-python). In this context it checks if one date is before the other. And as that result is a boolean True or False, which effectively is an integer 1 or 0 respectively, it calculates if it has to subtract another year from the result of the difference in years.

It's btw a bit of cowboy programming, as normally you would use higher level structures like datetime to compare dates or calculate their interval:

    >>> from datetime import datetime
    >>> datetime(2019, 8, 5) - datetime(2019, 4, 24)
    datetime.timedelta(days=103)"
8,Maybe httpx can help here? https://github.com/encode/httpx
8,"It's even answered in this very topic already https://reddit.com/r/learnpython/comments/cm3qmf/ask_anything_monday_weekly_thread/ew0mvst/

There are also resources linked in the FAQ [What are classes and how do I use them?](https://old.reddit.com/r/learnpython/wiki/faq#wiki_what_are_classes_and_how_do_i_use_them.3F)"
8,You need to go into the Copy menu and select 'CSS Selector' in Firefox [screenshot](https://i.imgur.com/ESjw4UH.png) or just 'Selector' in Chrome. You should then get something like `#form-t3_cmfxrl7ly > div:nth-child(2) > div:nth-child(1) > p:nth-child(10) > code:nth-child(3)` (just an example from this page)
8,"Watch any introduction-to-IDLE video like [this one](https://www.youtube.com/watch?v=bOvqYw1SZJg) which will explain the basics of its interface, including the difference between working directly in the shell and working in file that you can run."
8,"I made a slight typo there, fixed it now. 

But the idea is basically

- divide by the duration, keep the integer part (so no remainder) by doing `//`
- divide by the duration, keep the remainder only, by doing `%`

Say you have 4856 seconds, you first find the hours like

    >>> 4856 // 3600
    1
    >>> 4856 % 3600
    1256

so 1 hour and 1256 seconds as the remainder. Then do the same for the minutes

    >>> 1256 // 60
    20
    >>> 1256 % 60
    56

so the duration 1 hour, 20 minutes and 56 seconds"
8,"Use the `%` and `//` to actually calculate this instead of 'counting down'

    tt_w = tt_s // 604_800
    tt_s = tt_s % 604_800
    tt_d = tt_s // 86_400
    tt_s = tt_s % 86_400
    tt_h = tt_s // 3600
    tt_s = tt_s % 3600
    tt_m = tt_s // 60
    tt_s = tt_s % 60

And of course use [string formatting](http://pyformat.info) for forming a string

    ttw['w'] = '{:02d}'.format(tt_w)
    ttw['d'] = '{:02d}'.format(tt_d)
    ttw['h'] = '{:02d}'.format(tt_h)
    ttw['m'] = '{:02d}'.format(tt_m)
    ttw['s'] = '{:02d}'.format(tt_s)"
8,"You could just catch the exception

    while True:
        ser_bytes = ser.readline()
        try:
            print(ser_bytes.decode('utf-8'))
        except UnicodeError as e:
            print('{}, bad line?'.format(e))
        print()
        print()

I used UnicodeError as it's the base of UnicodeEncodeError and UnicodeDecodeError so it will catch both cases."
8,"When you use Pycharm, by default it will create a venv for each project. Meaning that you would preferably use [Pycharm's own installer](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html) to install any external package."
8,"Do a *lot* of code challenges, sites like coding bat and project euler see this sub's wiki. Also read documentation as much as possible, even if you have a natural tendency to just dive in until you get stuck."
8,Could you check with `tuple(data_list)` as then it's impossible to have a mutation on the object that is received.
8,"One pointer is to not put a 'dangling else' somewhere down below all the code that runs if the condition was True. I would rather do a negative check first

    if dep < price:
        print(""You do not have enough money."")
    else:
        # big blob of code

If you would write this in a function, you would use `return` and then also prevent the `else` block

    def coin_divider():
        price = float(input(""How much does the item cost?""))
        dep = float(input(""How much cash did you receive?""))
        if dep < price:
            print(""You do not have enough money."")
            return
        # rest of the code without the else:

Then in regard to the code you want to clean up, I'm not sure if cleaning it would make *that* kind of a difference, it's already neat and concise. But if you must then I would suggest to use a dict with the divisors too

    divisors = {100: ""dollars"", 25: ""quarters"", 10: ""dimes"", 5:""nickels"", 1:""pennies""}
    for divisor, key in divisors.items()
        if tot_ret >= divisor:
            change[key] =  tot_ret // divisor  # no need for rounding when using integer division
            tot_ret = tot_ret % divisor

but you could also lose the change dict altogether and just print right there and then

    for divisor, coin_name in divisors.items():
        if tot_ret >= divisor:
            print(f""\nYou receive {tot_ret // divisor} {coin_name}"")
            tot_ret = tot_ret % divisor

Note that this relies on the dict maintaining order which isn't guaranteed in Python versions before 3.6. As you are using f-strings too then I'm expecting that this is not a requirement, but it's something to keep in mind when you would use this approach in an older environment. To dependable fix would be to use reverse sorting

        for divisor, coin_name in sorted(divisors.items(), reverse=True):"
8,"Your code will not print a line, it will print the exact regex matching string. So if you put in 'acknowledge' it will print just 'acknowledge' if it found it. While if it printed a line, it would show something like 

> Miss Bennet he acknowledged to be pretty, but she smiled too much."
8,"> Not sure why else it would throw an error.

Because it isn't valid Python 2 code and OP is accidentally using that to run the code"
8,"> I have no idea which Python version is used. It is part of the build process and I'm not familiar with the build system (Makefile and so on).

You can't prevent the wrong Python version being run from the code itself, you do need to somehow configure the build process do use a different executable or a different method of launching the program. If you could give more details then perhaps we can help.

> Is the statement correct in Python 3 but incorrect in Python 2?

Yes. In Python 2 the print command is a statement like `return`, so you would normally do

    print 'hello'

while in Python 3 it's a function and thus always needs `()`.    
However if on Python 2 you do

    print('test')

it will still work as `(something)` is mathematically syntax for doing `something` *first*, as when you would do `(4+3) * 3`. However `*` before a variable (as an unpacker) isn't a mathematical operator and thus breaks this."
8,That would mean that the Android kernel just ignores that setting. I'm afraid you would have to ask Android experts for this as it's out of scope from Python's perspective.
8,"I know of [os.setaffinity](https://docs.python.org/3/library/os.html#os.sched_setaffinity) but I'm not sure that Android would support this. And you must somehow know the logical number of the optimized core you want to bind it on. Another option is to launch the python process with an affinity, which on linux is done using [taskset](https://linux.die.net/man/1/taskset) but I'm equally unsure if that is supported by Android too. So in other words, this might rather be a an Android platform question and necessarily a Python specific one."
8,"Your table includes an id column while your csv doesn't. Provide a column selector next to your table name, btw shouldn't that be `userdata`?

    sql = ""COPY userdata(username, password, server, host, proxy, version)  FROM STDIN DELIMITER '|' CSV HEADER"""
8,How do you conclude that this should be fixed by forcing the process to bind to a specific core?
8,"Compression is either lossy or lossless. Lossless is figuring out a way to store all of the data in a more efficient way that saves space, this is done in common formats like ZIP. Lossy is decreasing the quality slightly in such a way that it can save a massive amount of space, this is done in common formats like JPEG, MP3 and virtually all video compression formats you encounter through web streams or television. For a longer explanation see https://en.wikipedia.org/wiki/Data_compression the first and second paragraphs"
8,"I'm not sure that this an actual issue, the kernel (not the CPU) decides the core based on the amount of CPU time it needs. Processes are always in a certain state, for active one those are

- Running: actually running code on the CPU
- Waiting: wants to execute code, so has something to do but hasn't got the CPU for it yet
- Blocked: blocked on something, like reading/writing from I/O like a disk or a network connection, but also on a clock like when using time.sleep()

[more info](https://en.wikipedia.org/wiki/Process_state). So when your program is doing something like

    a = 0
    while True:
        a += 1

it's constantly in either waiting or running state because it has nothing else to get blocked on, which will lead to a 100% core usage (often shown as 100/number_of_cores % of CPU usage). Meaning that if you *don't* see this, which is the normal operation for an event driven program, the kernel will see it is an inactive or less active process and could put it on a down-clocked core. Once the program does want more CPU time, it will automatically be switched back. This is normally the desired situation, not something that should be fixed. Why do you think that it does?"
8,"There's already a library for that: [yfinance](https://pypi.org/project/yfinance/). There are alternatives using other endpoints too, see for example [here](https://www.quora.com/Using-Python-whats-the-best-way-to-get-stock-data)."
8,"The next step would usually be to create the object with those variables

    my_user = User(username, password)

The question is more what you want to do next"
8,"Can you provide the whole code? As the syntax isn't incorrect by itself

    >>> args = [1,2,3]
    >>> kwargs = {'sep': '-'}
    >>> print('counting', *args, **kwargs)
    counting-1-2-3

Or are you perhaps using Python 2 to run it ? Like by doing

    python myscript.py

as then the first line isn't checked, you need to do

    chmod +x myscript.py
    ./myscript.py

as then you are *executing* it and only then will the first line be used as a pointer to which program to run it with. Or explicitly do

    python3 myscript.py"
8,"There's nothing wrong with that though

    >>> args = [1,2,3]
    >>> kwargs = {'sep': '-'}
    >>> print('counting', *args, **kwargs)
    counting-1-2-3

just not very likely to use in regular code. But I did see an example of it when you want a print to stderr instead of stdout

    import sys
    def eprint(*args, **kwargs):
        print(*args, **kwargs, file=sys.stderr)

    eprint('this goes to stderr instead')"
8,"You can only pull data from a browser that has a webdriver linked to your code, as would be done using Selenium, see [here](https://automatetheboringstuff.com/chapter11/). Can you explain why exactly you need this?"
8,"The second problem you have is that you don't actually wait in your main process for the subprocess(es) to have finished. You even set the subprocess as `daemon` so basically as ""I don't care if it's even running when I (main process) is done"". So what happens is that your main process generates the data items as fast as it can and then exits, thereby killing the subprocess too, before it has the chance to provide output. What then is or isn't displayed is a matter of chance, that's why so you see different results on different machines and with different speed-degrading measures like `print()` statements.

One solution is not to have the subprocess as daemonic and `.join()` it until it is done, but that means you have to implement a sentinel in your queue to tell the consumer that the queue has finished, like by doing

    q.put(None)

in the main process and in the consumer

    if data is None:
        break

to leave the while True that would otherwise hang the whole program. 

Another option is to use a [multiprocessing.JoinableQueue](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.JoinableQueue) and do a q.join() in your main process at the end that simply blocks until the queue is empty again. But this still has the risk that the consumer's output isn't yet shown on screen when the queue seems finished. That's why normally you work with joining on your subprocess(es)."
8,"Nowadays I would indeed use an abstraction like sqlalchemy offers. But if you want to work graphically here I would also suggest to use a webframework like Django or Flask to build your program as a web-tool, as those frameworks are already tailored to be combined with database access. In case of Django it offers its own abstraction (called the Django ORM) but for Flask you would combine it with Sqlalchemy."
8,"I'm not sure how you came to the conclusion that you replace a word in a string by doing just

     'WORDTOREPLACE' = 'something_else'

as that doesn't even mention in *which* string you want to perform this. Instead see for example [this example](https://www.w3schools.com/python/ref_string_replace.asp) of how to use str.replace() for this."
8,"Try an unrelated copy of data_list instead of the data_list object itself, as that gets a .clear() a few statements later. 

    data = [data_list.copy() set_size, entry]

altough I prefer to use tuples if you actually mean for the data to be static

    data = [tuple(data_list), set_size, entry]

The reason why this happens is because the queue is actually serializing the objects to be sent through inter-process communication (called a 'pipe'), but that process is not synchronous. This means that once you put the item on the queue, your process immediately continues while 'some time later' the queue's serializer thread will then serialize the outer list. As the [docs on Queue](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue) explain

> When a process first puts an item on the queue a feeder thread is started which transfers objects from a buffer into the pipe.

So because that thread is still starting up (and Python often does't switch context after each statement), your data_list.clear() will probably be reached sooner than the outer list is serialized. Which then simply puts an empty data_list in that list and then the for loop in 

        data = q.get()
        for i in data[0]:
            print('Entry: ' + str(data[2]) + ' Data: ' + str(i))

will not run. Your assumption that 'it skips over the first item' is then made incorrectly, partly because you didn't include an actual debug print, like

        data = q.get()
        print('got from queue', data)
        for i in data[0]:
            print('Entry: ' + str(data[2]) + ' Data: ' + str(i))

which would have shown the first item as correctly received from the queue, but with a `[]` as the first item. Try to investigate instead of assuming as it makes the difference between knowing and guessing."
8,"> this gives no error, but it also does not replace anything unfortunately

This could have multiple reasons but we aren't able to tell which one just by your description that it doesn't work and not seeing the rest of the code."
8,Check this sub's wiki http://www.reddit.com/r/learnpython/wiki/index at 'new to python'
8,"A combined query could combine the values from different tables, but I don't think this would be feasible from different databases. But still why would iteration matter here?"
8,"> I dig a bit in stackoverflow and noticed that dictionary keys() actually returns dictionary view, why did my function actually returns a list?

You don't show `get_row_content` so I can't tell you why, but it certainly seems that it didn't return what it should"
8,"            for page in pages:
                #save with designated naming scheme <pdf file name> + page index
                jpg_name = ""%s-page_%d.jpg"" % (pdf_file,pages.index(page)+1)

.index is a dangerous tool as it returns the *first* index of an object in the list, not necessarily the current index. You need enumerate() for that, where its start= argument can implement the offset already

            for idx, page in enumerate(pages, start=1):
                #save with designated naming scheme <pdf file name> + page index
                jpg_name = ""%s-page_%d.jpg"" % (pdf_file, idx)

Not sure if it solves the problem but I would start by fixing that"
8,"If you mean the program, you can use [time.sleep()](https://www.tutorialspoint.com/python/time_sleep.htm) to wait an X amount of time"
8,"This has no effect, just try

    my_string = ''
    my_string = 0

the whole idea of dynamically typing is that there is no guarantee that a variable is of a certain type. There's `isinstance()` to check this but generally you just don't rely on it."
8,"    --------------------------------------------------------------| NONREPORTABLE
          NON-COMMERCIAL      |   COMMERCIAL    |      TOTAL      |   POSITIONS
    --------------------------|-----------------|-----------------|-----------------
      LONG  | SHORT  |SPREADS |  LONG  | SHORT  |  LONG  | SHORT  |  LONG  | SHORT
    --------------------------------------------------------------------------------
    (CONTRACTS OF 100 TROY OUNCES)                       OPEN INTEREST:      616,859
    COMMITMENTS
     311,881   60,631   56,198  175,785  463,624  543,864  580,453   72,995   36,406

    CHANGES FROM 07/16/19 (CHANGE IN OPEN INTEREST:     14,959)
       2,346   -3,403    7,764        0   10,431   10,110   14,792    4,849      167


This is just a format that the service itself decided to use, it has no relation to html (as it is just inserted as a blob of text). If you really want to parse this then you're basically stuck with writing a parser yourself, like using str.split, or maybe regexes."
8,"I'm not sure if you're example is correct, chr is to convert from integer to text. In your case you need ord()

    In [5]: """".join(format(ord(let), ""08b"") for let in 'Test hallo')                                                                                                    
    Out[5]: '01010100011001010111001101110100001000000110100001100001011011000110110001101111'

`int()` supports reading in any base, so by splitting the sequence in 8 bits again you can read those as base-2 integers, then by chr() back to string characters. There are a lot of ways to split a string by length, but I prefer using regex:

    import re
    string_name = """".join(chr(int(b, 2)) for b in re.findall(r""(\d{8})"", binary_name))

*edit: altough this is not a perfect length splitter, it effectively looks for all non-overlapping groups of 8 digits, as that's what you actually want for your conversion step and not stuff like surrounding whitespace or anything else. A perfect splitter that doesn't care about the content would use `r""(.{8})""`"
8,"The problem is indeed the values_list here, as it adds a layer of complexity. What you want is a regular dict of api_id to name, so

    def carrier_names(carrier_api_ids):
        carriers = Carrier.objects.filter(api_id__in=carrier_api_ids).distinct()
        return {c.api_id: name for c in carriers}

or if you must prevent whole object retrieval

    def carrier_names(carrier_api_ids):
        carriers = Carrier.objects.filter(api_id__in=carrier_api_ids).distinct().values('api_id', 'name')
        return {c['api_id']: c['name'] for c in carriers}

then save it just as a variable

    name_dict = carrier_names(claims.values_list('carrier', flat=True))

and apply a usual dict lookup

    for claim in claims:
        claim.legacy_id = _set_legacy_id(claim, legacy_ids)[0]
        claim.carrier = name_dict[claim.carrier]"
8,"It could help by trying various coding challenges as listed in [this section](https://old.reddit.com/r/learnpython/wiki/index#wiki_tools_for_learning_python) of the wiki, like codingbat and project euler. Those help you to learn how to come up with code yourself instead of simply following other people's examples."
8,Any chance of not ending up with these structures in the first place? How are these objects created? And what is the end goal here?
8,You can't dynamically flatten deeper levels of nesting in a comprehension. You do need to write a function (possibly with recursion) to 'dive deeper' into each level until you find just non-list items.
8,"It seems that you're doing

    even = number / 2 
    print(even) 
    return new_number

there `new_number` is just coming out of nowhere. Maybe you meant `return even`? Same for the `odd`.

Btw you don't have to do a double check

    if name == 'Bob':
        # something
    elif name != 'Bob:
         # something else

Because if the name wasn't Bob at the first `if`, to check it again for that same thing makes no sense... You can just do

    if number % 2 == 0:
        # even stuff
    else:
        # odd stuff"
8,"    [item for sublist in l for item in sublist] 

If you want a sublist for each item, you have to literally define the result to be a sublist (with item in it)

    [ [item] for sublist in l for item in sublist]"
8,"I forgot another caveat, it's also advised to implement a [wait state](https://selenium-python.readthedocs.io/waits.html) as pages sometimes get filled dynamically by the active content (eg the javascript on it). Then trying to find the element right at the first millisecond that the driver can handle it (as that happens when the original download has finished, so when the javascript could still be running) could fail while it would be fine a second later."
8,I wouldn't use deep descending xpath unless as a last resort. It needs to have an exact match in the structure while that structure is more likely to have been changed than attributes like class names or id's.
8,"Maybe try

    button = driver.find_element_by_css_selector('.qtRcagoPZ5dw3xsr114ze button')
    button.click()

Although this could fail later on if they change the class name (if it's not dynamic already). You could also work backwards from selecting the div with the text

    for div in driver.find_elements_by_css_selector('div.ms-Button-textContainer'):
        if 'new message' in div.text.lower()
            break
    else:
        raise ValueError('no new message div found')
    button = div.find_element_by_xpath('.//ancestor::button')
    button.click()"
8,Could you share the html of the button and maybe some surrounding elements?
8,"I would prefer if you would just create a new post for that, either in this topic or as a new topic in this sub."
8,"I would use [Mozilla's Django tutorial](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Tutorial_local_library_website) as that explains the Django Admin interface a bit more, and that makes it very easy to give a nice overview of objects in the database."
8,"It's part of the [docstring](https://www.datacamp.com/community/tutorials/docstrings-python#second-head), notice the `""""""` below the `main()` function. So it isn't actual Python syntax, it's a blob of text to illustrate that part of the program. Here, apparently the author decided to show the interactive shell's response as an example."
8,"This is just the regular PowerShell error that you are trying to run a program from a folder that doesn't contain it... If you would do

    C:\> myprogram.exe

it will return the same error as myprogram.exe isn't in that folder. In other words use cd to go the correct folder and use dir to verify that the program is there."
8,"Pysimplegui is easy to start with. Another option to consider is building a webapp, as with a framework like django or flask. Lets you build your interface using regular html+css instead of programming it through a GUI library."
8,If on Anaconda why use pip in the first place instead of Anaconda's own package manager 'conda'?
8,"That's not third party though, but still a hint to the problem, maybe try with the hidden-import parameter, see [here](https://stackoverflow.com/a/45642520)"
8,"Can you post a screenshot instead, just paste it on imgur.com"
8,Does it show any output if you run the program in a cmd window?
8,Are you using any third party modules in your program?
8,"Assuming you are using pyinstaller, can you try to use the --onedir approach instead of --onefile? Then try if it runs when you copy/provide the resulting folder instead?"
8,If you compile it into a single exe then it should already work without python installed. This is how python-based programs like qbittorrent are provided too.
8,"Apart from looking into local hosting (eg at home or school, maybe a company of someone you know) you could look into getting a prepaid credit card from Western Union or a similar international bank that has presence near you. That would cost you a one-time fee, but will not impose a financial risk."
8,Ask one of your parents or other friends/relatives? Are you sure you need a 24/7 online service for this? Maybe it could be run from something like a RPi at home?
8,"Seems to be possible with a debit card too http://mypassionmydreams.com/2018/04/19/create-aws-account-without-credit-card/

Edit: see the overview of the officially supported methods here https://aws.amazon.com/premiumsupport/knowledge-center/accepted-payment-methods/"
8,"No, the syntax is 

    map(function_reference, iterable)

Map will iterate through the iterable (shiftbyte was incorrect in that expects a list specifically) and call the function with each item it received. Try `print(list(map(print, [1,2,3])))` as an example. Also see the [docs](https://docs.python.org/3/library/functions.html#map) on the map function."
8,AWS (eg 'amazon') offers free tier options for their VPS service 'EC2'. You get a very light spec machine but that should be fine for such a simple task.
8,Are you sure the file isn't open in another application like Excel? Could also be a cloud-client like OneDrive or Google Backup that didn't release the file yet. You could try by placing the file in c:\temp first and then try again.
8,"This is generally what happens when you do

     def f():
         abc = print(""It's late in the evening\n She is wondering what clothes to wear"")
         return abc
     print(f())

Either do

     def f():
         abc = ""It's late in the evening\n She is wondering what clothes to wear""
         return abc
     print(f())

or 

     def f():
         print(""It's late in the evening\n She is wondering what clothes to wear"")
     f()

so just with a print at one spot in the program instead of two."
8,"Normally if you append two wav's you shouldn't notice the edit from the edit itself, you could notice the 'transition' because the two wav's have different properties like background noise, loudness, EQ etc. You might want to normalize the file after appending (like done [here](https://github.com/jiaaro/pydub/issues/90)). Another option is to crossfade between the files, set using the crossfade= argument to append().

If that doesn't help I would recommend to try to implement the edit yourself using a free yet proper sound editor like audacity, then once you get it the way you want replicate the steps in pydub."
8,"I wouldn't consider cycle_over1 for general usage as order is not guaranteed by sets, even your example prints ""A {C, B}"" when I try it right away. cycle_over2 looks fine to me and very pythonic. I also don't think a 'built-in solution' would exist, don't forget that a lot of those built-in things like from itertools are the same kind of snippets, it's just that someone else has written them for you."
8,"Appending is putting something *after* another, like appending 'this' to 'that' would result in 'thisthat'. What you seem to be after is to *mix* the two files, and pydub offers this through its [overlay](https://github.com/jiaaro/pydub/blob/master/API.markdown#audiosegmentoverlay) method."
8,My 2 cents is to start with a webframework as those are already easy to set up and support database interfacing. Think Flask or Django.
8,"Something like that, but as I stated above you're basically reinventing the wheel that ProcessPoolExecutor has already invented for you. That's why I suggested to use that library instead (check the link I supplied)."
8,"You always need a `get()` to get something out of it, like the example I linked shows


        # evaluate ""f(20)"" asynchronously
        res = pool.apply_async(f, (20,))      # runs in *only* one process
        print(res.get(timeout=1))             # prints ""400"""
8,"We normally don't even use len(), we either do

    a = [1,2,3,4,5]
    for num in a:
        print(num)

or if we need the index

    for idx, num in enumerate(a):"
8,Database is just a concept of information storage. Can you explain what kind of database you have in mind? And what kind of application you already have?
8,I wouldn't necessarily consider not using a webframework for building a python-backed website. You could also check bottle for really lightweight stuff but otherwise I would just stick to Django or Flask.
8,"Are you sure the endpoint actually supports kerberos? And maybe try a preemptive request?

    requests.get('https://url/REST', auth=HTTPKerberosAuth(force_preemptive=True), verify=False)"
8,"> The error I run into is:

Could you provide the full traceback?"
8,"The whole idea of apply_async is that you can do something else in the program and later retrieve the result, but instead you jump directly to close. If you don't want to do anything else you can also fetch the result directly, but with a timeout to prevent blocking the program on a never finishing subprocess, see example [here](https://docs.python.org/3/library/multiprocessing.html?highlight=process#using-a-pool-of-workers). 

Btw you might want to consider the ProcessPoolExecutor from the also built-in concurrent.futures library as it abstracts a lot of this stuff for you, see [here](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor). Their example is even a prime calculator."
8,"Some pointers

* While True is not something you want to combine with an event-looped object like a Turtle, that's why it breaks 
* Also never use While True without a sleep as it would take 100% CPU, but even a sleep wouldn't fix the issue here, as sleep also blocks the program (and doesn't allow the GUI to work)
* Instead turtle has mainloop(), which basically yields the control of the program to the GUI library's event loop
* Use ontimer() from move() to itself to effectively loop it like the while True
* Give a proper name to your class, not something as vague as Object or Thing

.

    import turtle
    import time
    import os
     
    class MyTurtle(turtle.Turtle):
        def __init__(self, spriteshape, color, startx, starty):
            turtle.Turtle.__init__(self, shape = spriteshape)
            self.speed(0)
            self.penup()
            self.goto(startx,starty)
            self.color(color)
            self.state =""stop""
     
        def move_right(self):
            print('move right')
            self.state = ""right""
     
        def move_left(self):
            print('move left')
            self.state = ""left""
     
        def move(self):
            print('move')
            if self.state == ""left"":
                self.setheading(180)
                self.forward(5)
                self.state = ""stop""
            if self.state == ""right"":
                self.setheading(0)
                self.forward(5)
                self.state = ""stop""
            turtle.ontimer(self.move, 100)
     
    ball = MyTurtle(""circle"", ""red"", 0, -300)
     
    turtle.onkeypress(ball.move_right, ""d"")
    turtle.onkeypress(ball.move_left, ""a"")
    turtle.listen()

    ball.move()

    turtle.mainloop()"
8,"As I said

> I'm not sure if it implicates that in the future a website can know that it's being accessed in that way. 

At least so far I'm not aware of a way that the website knows from the browser, it has to use tricks like the I-am-not-a-robot checkboxes or the captcha's to know it from the user itself."
8,"The loop is actually an archaic construct like what would be used in javascript or C. In Python you can just loop on a sequence directly:

    for b in buyers:
        print(b.text)

if you want to combine multiple iterables, use zip

    for b, p in zip(buyers, prices):
        print('{}: {}'.format(b.text, p.text))

>  Will that become an issue for me later? if so how do i get around it

I'm not sure if it implicates that in the future a website can know that it's being accessed in that way. But you can see [here](https://help.applitools.com/hc/en-us/articles/360007189411--Chrome-is-being-controlled-by-automated-test-software-notification) how to disable the message."
8,"This is what the [assignment expression](https://www.python.org/dev/peps/pep-0572/#capturing-condition-values) implements in the upcoming Python 3.8

    while (saved_var := random.get_data()) == 5:
        do_something(saved_var)"
8,"Ok in that case I would try with an actual json request

    data = {'content': 'ValueA|44463\nValueB|151etcetc'}
    r = requests.post('the_url', json=data)

so with json= instead. But I can't also guess what the data should contain of course."
8,"Again, checking the [documentation](https://docs.python.org/3/library/email.parser.html) it says:

> Message object structures can be created in one of two ways: they can be created from whole cloth by creating an EmailMessage object, adding headers using the dictionary interface, and adding payload(s) using set_content() and related methods, or they can be created by parsing a serialized representation of the email message.

and 

>  email.message_from_string(s, _class=None, *, policy=policy.compat32)
>
>    Return a message object structure from a string. This is equivalent to Parser().parsestr(s). _class and policy are interpreted as with the Parser class constructor.

So you get a **list** of message objects back, and by checking the [docs on an message objects](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage) you that those have an as_string method. That is the tool you can use to generate the string for b64decode. But you have to handle all the objects as you get a list of them."
8,Can you put a `print(strtext)` after the `strtext = msg.get_payload()` line?
8,"Checking the [docs](https://docs.python.org/3/library/poplib.html) shows that the `body` is a list of still encoded lines. So what you could do is `body = b'\n'.join(body)`. I would also temporarily disable exception handling to present you the full traceback

    for i in range(numMessages):
        (server_msg, body, octets) = mail_box.retr(i+1)        
        try:
            body = b'\n'.join(body)
            msg = email.message_from_string(body.decode(""utf-8""))
            strtext = msg.get_payload()
            decode = base64.b64decode(strtext)
            decode = decode.decode(""utf-8"")
            decode = """".join(decode.split())
             #prints i show will be from here
            soup = BeautifulSoup(decode, features='lxml')
        except ZeroDivisionError as e:
            print('exception!', e)"
8,"Why use a loop if you want to just do something once for one body? So why is `for j in body:` even there?

    for i in range(numMessages):
        (server_msg, body, octets) = mail_box.retr(i+1)
        try:
            msg = email.message_from_string(body.decode(""utf-8""))
            strtext = msg.get_payload()
            decode = base64.b64decode(strtext)
            decode = decode.decode(""utf-8"")
            decode = """".join(decode.split())
             #prints i show will be from here
            soup = BeautifulSoup(decode, features='lxml')
        except Exception as e:
            print('exception!', e)

Also *never* use `except: pass`, it will also silence bugs and you will never notice that your code is failing. At least let it print what is going on."
8,"> What are those pipe for? 

I don't know, your original data has the pipes, I didn't add them. The only thing the form encoding cares about is `=` and `&`

    key=value&key2=value2&key3=value3

so any other punctuation is just part of a key or a value. Because your code is 

> content=ValueA%7c44463%0aVaetcetcetc

content is the key and Valueetcetcetc is the value, until a `&` would occur that I don't see there.

> I tried to format it as a json, like

Do you actually know for a fact that it *should* be json? Eg do you have any indication that this is what your endpoint expects?"
8,What do you mean?
8,"That isn't json but the classic POST form-encoding, see [here](https://en.wikipedia.org/wiki/POST_(HTTP\)) at ""Use for submitting web forms"". Requests supports this using its `data=` parameter ([docs here](https://2.python-requests.org/en/master/user/quickstart/#more-complicated-post-requests))

    data = {'content': 'ValueA|44463\nValueB|151etcetc'}
    r = requests.post('the_url', data=data)"
8,"    for j in body:

if body is a single string, this will effectively cause a loop on each character in the body

    >>> for j in 'this is a nice long text bla bla':
    ...     print(j)
    ... 
    t
    h
    i
    s
     
    i
    s
     
    a
     
    n
    i
    c
    e
     
    l
    o
    n
    g
     
    t
    e
    x
    t
     
    b
    l
    a
     
    b
    l
    a

which is maybe not what you're looking for"
8,You can split the string into non white-space groups with [split()](https://www.w3schools.com/python/ref_string_split.asp). Then per group check if it's an operator character or a value.
8,"Did you observe the setup part in [their docs](https://github.com/requests/requests-kerberos)

> In order to use this library, there must already be a Kerberos Ticket-Granting Ticket(TGT) cached in a Kerberos credential cache. Whether a TGT is available can be easily determined by running the klist command. If no TGT is available, then it first must be obtained by running the kinit command, or pointing the $KRB5CCNAME to a credential cache with a valid TGT."
8,"ATBS uses a practical example in their chapter on scraping: https://automatetheboringstuff.com/chapter11/

Other common purposes you see brought up on this sub are

- sports results for betting, statistics and such
- schedules or other work related stuff from employer websites
- financial data for trading, like stocks or cryptocurrencies
- prices from webshops like amazon
- real estate or rent offers
- grabbing content or content links, like image galleries, song collections, torrent links

And also just automating various on-line processes like entering stuff into forms. Not exactly 'scraping' the website but still interfacing it as if you're a regular user."
8,"There are some approaches to this, one is to use `next()` to manually pull another line from the file handler

    with open('myfile') as fp:
        for line in fp:
            if 'Facebook' in line:
                print(line, next(fp), next(fp), end='') # end='' as the lines have newlines themselves

another option is to first load the file to a list (takes up RAM of course), but that allows slicing

    with open('myfile') as fp:
        lines = list(fp)
    for idx, line in enumerate(lines):
        if 'Facebook' in line:
             print(lines[idx:idx+2], end='')

with another upside that while next(line) would throw an exception if the file doesn't have another line, the slice will just return less items, so it will never throw an exception."
8,"Are you sure you didn't use `--user` in the pip command? You can force by using `--prefix`, altough as mentioned venv's are usually the way to go here. Don't forget that running `pip` as root always runs the risk of running dangerous code coming from pypi.org which is way more insecure than those coming from your OS package manager (assuming you're using their official repo's only)."
8,"The Stackoverflow I found [here](https://stackoverflow.com/questions/3348460/csv-file-written-with-python-has-blank-lines-between-each-row) mentions different implementations for Python 2 and 3. Did you correctly match that to the Python version you're running?

Btw you shouldn't use the `close` statements when you are (properly) using the `with:` blocks."
8,Please supply the full traceback as it could be the exception is coming from somewhere else.
8,"Consider 4 possibilities

A. You enter both incorrectly: `UserEnter1 != Username1` is True, and `Password1 != PassEnter1` is True. Now the result is **True**   
B. You enter the username correctly: `UserEnter1 != Username1` is now False, and the result will automatically be **False** (as it's the `and` function)   
C. You enter the password correctly: `UserEnter1 != Username1` is now True, but the result of `Password1 != PassEnter1` is False. The result is **False**   
D. You enter both correctly: `UserEnter1 != Username1` is now False, and the result will automatically be **False** (as it's the `and` function)   

See how the expression will only result in True if you enter **both** incorrectly? So `and` *is* actually for both of them to be True. It's just not the result **you** are looking for. You want to have a True when *at least one* of them is True, so that is tailored for `or` :

A. You enter both incorrectly: `UserEnter1 != Username1` is True, and the result will automatically be **True** (as it's the `or` function)   
B. You enter the username correctly: `UserEnter1 != Username1` is now False, but the result of `Password1 != PassEnter1` is True. The result is **True**   
C. You enter the password correctly: `UserEnter1 != Username1` is now True, and the result will automatically be **True** (as it's the `or` function)   
D. You enter both correctly:`UserEnter1 != Username1` is False, and `Password1 != PassEnter1` is False. Now the result is **False**"
8,"Ok I would use time.monotonic() to get an incremental time that isn't vulnerable to system clock adjustments (like when changing time manually). Assuming you want the clock to jump to 00:00 after 60 minutes:

    from time import monotonic, sleep

    # at the start of the program save the time it started
    program_start = monotonic()

    while True:
        total_secs_passed = monotonic() - program_start
        secs_passed_this_hour = total_secs_passed % 3600
        mins_passed = secs_passed_this_hour // 60
        secs_passed = secs_passed_this_hour % 60
        # minutes digits
        left_minute_digit = mins_passed // 10
        right_minute_digit =  mins_passed % 10
        # seconds digits
        left_seconds_digit = secs_passed // 10
        right_second_digit =  secs_passed % 10
         
        # put value to actual digit code here

        sleep(1)"
8,The Faq lists a few https://reddit.com/r/learnpython/wiki/faq#wiki_what_are_classes_and_how_do_i_use_them.3F
8,Psutil would come to mind.
8,"You don't need to globalize anything. Normally you pass objects around using function arguments.

    def main():
        my_dog = Dog(name='Jake')
        feed(my_dog)
        pet(my_dog)"
8,"You could employ a library that abstracts SQL to regular methods, like SQLAlchemy or Django's ORM. This often also removes the need to work with dbms-specific SQL as the library can translate the higher level operations to the specific SQL queries it should use."
8,"Once you iterated over a file, be it directly using

    with open(myfile) as fp:
        for line in fp:
            print(line)

or with csv.reader as a parser

    with open(myfile) as fp:
        reader = csv.reader(fp)
        for line in reader:
            print(line)

the file handler will not magically 'jump' back to the beginning of the file. So you either need to perform that jump manually

    with open(myfile) as fp:
        reader = csv.reader(fp)
        for line in reader:
            print(line)
        fp.seek(0)
        data=list(csv.reader(fp))

or, more practical, create the list at the start and reuse that list

    with open(myfile) as fp:
        data = list(csv.reader(fp))
    for line in data:
        print(line)
    # do other stuff with data"
8,Check this sub's FAQ for these things: https://reddit.com/r/learnpython/wiki/faq#wiki_what_are_classes_and_how_do_i_use_them.3F
8,You mean a regular 24h clock like 19:30 for half past 7 in the evening?
8,I see thanks
8,"I can't really follow what you are doing in your implementation. Also because you didn't name your file with `.py` at its end, github doesn't apply syntax highlighting. My approach would be to just employ a set operation of the letters of each word to those of each row:

    class Solution:
        def findWords(self, words: List[str]) -> List[str]:
            rows = [set('qwertyuiop'), set('asdfghjkl'), set('zxcvbnm')]
            typable = []
            for w in words:
                for r in rows:
                    if set(w.lower()) <= r:
                        typable.append(w)
            return typable"
8,"Please observe the rules on the right:

> General Rules
>
>    Posting only assignment/project goal is not allowed. Read posting guidelines.

We're happy to help with an existing program (so with the source code supplied)."
8,"Well it's not a total mess, although a simple [for loop with range](https://snakify.org/en/lessons/for_loop_range/) would do wonders

    while True:
        for i in range(10): # assuming 0 to 9
            clock.DigitDirectory[str(i)]()
            number.NumDirectory[str(ToShowNumber[i])]()
            time.sleep(0.005)

Btw I would not use `__name__` for regular methods, those are meant for Python built-in methods that need to be implemented yourself, like `__str__` in case you want to change the result of calling `str(myobject)`. In case of `displayclock` that isn't a Python built-in method, 
I can't see the use of using `__` there.

> How can i add a thread/functionality, that is not a total mess?

Just add another method that you also invoke in the same way?

    timerthread = threading.Thread(target=self.timer)
    timerthread.start()"
8,Isn't this about LaTeX? I'm failing to see the connection to Python here?
8,"I'm not really sure how you arrived at this code, especially SystemRandom?. To me, the only random things you are looking for are the third and fourth octets, so those can simply be picked by `random.randrange`:

    rand_third = random.randrange(30)
    rand_fourth =  random.randrange(256)

then form the random address by inserting those two
    
    base_addr = '192.168'
    subnet_addr = '{}.{}.0'.format(base_addr, rand_third)
    host_addr = '{}.{}.{}'.format(base_addr, rand_third, rand_fourth)
    print('network address is {} the host address is {}'.format(subnet_addr, host_addr))"
8,Can you show your code?
8,"If it's literally just that, then it's perfectly fine. Makes sense too, if either move produces a winner, then the loop should stop.

If it would be like 10 statements or more with a check between them, yeah then maybe another approach would be better."
8,/r/learnpython/w/index 'New To Python'
8,"The idea of a loop is that you only check for something at its start, not during the rest of the block. So yes you're basically stuck with that approach *at least*, but if you could explain your goal in more detail then there could be a more practical way."
8,"Don't use tuples but something like a dict or a class where you can check for membership

    def my_function():

        # Something happens here

        if all_goes_well:

            a = True
            b = 'Some none boolean data'
            return {'a': a, 'b': b}

        elif something_weng_wrong:

            a = False
            return {'a': a}
    
    result = my_function()
    if 'a' in result:
        etc
    if 'b' in result:
        etc

Although a class is often more versatile and safer to implement."
8,"Yes. That's why in many corporate e-mails or newsletters you can see attachments like a logo.jpg if you manually check for attachments. I believe that if you set the content id of the attachment, an e-mail client will understand that it is meant as body content and thus will not flag the e-mail as having an attachment (like with the paperclip icon). I would follow the examples [here](https://stackoverflow.com/questions/920910/sending-multipart-html-emails-which-contain-embedded-images) to verify this."
8,"Still haven't clicked for me, at least not to write them (using them is dead simple of course)."
8,https://www.youtube.com/watch?v=t51bT7WbeCM
8,"Yes and the start already gives it away: this uses a *lot* of javascript, which makes it very interactive and pretty for use in the browser, but it doesn't work in anything that doesn't run javascript.

As a workaround you could let plotly export the graph to a file, see [here](https://plot.ly/python/static-image-export/). I would recommend to use png, add it as an attachment, say mygraph.png and as the html body provide it as a cid: url

    <html>
        <head>
        </head>
        <body>
            <img src=""cid:mygraph.png"">
        </body>
    </html>"
8,"> General Rules
>
> Posting only assignment/project goal is not allowed. Read posting guidelines."
8,Maybe check their documentation? https://help.pythonanywhere.com/pages/UploadingAndDownloadingFiles/
8,"A directory by itself is an entity on the file system, just like a file. It also has a non-zero length, but that has to do with its implementation in the filesystem, it isn't a sum of all the file sizes in it. Because if you think about it, this would mean that any mutation on a file and thus a different size in the file system will need to be updated on *all* of the folders above it. That would give a big performance hit while adding nothing useful except for the ability to get the folder's effective size.

If you want to know that sum, you do need to perform a manual look up on all the file sizes in the folder recursively. This is also why the operating system's explorer/finder tool will also take some time to come up with that number or like in Windows at least you can see the number increase while it iterates on the files in the background."
8,You could try gist.github.com
8,Doesn't work and the website even doesn't support https... If you want encrypted upload I can recommend https://0bin.net/
8,www.pastebin.com
8,"This is about numpy arrays, not simple lists (nor should those be called arrays)"
8,"seems like the statement is missing the actual `array` function name, instead you just do `()` (where the list is its argument)"
8,"You mean list in any case right? Strings are text objects, that's something else. If you mean to find the common values of two lists, see for example [this SO post](https://stackoverflow.com/questions/1388818/how-can-i-compare-two-lists-in-python-and-return-matches)"
8,"     ast.literal_eval(r.content)['access_token']

Does this return the actual access token you need? And what is returned in the second post, so 

    v = s.post(url, data=login_data

what are the v.headers, v.text etc?

And if you add a 

    print s.cookies 

after each statement, what are the results?"
8,Please share your code as the devil is in the implementation not in the concept.
8,Ok could you instead supply the html of the plotly figure?
8,Can you supply the code you used?
8,Have you tried actually sending the plot as part of the e-mail body in html format? See https://realpython.com/python-send-email/
8,"I'm not exactly sure what you are trying to do with 'throw a variable', but if you just mean to copy file X to file Y, you can do

    import shutil
    shutil.copy(""name_of_file.blastn"", ""re.blastn"")"
8,"You don't actually save the result from split into a variable, so the statement has no effect. Then the `[0]`, `[1]` etc are just indexing the original `line` that came from the file-handler.

    for line in birthdate:
        line = line.split('""')
        if month_day in line[0]:
            print(line[0],line[1])

The reason why you actually need to save a return value of a string method is because strings are immutable (can't be changed), so a method on them is always producing a new string."
8,"It's because requests is a higher level implementation around urllib3, meant for simplicity and versatility, not to form any HTTP request you want. If you want low level configurability, interface urllib3 yourself. Btw why would you want to remove that header anyway?"
8,repl.it
8,"I'm not sure what you mean, the code has a for-loop right? If the file has multiple lines it should print all those lines out one after another."
8,"Two clients at the same time is not going to work. You might want to look into multithreading, see [here](https://stackoverflow.com/questions/23828264/how-to-make-a-simple-multithreaded-socket-server-in-python-that-remembers-client) for a socket server."
8,"    op_to_name = {'-': 'minus', '+': 'plus'}
    op = input('give operator: ')
    print(op_to_name[op])"
8,"    doc_id = [[idx] for idx, v in enumerate(doc)]

not sure why you would want it though, pairing nested lists is often an indication of abstracting something in the wrong way"
8,Use a dict to map strings to the names instead of a list?
8,Maybe this helps? [https://stackoverflow.com/questions/6302901/split-a-list-by-a-lambda-function-in-python](https://stackoverflow.com/questions/6302901/split-a-list-by-a-lambda-function-in-python)
8,"You can run a headless version of your browser, just google 'headless selenium python your-browser-name'. 

>Also, does that mean I can’t use BF on all the pages that use javascript?

You can, after selenium has loaded it as the browser can still output the html source just like `View Source` does when you select it.

    driver.get('myurl')
    maybe other stuff first
    soup = BS(driver.page_source, 'html.parser')"
8,Correct. I usually just google U+000D or whatever codepoint I find and you get the explanation/equivalent characters.
8,"Enumerate is actually the pythonic approach if you don't mean to skip over that line on the next loop iteration. If you do, then you can use `next()`

    print(line, end='')
    print(next(input_file), end='')

I prefer to use end= here as it saves the hassle of running another function."
8,That would indicate the page is using javascript and that's something BS can't help you with as it just interfaces an html/xml parser. You might want to look into selenium see the second part of https://automatetheboringstuff.com/chapter11/
8,"I'm not sure what the requirement for printing `z` is. If you mean to always use the T then just do

    for a in w:
        for b,c in zip(x,y):
            print(a, b, c, z[0])

if you mean to repeat the pairing of x,y for every value in z, use another nested for loop

    for a in w:
        for b,c in zip(x,y):
            for d in z:
                print(a, b, c, d)"
8,"What happens if you do

    with open(filePath) as f:
        for line in f.read().split('\n\r'):
            print(line)

If it still mysteriously splits in the middle of a line, get a hex dump of the file using [HxD](https://mh-nexus.de/en/hxd/) or if on linux/mac in a terminal do `hexdump -C myfile.txt` and check what bytes are exactly on the line at the point where it breaks."
8,"I said

> Have you considered that it's just a **network speed** issue? 

then you say

> it’s not a download issue. 

but also 

> network speeds is what i’m thinking

Eh? Download doesn't mean 'to pull something from the internet', it just means to load something from something else. This includes moving a file from one network drive to another, because then it will still be channeled through the client's pc. So if a pc has a worse network connection or some other issue, then you will get different different speeds and thus a different duration. You could maybe check the network bandwith used during the execution using your task manager."
8,"Yeah so put the input call instead of ""Sampat""?

    x = make_doctor(input(""Enter your name plz: ""))"
8,Have you considered that it's just a network speed issue? Downloading a 100 MB file at my home takes much longer than at my office because I don't have 1 Gbps fiber at home.
8,"Not with the soup, see [here](https://stackoverflow.com/questions/11465555/can-we-use-xpath-with-beautifulsoup). I personally use either manual indexing/find-chaining or css-selectors."
8,"The common sense reason is that there hasn't been much demand for it, while adding it would lead to more confusion / lower readability. By forcing to use an else that will always result in a new block, you always get the structure like

    for item in iterable:
        run the loop
    else:
        run when no break

and 

    try:
        some code
    except MyException:
        run when exception is caught
    else:
        run when there was no exception

That helps to keep it concise, with just the downside that you get a double indent if you also need to have an if-structure inside the `else` block (but that is equally so for the except: btw). That alone would imho not validate the work they need to put in to allow it, as basically you then need mix the more complex implementations of the for/while and try/except structures with the much simpler if/elif/else structures. It doesn't mean it couldn't be done, there's just not enough reason to do it."
8,"Maybe next time mention that you are working in Django? This is /r/learnpython not /r/learndjango. 

The error comes from doing a query on a field called 'query' that is not in your model. If your model looks like 

    class Choice(models.Model):
        question = models.ForeignKey(Question, on_delete=models.CASCADE)
        choice_text = models.CharField(max_length=200)
        votes = models.IntegerField(default=0)

Then you are limited to run a query on either one of these fields (or use Django's own tools), so

    Choices.objects.filter(question='to be or not to be')  # a particular question
    Choices.objects.filter(question__icontains='why')  # questions containing a substring, case-insensitive
    Choices.objects.filter(votes__gte=5)  # more than 4 votes

You can *not* just do 

    Choices.objects.filter(query='something I am looking for')

because Django doesn't understand what exactly you are trying to accomplish with that. If you mean to a key/value to filter mapping, you can simply expand the dict in the filter() call

    my_query_dict={'votes': 0, 'question': 'bla')
    Choices.objects.filter(**my_query_dict)

but there's the caveat that you can not use those `__operator` additions like I used above, you first need to translate them somehow but how depends on what exactly you are expecting from your parameter functionality. See Django's guide on making queries: https://docs.djangoproject.com/en/2.2/topics/db/queries/

You also might want to consider employing a deserializer for this like Django Rest Framework, as that supports translating 'common' query parameters to actual Django ORM filters, so stuff like `id=1` works right out of the box if you use a ModelSerializer."
8,"See the example in the official Python tutorial [here](https://docs.python.org/3/tutorial/controlflow.html#if-statements). Or compare to strings

    if userNumber == '3':"
8,"The 'terminal' is in fact the 'REPL', a special console where every statement you provide is directly executed as Python code (makes sense) but also its return value if generated is printed for you. This 'feature' makes you expect that this will always happen in Python, but this is not the case. In normal Python programs you actually need to use `print()` to provide anything to the screen."
8,"You left the comma after `]`:

    MinorPentatonic = [pattern1],
                                ^ here

so there you are creating a tuple, as tuples can be defined as

    mytuple = 1, 2, 3, etc

so then the first item in that tuple is your list"
8,"Doesn't the string contain newline characters? At least at my side Python does print it on multiple lines

    >>> pattern1 = ""\n3 3 3 3 3 3\n| | | | | |\n| 5 5 5 | |\n6 | | | 6 6\n| | | | | |""
    >>> print(pattern1)

    3 3 3 3 3 3
    | | | | | |
    | 5 5 5 | |
    6 | | | 6 6
    | | | | | |

Op's issue is that he left the `,` when commenting out the rest of the list"
8,"Please check the rules on the right --->

> General Rules
>
>    Posting only assignment/project goal is not allowed. Read posting guidelines.

We're happy to help with an existing program, but for starting a new project we expect you to do the research."
8,"Can you reraise the exception? so 

                         except Exception as e:
                                print(str(e))
                                raise

then provide the full traceback that is returned?"
8,"You add just the values to the list of k: `[k] + something + something`. That won't work. And still my example supports this too through a slice

    for k, v in dic.items():
        my_str = '\n'.join([k] + v[:2])"
8,"Why not use just use formatting, *then* encode?

    big_string = '{} {}\n'.format(b24, i)
    sock.sendall(big_string.encode('utf-8'))"
8,"Use [str.join](https://appdividend.com/2019/01/31/python-string-join-example-python-join-method-tutorial/), and also use .items() to iterate on both the keys and the values

    for k, v in dic.items():
        my_str = '\n'.join([k] + v)

If you also want a `\n` at the end, add a list with an empty string in it

    for k, v in dic.items():
        my_str = '\n'.join([k] + v + [''])"
8,"I copied the code from your topicstart, it does

    check_profanity(contents_of_file)

there so if `check_profanity` isn't known now it can't also be working in your code... Unless you are just running my snippet as  the entire program?"
8,"Ok but then work by sentence?

    def read_text():
        with open(r""C:\Users\LEON\Desktop\python\movie_quotes.txt"") as fp:
            for line in fp:
                check_profanity(line.strip())"
8,"It seems like you are forwarding the *entire transcript* as a parameter to 

    http://www.wdylike.appspot.com/?q=

??? That website offers the lookup of a single *word*, so you need to first create a collection of all the words (I would advise a set to prevent duplicates) then one-by-one forward those to the website. I've you will not be banned in the process because that will be a lot of words to check this way."
8,Haaaaave you met [cookiecutter-django](https://github.com/pydanny/cookiecutter-django)?
8,"os.system runs a new shell where it then executes a statement. So calling export there will just set the new path for that very short-lived shell process... Instead you can modify your environment's path using the `sys.path` object, as explained in the docs [here](https://docs.python.org/3/library/sys.html)

> A program is free to modify this list for its own purposes. Only strings and bytes should be added to sys.path; all other data types are ignored during import.

    import sys
    sys.path.insert(0, '/path/to/geckodriver')"
8,"You normally create your project's venv inside the project folder, so like

    project/
        bin/
        doc/ 
        src/hereyourpythoncode
        venv/
        otherstuff

And if you use a VCS you define there that it should not track the venv folder. For git there's a 'master' .gitignore available [here](https://github.com/github/gitignore/blob/master/Python.gitignore) that includes tons of common Python-related stuff to not include."
8,"pythonanywhere has a free option, you could also use the free tier option from amazon to host it on a lightweight vps."
8,Check this sub's wiki r/learnpython/wiki/index
8,The idea of this sub is that people present their program with a certain problem/bug/missing feature and then we can suggest or provide stuff to resolve it. It's not meant as to present the project goal and just a stub and let others write the program for you. If you are looking for a guide to get you going with a Rpi and python just look for those on google like [this one](https://learn.adafruit.com/playing-sounds-and-using-buttons-with-raspberry-pi/overview) or look for SO posts on mp3 + buttons on the rpi like [this one](https://raspberrypi.stackexchange.com/questions/79662/need-a-gpio-button-to-stop-the-currently-playing-mp3-file).
8,Please [fix your formatting](https://old.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a website like I mentioned above.
8,Please supply your code (preferably using www.pastebin.com or gist.github.com ) and explain what exactly you want instead of just 2 buttons
8,I can also recommend Tom Scott's video on this https://www.youtube.com/watch?v=PZRI1IfStY0
8,"Not really Python though, this is how IEEE 754 specifies how it should be handled."
8,"I would just assume the `threading` library, there aren't much alternatives really."
8,"> The GUI still lags when I comment out that part of the code. Even so, I tried your time.sleep(0.1) anyways and sad to say that doesn't work.

Ok I'm glad I asked this as this rules out the server threads completely. Would you be able to isolate just the GUI part to see if that runs without lag? Then add the other parts line by line until it starts lagging again and you'll find the culprit. If the isolated GUI is even lagging then there's a problem in its own implementation.

Just an overall design overthought: why would you want to check the client threads during normal runtime? I would think that the only time you need to interface them is during shutdown. So then I would remove the loop from the run() part and just iterate on the threads and check there status in close()

            for thr in self.sock_threads:
                if thr.is_alive():
                    thr.stop()
                    thr.join()

The only downside I see is that it creates a potential memory leak as each thread will not be removed, but on this scale with the threads not saving data in memory I wouldn't expect this to be a serious issue. 

> I'm relatively new to threading and am generally unfamiliar with the intricacies of it.

The use of a threading.Event() is basically what you implemented in your stop() and your self.__stop in one object. What I normally use is an individual Event() per thread (if needed) and a global Event() for tearing the whole thing down during the shutdown procedure. In the simplest form:

    SHUTDOWN = threading.Event() # global

    # in the run method in all the threads
    while not SHUTDOWN.is_set():
        do stuff

    # or, if the loop also had a sleep(x) at its end
    while not SHUTDOWN.wait(x): 
        do stuff

    # to set it, like from your GUI
    SHUTDOWN.set()

the key in using its methods (so on itself) to check and set them is why they work through different threads, while in your case you need to call a method on your thread to accomplish the traversal."
8,"Np, I got it from one of the latest free [Python Weekly newsletters](https://www.pythonweekly.com/)"
8,"exit is a function of the sys library

    # put at the top of the code
    import sys

    # then to exit
    sys.exit()"
8,"> No, I am asking what units they are entering their height in for the calculator. 

Correct, that's not the problem. The problem is that after printing that question using

    print('Do you measure height in feet (ft), inches (in), or centimeters (cm)?')

you have another statement that is meant to actually receive the input from the user, hence why the function is called `input()`

    input(height_unit)

There the problem lies, because you want to also *use* that provided data later on. An to be able to do that, you need to save it in a variable. Which is not happening here, see the simple explanations in the input() function like [this one](https://www.w3schools.com/python/ref_func_input.asp).

> I want it to return the value for the next function if it is one of the 3 correct values, and ask them to try again if it isnt. I thought using AND would make it have to meet multiple parameters.

If you would have the 'test'

    if age != 50 or age != 10

Let's see what the outcomes are when using either of the values and a value not matching any of those:

    >>> age = 50
    >>> age != 50 or age != 10
    True
    >>> age = 10
    >>> age != 50 or age != 10
    True
    >>> age = 1
    >>> age != 50 or age != 10
    True

So it's **always** true, not if the age is either 50 or 10 and also not if it isn't one of them. Why? Because if the age is 50, the `age != 10` is True. If the age is 10, the `age != 50` is True. If the age is 1, `age != 50` is also True. So what exactly would you be testing this way? 

If you mean to check that the value is not 50 **and** the value is not 10, which is what you want, you need to actually use the `and` operator

    >>> age != 50 and age != 10
    False
    >>> age = 10
    >>> age != 50 and age != 10
    False
    >>> age = 1
    >>> age != 50 and age != 10
    True

do you see the difference? You actually *want* to have it to meet multiple parameters, because you want to see if it doesn't match all of them.

Just as a sidenote, normally in Python you check vs a collection, so

    if height_unit not in ['ft', 'in', 'cm']

as it makes it more clear to what you are doing and is less prone to confusion with or's and and's."
8,"So put a print('try again') after the `if` that checks if you guessed right?

    secret_nm = 9
    guess_count = 0
    guess_limit= 3
    while guess_count < 3:
       guess = int(input('guess: '))
       guess_count += 1
       if guess == secret_nm:
           print('you win')
           break
        print('try again')
    else:
        print('failed!')"
8,https://pypi.org/project/snoop/
8,"If I put it in an online repl like here: https://repl.it/repls/WillingOutlandishSystems

it just works, so can you explain what you are trying to fix?"
9,Look into `*args` and `**kwargs`.
9,How are you running your code? You should have an error message in your Flask output that gives you more information.
9,You could get back a reference to the `list` type in a lot of unorthodox ways. But really you just shouldn't do this.
9,"You reassigned `list` to the value `'h'`, so you're trying to do `'h'(pet)`, which makes no sense. Don't make variables named `list`."
9,Post your code.
9,Look into Flask - it's the sweet spot between a big framework like Django and a barebones wrapper like cgi.
9,"In that case, you probably want [psutil](https://psutil.readthedocs.io/en/latest/) - it works cross platform and doesn't require using the Task Manager."
9,Can you be more specific? What does your app _do_?
9,That's a very general question. You can start with the [TensorFlow tutorials](https://www.tensorflow.org/tutorials).
9,It doesn't. What are you trying to achieve?
9,"`random.choice(the_dictionary.items())` will give you a `(key, value)` tuple."
9,"That's not how it works. `""echo""` is the command, `""hello""` is an argument. Try `subprocess.call([""echo"", ""hello""])`."
9,Post the entire error.
9,What you want is in the standard library - look into `itertools.combinations`.
9,"Readability, I assume."
9,"With the default setup Flask will actually serve static files from the ""static"" folder under `static/`, so if your image is called `image.jpg`, put it into a folder called ""static"" next to your Flask code and refer to `static/image.jpg` in your HTML."
9,"Flask doesn't automatically serve your static files, so your browser can't find the image."
9,"Aria2 with all links at once - it will download the files concurrently, for more efficient bandwidth utilization."
9,You could define `get_names` so that it calls `get_name_indices` internally.
9,You could build a `get_names` function that's defined in terms of `get_name_indices`.
9,"Why not always return the index, and then use it to access the object if needed?"
9,Why do you want to do this?
9,"You can use `==` to compare values. `if question == ""30"":` etc."
9,"Yeah, that's not happening unless you read the whole thing into memory. Generators are not reversible, so even if you buffer _some_ data, you'll be unable to `seek(0)` correctly without buffering the whole thing. What is your end goal here?"
9,The OS will tell your code when new data is available.
9,"No, there isn't. Rename the file."
9,"asyncio runs `import logging` internally, which imports your file instead of the `logging` module in the standard library. Delete or rename your `logging.py`."
9,Do you have a file named `logging.py` in the same directory as your script?
9,"You can use the `ast` module to parse the user input as Python code, and it will fail if the input can't be parsed."
9,"You should call `logging.basicConfig` once, at the start of your program, and not every time the function is called. If you really want to route the messages to different files, you can set up two different loggers with different handlers."
9,"Look into `pathlib` to cut down on the amounts of `os.path.join` everywhere. Also, use `with` blocks to open your files. Also, please stop configuring `logging` in every function."
9,You want to use [EWMH](https://specifications.freedesktop.org/wm-spec/wm-spec-1.3.html) for this.
9,It's fine - that's kind of an unexpected behavior.
9,"Yes. `import tkinter` imports your script, not the system Tkinter module. Try renaming it."
9,Is your script called `tkinter.py`?
9,"`bool` is a subclass of `int`. You could manually check for `x is True` or `x is False`, I guess, but that's not really a good idea. What are you trying to achieve here?"
9,"It's possible, but on Windows in particular it's _really_ hard, because Windows doesn't really provide a good way of setting up a terminal without the default command prompt window showing up."
9,https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa
9,"Date objects. If you need to read something, you can format it yourself."
9,You assign it again: `a = random.randint(...)`.
9,"`a = random.randint()` generates one random number and assigns it to `a`, forever. If you want a new, different random number, you need to generate it again."
9,"Parse it to a datetime object using `datetime.strptime`, then convert it back using `datetime.strftime`."
9,"Hashsets are basically hashtables with no value, just the key. Python `set`s are implemented like that."
9,"Hashtables and hashmaps are two different names for the exact same data structure. Python doesn't really use either name, and prefers to use ""dictionary"" instead."
9,You can't have a `try:` without an `except:`.
9,"The PyPI is not an ""official repo"", it's a dumping ground that anyone can upload anything they want to. I can publish a module called u_tattoo-girl_is_a_dingus in like thirty seconds, and it will look exactly as ""legit"" as the page you linked."
9,"Download the package from PyPI's ""downloads"" page manually, open the source code and read it."
9,You'll have to audit the source code to know for sure.
9,"Not in this code in particular, but there might be something in the `ezgmail` module they're using."
9,"In that case, you can use an escape sequence to get the string ""-2"" without mentioning the character explicitly, and then parse it to an int: `n += int(""\x2d2"")`. `""\x2d""` decodes to the character with hexadecimal number 0x2D, which is ""-""."
9,"So you can't use those three characters exactly? `-`, `~` and `/`?"
9,Can you translate it as closely to the original as you can?
9,Can you post the exact text of the assignment?
9,"So all math is banned? What's allowed then? That's a weird assignment. Would converting the number to a string and then doing decimal math on it digit by digit, grade school style, count?"
9,So you need to subtract 2 from a number without using the `-` operation? How about adding `-2`? Does that count?
9,"Is the `-` operation a ""module""?"
9,...what. Can you be more specific?
9,Post your entire program and the exact error you're getting.
9,"If you're in a situation where the performance difference between SQLite and SQLAlchemy matters to you, the first thing you need to do is stop using Python."
9,"That's ... not how it works. At all. SQLAlchemy just wraps the exact same SQLite library inside, it doesn't add network round trips or anything of the sort."
9,"Why not just use an ORM like SQLAlchemy? You're basically building an ORM already, just worse."
9,"No, your example in the OP is fine, because you're making all of your functions async. You lose the benefits of async if you try call async code inside sync code. 

For sans IO, read [this](https://sans-io.readthedocs.io/)."
9,"`super()` follows the correct method resolution order when used with multiple inheritance. Calling the parent class directly does not. With single inheritance, there's no meaningful difference."
9,"Make everything async. Sync functions can't be suspended, so you will lose all the benefits of async even if you do make it work. Alternatively, rewrite your game logic to be sans-IO - make it a self-contained class that takes in a stream of events and produces a stream of updates, and have your network logic drive it from the outside."
9,"In that case you can just return a reference to the function, and then call it later."
9,That still calls the functions before `yield` gets called at all. You can remove the `yield`s and the `for` loop at the end and get the exact same result.
9,Missing a `)` on line 22.
9,"It doesn't work the way you think it works at all. `yield print(...)` prints immediately, then yields `None`."
9,"1. Use `os.path.join` or `pathlib` to build up paths, don't just concatenate strings.
2. Don't call `logging.basicConfig` every time you need to log something, call it once at the start of your program.
3. Don't manually add timestamps to your logs, configure `logging` to do it for you using the `format` option.
4. `create_archive_status` could be simplified by just using `os.makedirs(..., exist_ok=True)`"
9,"Python can use parentheses to define operator precedence: `mass * (c ** 2)` is totally fine. That said, the `**` operator has a higher precedence than `*`, so your example will work without them as well. I'd still keep them in though, for readability."
9,"What is your end goal, exactly?"
9,"Yes, it can absolutely do that. Look into PySerial for sending the data and something like NumPy for the noise."
9,Post your entire program.
9,Post your entire program.
9,"What do you mean by ""not working"", exactly?"
9,"You are definitely not waiting long enough, yes. There are lots of ways to optimize your script."
9,"In that case, look into [Scapy](https://scapy.net/)."
9,"What is a ""brute force scanner""? What do you want to scan? What do you want to scan _for_?"
9,"Yes, this could work."
9,Yes.
9,What do you mean?
9,"What do you mean by ""how should I write a CI file"", exactly? What commands do you need to run? It's probably going to be `pytest`."
9,What is your question again?
9,"PGP has a header, but there's nothing insecure about that - all it says is that this file is PGP encrypted, but that tells you nothing about the contents of the file."
9,How would you do what?
9,"And don't wrap GPG if you don't absolutely need to. If you're going to be installing your program on the receiving end, it's much better to just install GPG instead, especially if it's long term storage."
9,"py.test is pytest. It's the old spelling that is stuck in my head for some reason - they rebranded to just ""pytest"", without the dot, a while ago."
9,"Yes, you could, though you probably should just use `pytest` and let py.test discover all of your tests automatically."
9,"In that case, just use GPG. If it's good enough for the NSA, it's good enough for you."
9,"How you write your tests will definitely be a factor, because you'll be running the tests as part of your CI process."
9,"Are you trying to protect against the NSA? Does your ""transport"" take five years? What problem are you trying to solve here? GPG has been around for three decades, and hasn't been broken yet."
9,"""Execute the app"" and then what? ""Run test"" how? Do you have unit tests? Integration tests? How are they implemented?"
9,"What do you mean by ""switch environments"", exactly?"
9,"That depends on what you mean by ""pythonic"". A lot of things that are considered idiomatic in Python are really general, but some things will not translate."
9,"What do you mean by ""build is OK"", exactly?"
9,That's a wrong approach. Can you post the exact code you're using?
9,"Your string doesn't actually contain a backslash followed by numbers, it contains the character ""ü"", represented as the escape sequence ""\u00fc"". What are you actually trying to do?"
9,"No. `__name__` is a special variable that Python sets when importing your module. If it's imported from another module, `__name__` will be set to whatever name the other module uses to refer to your module (so, say, if you have `a.py`, and another script `b.py` does `import a`, the value of `__name__` inside `a.py` will just be `""a""`); if your script is executed directly, it's set to a special value, `""__main__""`."
9,Can you explain a bit more?
9,"You don't need to be a ""math genius"" to learn anything, even math. That said, machine learning (which is what ""AI"" really is) is a fairly math intensive field, so you will need to brush up on your fundamentals to understand what's going on."
9,Why are you doing this? What is the end goal?
9,"You need to design your program in a way that makes it possible. For example, you could have a list of all possible actions, and a centralized ""action processor"" that interprets user input. If you design your program like that, you can implement global commands easily."
9,"You can use a `for` loop to look at each element of the list separately, and then an `if` statement to decide if the element is less than 5."
9,"Yes, it's possible. Make sure your program has the appropriate [shebang](https://en.wikipedia.org/wiki/Shebang_(Unix\)), make it executable, and put it in a location that's on your `$PATH`. You can use `argparse` (in the standard library) or [Click](https://click.palletsprojects.com/en/7.x/) to parse the command line arguments easily."
9,"`def` defines a function, not a variable, and needs to be followed by the function body. You can create a new variable at any time, simply by assigning to a name: `foo = 5`."
9,"Go to the link it tells you to go to, and download it from there."
9,"Generally you want it to be something like ""/u/p-zomby's whatever script (p-zomby@gmail.com)"", but that doesn't absolve you from potential legal responsibility."
9,Right before it fails.
9,"So, try to `print(options)` before you decode it. What are you receiving? Is it valid JSON?"
9,"What do you mean by ""doesn't work"", exactly? Are you getting an error? When? What does the error say?"
9,"""Fine"" in what sense?"
9,"Generally, the User-Agent header identifies your program to the server. If you're accessing a friendly server, you want to set it to something unique that can be traced back to you, so that the server's administrators know who to contact should there be an issue."
9,`rpm` does.
9,You most definitely should use a dictionary.
9,"    Python 3.7.4 (default, Jul 16 2019, 07:12:58)
    [GCC 9.1.0] on linux
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> dir()
    ['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__']
    >>> import requests
    >>> dir()
    ['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'requests']"
9,"This is horrifying and you should never do that, ever. At the very least, it's going to ""clear"" all of your imported modules and defined functions as well."
9,"There isn't, and you shouldn't need one. If you need something like this, you should be using a dictionary."
9,You cannot.
9,"Because the `del` statement does not interpret arguments like that, it removes the name `val`, not whatever it contains."
9,"I can absolutely guarantee that it's not the only way to do it, and that whatever you're doing is wrong."
9,What problem are you trying to solve that requires you to do this?
9,This is a horrible idea. Why are you doing this?
9,This particular website clearly doesn't require it.
9,The website blocking requests from things that don't look enough like a browser.
9,You probably don't want to specify the User-Agent header like that unless absolutely necessary.
9,Why would you ever explicitly specify a fake browser User-Agent?
9,"Backend code in Python with Flask/Django/Starlette/whatever, frontend code in HTML/CSS/JavaScript. Maybe look into a JS framework like Vue or React if you're building something complicated."
9,"You need the Visual Studio Build Tools, not the runtime libraries."
9,"Run `pacman -Qkk`, reinstall all packages it says have corrupted/missing files."
9,"It's really tricky to do, assuming you're on Windows. Xbox controllers completely bypass the traditional input stack, so you need to use something like [ViGEm](https://github.com/nefarius/ViGEm)."
9,So it will get the value and do what?
9,What are you using `ord` for?
9,There is no === operator in Python.
9,"Why are you using a dictionary where you can use a list? Also, why use a `while` loop with a manual counter when you can use a `for` loop with `range`?"
9,"You can use `wn.setup(width=1, height=1, startx=None, starty=None)` to set your window's size to the entire size of the screen, as documented [here](https://docs.python.org/3/library/turtle.html#turtle.setup)."
9,What GUI framework are you using for your window?
9,"So do you want to make the window ""larger"", or do you want to make it _full screen_?"
9,In that case it should be enough to pass `dtype=str` to `read_clipboard`.
9,"Pandas will always perform some sort of a conversion on the text. Do you just want to get the entire contents of your clipboard as a string? If so, look into `pyperclip`."
9,You have to crawl the whole thing. There's no way around it.
9,"Sorry, I don't really understand the question. When you call `read_clipboard()`, Pandas reads text from your clipboard and converts it to actual numbers in the computer's memory. When you `print(df)` or whatever, Pandas converts the numbers back to text. In a numeric representation, `10.00` and `10.0` is the same number."
9,"That's not your issue. Pandas is reading data into a different internal representation, not the literal characters ""10.00"". If you want it to be displayed differently, you need to work with how you're displaying the data."
9,Yes.
9,Look into the `pyperclip` library.
9,"Yes, for most of it, at the very least."
9,Alpine is totally fine. CentOS and Ubuntu are fine too. There won't be a noticeable difference.
9,"Generally, no. Most web browsers will not mark files as executable when downloaded."
9,"It should be runnable with a double click, as long as you make it executable (`chmod +x`)."
9,"Think about it. You can use an `if` statement, and a `len` function to check the length of your lists."
9,You have lines that don't have a timestamp. Ignore those.
9,Importing `string` and calling functions from it is effectively deprecated. `x3.lower()` is a better option.
9,You need to `import string` to do this. Or use `x3.lower()` instead.
9,This should work. Are you getting an error?
9,"It works exactly the same way as just using multithreading normally. Also, it's basically never going to be useful."
9,Yes.
9,Why wouldn't it be possible?
9,Basically never if you're CPU bound.
9,"Yes, it's possible. No, it won't be faster."
9,Why? What is your end goal here?
9,Every method on every class is overridable.
9,"It's `tkinter` on Python 3, with a small `t`. Also, you'll have to rename your file to something else, so it doesn't conflict with the standard library name."
9,That's normal. Are you trying to draw your plots inline inside the command prompt window? That's not possible.
9,The solution is probably to use a single type everywhere.
9,"Yes, but that's generally an indicator of a bad design at a larger scale."
9,"That's called a type hint. They're not actually enforced at runtime, but there are tools that can verify that your program is using the right types."
9,How is `FN` defined?
9,"Your project is called `casino_locater`, but your settings refer to `casino_locator`."
9,Look into the `open` function and the `file` objects it returns.
9,"There is no builtin one, but you could easily write one. It might be a good idea to normalize your user input _first_ though, before accessing any actual data."
9,"PyCharm probably created a virtual environment for you. Check if you're using one, and install Pandas into it."
9,"No, not like that. `self.module1()` calls `module1` and gives you the result. You want something like

    callabledic = {""module1"": self.module1,...}
    for t in listtocall:
        callabledic[t]()"
9,You could have a dictionary mapping names to callables.
9,"Check the length of your list, and ignore the ones you know you don't need."
9,Yes.
9,"It's definitely bad practice. If you want type hints, use type hints. `def do_the_thing(foo: str, bar: dict):`."
9,"Any code at the top level of the module will be executed at import time. If there's a call to `main()`, it will run."
9,"You can't really run Tkinter on Android or iOS. You might want to look into something like Kivy, but really, it's better to just use the tools that are native to your platform."
9,"Yes, you can. You can even do log rotation natively."
9,"> ['From:', 'zqian@umich.edu']

What about this one?"
9,"You're trying to do `',.'=None`-  assigning to a string literal. That's definitely not valid."
9,Post the exact code and the exact error.
9,Missing a `)` at the end.
9,"Yes, and there are easier ways to do it than reverse engineering your application. If your server can be attacked with a wrong input, you're doing it wrong."
9,"No, `[1:]` takes the list from the element at index 1 to the end, so it's the first element (index 0) that gets chopped off."
9,"You're not misunderstanding containers, you're misunderstanding recursion. `list[1:]` takes the tail of the list and passes it to `RecursiveSum`, which then takes the tail of the tail of the list (i.e. `list[1:][1:]`, i.e. `list[2:]`), and so on."
9,"The former lets you `import` your program as a module later. If you don't have `if __name__ == ""__main__""`, importing your program in another script will run `main()`."
9,"You can store functions as dictionary values, and then call them when needed."
9,"You're missing two things at once here:

1. ""Raw"" strings are not actually a different type of string, they're just syntax. `r""icons""` and `""icons""` are the exact same thing - raw strings only matter when your string literal itself contains backslashes - `r""\n""` will give you the string containing the character \, followed by the character n, and `""\n""` will give you a single newline character.

2. When the exception is displayed, it displays the file path using `repr`, which, for Python strings (and most other types really), displays them in a way that can be easily copy-pasted into source code. This representation doesn't use raw literals, so all _actual_ backslash characters are displayed as two backslashes, the way you would escape them in a normal string literal.

What this means is that your path is being generated just fine - it's just not a valid path. Are you sure the file exists in the right place? Are you sure that the working directory is set correctly?"
9,Can you post your entire program?
9,Where does `directory` come from?
9,"That definitely should work. You're running your code on Windows, right?"
9,"Nothing - it will work, technically, but you should still use `os.path.join`."
9,Use `os.path.join`.
9,"When you make a query, psycopg2 gives you back a tuple for each row. So you do something like this:

    with connection.cursor() as cursor:
         cursor.execute('select password_hash, more_stuff from users where username = %s', [username])
         row = cursor.fetchone()
         if row is None:
              raise Exception('oh no')
         password_hash = row[0]
         if not passlib.verify(password_hash, password):
              raise Exception('oh no')"
9,A bit.
9,How are you hashing your passwords?
9,"You're checking passwords, aren't you?"
9,"That would require some sort of specialized hardware, or a service like [Twilio](https://www.twilio.com/) that sells you said hardware as a service."
9,"Sort of, except threads can communicate with each other easier."
9,"You're missing `()` to actually call it - you're setting your variable to the reference to the function itself, not its result."
9,That's because you're not calling `pyperclip.paste`.
9,"""Doesn't work"" how exactly?"
9,"It can be solved by a try/catch, as long as there is a uniqueness constraint in the database itself. If you don't create that constraint explicitly, it will accept multiple entries with the same username."
9,"For 1, you don't actually want to do that. What you want to do is have a [uniqueness constraint at database level](https://www.postgresql.org/docs/current/ddl-constraints.html#DDL-CONSTRAINTS-UNIQUE-CONSTRAINTS), and then try to insert the data for the new user and see if it fails. This is because otherwise your data becomes susceptible to race conditions like:

1. Request A comes in to create user Foo
2. Request B comes in to create user Foo
3. Request handler A checks if user Foo exists, it does not
4. Request handler B checks if user Foo exists, it does not
5. Request handler A creates a user named Foo
6. Request handler B creates a user named Foo
7. You now have two users named Foo

For 2, all you need is a simple `SELECT` statement - `SELECT columns, you, want FROM users WHERE username = %s`. Note that you probably want [an index](https://www.postgresql.org/docs/current/indexes.html) on the `username` column to make those lookups fast."
9,"OK, hold on now. Do you have a single column with all usernames, or are you creating a new column for each user?"
9,No. Your `.bat` file needs to contain something like `python openYoutube.py`.
9,What are the contents of your `.bat` file?
9,"It's not gonna work the way you expect it to. You need to change your database schema. Tables with thousands of columns, or even hundreds, are absolutely _not_ what SQL databases are designed for. What is your database schema like? What actual pieces of data are you storing per user?"
9,Are you adding a separate column for every user? That's not going to work at any reasonable scale. What data are you storing?
9,"You probably want something that's specifically designed for geospatial data, like [Geopandas](http://geopandas.org/)."
9,Why do you want to know that? You should generally know your database schema in advance. Are you trying to dynamically add columns to a table? Because that's definitely the wrong approach.
9,Why do you want to do that?
9,"You don't need to switch the entire testing framework - pytest can run `unittest` tests just as well, and allows fixtures in them too."
9,"You can do this, and more, with [pytest fixtures](https://docs.pytest.org/en/latest/fixture.html)."
9,Why are you passing `''` as the second argument?
9,You'll have to figure out some way of identifying it. PIL can crop it.
9,"1. You really shouldn't be posting your ID publicly.
2. If you're dealing with pictures, you should try to detect the relevant area first, then crop the image to it, and maybe apply some postprocessing (contrast, sharpening, etc., maybe edge detection) to get it to a format that's easier to work with later."
9,"In that case, maybe you can just put a button on your skip rope, or wherever it's stored? Why use the camera at all?"
9,What is your source data like?
9,"The output depends massively on the quality of the image, and the preprocessing steps applied. Tesseract in particular is mostly designed for printed/scanned documents with a consistent font and spacing."
9,You need to rewrite the entire file. There's no way around that.
9,"What is the actual problem you're trying to solve? Like, what's the finished use case for this thing?"
9,You can dump it to a JSON file or something.
9,`filepaths` is just a string. `for content in filepaths` loops over individual characters of it. You probably want `os.listdir`.
9,"The `::` is just part of the file path, it's not special. `%02x%02x%02x` encodes the color triple as an RGB string like ""aaffee"", where every 2 characters is one color channel in hexadecimal, using string formatting."
9,"That's a very weird statement, and also not a thing you should care about."
9,"It is not faster than nested for loops, I'm not sure who told you that."
9,Your code looks like it assumes that the input list is sorted. The assignment never states that explicitly.
9,"`[z.pop(i) for i in ind_columns for z in list_file]`, but also don't use a list comprehension if you don't care about the return value."
9,/r/learnpython/wiki
9,"How did we ""misunderstand importing""? Also, what do you mean by ""doesn't seem to match to the definition""?"
9,"    >>> a = array.array('I', [1, 2, 3])
    >>> a
    array('I', [1, 2, 3])
    >>> a[0]
    1
    >>> a[0] = 'not a number'
    Traceback (most recent call last):
      File ""<stdin>"", line 1, in <module>
    TypeError: an integer is required (got type str)"
9,"If you actually read that post, you'd see that it specifically talks about the `array` module I just linked earlier, which is not, in fact, the same thing as a list where all items happen to have the same type."
9,"You haven't proven it at all, you brought up a definition of ""array"" from somewhere that doesn't really apply to Python. The type of both `[1, 1, 1]` and `[1, 1, 'one']` is `list`, and Python lists don't care what type of values they store. There is a separate [array module](https://docs.python.org/3/library/array.html) in the standard library that attempts to implement fixed type, numeric arrays efficiently, but no one really uses it, because everyone uses [NumPy](https://www.numpy.org/) instead - another math library that actually has a fixed type `array` type."
9,"No, it's not. Where did you get that from?"
9,"So `[1, 1, 1]` is an array and `[1, 1, 'one']` is a list?"
9,"Where does that definition come from? Also, Python lists don't actually ""store values of the same data type"".
    
    Python 3.7.4 (default, Jul 16 2019, 07:12:58)
    [GCC 9.1.0] on linux
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> a = [1, 'foo', ['oh god a nested list'], range(5, 10)]
    >>> a
    [1, 'foo', ['oh god a nested list'], range(5, 10)]
    >>> type(a)
    <class 'list'>"
9,What you're entering is not an array. It's a list. Why do you think it's called an array?
9,"    Python 3.7.4 (default, Jul 16 2019, 07:12:58)
    [GCC 9.1.0] on linux
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> a_list = [""some"", ""text"", ""here""]
    >>> type(a_list)
    <class 'list'>"
9,That's still a list and not an array.
9,It is most definitely not an array. It's a list.
9,It's fine. Let people make mistakes.
9,"Python calls those lists, not arrays."
9,"It's a list of strings. One of those strings just happens to look like a list.

Edit: never mind, it's invalid syntax."
9,This is a terrible way of doing things. Look into using a `while` loop instead.
9,"`from ..A import a` is basically `import ..A; a = A.a`. You're binding an entirely new name to the object, there's no magic reference stuff going on. Also, this is one of the reasons globals are bad and you shouldn't be using them."
9,"Can you post a more specific example? Right now it looks to me like `foo(bar())` or similar - in that case, it's simply a function call with an argument that is the result of another function call. Python evaluates `bar()` and `2 + 2` much the same way - both are expressions that evaluate to a value, and can be used anywhere a single value can."
9,"1. For 5.5 specifically, it will be stored exactly. Other numbers may not be perfectly representable as floats.
2. It depends. If they're all the exact same float value, `== 3.14` will work."
9,What version of Python are you using? Can you post a screenshot of your code?
9,"Can you post the exact error? ""Bad input"" is not an error message Python has."
9,You need a web framework like Flask or Django.
9,"So, you're trying to access item 5, and most of those lists only have two items."
9,"Look into Qt for Python for the GUI, and PyInstaller for distribution."
9,That means there's no item at index 5 in `wds`. Try printing the value of `wds`.
9,"Floating point math is not perfectly accurate, especially when you're dealing with numbers that can't be represented exactly in base 2. That's just a thing you have to accept. If you need absolutely perfect accuracy (e.g. for dealing with money), look into the `decimal` module."
9,"You're reassigning `di` here: `di = wds[5].split("":"")`. Also, you might be interested in `collections.Counter`."
9,Do you have a file named `random.py` in the same directory as the script you're running?
9,"You'll have to do some sort of network-ish communication. Maybe gRPC, if you don't want raw sockets. But really, why not build the UI in Python too?"
9,"Because it's a very awkward environment that tries to mix Windows and Linux and ends up with a terrible mess of both, as evidenced by your adventures in path handling. If you want a Linux-y environment on Windows, you should really just use WSL."
9,"In that case, you should use normal Windows-style paths in your scripts (`""C:\Users\""` etc), and you can run Python from the Windows command prompt or PowerShell."
9,Windows what? Windows Store? The installer from Python.org?
9,That's not at all what I asked. How did you install Python?
9,Do you have Python installed normally on Windows or inside the Git Bash environment somehow?
9,Why are you running it inside Git Bash?
9,That's the `del` from the previous value of `foo`. Try printing `id(self)` as well.
9,You can do a `JOIN` and then filter the output however you want.
9,Nothing is ever guaranteed about when objects are deallocated in Python.
9,Why is `new_list` a list at all? Pretty much all of your types are horribly messed up...
9,Some text editors automatically reload files as they update on disk. Is that what you want?
9,"You have a list with a single element. Just access it with `x[0]`. Also, why is it a list, anyway? Can you post the rest of your code?"
9,"Just make a bookmark that links to `javascript:<your console script here>`, and click it."
9,"That's because you're running code in the Python shell. You should install a text editor like Visual Studio Code or Notepad++ or whatever, save your code to a file with the .py extension, and run it either through the text editor's builtin tools or by running `python path\to\your\file.py` in the command prompt/terminal of your OS."
9,"How do you write something to a file, in general?"
9,"You can open a file that doesn't exist yet in write mode, and it will be created. What do you mean by ""I can only write one line"" though?"
9,"You can't use a capital `D` in `def`, for one."
9,What errors exactly? Can you post the exact code you're running and the exact error you're getting?
9,You could just use a key-value store like Redis.
9,"Yes, it's definitely faster, especially reading."
9,Sounds like you want a database.
9,This particular library [declares its version in its own module](https://github.com/microsoft/azure-devops-python-api/blob/dev/azure-devops/azure/devops/version.py).
9,Your example isn't even XML.
9,"Parsing `*args` is the way to go, yes."
9,"You can't have `elif` clauses in `try` statements. That's just not how the syntax works. It's specifically `if/elif/elif/.../else`, `elif` does not generally work everywhere `else: if:` does."
9,Why are you doing it like this? What is the end goal?
9,"There is a massive difference, yes. What are you running on your ESP8266, MicroPython? C? Node.js?"
9,Your class methods need to take `self` as an argument.
9,So are you using Arduino or ESP8266?
9,What sort of Arduino are you using? Do you have any actual network connectivity on the board?
9,Are you treating it like a bad thing or a good thing?
9,It's a centralized secure store that automatically manages what applications can access which scripts.
9,"GPG might be the industry standard for encrypting data in transit to a recipient, but the industry standard for storing secrets is something like [Vault](https://www.vaultproject.io/)."
9,What are you trying to achieve exactly? Are you trying to store credentials securely in your script? Why GPG of all things?
9,"Requests never writes anything to disk, unless you explicitly tell it to."
9,Does your program handle that case?
9,"What happens if `discriminant` is negative?

Edit: also, re: this line: `if type(a) or type(b) or type(c) != int` - this doesn't work the way you think it does. Read [this](https://www.reddit.com/r/learnpython/wiki/faq#wiki_variable_is_one_of_two_choices.3F)."
9,Look into `psutil`.
9,That's because you're trying to treat it like a string. Look into the `round` function.
9,"What error does it give you? Post the exact code you're running, and the full error message."
9,"Remove `mode='rb'` to stop Tkinter from opening the file for you, and it will just return the file path."
9,You need to reopen the file and `yaml.dump` data into it.
9,Your last two conditions are identical.
9,Using part of Requests 2 inside Requests 3.
9,That's not going to work.
9,"In that case you should verify that it's the library you're calling. Maybe you need `pip3 freeze` on the ""working"" machine to see which libraries are installed on Python 3."
9,"You could just do it with a Numpy array. If you _really_ want to avoid a library, you can write your own - it's really easy."
9,Run `pip freeze`.
9,"What do you mean by ""as OpenGL Vec3"", exactly? Are you using some sort of an OpenGL library that expects a Vec3?"
9,"You don't need to ""convert to hexadecimal"". Just operate on `bytes` directly, and use the `struct` module to directly encode data into byte strings."
9,"I'm not sure, to be honest. What are you trying to achieve?"
9,"If you want it to run whenever the spacebar is pressed, you need JS."
9,You're probably using a different version of the library.
9,"I guess this is the new development branch. It's still barely usable though, and it's still not going to happen before PyCon 2020, especially now that Kenneth has officially handed off Requests 2.x to the PSF organization."
9,"You can try installing from the 3.0 branch on Github, but it hasn't been updated since 2018."
9,Requests 3 is in no way going to be out before PyCon 2020. The entire project is in flux right now.
9,It's not released yet and you shouldn't be using it for anything.
9,"The function you're calling returns a `GetReleaseDefinitionsResponseValue`, which is not iterable. You probably want something like `for mypipeline in definitions.value:`."
9,What is `releaseclient`?
9,"No, there isn't. You need JavaScript."
9,"It's fine to cache stuff on the client, as long as a badly behaved client with a ""wrong"" cache does not make things worse for your server or other clients."
9,"Encryption does not protect your data from anything. If the client is running on something a user controls, you should not trust a single piece of data coming from that client."
9,"Yes, though you probably shouldn't be storing any valuable data on the clients."
9,"It's Postgres, no second capital, and yes, it's free and open source."
9,SQLite will definitely be faster for this.
9,Postgres can do thousands of updates per second easily. SQLite definitely can't.
9,"One thread per connection scales to maybe a few hundred concurrent connections, maybe a few thousand. asyncio scales to tens of thousands of connections _per core_, and you can scale it even higher if you use multiple cores."
9,"There are multiple strategies for splitting data between instances, with different behaviors. For example, it's possible to split data based on some sort of a key, and have all data of one user stored on one database server, and all data of another user stored on another. It's also possible to set up delayed replication, or other similar things."
9,[This](https://realpython.com/async-io-python/) may be interesting to you then.
9,"SQLite does not handle lots of concurrent connections well - it's not designed for that. It doesn't matter how much server hardware you throw at it, it will not be as fast as a proper database. It's also going to limit you to a single server - there is no way to scale SQLite to more than one machine."
9,The official documentation for [asyncio](https://docs.python.org/3/library/asyncio.html) is great.
9,"PostgreSQL is a database server that understands SQL, just like SQLite, but it runs as its own process, and allows a lot of concurrent connections. You can use a library like [asyncpg](https://magicstack.github.io/asyncpg/current/) to connect to a PostgreSQL server from Python and run queries."
9,"asyncio instead of threads, Postgres instead of SQLite."
9,"""Scale horizontally"" means run on multiple servers, all sharing the same state. The way of storing state would be to use a database that can scale like that, something like PostgreSQL. Threads are, as I already told you, not essential to your application."
9,"> When a client connects to the server, in order to be able to process traffic from each client, it must be own its own thread.

No idea where you got that from, because it's flat out not true.

> May I ask why SQLite cannot be used specifically?

Because SQLite doesn't allow concurrent access."
9,"Are your clients connected over a network? Are you spinning up a thread per client? In that case, you should probably look into asyncio. Oh, and get a real database."
9,"Store state in a way that can scale horizontally (read: PostgreSQL, basically), minimize the amount of state accessed at a time. Don't use threads if you can."
9,"`random.choice` doesn't magically make it so that every subsequent read of the variable returns a new random value - it rolls once and returns the result, which you then save to a variable. If you want a different result, you need to call `random.choice` again."
9,"Why SQLite specifically? Also, why ""many, many, many threads""? What are you actually trying to achieve here, and why?"
9,Post your code.
9,"For lists, it's always a direct loop over every element. For sets and dicts it's a hash(set/table) lookup. For other objects, it's however `__contains__` is defined on the class. Your testing is just too random to be representative of anything."
9,"The right way to do it would be to pass your list into the function, and either modify it inside, or return a new list with different data."
9,"gRPC on a most basic level is really simple. You describe your protocol, run a program on it and get an importable Python module that lets you implement a server or a client. There are very few parts that actually _move_  - most of it is very static."
9,https://www.reddit.com/r/learnpython/wiki/faq#wiki_variable_is_one_of_two_choices.3F
9,And you're going to regret that every time you change the protocol for any reason whatsoever.
9,"Then you should really just use gRPC. Have a single server act as the data collection point, and the devices connect to it as clients and just send gRPC messages with data to it."
9,"Those devices are running Python, right?"
9,"It doesn't matter if you need a flexible API or not - your transport layer is going to be worse than gRPC _anyway_. This is not a wheel that _ever_ needs to be reinvented, unless you're on an IETF committee."
9,Look into the `psutil` module.
9,"Generate N-1 integers, calculate the last one to make them add up."
9,"Yes, that could definitely be it."
9,Are you using some sort of a proxy server?
9,"How do you know it's ""returning htmls""?"
9,"Yes, that is what you should be doing. Send the password to the server, have the server hash it (+ salt) and compare it against the stored hash."
9,What is the file format or the software called? Is there a spec for it?
9,What is the file? Are you trying to reverse engineer some file format?
9,"It's very likely not text, or at least not just text. Text rarely contains sequences of ascending bytes like 1, 2, 3, 4, 5, 6, 7, 8."
9,"If you hash the password before sending it to the server, your hash effectively becomes the password - an attacker just needs to steal the hash from your server, and they can authenticate. The entire point of password hashing is to prevent exactly that from happening."
9,"You could start building your own projects, or find a project that you're interested in and see how you can contribute. Spraying random projects with unwanted/unneeded pull requests is definitely not the way to go here."
9,"In that case, a Github project or an open source contribution will boost your marketability a lot more than some random certificate you got somewhere."
9,"`line.print_user` doesn't return a value, it prints it to the screen. You probably want to either `return` the result of it, or just remove the `print` at the last line."
9,"There is no standardized certification in Python like CCNA or whatever, and I've never seen a company ask for one."
9,"That depends entirely on what certificate you aim to get. Also, why are you even trying to get one?"
9,Qt for Python (a.k.a. PySide2) is probably your best option.
9,"Are you asking if Python is _easy to learn_, if it's  _easy to learn without knowing math_, or if it's _easy to get a certificate in without knowing math_?"
9,"`a != (b or c)` does not mean what you think it means - `(b or c)` is evaluated first, using the builtin `or` operator, which is [defined as follows](https://docs.python.org/3/reference/expressions.html#boolean-operations):

> The expression `x or y` first evaluates _x_; if _x_ is true, its value is returned; otherwise, _y_ is evaluated and the resulting value is returned.

Any non-empty string is considered ""true"" by Python, so `('Stu Sutcliffe' or 'Pete Best')` evaluates to just `'Stu Sutcliffe'`.

You can use the `not in` operator and a list to achieve the result you want. Also, changing lists in-place while you're iterating over them is a recipe for disaster. It's much better to just build a second list with the data you want to _keep_."
9,"Do you have to use this specific config file format? Why not just use JSON? You could do something like

    {
        ""button_1"": [32, 15],
        ""button_2"": [32, 5],
        # etc
    }"
9,I'd avoid that and provide a function in your own module instead that does the right thing.
9,"So you want the lights to change when the user logs in? And you want this to run entirely on the Pi, and not on the computer that the user logs into?"
9,Let's start by figuring out what you're actually trying to do first. Who's going to be sending the command to change the hue? The user that's logged into the computer? How are they going to do that?
9,"If you absolutely must do it, you can use `len(ip.shape)` to check the number of dimensions, and then reshape the array accordingly."
9,That's definitely not a thing you can do with ftplib.
9,"So you're expecting your array to have two dimensions, and you get a 1D array as input. Is it a row or a column?

Alternatively, you're expecting your array to have two dimension, and you get a 45D array as input. What happens?

It really shouldn't be your responsibility to ensure that the array has the correct dimensions here."
9,"Yes, that is definitely the issue. The game is expecting that file to be there, to use it as the window background."
9,Yes.
9,"Do you have a file named ""backround.gif"" in the same directory you're running your program from?"
9,What are you trying to actually _do_?
9,Then why not use something like Spyder itself to edit your `.txt` files?
9,"I'm on mobile right now, so I can't give you a full explanation, but the keywords to search for would be ""GIL"" and ""event loop"". The documentation for `threading`, `multiprocessing`, `concurrent.futures` and `asyncio` in the standard library is worth reading as well."
9,"Possibly. That said, the results for all three will be extremely predictable just based on how Python works."
9,"Why not just save the logged in session state to the disk, and have all processes load it?"
9,"Java uses exceptions extensively, just like Python."
9,What app are you using to save the file? Pages?
9,"It really doesn't make sense to just spawn a single task and benchmark the total time to run, especially if your task is so short that you mostly end up measuring the overhead."
9,"No, there isn't, and you'll have to reinstall your packages anyway, because the versions are not compatible."
9,"It really depends on what you use it for. It _can_ be faster than Python, but it's largely designed for scientific computing and nothing else."
9,"As I said in your other thread, that URL doesn't return a picture, it returns a JSON document that contains metadata about the picture and a link to it. You need to extract the link, then make a second request to download it, and then display it the way you're doing here."
9,"For the general case, if there's a reference cycle somewhere, the garbage collector will find the cycle and deallocate the objects if there are no other outstanding references to them.

For your simple example, the interpreter will simply exit and free all memory once the script ends."
9,"And what do you mean by ""apply my own APIs to interact with people""?"
9,Modify what Telegram app? The desktop one? The mobile one? Interact how?
9,"What do you mean by ""my own APIs"" exactly? Do you want to build a web API other people can use to interact with Telegram? A Python library? Or do you want your own program to interact with Telegram?"
9,"    a = ['one', 'two', 'three', 'four']
    print(len(a)) # prints 4
    for idx, value in enumerate(a):
         print(idx, value)

    # prints:
    # 0 one
    # 1 two
    # etc."
9,`len` gives you the length of a collection or an iterable; `enumerate` lets you iterate over an iterable and adds an index.
9,"In that case, just save your file with a `.pyw` extension instead of `.py` and double click it. You probably want to have a tray icon or something to make it possible to quit your app though."
9,"Sounds to me like what you really need is a single class, which every sign is an instance of, and then you store those instances in a list."
9,Can you give an example of what you want your code to look like?
9,"You can store your outputs in a list, just like any other values."
9,You could store all of your values in a list.
9,"Do you just mean the Python ""command prompt"" black window? I assume you're on Windows."
9,"Loop over the entire file, always keep the last line you've read. When you're done, you'll just have the last line. Something like this:

    with open('foo.txt', 'r') as fd:
        for line in fd:
             pass

    print(line)"
9,"No, use the string as a key, and the object as a value."
9,Nothing.
9,Why not use a dictionary?
9,"Probably because one of your previous cells defines ""combinations"" as a list."
9,Look into `itertools.combinations`.
9,"No, you can't. Pygame has no idea about what's happening in other windows."
9,Yes.
9,"In that case, you could prepare your data once by building a set of all words that appear in the data, and then just check if the word the user requested is in the set."
9,"Does the user need to actually find the item with the text, or does the user just need to know if one exists?"
9,"Are you going to be querying the same dataset for multiple animals at a time, or are you going to always have all-new data?"
9,"So the case doesn't matter, and it being a separate word counts. Does ""cats"" match?"
9,"So it has to be a standalone word? Does ""cats"" count? Does ""CAT""? ""CaT""?"
9,"So you're not actually checking if your _list_ contains the word ""cat"", you're checking if _any element in your list_ contains the word ""cat"". This is a fairly difficult problem to solve in the general case, but it can be simplified if you know what your restrictions are. Are you always going to be looking for the word ""cat"", or can it be any word? Does it have to be an exact match, or can it be part of another word (like ""caterpillar""), or can it be the same word in a different form (like ""cats"", but _not_ ""caterpillar"")?"
9,"Flask and Gunicorn are not even solutions for the same problem. You build your app in Flask, then you run it under Gunicorn."
9,"To add to what /u/dundir said, SimpleHTTPServer is bad and you should use a real web framework."
9,`result: dict = <thing>` defines a variable called `result` and assigns `<thing>` to it. The `: dict` part is what's called a _type hint_ - it's a note to the programmer about what the type of `result` should be.
9,In that case that's probably your best option.
9,What database are you using?
9,"Do you just want to store the text? In that case, store the text."
9,`line['text']` should do it.
9,"You can skip looping over `a`, and instead just calculate how many nuggets you have left and checking if the number is divisible by 6. You can also skip a lot of loops by bailing out early if you've already exceeded the maximum possible number of nuggets."
9,Not really. Is that substring always present in a specific field of that object? Or maybe in a specific subset of fields?
9,But why are you matching on arbitrary places in the JSON string and not the actual object?
9,Why are you trying to do that?
9,"For the same reason `a, b = b, a` is not the same thing as `a = b; b = a`. In the first example, the right hand side is evaluated entirely first."
9,`x.split()` doesn't change `x` - it returns a new value that is the split list. Try `x = x.split()`.
9,"Why not make your programs functions instead, and `import` them into your main script?"
9,Post your code.
9,"The answer to this question is almost always ""use HTTP"", sometimes ""use gRPC"", and never ""use sockets""."
9,"Something like this?

    while True:
        user_input = input(""> "")
        if user_input in valid_inputs:
            break  # <- this part exits the loop
        print(""Try again!"")  # if we reached here, then the input isn't valid"
9,Can you give an example of the behavior you want to achieve?
9,"Something like this:

     with open('input.txt') as in, open('output.txt', 'w') as out:
         for line in itertools.islice(in, start=1, end=None):
              out.write(line)"
9,However much fits in your RAM.
9,"You're not using PyQt Designer, you're using Qt Designer with the PySide code generator."
9,It sounds like you're mixing PyQt and PySide types in one program. Or are you actually using PySide exclusively and not PyQt4?
9,"You can't. You could make your function take an optional argument to disable printing, though."
9,"Because strings are compared lexicographically (read: alphabetically). ""Zebra"" goes after ""Apple"" in the dictionary."
9,"Have your Android app open a connection to your server when the button is pressed, send the command to that socket, read it on the server side and use a dictionary or an `if` statement to handle it."
9,Still not doing your homework for you. What have you tried?
9,In what context? They're often needed around tuples because of operator precedence.
9,It sounds to me like your function arguments are really the entire configuration of your entire program. Do all of those arguments actually change often?
9,Then why is that a problem?
9,"But why does it have to be one single line and not, say, many lines with named arguments? Something like

    do_the_thing(
         when=datetime.now(),
         what='the thing',
         how_fast=10,
         spam='eggs'
    )"
9,"The commas are what defines a tuple, not the parentheses. `a = 1, 2, 3` is also a tuple."
9,How so?
9,And why is having everything in one line a good thing again?
9,There is no universal roadmap. Can you be more specific? You say you want to understand why certain things happen. What sort of things?
9,You can use `continue` inside a `for` loop to skip to the next iteration immediately.
9,"If you just need _any_ full line, you can probably just read one line, discard it, then keep reading and decoding new lines."
9,How are you running your program as administrator exactly?
9,For JavaScript? Look into [WebExtensions](https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions).
9,"If you want the strict rules, nothing in the Python language specification says that file objects - or any objects - have to be freed immediately when they go out of scope or become unreachable. The fact that CPython behaves like this _right now_ does not mean any Python implementation, or any version of CPython, is going to behave like that."
9,"That's a very basic example. It's not going to work like this if there's more than one reference to the file object, for one."
9,"No, I mean that if, for example, an exception is thrown while the file descriptor is open, it may not get closed."
9,"In this particular example there is no difference, but in general, it's possible that your program just crashes while the file is open, and does not close it properly."
9,"It's possible for any website with JavaScript, but it's also going to be difficult to reverse engineer most of those. Definitely not possible with Python."
9,"No, it's not. Both ways have been in the language from the start, they just behave differently."
9,"You were using the interactive Python shell then. You probably want to use a text editor like Visual Studio Code, or an IDE like PyCharm."
9,It seems like the website you're running stuff on doesn't allow you to read user input. Why not install Python on your own machine?
9,"Wouldn't you want a dictionary in that case?

Edit: or a template engine like Jinja2."
9,What reason do you have for putting a number in a variable name? This usually indicates to me that what you really want is a list.
9,"`os.path` is not really ""outdated"", or even deprecated, at this point, so using it is totally fine. Also, `pathlib`, `os` and other things you `import` are modules."
9,You shouldn't be using asyncio like this. You want an async-native HTTP client like aiohttp.
9,How about tic-tac-toe or hangman?
9,Post the exact code you're using.
9,What kind of game?
9,What do you want to make?
9,You might want to look into asyncio.
9,Find a thing you want to build. Try to build it. Learn as you go.
9,"The subreddit wiki has lots of good resources. Also, what do you mean by ""how to get the game started""?"
9,Then you're missing a lot of parentheses on `print` calls.
9,"Missing a `)` on the previous line. Also, indent your code by four spaces to have Reddit display it as code. Also, are you using Python 2? Please don't."
9,"It's definitely an unusual bit of syntax to encounter, but it's also _really_ powerful when used right."
9,"How do `for` loops know what `aa` is in `for aa in a`? The answer is - they just do, it's part of the syntax. List comprehensions are the same way - they're a special case of the language itself."
9,"This specific syntax is called a _list comprehension_. It follows the format: `<expression> for <pattern> in <iterable>`, or `<expression> for <pattern> in <iterable> if <condition>`, and it works something like this:

    result = []
    for <pattern> in <iterable>:
        if <condition>:
             result.append(<expression>)

So, your example would desugar to:

    result = []
    for aa in a:
        if aa < 5:
             result.append(aa)
    print(result)"
9,You can use `os.path.join` to connect the directory name and the file names.
9,"No, I mean a different algorithm for the whole thing, one that doesn't use expensive calculations like this one, or at least reuses their results where possible."
9,You might want to use a different algorithm entirely.
9,https://0.30000000000000004.com/
9,"It's as fast as it's going to get, realistically. Are you sure it's actually the slow part?"
9,"Floating point (read: fractional) math in computers is not  perfectly accurate, so things like these happen sometimes."
9,Translating it to pure Python will _definitely_ not make it faster.
9,"It's theoretically possible, but it requires complicated setup that you probably don't want to perform. I'd just write the app in Kotlin at this point."
9,"That's not possible, no. If you want to run your code offline, it needs to be JavaScript."
9,"What do you mean by ""system audio"" exactly?"
9,Then you should look into it - that's the part you're missing to understand this code.
9,Do you know what a `for` loop is?
9,"`random.shuffle` operates in-place, so you need to copy your list if you want the changes to not affect the original: `listb = lista.copy()`."
9,"Remove those four lines and replace `start_monitor(args.name)` with `start_monitor(""blah.exe"")`."
9,"You can't. JPEG is, by definition, a lossy format. The compression does not care what the original photo is, it just cares what the version of it you're saving is."
9,Use a different format like PNG.
9,"Then that's the reason - JPEG is inherently lossy, meaning it doesn't preserve the _exact_ image you gave it."
9,Are you saving your image in a lossy format like JPEG and then reloading it?
9,"No, there isn't. Indentation is how you group statements in Python, and you'll be doing it _anyway_, even in C++, if you want your code to be maintainable."
9,You don't need to keep it.
9,"It should be exact, though now that I look at the non-truncated numbers, it seems like inaccuracies kick in pretty early, so you should probably `round` here."
9,It's hard to say really.
9,It really doesn't matter for performance. SQLAlchemy is just a nice abstraction over writing raw SQL queries.
9,"There's the [math](https://docs.python.org/3/library/math.html) module in the standard library. There is no sigma notation in the language, but you can achieve something similar by using the builtin `sum` function and generator expressions. The function of the `^` operator is bitwise XOR, exponentiation is `**`."
9,"Also, here's another important tip: _name your variables sensible things_. Even just adjusting your original code:

    sqrt5 = 5**0.5
    invsqrt5 = 1/sqrt5
    one_plus_sqrt5 = 1 + sqrt5
    phi = one_plus_sqrt5 / 2
    one_minus_sqrt5 = 1 - sqrt5
    psi = one_minus_sqrt5 / 2
    phi_pow_n = phi**n
    psi_pow_n = one_minus_sqrt5**n
    phi_pow_n_sub_psi_pow_n = phi_pow_n - psi_pow_n
    fib = invsqrt5*phi_pow_n_sub_psi_pow_n 
    fib_int = int(round(fib))

See how much easier it is to spot the error?"
9,"`part7` should be `part7 = part5**n`, not `part4**n`. I feel like you broke the problem down too much and got confused. Here's how I'd do it:

    phi = (1 + 5**0.5) / 2
    psi = 1 - phi
    
    for n in range(10):
      print(int((phi ** n - psi ** n) / (phi - psi)))"
9,Then you're still going to hit the character limit of whatever you're uploading the pictures to way before you hit the amount of w's Python can print to a text file in 5 seconds.
10,"Oh that's ok, post it anyway."
10,The code is long? Use a code sharing site like github or pastebin and share the link with us.
10,"This entire subreddit is here to help. Please make a new post that includes your question. Show us your code and the entire error, and what OS and version of python you are using. It would also help if you gave us an example input and what output you are expecting."
10,"/u/muthu1896, your submission has been removed from r/learnpython for the following reason(s):

* Posting only assignment/project goal is not allowed. You need to post what you have tried so far. Please see subreddit rules in the sidebar.



____

If your submission was removed for lacking additional info you can edit your submission text and then notify moderators and ask for the submission to be re-approved.

If you have any additional questions either reply to this comment or [message the moderators](https://www.reddit.com/message/compose?to=/r/learnpython)."
10,"The python program is meant to run in the cmd window. Show us your program and your output if it's different than you expect. The default geany install uses a different command than the default python install, so many geany users have to change the execute command from ""python"" to ""py"" for it to work."
10,"/u/RetroRudog, your submission has been removed from r/learnpython for the following reason(s):

* Posting only assignment/project goal is not allowed. You need to post what you have tried so far. Please see subreddit rules in the sidebar.



____

If your submission was removed for lacking additional info you can edit your submission text and then notify moderators and ask for the submission to be re-approved.

If you have any additional questions either reply to this comment or [message the moderators](https://www.reddit.com/message/compose?to=/r/learnpython)."
10,"There's no technical reason other than that's how the authors of pandas and matplotlib decided to make it behave. You can also use the pandas version of `bar` or the matplotlib version of `plot`:

    p1 = plt.plot(data_2015['Race'], data_2015['Number of arrests'])
    p2 = plt.plot(data_2016['Race'], data_2016['Number of arrests'])
    p3 = plt.plot(data_2017['Race'], data_2017['Number of arrests'])
    plt.legend((p1[0], p2[0], p3[0]), ('2015','2016','2017'))
    plt.xticks(rotation='vertical')
    plt.show()"
10,"Checkbuttons require a variable, because the default value is shared. 

    VS_var = IntVar()
    VScheckbox = tk.Checkbutton(VScheckFrame, variable=VS_var, bg=""#000000"")
    VScheckbox.pack(fill=""both"")

(This is a common problem for beginners.)"
10,It works for me. If you have issues ask the mods of /r/python.
10,"I assume you mean the /r/python server? A link is on the /r/python sidebar, here: https://discord.gg/python

This subreddit has no official server and the python language does not either."
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,"It depends on what you are doing with it. If you need a bytes object but you need it to be mutable then bytearray is perfect for you. It's certainly a lot faster than using a list of characters and joining them. In most cases a list of integers works just as well as a bytearray, but bytearray has a slightly smaller memory footprint. My previous trick works for integer iterables too: 

    >>> data = [0, 112, 0]
    >>> ' '.join(f'{x:0>2X}' for x in data)
    '00 70 00'


TBH bytearray is not used very much."
10,"> I understand that bytes objects are essentially py2 strings, and bytearrays are essentially ""lists"" of mutable bytes. 

That is correct. The only thing that you are missing is that when displaying the data python prints bytes in ASCII *if possible*. There is no printable ASCII character for 0x00, so python prints `'\x00'` instead, however there is a printable ASCII character for 0x70, so python prints `'p'`. 

    >>> '\x00'
    '\x00'
    >>> '\x70'
    'p'
  
    
This holds true for bytes, bytearrays, and strings. 

You can use a format call to convert into a standard hex representation, if you want. 

    >>> data
    bytearray(b'\x00p\x00')
    >>> ' '.join(f'{x:0>2X}' for x in data)
    '00 70 00'"
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,"I can't tell you why they do that, you'll have to ask them. I'll guess that a big part of the reason has nothing to do with what you'll be using in class; they just want to weed out students that don't have gumption to make it through advanced classes."
10,"Jython is python code being executed by the JVM. I don't think there is a way to use java code in it, but I think you can import Java classes, so yes, that may be a possibility for OP. Good thought."
10,"I'm confused. If the batches are pre-defined then they aren't variable, right? 

numpy will be ever-so-slightly faster at single-item indexed lookups, but that is often negated by fact that the object needs to be converted to a python object. Where numpy shines is in batch operations. 


This is starting to sound a lot like an [XY problem](http://xyproblem.info). Can you describe your overall goal here?"
10,"""professional programming"" covers a LOT of people. By no means do they all need Calc II. Professional website developers don't use more than basic trig and logic. Finance and data scientists can use up to the highest levels of math."
10,That's python asking your OS to run the JVM in a new thread and letting it run the java code. Which is a big difference because you can't share RAM.
10,Nope.
10,"You don't need to know any math to learn to program. 

However you will need math as a professional programmer, because you will never get assignments as a list of instructions. All your assignments will basically be word problems, and the programmer is expected to also figure out the math that the computer should execute. So if a job in programming is your goal you need to study math as well."
10,"Yes, numpy will always be smaller in RAM. But as you rightly pointed out, numpy will suffer in performance with changing array sizes, making numpy a poor choice. Python lists can change size with nearly no performance hit."
10,A normal python list is best for that.
10,The float does not produce the correct result somewhere around the 15th place after the decimal. Since OP is rounding everything to 2 decimal places they will never notice it.
10,"Just like any other file, it will be created in your ""current working directory"". What that is depends on how you run the program. You can add this code see it: 

    import os
    print(os.getcwd())"
10,"First, choose a location where you would like to store them. Python recommends a ""user base"" location. To see where the recommended location is use this command on windows: 

    py -m site

or this command in Mac / Linux: 

    python3 -m site

Or pick your own. If you pick your own add it to the PYTHONPATH environmental variable so that python will know where to look. 

Next, save your functions in a python file in that location. Lets say you name it ""mymath.py"". 

Last, add this line to the top of your new file: 

    from mymath import vdot

Now you can use your vdot function in the new program."
10,"Hmm that means you didn't install a modern version of python. You either don't have python, have a very old version, or have a repackaged version. Go to python.org and download and install official python."
10,Python would work well for this. However it seems a lot easier to have the employees fill out spreadsheet files instead of PDFs. Or just use Google forms.
10,"The problem is on line 34 you get the `payRate` from the user, but then you use the variable `hourlyPay`. Change line 42 to:

    hourlyPay = float(payRate * 1.5 * (workHours - 40))


Also, you have a logic error. Your program prints out only the overtime pay, not the total pay. You need to add 40 hours of normal pay too."
10,"That's not cmd, that's the python interpreter. You are either pasting that into IDLE ""python shell"" or you are opening cmd, typing ""python"" <enter> to start the python interpreter, and then pasting it in.

You need to put it in cmd (not IDLE) with the ""python"" or ""py"" command on the same line as the file path, like this: 

    py ""C:\path\to\my\file.py"""
10,"Before you spend any money check out the many free resources to get you started. We have [a list of learning resources in the wiki for you to start with](https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_programming.3F). Try a few and see what resonates. For a brand new programmer I'd recommend automate the boring stuff with python.

Also, if you don't have one already make sure you look for a project that interests you and start on it as soon as you can. Programming is a lot more fun if you have a goal, even the smallest goal. If you get stuck come back and ask us here."
10,What's the error it gives you?
10,This snippet of code looks fine. I'll bet the problem is elsewhere in your code. Please show us your whole program.
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,"If you are using IDLE on Windows as your IDE then you need to open cmd and type this: 

    py -m pip install PySimpleGUI"
10,"> Keep on getting an ""invalid syntax"" error on ""install"" when running ""pip install PySimpleGUI "" .

This means you are putting that command in the python interpreter. The command needs to go in the terminal / command line instead. If you tell us what OS and what IDE you are using we can give you specific instructions."
10,Sure it does.
10,"    a = 'random string'
    b = f'''
    this is a multi line string
    {a}'''"
10,"Your code looks fine. More than likely the error is coming from a different place in your code that's not in a try block. Read the error message carefully, it will tell you the line number in your code that raised the error. 

Also, check the error message carefully to be sure it's a smtplib.SMTPServerDisconnected that's being raised, not a similar error."
10,If you show us your code we can fix it for you.
10,This is a common side effect of using `Tk()` more than once in your code. You need to use `Toplevel()` instead to make additional windows.
10,That looks interesting but this sub is for questions only. Please do not promote your videos here.
10,"Sorry I just now saw your reply. If you want someone to be notified when you reply you need to reply to their comment, not to the thread. 

You're right, threading is not truly parallel (although the reason for that has very little to do with the GIL). However it has a lot of advantages over multiprocessing. First it allows you to share memory between threads, for instance they can all use the same database object, something that multiprocessing can't do. Second, it's much faster to start threads. Third, and most important to you: you can make as many threads as you need, but you can only have as many processes as you have physical processors in your computer (typically 4, never more than 8). 

To do anything that's IO bound (like what you described) you should use threading. The documentation for `concurrent.futures` has an example that sounds like it's perfect for you: https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example"
10,`-U` is upgrade. You are looking for `--user`.
10,"You need to give each one it's own variable. Otherwise they default to the same one. 

    C1_var = tk.IntVar()
    C1 = tk.Checkbutton(C1frame, variable=C1_var, text='Close WO')

When it's time to use the data you will use the variable object, not the Checkbutton object. 

    if C1_var.get():
        print(""Checkbutton 1 is selected"")"
10,"First we need to be clear if you need mutiprocessing or threading. For a wait you probably want threading, but to be sure you should tell us what you program is doing. It would also help if you showed us the code you have so far."
10,"By far the easiest thing will be to tell your coworker to install python. If they use the default install options they will be able to simply double click the .py file you send. For a GUI you probably want to rename it to a .pyw file to keep the command window hidden. 

Otherwise, start [here](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_create_an_executable_from_my_python_code.3F)."
10,"The FAQ has a [list of GUI options](https://www.reddit.com/r/learnpython/wiki/faq#wiki_what_gui_should_i_use.3F). Tkinter is one of the easiest.  PyQt is (IMO) the prettiest / most modern looking. 

The problem is probably that in order to program a GUI you need to shift your thinking to ""event driven"" design, which is very different from procedural programs that people start with. To do that most GUIs rely heavily on OOP (classes). There's no module that provides an easy way out of that; you just need to keep working on it until it starts making sense and gets easier."
10,"You could use a list instead, that way you could use the actual module instead of the name: 

    modules = [
        (self.module1, True),
        (self.module2, False)
        ]
    for m, runnable in modules:
        if runnable:
            m()

Otherwise, since these seem to be methods (and therefore attributes) you could use `getattr`: 

    modules = {""module1"": True, ""module2"": False, ...}
    
    for m in modules:
        if modules[m]:
            getattr(self, m)()"
10,"What's the problem? 

It may help to use string formatting instead of concatenation, eg: 

    print(f""{_author}'s karma = {_karma}"")  # Output: bboe's karma"
10,"The base case is just the condition where you can stop looking for solutions. If n = 1 then there is only one solution, namely 1 penny. So you don't need to keep looking. 
    
    if n == 1:
        return 1 # only one solution possible

However this code will have negative numbers a lot, so I would suggest that a base case of n <= 0 is much better. 

    if n <= 0:
        return 0"
10,"Use the `chr()` function, which turns an integer into a character. Note that unicode integers are generally written in hex, so you have to prefix them with `0x` if you want to type them into python without converting to decimal. 

    >>> chr(0x0023)
    '#'
    
Or you can use the decimal version. Since 0023 in hex is 35 in decimal: 

    >>> chr(35)
    '#'


Or for your example: 
    
    for i in range(100): 
        print(f'{i} maps to {chr(i)}')

Edit: it would probably be a lot better to print out the representation instead, so that you can see all the non printable characters :

    for i in range(100): 
        print(f'{i} maps to {chr(i)!r}')"
10,"What do you mean with ""delete the variable""? Technically speaking we don't have variables in python, we have objects with names. Your code is reassigning the name to point to `None`, not deleting it. If you mean deleting the object from memory I'm afraid you have no control over that. The python garbage collector will do that when it gets around to it, as long as there are no references to that object still around."
10,"The newline character *is* an ascii character. It's escape code is `\n`. 

    _, new_data = data.split('\n', 1)"
10,That looks interesting but this sub is for questions only. Please do not promote your videos here.
10,That looks interesting but this sub is for questions only. Please do not promote your book here.
10,"Right, so here is the part that encrypts: 

    encrypted_password = password_encrypt(unencrypted_password, encryption_key)  

To decrypt, just use the negative encryption_key: 

    decrypted_password = password_encrypt(encrypted_password, -encryption_key)

Which you could bundle into a mini function like I showed earlier."
10,"I don't see any globals, and I don't see how that would affect using a negative number. Although I see you forgot to initialize your encrypted_message variable.

But I meant like this: 

    # Caesar Cypher Encryption
    def password_encrypt(unencrypted_message, encryption_key):
        encrypted_message=''
        # For each symbol in the unencryptedMessage we will add an encrypted symbol into the encryptedMessage
        for symbol in unencrypted_message:
            if symbol.isalpha():
                num = ord(symbol)
                num += encryption_key

                if symbol.isupper():
                    if num > ord('Z'):
                        num -= 26
                    elif num < ord('A'):
                        num += 26
                elif symbol.islower():
                    if num > ord('z'):
                        num -= 26
                    elif num < ord('a'):
                        num += 26

                encrypted_message += chr(num)
            else:
                encrypted_message += symbol

        return encrypted_message

    def password_decrypt(encrypted_message, encryption_key):
        # call the encrpyt function with a negative key
        return password_encrypt(encrypted_message, -encryption_key)

Remember from math class that adding a negative number is the same as subtracting a number.

    >>> 20 - 4
    16
    >>> 20 + -4
    16"
10,Why don't you just use a negative number as the encryption key when you want to decrypt?
10,That looks interesting but this sub is for questions only. Please do not promote resources here.
10,That looks interesting but this sub is for questions only. Please do not promote your videos here.
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,That looks interesting but this sub is for questions only. Please do not promote your videos here.
10,That looks interesting but this sub is for questions only. Please do not promote your videos here.
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,That looks interesting but this sub is for questions only. Please do not promote your videos here.
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,"As this sub is becoming very popular, it has also become very attractive for people wanting to advertise their blogs, books, videos, linters, tutorial, projects, cheatsheets etc. Every day we get about a dozen bot posted, low effort ""tutorial"" posts that are copy pasted from elsewhere and covered in affiliate links and ads. Occasionally we also get high quality posts. Since we don't have the bandwidth or desire to sort the wheat from the chaff, the mod team has had to adapt a policy of removing all posts that are not questions about python. I feel that this is a better policy than allowing spam since I feel the spam posts would obscure the browsing teachers from finding a student that they can help. That said, we do sometimes make exceptions, especially gladly for users that have a history of helping in this subreddit. 

I usually do include an explanation when removing posts but I don't always have time to write that out, and many of them are removed by a bot.

TLDR: This sub is for questions, not resources. Those posts are a better fit for /r/python."
10,"/u/Seschill, your submission has been removed from r/learnpython for the following reason(s):

* Posting only assignment/project goal is not allowed. You need to post what you have tried so far. Please see subreddit rules in the sidebar.



____

If your submission was removed for lacking additional info you can edit your submission text and then notify moderators and ask for the submission to be re-approved.

If you have any additional questions either reply to this comment or [message the moderators](https://www.reddit.com/message/compose?to=/r/learnpython)."
10,"You would want to do that outside of the function, not in it. For example: 

    while True: # try forever; or use a for loop to set the number of tries
        try:
            function_that_might_fail()
            break
        except FunctionError:
            print('retrying')"
10,"list.append is equally good as Queue.put, however I can't think of a list equivalent for Queue.get. 

We won't be able to give you a concrete answer without seeing your code."
10,Atomic operations (like append) on c-based objects (like lists) are thread safe thanks to the gil. That said why don't you want an extra import? It won't hurt anything to have it.
10,"You forgot to return anything from the binary_to_ascii_to_string function, so python returns None by default."
10,"Python will use the ASCII value by default if printable, or the hex escape if not. If you look up an ASCII table you will see that hex 30 is the character ""0"", therefore `b""\x30""` is equal to `b""0""`."
10,"You need another `%` instead of that comma, like this: 

    print('Adding job', job[1], 'to the queue with timestamp %s'%currentDT)

This is ""printf"" style and it's very old. We like to use ""fstring"" style in modern python: 

    print(f'Adding job {job[1]} to the queue with timestamp {currentDT}')


See pyformat.info for more info."
10,"That error means you are using python2 to run python3 code. Remember on Mac / Linux you need to use the command ""python3"" to run your program in python3."
10,"Nope. You need to do that yourself. To sort by the number of arguments you need to use defaults. 

    def method(self, arg1=None):
        if arg1 is None:
            return self.getter()
        else:
            return self.setter(arg1)
        
Or you can count the number of arguments: 

    def method(self, *args):
        if len(args) == 0:
            return self.getter()
        elif len(args)=1:
            return self.setter(args[0])

To sort by argument type you need to check the type. 
    
    def load(self, arg1):
        if isinstance(arg1, str):
            self.load_from_string(arg1)
        else:
            self.load_from_object(arg1)

I know, it seems like a pain now, but I find that most of the time you don't actually need 2 methods, you only need an extra step. 

    def load(self, arg1):
        if isinstance(arg1, str):
            arg1 = self.convert_to_object(arg1)
        # continue loading"
10,"This is a mistake right? Because you should never use this code in real life. 

The `for a[-1]` is assigning the last position of the list to the current element in the loop. Then on the next line you print it. So for the first loop you assign 0 to the last position (overwriting 3). Then you print the 0 you just assigned. Same for 1 and 2. On the last iteration you do the same, but the last position is what ever the next to last iteration assigned it to. 

So the result from this code will always be the same list out with the last position replaced with the next to last position."
10,"Your class is fine. You need to pass in a valid python object. I suspect you meant to do 

    x = Creature(""fish"")"
10,That looks interesting but this sub is for questions only. Please do not promote your videos here.
10,That looks interesting but this sub is for questions only. Please do not promote blogs here.
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,That looks interesting but this sub is for questions only. Please do not promote resources here.
10,"/u/sbkhbk, your submission has been removed from r/learnpython for the following reason(s):

* Posting only assignment/project goal is not allowed. You need to post what you have tried so far. Please see subreddit rules in the sidebar.



____

If your submission was removed for lacking additional info you can edit your submission text and then notify moderators and ask for the submission to be re-approved.

If you have any additional questions either reply to this comment or [message the moderators](https://www.reddit.com/message/compose?to=/r/learnpython)."
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,That looks interesting but this sub is for questions only. Please do not promote your videos here.
10,That looks interesting but this sub is for questions only. Please do not promote your videos here.
10,That looks interesting but this sub is for questions only. Please do not promote your channel here.
10,"You need: 

    arr = array([20, 30, 45, 60, 65])

BTW you should never use wildcard imports (see PEP8). The normal way to import numpy is like this: 

    import numpy as np
    arr = np.array([20, 30, 45, 60, 65])"
10,"Yes, use 3.7.4, or whatever the latest version is. There are no backwards incompatible changes in minor versions."
10,"Please edit your post to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like github or pastebin. Your code is hard to read and test otherwise.

---"
10,"/u/pyeu, your submission has been removed from r/learnpython for the following reason(s):

* Posting only assignment/project goal is not allowed. You need to post what you have tried so far. Please see subreddit rules in the sidebar.



____

If your submission was removed for lacking additional info you can edit your submission text and then notify moderators and ask for the submission to be re-approved.

If you have any additional questions either reply to this comment or [message the moderators](https://www.reddit.com/message/compose?to=/r/learnpython)."
10,"/u/laurentiustancu91, your submission has been removed from r/learnpython for the following reason(s):

* Posting only assignment/project goal is not allowed. You need to post what you have tried so far. Please see subreddit rules in the sidebar.



____

If your submission was removed for lacking additional info you can edit your submission text and then notify moderators and ask for the submission to be re-approved.

If you have any additional questions either reply to this comment or [message the moderators](https://www.reddit.com/message/compose?to=/r/learnpython)."
10,How did you envision this? Did you mean 2 windows open? Maybe 2 independant programs running? Or show countdown text until the user types something?
10,"Some other alternatives if for some reason you don't want non-ascii characters in your source code:

    >>> '\u25A0' # put the code point in the string literal
    '■'
    >>> '\N{Black Square}' # put the unicode name in the string literal
    '■'"
10,"You don't want a function, you want a generator. You could make one yourself, or you could use the built-in `itertools.count` generator. You would use it by calling `next()` every time you want to increment it. 

    >>> from itertools import count
    >>> addone = count(100)
    >>> next(addone)
    100
    >>> next(addone)
    101
    >>> next(addone)
    102
    >>> next(addone)
    103



That said, this sounds like an [XY problem](http://xyproblem.info). Can you describe your overall goal here?"
10,"For situations like this the quick fix is often to make a function that works on a single value and then apply it to the entire column. For example a function may look like this: 


    def fixer(text): 
        for os_name in ('Windows 10', 'Windows 7', 'Linux'):
            if os_name in text:
                return os_name
        return 'Unrecognizable'

This function works on a single string:

    >>> fixer('zzzWindows 10ZZZ')
    'Windows 10'
    >>> fixer('Kittens')
    'Unrecognizable'
    
Now you can apply that function to the entire column: 

    df.OS = df.OS.apply(fixer)"
10,"> So having a certificate already in this interviews puts me above everyone else

You are making this assumption that having the certificate will put you above everyone else. I keep trying to tell you that that is not true. Unlike other industries, certificates are not used for software jobs. I'm telling you that you should spend your free time building a portfolio instead of getting the certificate. Or do both, if possible."
10,"> a certificate tells you ""well, he has some interest in this subject"", it's just better than placing ""I have a small knowledge in python"" in your cv.

Ok, I agree, but much better than both those options is to include a portfolio to **prove** you know python and whats more, prove that you know the specialty that the company needs. If you are applying to a web company it will help to show Django experience, for instance. 

Granted, things may work differently where you are. When I hire a programmer in the USA at the entry level I will throw out all applications without a portfolio attached. I don't care how much they spent on being certified. 

Bottom line: **If you use a certificate instead of a portfolio on your cv your search time will be much longer.**"
10,"Django will create the local server that you can connect to. To connect to it from outside your LAN you will have to set up some routing, perhaps with DynDNS or similar, and then set up port forwarding or maybe by enable the VPN feature of your home router."
10,"No, somebody lied to you. No employer will give any credit for a certificate of any kind. They will look at your past work (your portfolio) and test you themselves. There's simply too many sub specialties to be covered by a certificate."
10,"I don't know what that is, but it's by no means official from a Python point of view. There are no official python certificates."
10,"Ok, to do that you will need some HTML / CSS / JS skills in addition to your python skills. Work through some basic tutorials on that. Then you need get a web framework to be able to create the interface from python. I think Django or Flask are the most popular."
10,"Have you seen [this famous SO answer?](https://stackoverflow.com/a/1732454/2229945).

I recommend the html parser `BeautifulSoup` instead."
10,I see. And you want to build this yourself in python rather than using a premade solution? How did you want to access the files on your phone or other devices?
10,We need a lot more information to help you. Describe what you are trying to make. If you just want to access the Pi's files from your computer I will suggest using sftp or smb (windows share).
10,You can use `dir()` without an argument to list the current available names. Or perhaps you are thinking of the very similar `vars()` function.
10,"`print()` can do the string conversion automatically, but first that code concatenates the strings together. We need to add the `str()` calls for the sake of the `+` operator. If you used commas instead of + you would not need the `str()` call. 

This exercise seems very old or written by an inexperienced person. We would not use `+` to concatenate strings like that, and rarely use commas. We would use modern string formatting, like this: 

    print(f""{miles} miles equals {miles_to_kilometers} kilometers"")"
10,"This process is called ""freezing"". There are several tools available to do it; [here's a quick overview](http://docs.python-guide.org/en/latest/shipping/freezing/). I've had the best luck with PyInstaller. 

You should note that unlike other (""compiled"") languages, this is not something that python was designed to do. Python is a scripting language, and was designed for everyone to install python and the .py files to be distributed."
10,"There are many ways to transfer data from the arduino to python. Pretty much any data transfer method you can think of will work, including USB3, wifi or bluetooth. However for 400 values per second the standard built in USB-to-serial connection will be more than enough (the max communication speed is 115200 baud, so divided by 400 sps and divided by 10 bits per byte = 28 bytes max per value)."
10,"An Arduino is amazingly precise and super cheap. Perhaps use that to take the measurements and send the data back to your computer. Be sure to use the timing interrupts to set the timing, not the main loop."
10,"I see. I've never seen anyone actually want to do that, so I assumed you meant instances, apologies. The problem is this line [in the docs](https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled): 

> classes are pickled by named reference ... Note that none of the class’s code or data is pickled

`pickle` (which is the backend of `shelve`) does not save code. People who want to save code generally make a .py file, not a pickle file.



This sounds like an [XY problem](http://xyproblem.info). Can you describe your overall goal here?"
10,"In order to remake the instance from the saved file, python must have access to the class definition. Add this before you load:
    
    class thing:
        pass

Also, I suspect you want to add an instance of thing to the shelve file, not the class itself."
10,"Line 6 should be

        super().__init__()

Although we often include args and kwargs to parent classes like this: 

    class Torso(Bodypart):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            self.setName(""Torso"")        # this exists I just cropped the function out
            self.attachBodypart(Core())"
10,"You need to understand the the console runs python, not the other way around. Python does not have a display; it just sends text data to the stdout buffer, and whatever launched python can choose to display that or not. py.exe launches a console which in turn runs python and the console's job is to display anything in the stdout buffer on the screen. pyw.exe just directly launches python and the stdout data is lost. 

It sounds like you should look into a GUI. There's plenty of ways to pop up an alert box from python. Any GUI module can do that. At the simplest install easygui and:

    import easygui
    easygui.msgbox(""Be alert!\nYour country needs more lerts!"")

It's also pretty easy to make simple dialogs with tkinter (comes with Windows), pysimplegui, wxpython, pyqt, etc"
10,"/u/learnhtk, your submission has been removed from r/learnpython for the following reason(s):

* Posting only assignment/project goal is not allowed. You need to post what you have tried so far. Please see subreddit rules in the sidebar.

* Your submission is better suited for: /r/forhire 



____

If your submission was removed for lacking additional info you can edit your submission text and then notify moderators and ask for the submission to be re-approved.

If you have any additional questions either reply to this comment or [message the moderators](https://www.reddit.com/message/compose?to=/r/learnpython)."
10,"A Queue is a type of list that all the threads can share. When any thread finishes it can get the next work instruction from the queue using `queue.Queue.get()`. As a bonus `queue.Queue.get()` will ""block"" (sleep) if the queue is empty, until some new data is added, at which point the data is given to one of the idling threads. 

Here's an example. If you type a number a thread immediately starts working on it. If you type another the second thread works on it. If you type enough that all 3 threads are busy, the work piles up in the common queue until a thread is available. When the queue is empty the threads all sit around idle. 

    import time
    from threading import Thread
    from queue import Queue

    class JimmerForDinner(Thread):
        def run(self):
            while True: # run forever
                work = dataq.get() # get the work instruction from the queue; blocks if queue is empty
                print(f'thread{self.name} is starting work on {work}')
                time.sleep(work)
                print(f'thread{self.name} is done with {work}')

    dataq = Queue()

    # spin up 3 threads
    for i in range(3):
        t = JimmerForDinner()
        t.daemon = True
        t.start()

    # input getting loop
    print('enter a number to start a thread:')
    while True:
        work = int(input())
        dataq.put(work) # send the work instruction to the queue"
10,Why don't you want to simply spin up 600 threads and have them sit around idle until there is work to be done? You can use `queue.Queue.get` to have a thread wait for work.
10,"You would get that behavior if there is a single AND a double quote in your string. 

    >>> data = ""John's bagel "" + 'is named ""Susan"".'
    >>> data
    'John\'s bagel is named ""Susan"".'

Note that the slash is only the programmer's representation, not actual data. If you print it or write it to a file it shows exactly what you expect. 

    >>> print(data)
    John's bagel is named ""Susan""."
10,"Python has a built in xml parser, but it's kinda clunky to use. I'd suggest beautifulsoup for this."
10,"I use beautifulsoup to parse xml files. If you google ""python xml parser"" you will find many other options.

> The XML files are about 5,000 + lines of XML code.

That's not very much. You don't need to worry about super efficient parsers; just grab the easiest to use."
10,"Oh I see. In that case I recommend the `join()` method: 

    data = [[1,2,3],[4,5,6],[7,8,9]]
    for row in data:
        print('+---'*len(row)+'+')
        print('| '+ ' | '.join(map(str, row)) + ' |')
    print('+---'*len(row)+'+')"
10,"Please edit your post to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like github or pastebin. Your code is hard to read and test otherwise.

---

You need the zip() function. You also need to move one of those prints outside the loop, like this: 



    data = [[1,2,3],[4,5,6],[7,8,9]]
    for i,ii,iii in zip(*data):
        print('+---'*3+'+')
        print('| {} | {} | {} |'.format(i,ii,iii))
    print('+---'*3+'+')"
10,"That's also not recommended, starting with `__` is reserved for variables that you need to protect from subclassing. Remember there is no such thing as a ""private variable"" in python. Use `queue`. Or, if your code will have users and it's important that the user does not access the variable, use `_queue`."
10,"Add this: 

    def __iter__(self):
        return iter(self.__queue__)

As a side note, you should never make your own dunders. Use normal variable names."
10,"You need to set the weight for the clearButtonsFrame too. Add this to your code: 

    clearButtonsFrame.rowconfigure(0, weight=1)
    clearButtonsFrame.columnconfigure(0, weight=1)
    clearButtonsFrame.columnconfigure(1, weight=1)"
10,"> I am trying to import a "".bin"" file, of which I know it has a csv structure.

From the first 10 bytes I can see that this is not csv structure. A csv file is a type of text file, and there is no text encoding that uses those bytes. This is a binary file, and in order read those you need to know the structure of the file including the datatype in advance. If you know the data this file contains we could help you figure that out. Once you know that you can use the `struct` module or `numpy.fromfile` to read the data."
10,"> you either have to use forward slashes or double-up your backslashes so that Python doesn't interpret them as escape characters.

Or use raw strings, which are what I advocate since not all programs accept forward slashes. 

    photo1 = PhotoImage(file=r'C:\Users\user\Documents\python\testimage.gif')"
10,Are you sure you don't mean javascript?
10,"The string is unchanged. It's just that a list prints the representation by default, while otherwise it prints the string. 

    >>> path = r'c:\user\firstname lastname\desktop'
    >>> print(str(path))
    c:\user\firstname lastname\desktop
    >>> print(repr(path))
    'c:\\user\\firstname lastname\\desktop'
    
Note that I put an `r` in front of the string too, which you should do with all Windows paths to avoid having to escape certain backslashes."
10,"This is often called a ""[guard](https://en.wikipedia.org/wiki/Guard_\(computer_science\))"" or ""guard clause""."
10,"We do not allow promotional content. This is due to an extremely high amount of low quality blogs, tutorials, video series, chat servers, etc that we get spammed with, which would turn this sub into a poster pillar. There are other subs and other places online where you can advertise your website. 

In the future please use the ""contact moderators"" feature to ask questions about the subreddit. You can use it to ask this question of the /r/python, /r/pythontips, or /r/learnprogramming subreddits."
10,That looks interesting but this sub is for questions only. Please do not promote your youtube channel here.
10,"I don't know windows 8. How do you open other programs? Can't you press the Windows key and type ""idle""?"
10,"Oh sorry. Search for ""idle"" in the start menu to open the shell. 

I'm assuming you installed the official python from python.org"
10,"From the shell, go to new > file to open the file editing window."
10,"That's the content of your file, nothing extra? To use `json` you need to give it a single json string, *nothing else*. Your file has a lot of extra data in it, and it looks like there's a single json string per line, not per file. Also the last line at least is incomplete json data. 

You will have to read this line by line with `loads`. 

    savedata = []
    with open(""SDtweets.json"", encoding= ""utf8"") as f:
        for line in f:
            try:
                savedata.append(json.loads(line))
            except json.decoder.JSONDecodeError:
                '''this line is not valid json'''

edit: to get the dates out you can add this code: 

    dates = [tweet.get('date') for tweet in savedata if 'date' in tweet]"
10,"
> I believe this is due to the use of emojis in the text

I doubt it. The error says that your data is malformatted. Can you show us the file you are trying to read? Use pastebin to upload it and share the link with us. 

As a wild guess you can just leave off the extra data by using `loads` instead of `load`: 

    with open(""SDtweets.json"", encoding= ""utf8"") as f:
        savedata = json.loads(f.read(961))"
10,">  r/learnpython is about to get very wordy if every suggestion must be followed by an explanation

The response we are talking about is 3 words long. I very much feel responses should be more wordy than that. Especially since the response is seemingly completely unrelated to what OP is asking.

Your response is very good. I wish we had many more like it."
10,If you are going to plug your project here you will need to start explaining why it's applicable to OP.
10,Thanks for reporting it (if you are among those that did).
10,"Yes, but it's highly dependent on what your functions do and how they do it. Can you show us the code for A and B?"
10,"/r/learnpython does not have an official discord. We do all of our helping here on Reddit. /r/python does, the link is in their sidebar. There are many other discords dedicated to learning python, but we will not promote any here."
10,"Lol, ok. And Nike does not advertise either, they are only offering you a chance to learn about better footwear. 

Let me also point out that we are NOT beginners. We have AI that can see if a post grows organically or artificially. I know you used bots to upvote and respond to your post, to make it look popular. The very definition of spam."
10,"I'd like to point out rule 5: 


> 5\. Advertising

> Advertising will not be allowed in any way, shape or form. This includes Youtube channels, discord servers, twitch channels ETC."
10,"Your chat server is one of hundreds of chat servers, blogs, youtube channels, courses, books, etc that are advertised here and removed, since I do not want this sub to become a poster pillar."
10,It was removed as spam. Please do not advertise your discord server here. Thanks.
10,"The u prefix has nothing to do with that. It *is* a python2 leftover.

Just like you can use `\uxxxx` to enter in a hex value, you can use `\N{name}` to enter Unicode characters by name."
10,"/u/aakashxsriram, your submission has been removed from r/learnpython for the following reason(s):

* Posting only assignment/project goal is not allowed. You need to post what you have tried so far. Please see subreddit rules in the sidebar.



____

If your submission was removed for lacking additional info you can edit your submission text and then notify moderators and ask for the submission to be re-approved.

If you have any additional questions either reply to this comment or [message the moderators](https://www.reddit.com/message/compose?to=/r/learnpython)."
10,"The new style in windows is to replace ""pip"" with ""py -m pip"". So try

    py -m pip --version"
10,LMGTFY links are autoremoved and just rude in general.
10,Are you using sublime text to run the code too or are you doing that in the terminal?
10,What os are you using and what programming environment?
10,"I agree with you, but you shouldn't use the term ""depreciate"" when you mean ""not recommend"". Those terms have very specific meanings. 

Fwiw Id be willing to bet printf will never go away. For one thing it's very familiar to people coming from other languages. For another the bdfl has said there will not be any more backwards incompatible changes, python4 will simply be what comes after python3.9."
10,No it is not. There are no plans to depreciate printf style string formatting.
10,Precisely correct. And that first string in the tuple is the first capture group aka the area code.
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,"/u/gorgonbattlecruiser, your submission has been removed from r/learnpython for the following reason(s):

* Posting only assignment/project goal is not allowed. You need to post what you have tried so far. Please see subreddit rules in the sidebar.



____

If your submission was removed for lacking additional info you can edit your submission text and then notify moderators and ask for the submission to be re-approved.

If you have any additional questions either reply to this comment or [message the moderators](https://www.reddit.com/message/compose?to=/r/learnpython)."
10,"That only works with object instances that in inside a list. Without the list you don't need copy at all, just make a new name. 

    original = Object()
    new_name = original

For that code both original and new_name point to the same object."
10,"`random.choices` accepts a a weights argument to do that. 

    >>> from random import choices
    >>> data = ['a','b','c','d']
    >>> weights = [10, 20, 30, 40]
    >>> result, = choices(data, weights=weights)"
10,"We have [a pretty long list of learning resources in the wiki](https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_programming.3F). Try a few and see what resonates. I'd recommend automate the boring stuff with python.

Also, if you don't have one already make sure you look for a project that interests you and start on it as soon as you can. Programming is a lot more fun if you have a goal. 

And of course ask here if you get stuck."
10,`if not check` is equivalent to `if check == False` .
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,"I can't help you if you don't tell me what you are trying to do. Not how you want to do it, but the big picture. Your current code would help a lot too."
10,WHY do you want the inner frame to take up as much space as it can?
10,"Yes I understand. Tell me why do you need that?

The canvas has no size, that's the whole reason we use it. It only has a bounding box which is set by the inner frame."
10,"Ah hmm, that's a good question. I suppose you would have to turn off propagation and calculate the size yourself within the _on_frame_configure method. 

What exactly are you trying to do? Why do you want to have the canvas expand? If you want to do something like set the background color it would be much easier to simply set the background color of the Canvas to match. I'll update the gist to include that."
10," I'm not sure what you mean with ""specify a width in the declaration"", but if you mean the instantiation, then yes, that's how you specify the width. 

    frame = VerticalScrolledFrame(root, width=300)

It uses a tkinter Canvas at the core, so if you don't use a width argument it uses the default width for a tkinter Canvas. If you would like to set your own default width, put it in place of `None` on line 19.

        width = kwargs.pop('width', 600) # set the default width to 600"
10,"That is not part of standard tkinter, but could use [this scrollable frame](https://gist.github.com/novel-yet-trivial/3eddfce704db3082e38c84664fc1fdf8), or put your widgets in a scrolledtext widget."
10,"Ok, so /u/ingolemo was right from the start. The question is asking for the expression only; the other variables are already programmed in as code you can't see. Remove everything but the last line."
10,"If I have a list 

    data = [1,2,3]

The length of the list is 3. The last valid index is 2."
10,"Python's lists start indexing at 0. However we start counting at 1. This means we say confusing things like ""the first element is at index zero"". It also means that a list of length 1 contains 1 element, but 1 is not a valid index. So if we want to find the last valid index we need the length minus one."
10,You don't need to do anything special. The code you have should work. The quotes are only needed in the terminal because command line arguments are space delimited. But here there are no command line arguments.
10,"You can't use the multiply trick with mutable elements like lists. You have to use a loop to make a copy for each one. 

    y=[list(x) for _ in range(3)]"
10,"You can't without using a function. The shell immediately executes whatever you type.

Use a file instead. Go to file > new file to open a new window for you to type code. When you want to run it go to run > run module to send the code to the shell window."
10,"When that problem comes up it's usually because you've installed more than one copy of python, and you are installing Quandl to one copy but you are using another. Add this to the top of your script:

    import sys
    print(sys.executable)

to find where the python version you are running is located, and then use that location to install libraries. For instance if the above command returns ""C:\Python27\python.exe"" then

    C:\Python27\python.exe -m pip install quandl

If the executable is ""pythonw.exe"" change it to ""python.exe"".

To use it use the all lowercase version: 

    import quandl"
10,"/u/233AK, your submission has been removed from r/learnpython for the following reason(s):

* Posting only assignment/project goal is not allowed. You need to post what you have tried so far. Please see subreddit rules in the sidebar.



____

If your submission was removed for lacking additional info you can edit your submission text and then notify moderators and ask for the submission to be re-approved.

If you have any additional questions either reply to this comment or [message the moderators](https://www.reddit.com/message/compose?to=/r/learnpython)."
10,That looks interesting but this sub is for questions only. Please do not promote your videos here.
10,"Oh ok. 

To put the right 2 things in the same column means that the left frame must span 2 rows. To do that you need to add `rowspan=2` to the grid arguments. To remove the space on the side you need to add ""ew"" to the sticky arguments. To slide it to the top you need to define row 1 as more weighted with `rowconfigure(1, weight=1)`. You may also want to add `padx` arguments to the grid call to make the frames separate from each other. 

    # importing shit
    import requests
    import time
    from tkinter import *
    import json
    #~ from win10toast import ToastNotifier


    # In[5]:


    def GUI():
        main_window = Tk()
        main_window.title(""Grau Baratinho"")

        # Store frame
        store_frame = LabelFrame(main_window, text=""Stores"", font=6)
        store_frame.grid(column=0, row=0, rowspan=2)
        store_option = IntVar()  # Option Variable

        # Store frame - RadioButtons
        Radiobutton(store_frame, text='Loja Online', value=501,
                    variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text='Rua Clodomiro Amazonas 955 - (Itaim Bibi)',
                    value=81, variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text='Av. Washington Luís 3919 - (Vila Mascote)',
                    value=141, variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text='Rua Teodoro Sampaio 1933 - (Pinheiros)',
                    value=10, variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text='Av. Magalhães de Castro 6118 - (Real Parque)',
                    value=122, variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text='Rua Joaquim Floriano 24 - (Joaquim Floriano)',
                    value=361, variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text='Rua Bairi 435 - (Cerro Cora)',
                    value=261, variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text='Rua Prof. Serafim Orlandi 299 - (Ricardo Jafet)',
                    value=461, variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text=""Av. Eng Armando 2022 - (Jabaquara)"",
                    value=641, variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text='Av. Professor Francisco Morato 2385 - (Morumbi)',
                    value=5, variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text='Al. Ministro Rocha Azevedo 1136 - (Oscar Freire)',
                    value=941, variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text='Praça Panamericana 217 - (Panamericana)',
                    value=841, variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text=""Al. Gabriel Monteiro Da Silva 1351 - (Gabriel Monteiro)"",
                    value=101, variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text='Av. Reg Feijo 1425 - (Analia Franco)',
                    value=1061, variable=store_option).pack(anchor=""nw"")
        Radiobutton(store_frame, text='Rua Domingos De Morais 486 - (Ana Rosa)',
                    value=1161, variable=store_option).pack(anchor=""nw"")

        # Type frame
        product_type_frame = LabelFrame(main_window, text=""Liqour Type:"", font=6)
        product_type_frame.grid(column=1, row=0, sticky=""new"", padx=5)
        product_option = IntVar()  # Option Variable

        # Type frame - RadioButtons
        Radiobutton(product_type_frame, text='Beers', value=1,
                    variable=product_option).pack(anchor=""nw"")
        Radiobutton(product_type_frame, text='Special Beers', value=2,
                    variable=product_option).pack(anchor=""nw"")
        Radiobutton(product_type_frame, text='Wines', value=3,
                    variable=product_option).pack(anchor=""nw"")
        Radiobutton(product_type_frame, text='Distillates', value=4,
                    variable=product_option).pack(anchor=""nw"")
        Radiobutton(product_type_frame, text='All Types :)', value=5,
                    variable=product_option).pack(anchor=""nw"")

        # Excel frame
        excel_frame = LabelFrame(main_window, text=""Excel File Name"")
        excel_frame.grid(column=1, row=1, sticky=""n"", padx=5)
        main_window.rowconfigure(1, weight=1)

        filename = StringVar(value = ""export.xlsx"")
        Entry(excel_frame, textvariable=filename).grid(
            column=0, row=0, sticky=""n"")
        store_option = str(store_option.get())
        product_option = str(product_option.get())
        b = Button(excel_frame, text=""Run!"")
        b.grid(column=0, row=1, sticky=""n"")

        # run
        main_window.mainloop()


    GUI()"
10,Looks good. Is that not what you wanted? Do you have a sketch or something of what you want?
10,"Ah I see. This is a bug due to laying out a widget on the same line as defining it. You should always use 2 lines. Try it like this: 


    # Excel frame
    excel_frame = LabelFrame(main_window, text=""Excel File Name"")
    excel_frame.grid(column=2, row=0, sticky=""n"")"
10,"You put the first frame in row 0, column 1. Then you put the third frame there too, so now they overlap. You probably meant to choose a different place for the third frame."
10,">  I was planning on returning multiple variables via a function (I think lists let you do this?).

You are right. In python you can only return 1 thing, no more and no less. However you can return 1 list or tuple, which can contain many things."
10,"> I was definitely considering a while loop to print out the grid, but I needed more of an understanding of how to add rows on top of each other.

If you let grid do it, it's easy. Just provide the row number and tkinter calculates the rest for you.

> I am going to take in the data via a list after a button is pressed. 

You mean return the data from the function? You'd better let me add that, that will be very tricky for a beginner to do. 


    import tkinter as tk

    exercise_count = 5

    heading_setting = dict(font=(""arial"",20,""bold""), fg=""red"")
    label_setting = dict(font=(""arial"", 10, ""bold""))
    entry_setting = dict(width=18, bg=""lightblue"")
    padding = dict(sticky='w', padx=2, pady=4)

    def extract_data(data, root):
        root.data = [[w.get() for w in row] for row in data]
        root.quit()

    #GUI for taking in exercise information
    def user_exercise_input(exercise_count):
        root = tk.Tk()     #initially create window, but not size
        root.title(""Workout Wonder 2000"")
        #header and initial labels
        heading = tk.Label(root, text=""Enter in your workout!"", **heading_setting)
        heading.grid(row=0, column=0, columnspan=5)

        label = tk.Label(root, text=""exercise name"", **label_setting)
        label.grid(row=1, column=1, **padding)
        label = tk.Label(root, text=""sets or laps"", **label_setting)
        label.grid(row=1, column=2, **padding)
        label = tk.Label(root, text=""reps or distance"", **label_setting)
        label.grid(row=1, column=3, **padding)
        label = tk.Label(root, text=""weight or time"", **label_setting)
        label.grid(row=1, column=4, **padding)

        label = tk.Label(root, text=""--------------------"", **label_setting)
        label.grid(row=2, column=1, **padding)
        label = tk.Label(root, text=""--------------------"", **label_setting)
        label.grid(row=2, column=2, **padding)
        label = tk.Label(root, text=""--------------------"", **label_setting)
        label.grid(row=2, column=3, **padding)
        label = tk.Label(root, text=""--------------------"", **label_setting)
        label.grid(row=2, column=4, **padding)

        data = []
        for i in range(exercise_count):
            label_number1 = tk.Label(root, text=str(i+1)+""."", **label_setting)
            label_number1.grid(row=i+3, column=0, **padding)
            entry_box1 = tk.Entry(root, **entry_setting)
            entry_box1.grid(row=i+3, column=1, **padding)
            entry_box2 = tk.Entry(root, **entry_setting)
            entry_box2.grid(row=i+3, column=2, **padding)
            entry_box3 = tk.Entry(root, **entry_setting)
            entry_box3.grid(row=i+3, column=3, **padding)
            entry_box4 = tk.Entry(root, **entry_setting)
            entry_box4.grid(row=i+3, column=4, **padding)
            data.append([entry_box1, entry_box2, entry_box3, entry_box4])

        btn = tk.Button(root, text=""Finished"", command = lambda:extract_data(data, root))
        btn.grid(row=i+4, column=0, columnspan=5)
        root.mainloop()
        return root.data

    print(user_exercise_input(exercise_count))"
10,"It looks like you are trying to make a table? Yes, grid is the best for that. Some more notes: 

* Anytime you copy and paste code you are doing the computer's job. Repeating a boring task with slightly different variables is in essence the only thing a computer can do. In your case, make a loop to loop exercise count number of times, and add a row with every loop. 
* laying out your widgets on the same line as you define them is a well known source of bugs. Always use 2 lines.
* Don't use wildcard imports (`from module import *`). It leads to bugs and is against PEP8. For tkinter the standard import is `import tkinter as tk`. 
* Ideally you would use a subclass when you need to repeat settings values like width or color. If you are not familiar with classes yet you can use a dictionary. Either way it means you can type the settings once and have it affect all the widgets. This is helpful if for instance you want to make a version where all the boxes are pink. 
* textvariable is not needed here, and just adds more lines of code. If you did need them, you would need to make them instances of tkinter's Variable class, not strings, and you need to created them after the root window is created. 
* You'll need to save those Entry widgets, iow add them to a list or something, if you want to get the data out later. 

Here's all that applied to your current code: 

    import tkinter as tk

    exercise_count = 5

    heading_setting = dict(font=(""arial"",20,""bold""), fg=""red"")
    label_setting = dict(font=(""arial"", 10, ""bold""))
    entry_setting = dict(width=18, bg=""lightblue"")
    padding = dict(sticky='w', padx=2, pady=4)

    #GUI for taking in exercise information
    def user_exercise_input(exercise_count):
        root = tk.Tk()     #initially create window, but not size
        root.title(""Workout Wonder 2000"")
        #header and initial labels
        heading = tk.Label(root, text=""Enter in your workout!"", **heading_setting)
        heading.grid(row=0, column=0, columnspan=5)

        label = tk.Label(root, text=""exercise name"", **label_setting)
        label.grid(row=1, column=1, **padding)
        label = tk.Label(root, text=""sets or laps"", **label_setting)
        label.grid(row=1, column=2, **padding)
        label = tk.Label(root, text=""reps or distance"", **label_setting)
        label.grid(row=1, column=3, **padding)
        label = tk.Label(root, text=""weight or time"", **label_setting)
        label.grid(row=1, column=4, **padding)

        label = tk.Label(root, text=""--------------------"", **label_setting)
        label.grid(row=2, column=1, **padding)
        label = tk.Label(root, text=""--------------------"", **label_setting)
        label.grid(row=2, column=2, **padding)
        label = tk.Label(root, text=""--------------------"", **label_setting)
        label.grid(row=2, column=3, **padding)
        label = tk.Label(root, text=""--------------------"", **label_setting)
        label.grid(row=2, column=4, **padding)

        data = []
        for i in range(exercise_count):
            label_number1 = tk.Label(root, text=str(i+1)+""."", **label_setting)
            label_number1.grid(row=i+3, column=0, **padding)
            entry_box1 = tk.Entry(root, **entry_setting)
            entry_box1.grid(row=i+3, column=1, **padding)
            entry_box2 = tk.Entry(root, **entry_setting)
            entry_box2.grid(row=i+3, column=2, **padding)
            entry_box3 = tk.Entry(root, **entry_setting)
            entry_box3.grid(row=i+3, column=3, **padding)
            entry_box4 = tk.Entry(root, **entry_setting)
            entry_box4.grid(row=i+3, column=4, **padding)
            data.append([entry_box1, entry_box2, entry_box3, entry_box4])

        root.mainloop()

    print(user_exercise_input(exercise_count))"
10,"BTW, tkinter is more than happy to figure out the size of the window and the pixel locations of all those widgets. You don't have to do that work."
10,"No, it's because they are not the same after all.  `root.geometry(""448x150+100+250"")` somehow got on line 78, which overrides the geometry you set on line 53."
10,If I add enough code to make your example run they look exactly the same. The problem is somewhere else in your code. Can you show us a complete example that we can run? And maybe some screenshots of how they are different?
10,"/u/opencircles, your submission has been removed from r/learnpython for the following reason(s):

* Posting only assignment/project goal is not allowed. You need to post what you have tried so far. Please see subreddit rules in the sidebar.



____

If your submission was removed for lacking additional info you can edit your submission text and then notify moderators and ask for the submission to be re-approved.

If you have any additional questions either reply to this comment or [message the moderators](https://www.reddit.com/message/compose?to=/r/learnpython)."
10,That looks interesting but this sub is for questions only. Please do not promote your videos here.
10,"No. And the dtype of division is always floating point, the type of the incoming data should not matter."
10,"It works fine for me. 

    >>> import pandas as pd
    >>> df = pd.DataFrame([[2577, 3022356]])
    >>> df
          0        1
    0  2577  3022356
    >>> df[0]/df[1]
    0    0.000853
    dtype: float64
    
Can you show us an example where you see this behavior?"
10,"Ok, and you have to replace it with a class? I see no reason to use a new class but I assume you have good reasons. In that case do what /u/K900_ said. Have the `get_foos` method return an instance of the `FooIterator` class. You would use it in the same way as before: 
    
    for x in bar.get_foos():
        ..."
10,"You have to *replace* it? Or add an iterator capability to your class? If you add `__iter__`, `__next__`, or `__getitem__` to your bar class you can simply do this: 

    for x in bar:
        ..."
10,"I think you are asking how to split a string once, on the last space? Like this: 

    >>> ""John Martin Nicolas Stone"".rsplit(maxsplit=1)
    ['John Martin Nicolas', 'Stone']"
10,"It was taken down automatically right after you posted it. Only you and I can see it now, everyone else sees
 ""[removed]""."
10,I can't speak for the mods of other communities but you could try /r/python or /r/pythontips.
10,That looks interesting but this sub is for questions only. Please do not promote your videos here.
10,"Please edit your post to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like github or pastebin. Your code is hard to read and test otherwise.

---"
10,"What editor are you using? Whatever it is, it's displaying the tab character the exact same way as 4 spaces. The problem is that somehow a couple of tab characters got into your code at the start of lines 10 and 14. Maybe you used notepad to edit your code once instead of a code editor? At any rate if you unindent those 2 lines and reindent them in a real code editor your problem will be fixed. 

Reddit formatting converts any tab characters to 4 spaces when displaying, so copy / pasting from your reddit post will also work."
10,Reddit has fixed it for you. If you copy your post back into your editor it will magically work!
10,"Your arithmetic methods need to return a Rational object, not just a tuple with the numerator and denominator. Try it like this: 

    def multiply(r1, r2):
        return Rational(r1.num*r2.num, r1.den*r2.den)

Also, while your call technically works, we traditionally call it like this: 

    r3 = r1.add(r2)"
10,"Oh I see. First it's important to know that numpy arrays and python lists are sometimes interchangeable, but are very different objects, and have a LOT of differences. The rules of python strictly define that you can't use anything other than an integer to index a list, anything else throws an error. However numpy arrays are not lists, so they can write their own rules about what's allowed. I can even write my own rules: 

    class TuttleStripes:
        def __getitem__(self, args):
            out = []
            for arg in args:
                if arg is Ellipsis:
                    out.append('dots')
                elif isinstance(arg, slice):
                    out.append('colon')
                else:
                    out.append(str(arg))
            return ' * '.join(out)

    print(TuttleStripes()[:,:,...,42]) # prints ""colon * colon * dots * 42""

Other iterables like dictionaries, sets, range, and tons of outside modules have their own rules too."
10,The colon inside square brackets like that is a shortcut to the `slice()` object. The ... is a shortcut to the Ellipsis singleton.
10,Where are the variables being created?
10,"Yes, that's a python2 -> 3 name change. Python2 ""unicode"" was renamed to python3 ""string"". A python2 ""string"" was renamed to a python3 ""bytes""."
10,"Yes, by ""attributes"" we generally mean class attributes, and more specifically objects other than methods."
10,"Strings are sorted lexicographically, therefore they are sorted first by the first character, and only if the first character is equal are they sorted by the second, etc. In this case '3' is less than '6' (in unicode encoding), therefore any string starting with '3' is ""less than"" any string starting with '6'. The length of the strings is not taken into consideration. 

This makes more sense if you think about how words are sorted alphabetically. You could say that  '306' is less than '63' alphabetically (in a handwavy kinda way)."
10,"[`property`](https://docs.python.org/3/library/functions.html#property) is a built in function that can make a method be accessible as if it's an attribute. To the end user it just means that you use it like this

    r.encoding = 'ISO-8859-1'

Even though if you looked at the source code it looks like you should access it like this: 

    r.set_encoding('ISO-8859-1')"
10,"Your second example would work for both if you use the decode method instead of str():


    import codecs  
    data = (codecs.encode(b'username:password', 'base64')[:-1]).decode()
    
Unrelated, but why are you stripping the newline off? That's there because it's part of the b64 standard."
10,"> We have found where i is equal to apples, and asked python to change the value of i to 5. It doesn't.

Yes it does. However i was created by reassigning from the nth element in fruitList, once that is done there is no longer a link between the nth element of the fruitList variable and i. So reassigning i again has no effect on fruitList.

> Is it just a 'temporary copy' of the underlying variable? 

That is a reasonable way to think of it, especially with immutable elements like strings. 

Try using a visualizer like pythontutor.com so you can see what objects the variable names refer to. Perhaps that will help."
10,"Sounds like you need an iterator. Then you can just use `next()` to get the next item. 

    from tkinter import *

    the_window = Tk()
    the_window.title('Word Displayer')

    words = iter([""Australians"", ""all"", ""let"", ""us"", ""rejoice"", ""for"", ""we"", ""are"", ""young"", ""and"", ""free""])

    def button_pressed():
        the_label['text'] = next(words)

    the_button = Button(the_window, text = ' Next Word ', font = ('Arial', 24), command = button_pressed)
    the_label = Label(the_window, font = ('Arial', 34))

    margin_size = 5
    the_label.pack(pady = margin_size)
    the_button.pack(padx = margin_size, pady = margin_size)
    the_window.mainloop()

When you run out of words, this code will throw an error. The error will be displayed in the terminal but tkinter will ignore it. If you want to do something once there are no more words, you could add a try block: 


    def button_pressed():
        try:
            the_label['text'] = next(words)
        except StopIteration:
            print('code for when the word list is empty')"
10,"Post your code as text, not as an image, please."
10,"I'm just saying it's a very bad solution, and we can help you find a better one if you want. 

>  I need the buttons to be named ""block1"" to ""block480""; that's why I used globals()

No you don't. Use a container like a list or dictionary instead. But I really don't think you need to keep them around at all. 

>  If I don't use lambda, I will get a KeyError.

The snippet I showed is how to use command properly, without lambda."
10,"This part of the code does not need `update()` to work. Show us all your code. Or PM it to me. (If you want help with it, that is). If you do I can show you how to avoid update, which will make your whole program a lot more responsive. 

Using `lambda` and `globals()` like that is also something we never do. I can clean up your snippet a lot by cutting those out: 

    imgblock=PhotoImage(file=""block.gif"")
    for i in range(30):
        for j in range(16):
            btn=Button(root,image=imgblock,highlightthickness=0,padx=0,pady=0)
            btn.config(command=btn.destroy)
            btn.place(x=69+30*i,y=115+30*j)
    root.mainloop()"
10,"That means you have the button linked to a function that takes a long time to run. Using update fixes the button but the rest of the GUI is still unresponsive until the function is done. The proper fix is to make the function not take so long. You do that either with the mainloop or by threading. 

Show us your code and we can fix it for you."
10,This is wrong. You need to learn to use the mainloop or threading to run long functions. Update() is a last resort; most code never uses it.
10,"There's lots of ways, and the best will depend on your use case. So we need a better example from you to make a recommendation. Can you show us your real code?"
10,"This sub is for help doing it yourself. To hire someone, try a hiring subreddit."
10,"Even if you are not earning money, posts like this one are considered spam. Do not make promotional posts on this subreddit. Thank you. "
10,Why do you want to do those 2 things in a single open()? Why don't you just use 2 steps? 
10,That looks interesting but this sub is for questions only. Please do not promote your book here.
10,That looks interesting but this sub is for questions only. Please do not promote your projects here.
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,This nagbot has been banned. Thanks for the report. 
10,Have you tried the command `python3.6`?
10,Can you tell us *why* you want to use `__add` instead of `__add__`? 
10,"A long time ago I helped make a GUI that would recreate /r/place. I tried using a PIL image, a tk Canvas, and a matplotlib animation and found that the matplotlib animation was the fastest. 

My project is here: https://github.com/novel-yet-trivial/re-place My various attempts are in different branches.

> like 1/100 of a second

Why so fast? Standard refresh time is 1/30 of a second, high framerate is 1/60th. Don't make it harder than it needs to be. "
10,"Ah right. Idle does not have a way to rerun part of a script. I know Spyder does, some other ides probably too. "
10,In idle F5 is the run shortcut key. 
10,"Depends what you want to do. Tkinter is fast and easy to program, but it looks old and its hard to customize beyond the basics. So it's right for some, not right for others. 

Tell us about your project, or check out the list of GUI modules in the wiki."
10,"I see, so you are interested in precision, not size. A bigger float will do that if the standard 52 bits (15 significant digits) is not enough, but I think what you really want is something like sympy, where you work in equations rather than actual numbers. "
10,"What is your goal? The range of a float should be large enough to visualize anything if you have proper units. Your screen is probably only 1400 pixels wide, why do you need numbers that are trillions of trillions of trillions (...) times bigger than that?

If you really need more you can use a bigger float such as np.float128 or the decimal module (which will slow down your code)."
10,Show us some example code with example data. A sketch of how you want it formatted would help too. 
10,Rerun the grid() call.
10,"Probably, but I can't test it right now so I'll just tell you how to cheat: 

    Icon2 = PhotoImage(master=root2, file=filename)"
10,The problem is your multiple roots. Those are independent tcl instances and cannot share data. For this reason we nearly never use Tk() more than once in a program. Use Toplevel() to make additional windows. 
10,"If you add a line to reset `good` then it should work.

    while override:
        good = 0
        for point in range(y_start, y_start + len(word)):
            if board[x_start][point] != ' ':
                print(""HORIZONTAL ERROR!"")
                ################# CHANGING SOMETHING WHILE ITERATING ##################
                x_start,y_start = random.randint(1, 14),random.randint(1, 14-len(word))
            else:
                good += 1
        if good >= len(word):
            break
            override = False"
10,"
You can't. You'll need to put it in an infinite loop and use some kind of variable to determine when to stop the infinite loop. That way it will restart your for loop every time it fails. Something like this: 

    while True: # infinite loop
        success = False
        for point in range(y_start, y_start + len(word)):
            if board[x_start][point] != ' ':
                print(""HORIZONTAL ERROR!"")
                ################# CHANGING SOMETHING WHILE ITERATING ##################
                x_start,y_start = random.randint(1, 14),random.randint(1, 14-len(word))
                break # stop the for loop
        success = True
        
        if success:
            break # stop the infinite while loop"
10,"Please edit your post to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like github or pastebin. Your code is hard to read and test otherwise.

---

The first problem I see is that serial.readline will always return a bytes object with 1-2 newline characters, and you can't compare that to an integer without converting first. Try this: 

    if (int(val) == 1):

"
10,"Not in python2, no. But your code looks like python3 code. Maybe you are running python2 by mistake? Remember on mac and linux you need to use the command ""python3"" to run python3, not ""python"". "
10,"Since you are using python2 you need to leave the parenthesis off. Try it like this: 

    print ""\nYour'e over"", seconds, ""seconds old!""

Or (much better idea) upgrade to python3!"
10,"Shouldn't be a problem. Can you show us an example? It seems to work for me: 

    >>> subprocess.call(['py', ""-c"", ""print('ç')""])
    ç"
10,"This is a common beginner's mistake, and we have a [FAQ about it](https://www.reddit.com/r/learnpython/wiki/faq#wiki_variable_is_one_of_two_choices.3F). 

To check 2 values you need 2 distinct checks, like this: 

    elif ani == ""Reptile"" or ani == ""reptile"":

However for simply removing capitalization differences it's generally easier to convert the user's input to lowercase so you only have 1 check. 

    ani = input(""Please select the animal class you wish to research. "").lower()
    print(""\n"")
    if ani == ""fish"":
        print(fish())"
10,"Lol oops forgot to include the code! Here you go: 

    import msvcrt
    import time

    def message_print(message):
        while msvcrt.kbhit(): msvcrt.getwch()
        for i, char in enumerate(message, 1):
            msvcrt.putwch(char)
            if msvcrt.kbhit() and msvcrt.getwch() in 'Aa': # press ""A"" or ""a"" to skip
                break
            time.sleep(.0445)
        print(message[i:]) # prints the remainder plus a newline


    a = input(""New game? Press . and enter! Alternatively, you can enter any other key to quit!\n\n"")

    if a == ""."":
        message_print(""\nWelcome, hero! Err... Future hero, anyways."")
        time.sleep(2)
        message_print(""\n\nYou're well on your way to conquering the lands of Drugoria!\n\n"")
"
10,"Hmm are you sure you are only hitting it once? Let's reset the input buffer every time, maybe that will help. "
10,"You mean there's no delay between the characters? Hmm it works for me, very strange. Well there's another way ... maybe try it like this: 

    import msvcrt
    import time

    def message_print(message):
        for i, char in enumerate(message, 1):
            print(char, end='', flush=True)
            if msvcrt.kbhit() and msvcrt.getwch() in 'Aa': # press ""A"" or ""a"" to skip
                break
            time.sleep(.0445)
        print(message[i:]) # prints the remainder plus a newline


    a = input(""New game? Press . and enter! Alternatively, you can enter any other key to quit!\n\n"")

    if a == ""."":
        message_print(""\nWelcome, hero! Err... Future hero, anyways."")
        time.sleep(2)
        message_print(""\n\nYou're well on your way to conquering the lands of Drugoria!\n\n"")
"
10,"A `""\x48""` is literally the same as `""H""`. You don't have to do any conversion because it's already the same thing. It's just a different way of writing it. 

    >>> ""\x48"" == ""H""
    True

"
10,"No, IDLE is a special flower and none of the output formatting works there. You'll need to work with the command line. However many good code editors will open a command line window for you. Personally I use Geany. F5 will save the file, open the command line and run the program with one keystroke. "
10,"Ok, so you can integrate my code like this: 


    import msvcrt
    import time

    def message_print(message):
        for i, char in enumerate(message, 1):
            msvcrt.putwch(char)
            if msvcrt.kbhit() and msvcrt.getwch() in 'Aa': # press ""A"" or ""a"" to skip
                break
            time.sleep(.0445)
        print(message[i:]) # prints the remainder plus a newline


    a = input(""New game? Press . and enter! Alternatively, you can enter any other key to quit!\n\n"")

    if a == ""."":
        message_print(""\nWelcome, hero! Err... Future hero, anyways."")
        time.sleep(2)
        message_print(""\n\nYou're well on your way to conquering the lands of Drugoria!\n\n"")


Basically anyplace you want to type out a paragraph of lore just do it like this: 

    message_print(""paragraph of lore"")"
10,"It's a function which you should be able to drop in for the most part. 

I see in your demo code you have 2 messages to print. Do you want to press A to skip all animations from then on, or just skip to the end of the current message animation? "
10,"Ok, try this: 
    
    import msvcrt
    import time
    
    def message_print(message):
        for i, char in enumerate(message, 1):
            msvcrt.putwch(char)
            if msvcrt.kbhit() and msvcrt.getwch() in 'Aa': # press ""A"" or ""a"" to skip
                break
            time.sleep(.04)
        print(message[i:]) # prints the remainder plus a newline
    
    ### test code ###
    message_print(""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."")
    print('other text on a new line')
    
Edit: You will need to use a real command line window like cmd or powershell; there is no way to do this with IDLE or similar. "
10,Oh sure you could do that too. However how you do it depends on your OS. What OS are you using? 
10,"I would make the sleep time a constant at the top of your code. You can keep it at 0 while you are debugging and programming, and change it to 0.0445 when it's time to play. 

    SLEEP_TIME = 0.0445 # change to 0 to debug
    # ... 
    for char in message: 
        print(char, end='', flush=True)
        time.sleep(SLEEP_TIME)"
10,"    help(str)

But IMO the [online docs](https://docs.python.org/3/library/stdtypes.html#str) are much nicer to read."
10,"First some terminology. ""python"" is NOT a computer program. It's literally a language. It's a set of words that some people have decided will translate to specific actions. 

These same people also wrote a computer program named cpython. This is the official python interpreter and the one you are asking about, but it's not the only one. Interpreters for python have been written in Java, .NET, python and other languages, and many people have forked the official cpython to modify it and make their own versions. 

As far as cpython goes, yes, you should have a solid grasp of C first. Then you can start with [the developers guide](https://devguide.python.org/). "
10,"Why triple backticks in that link? Any number of backticks work, so I would recommend 1. `single`, ``double``, ```triple```, ````quadruple````. "
10,"Pillow, which is imported as PIL. "
10,"Classes are what python uses to implement ""object oriented programming"", or OOP. If you google ""OOP"" or ""python OOP"" you will find many tutorials that explain it in great detail. As usual [wikipedia](https://en.wikipedia.org/wiki/Object-oriented_programming) is a  good starting place. "
10,We can't begin to know what you are talking about. Show us the code you have for a start. 
10,"On line 1448 of your code you have the argument index=len(objects). The error is telling you that objtype does not have an argument named index, so python does not know what to do with that data. You need to look at the code for objtype and see what it expects, and match the call to that. "
10,"No, you have it backwards. Python runs the functions left to right, so you would need `if self.get_ids() and self.check_ids():` You are correct that python ""short-circuits"", iow if the first function returns False python won't bother running the second one. "
10,Sure of course you can and should do that. We'd have to see your current code if you want help adapting it. 
10,"If you are going to use it you need to reduce it as much as possible. So like this: 

    data = [l1, l2, l3]
    for i, text in enumerate(data):
        widget = tk.Label(self, text=text)
        widget.grid(row=i, column=0)

That is a very common pattern. Yes you could do that a list comprehension as well, but it won't be any faster to run or any easier to read, so you shouldn't. Saving lines of code is never a good reason to do something. "
10,"classes are what python uses to do ""object oriented programming"", or OOP. If you google ""python OOP"" you will find lots of tutorials. Pretty much any project can be rewritten to use classes, so just pick something and start practicing. Ideally something where you need to create a datatype. 

Note I'm not saying that projects should be rewritten to use classes, just that they can be. Classes are not a cureall. 

`__init__` is a dunder method, meaning it starts and ends with a double underscore (hence ""dunder""). Dunder names are hard coded into python to be automatically called at specific times or from builtin functions. For `__init__` python automatically calls it (if you defined it) when the instance is created. It's a python shortcut to save you one line of code by combining the create and initialize steps. So this: 

    class Submission:
        def initialize(self):
            self.title = ""Spam and eggs""

    data = Submission()
    data.initialize()

Is reduced to this: 

    class Submission:
        def __init__(self):
            self.title = ""Spam and eggs""
            
    data = Submission()

That's it. There's nothing else special about it. Only that the name is hardcoded into the python interpreter. "
10,"Here's a shortcut: In python (actually all programming languages) True is the same as 1, and False is the same as 0. That means you can do math with booleans: 

    >>> False + False
    0
    >>> True + False
    1
    >>> True + True
    2

Or in your case: 

    def clicked():
        total = chkst.get() + chkst1.get()
        btn.configure(text=total)

Also, wildcard imports (eg `from tkinter import *`) are known sources of bugs and against PEP8. Don't use them. "
10,"Two problems: You have chkst1 adding 2 to the total instead of 1, and you have a `elif` for the chkst1 check, meaning it's only checked if the previous check failed. Try this: 

    def clicked():
        sum = 0
        if chkst.get() == True:
            sum += 1
        if chkst1.get() == True:
            sum += 1
        btn.configure(text=str(sum))


"
10,"First you need to know that in python nearly everything is a class. The `list`, `int`, `dict` etc objects you have been working with are all classes. Using the `class` keyword in your program just means you are defining your own data type instead of using one that someone else wrote. Let's say for instance you want an integer where 1+2 = 12. Well, you can make your own int class that does exactly that, or anything else you dream of. 

The `type` function in python will tell you what type of class an object is: 

    >>> data = ['a', 'b', 'a', 'c', 'd']
    >>> type(data)
    <class 'list'>
   
Lists have methods too, just like praw classes. I'm sure you are familiar with the `append()` or `count()` method. 


    >>> data.count('a')
    2

Note what the count method returns. The list.count() method returns a new int instance to represent how many times 'a' appears in the list. This does not mean that the int class is part of the list class. The method has the full power of python available, and can return anything it wants. 

Similarly the classes in praw are not nested. There's a huge pile of classes available, and any method can make and return an instance of any one. It would look something like this: 

    class Submission:
        def __init__(self):
            self.title = ""Spam and eggs"" # the string is an instance of the built-in str class

    class Subreddit:
        def hot(self, limit=None):
            """"""make and return a list of Submission instances""""""
            # plus all the code to make the instance as needed
            new_instances = [Submission(), Submission(), Submission()]
            return new_instances

    class Reddit:
        def __init__(self, client_id, client_secret, user_agent):
            pass

        def subreddit(self, name):
            """"""make and return the Subreddit instance""""""
            new_data = Subreddit()
            return new_data

    reddit = Reddit(client_id='my client id',
                         client_secret='my client secret',
                         user_agent='my user agent')

    for submission in reddit.subreddit('learnpython').hot(limit=10):
        print(submission.title)

These classes are all completely separate entities, only tied together by the fact that sometimes one of them creates an instance of another. There is no superstructure, no rules about who can create who, no class is considered ""within"" any other class. 

You can run that locally or on pythontutor.com or similar to watch the data flow. 

"
10,"praw is a ""module"", which just means a file or folder. In this case it's a folder. 

Reddit is a class that is in the praw.py file. You can read it [here](https://github.com/praw-dev/praw/blob/master/praw/reddit.py#L31). 

You use the command `praw.Reddit()` to create an ""instance"" (often called an ""object"") of the Reddit class. An instance is all of the code in the class plus some custom data, in this case the login credentials. In your code you assign that new instance to the name ""reddit"". 

""subreddit"" is a method that the Reddit class has. Calling reddit.subreddit() runs it. It creates and returns a new instance of the [Subreddit class](https://github.com/praw-dev/praw/blob/master/praw/models/reddit/subreddit.py#L23). 

This new instance has many things, including a method named ""hot()"". That method returns a list of instances of the [Submission class](https://github.com/praw-dev/praw/blob/master/praw/models/reddit/submission.py#L12).

Among many other things, a Submission instance has an attribute named ""title"", and that is what you print. 


TBH this is a very complex module. If you want to learn about modules and classes this is really jumping in the deep end. "
10,That looks interesting but this sub is for questions only. Please do not promote your channel here.
10,"It's important to know that in python it's possible to write separate constructors, but it's very rarely done that way. Most of the time we use argument defaults to do this. 

    def __init__(self, radius=1):

That way the user can provide a radius, or if they don't it defaults to 1. 

What this assignment is asking for is very unpythonic. "
10,"That depends on the terminal you are using. With the standard windows command line or linux / mac terminal you can use the [colorama](https://pypi.org/project/colorama/) module. If you are using IDLE I'm afraid you are out of luck. 

Tkinter (or any other GUI module) can do this very easily. "
10,"You mean like this?

    >>> d = {'a':['b','c'],'d':['e','f']}
    >>> d['a'][1]
    'c'
    
Yes your nested loop is possible but I highly doubt that's what you want. Can you show us an example of what you want to do? "
10,"Yes, but IMO that completely goes against the spirit of fstrings. They are supposed to be highly readable. "
10,"You'd have to use a lambda function like you did before. 

    print(sorted(marketUSDC, key=lambda x: float(marketUSDC[x])))

But it would be much much better to fix whatever is wrong in your API call so that the marketUSDC contains floats like it is supposed to. "
10,"I understand. I hope you understand that there are thousands of people like you with the same goal, and this subreddit would be flooded with posts like yours if I allowed them. Promote your blog somewhere else. "
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,"No, there's no simpler way. English is complex. However you don't need a function, a conditional expression will do: 

    s = '' if number_items == 1 else 's'
    print(f'{number_items} item{s} found')"
10,"Please edit your post to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like github or pastebin. Your code is hard to read and test otherwise.

---

You need to assign the result from `input()` to a variable to use it later, and you need to be sure to have all your strings in quotes. Try this: 

    answer = input (""input number of units 1-9"")
    answer1 = input (""what answer do you want to calculate? (Cost,Revenue,Profit) "")
    if answer == ""1"" and answer1 == ""Cost"":
        print(2.34*1)
"
10,"I don't understand what your code is doing, but in tkinter you would use the `after` method to set some code to be run after a given number of milliseconds. 

    self.after(10000, self.notify) # run the self.notify method 10 seconds from now"
10,"Why not just: 

    for line in sys.stdin:
        # Whatever you want to do with the input"
10,What have you tried? We will help you if you are stuck but we will not write code for you. 
10,"Oh i see. That means you are getting those numbers as strings: 

    >>> USDC_LTC = '60.80000000'
    >>> USDC_BCHABC = '153.00000000'
    >>> marketUSDC = {""LTC"":USDC_LTC,""BCHABC"":USDC_BCHABC}
    >>> print([key for (key, value) in sorted(marketUSDC.items(), key=lambda x:x[1])])
    ['BCHABC', 'LTC']
    
You need to convert the strings to floats first: 
    
    >>> marketUSDC = {""LTC"":float(USDC_LTC),""BCHABC"":float(USDC_BCHABC)}
    >>> print([key for (key, value) in sorted(marketUSDC.items(), key=lambda x:x[1])])
    ['LTC', 'BCHABC']
    
You could also do that inside the key function if you want to: 

    >>> marketUSDC = {""LTC"":USDC_LTC,""BCHABC"":USDC_BCHABC}
    >>> print([key for (key, value) in sorted(marketUSDC.items(), key=lambda x:float(x[1]))])
    ['LTC', 'BCHABC']
    "
10,"Works as expected for me. Are you sure about those numbers? 

    >>> USDC_LTC = 60.80000000
    >>> USDC_BCHABC = 153.00000000
    >>> marketUSDC = {""LTC"":USDC_LTC,""BCHABC"":USDC_BCHABC}
    >>> print([key for (key, value) in sorted(marketUSDC.items(), key=lambda x:x[1])])
    ['LTC', 'BCHABC']

BTW a much cleaner way to make that list is like this: 

    sorted(marketUSDC, key=marketUSDC.get)
"
10,queue.get() is correct. What didn't work with that? 
10,A 64 bit machine means you can in theory have 2^64 addressable memory blocks. That does not mean that you actually paid to put 16 zettabytes of RAM in your machine. 
10,We can't possibly debug your program without seeing your program. 
10,Pygame is a separate install. Tkinter comes with the python installer. 
10,A tkinter canvas can do that easily. It look into pygame.
10,Kinda. It's not a feature of tkinter but you can hack it by binding to the mouse events. What did you have in mind? 
10,Stop deleting your posts. Karma is literally the only thing people get from helping you. 
10,"It has to do with the internals of python and how objects are stored in memory. The result is that classes that are written in C (generally have lowercase names, object, list, dict, etc) cannot have attributes changed. Classes written python (generally CamelCase names, collections.Counter, tkinter.Tk, etc) can, including classes that inherit from C classes. 

    
    >>> d = list()
    >>> d.foo = 42
    Traceback (most recent call last):
      File ""<stdin>"", line 1, in <module>
    AttributeError: 'list' object has no attribute 'foo'
    >>> class MyList(list):
    ...   pass
    ... 
    >>> d = MyList()
    >>> d.foo = 42
    

"
10,Yes I see that. You need to modify it to make it hashable to use it like that.
10,That has nothing to do with python2  to 3 conversion. You need to make the object DropObject hashable to use it as a dictionary key. 
10,"No, `random.shuffle` is something completely different. You can do this with itertools.chain and zip, but I'm betting your prof wants you to write a loop. Something like

* make a new, empty list
* find out which list is shorter
* loop over range(len(shorter_list))
* for every iteration, append a value from each list to your new list
* when loop is done, add the remainder of your longer list to the new list.
* return the new list"
10,"In python3, when reading files in binary mode, the ord conversion is already done. That function in python3 would be: 

    
    def read_multi(f, length=2, reverse=True):
        vals = f.read(length)
        if reverse:
            vals = reversed(vals)
        value = 0
        for val in vals:
            value = value << 8
            value = value | val
        return value

Or, much cleaner, use the built in `int` class. What your code calls reverse is called ""endianess"" in the rest of the world: 

    def read_multi(f, length=2, reverse=True):
        vals = f.read(length)
        endian = 'little' if reverse else 'big'
        return int.from_bytes(vals, endian)

Note this all only works in binary mode. "
10,"A decorator is literally a function that calls the original function. So if you have this: 

    def func_a:
        while True:
            #perform func_a
    
    func_a()
    
The decorated version would be this:
    
    def hidden_func_a(): # original function is renamed and hidden
        while True:
            #perform func_a
    
    def func_a(): # decorator steals the original functions name
        # maybe some extra code
        hidden_func_a()
        # maybe some extra code
    
    func_a()
    
So no, a decorator can not modify any code in the function. It can only add code before or after the entire function runs. "
10,"If the entire function is in the while loop, then yes. In other words if this

    def func_a:
        while True:
            #perform func_a
    
    func_a()

is equivalent to this: 

    def func_a:
        #perform func_a

    while True: 
        func_a()

But if that's true then just doing it the second way is probably easier than a decorator. "
10,"You have a file named pip.py that has no business being there. It's not part of a normal install. This file is highjacking your pip command. This makes me very worried, I wonder what you have installed that would add that to your system. 

You can probably get around it with this command: 

    py -m pip install spotipy


Can you show us the content of the ""c:\users\citizen_lost\appdata\local\programs\python\python37-32\pip.py"" file? "
10,"Yes, that's a good way to think about it. We say that the name with a `()` on the end is the ""function call"". "
10,"Well if it does that would point to an inherent problem in python, tk or webbrowser. If not then the problem is in your code. "
10,Does my code hang for you? 
10,"In addition to what /u/julsmanbr mentioned, you need to add a `()` to the end of `readline()`, like this: 

    sounds[type_]=fileref.readline().split()

I get the feeling that will still not produce the output you want. You'd have to show us an example file and the output you want from that example for more specific help. "
10,"A fun side effect of this kind of data is that it's easy to transpose. In other words if you want to print it vertically: 


    result = print_this('reddit', ' ', 'x')
    for line in zip(*result):
        print(''.join(reversed(line)))
"
10,"I wrote this short program to test that and for me it works like expected. Nothing hangs. 


    import tkinter as tk
    import webbrowser

    def go():
        webbrowser.open('http://reddit.com')

    tk.Button(text=""click me"", command=go).pack()
    tk.mainloop()

Show us some code that hangs. I'll bet the problem is elsewhere. "
10,"> In before the ""webbrowser"" module which also blocks and is superfluous in general.

It does not block. Not sure why you think it's superfluous. For your case it seems like the best option. 

> Sometimes the simplest stuff is so way out there in Python.

THe simple solution is `webbrowser` ... it's only ""way out there"" if you make restrictions for yourself. 

"
10,Did you have a question about that code? 
10,"I'm sorry for your hardships. But I can easily make it 2.6 compatible by adding the position: 

    increment = ""{0:0>{length}}"".format(int(capture) + 1, length=len(capture))
"
10,"Allow me to suggest an improvement using the more modern `format`: 

    #!/usr/bin/python

    import re

    name = 'fo1lder0019'

    m = re.search(r'(.*?)(\d+)$', name)
    if m:
        name, capture = m.groups()
        increment = ""{:0>{length}}"".format(int(capture) + 1, length=len(capture))
        print name + increment
    else:
        print None

"
10,"> My re.search only captures '19' instead of '0019' which i was hoping to extract.

No, that's not true, your re is fine. Add `print m.group(0)` to verify. It's the `int` conversion that throws out the leading zeros. The problem is you calculate the length *after* the int conversion. Try it like this: 

    #!/usr/bin/python

    import re

    name = 'fo1lder0019'

    m = re.search('\d+$', name)
    if m.group(0):
        capture = m.group(0)
        length = len(capture)
        len_val = '%0' + str(length) + 'd'
        increment = str(len_val) % (int(capture) + 1)
        new = re.sub('(\d+)$', str(increment), name)
        print(new)
    else:
        print None




"
10,You need 2 checks. You can use `len(set(element)) == 1` to check that all the characters are identical and `len(element) == 3` to check that there are 3 of them. You could combine these checks with the `and` operator. 
10,"Have you tried the normal method using pip? If so, what went wrong? Can you show us the error? "
10,Why would you delete your post? Karma is literally the only thing we get from helping you. Why would you take that away? 
10,"Please don't post pictures of your code. It's hard to read and impossible to test (and against the sub's rules). Post the code as text, [formatted for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F).

---

The problem is in your definition of K. In python we follow the american standard and use a period, not a comma, as the decimal separator. Since you used a comma python interprets it as a tuple, which is a type of sequence. Try this

    K = 8.975e9

"
10,"That's what the `zip()` function is for: 

    info1, info2 = zip([20L, 90L], [u'kansas', u'district_of_columbia'], [u'topeka', u'washington_dc'])
"
10,"I don't mean bash. I mean your OS has hotkeys. For example if you press Alt-F2 you will probably see a command window pop up, or Ctrl-Alt-T probably opens a terminal. If you are using Mint go to the keyboard settings pane, under shortcuts, and there you can set any program to launch when a key or key combination is pressed. The place where you set this is different for different OSs, but they all have some kind of hotkey function. Mint (well, Cinnamon) also has ""hot corners"" where you can bind commands to your mouse cursor touching a certain corner of the screen. 

I would recommend you do not use the keys without modifiers (Ctrl, Shift, Alt) because they may interfere with the normal operation of programs. F2, for instance, is usually tied to a rename function. "
10,Why use python? Why not just have your OS handle it? 
10,"> How can I fix this without writing more lines of code?

First: shorter code is almost never better code. It won't run any faster and it's certainly not easier to read. 

The solution to your problem is using sets, not list comprehension: 

    c = list(set(a) & set(b))

However if you really want to use list comprehension you would do it like this: 

    c = [x for x in b if x in a]
    "
10,I'd say short code is nearly always worse. Codegolf is only useful as a party trick.
10,"I get the feeling that what you really need is a cache. Note however it uses the creation arguments, not the hash, as the identifier (which in your example is the same result).  

    from functools import lru_cache

    @lru_cache(None)
    class Foo:
        def __init__(self, id):
            self.id = id
            self.saved_state = None
            print('creating Foo({})'.format(id))

    unique_foos = [Foo(i) for i in range(5)]
    print()
    foo2 = Foo(2) # old object is retrived
    foo5 = Foo(5) # new object is created
"
10,"If you subclass a dict you'd be as neat as I think you'll get. 

    class ObjectSet(dict):
        def __init__(self, iterable):
            for obj in iterable:
                self[obj] = obj

        def get_or_add(self, obj: object):
            if obj in self:
                return self[obj]
            self[obj] = obj
            return obj

But I'm more interested in why you want this. If you create an object foo5 why do you want to test membership and retrieve an identical object? Why don't you just use the object you just created? "
10,"Sounds like a normal set. 

    unique_foos = set()
    foo5 = Foo(5)
    unique_foos.add(foo5)
"
10,"Your question is not related to classes at all. Here's a minimal example. This works: 


    def foo():
        print(bar())

    def bar():
        return ""hello world""

    foo() # ok

This fails: 

    def foo():
        print(bar())

    foo() # NameError: name 'bar' is not defined

    def bar():
        return ""hello world""
"
10,Thank you. 
10,"The first number in each line tells you how many numbers remain in that line. 

This make a lot more sense if you know that in most programming languages you need to know how long of a list you want to make before you make it. In python that information is not needed. "
10,"`for line in content:` iterates over the characters, not the lines. Iterate over f instead: 

    import os
    directory = r""C:\Users\Name\Desktop\Video\Fix_Auto_Sub_Temp""
    
    for filename in os.listdir(directory):
        with open(os.path.join(directory, filename), encoding=""'utf-8'"") as f:
            lines_seen = set()
            outfilename = ""NEW_"" + filename
            outfile = open(outfilename, ""w"", encoding=""'utf-8'"")
            for line in f:
                if line not in lines_seen:
                    outfile.write(line)
                    lines_seen.add(line)
            outfile.close()

"
10,"I think all GUI modules will have someone thats built a table widget. In tkinter you could look at the tkintertables module. Or you can use a multicolumn listbox, [for instance this one](https://gist.github.com/novel-yet-trivial/49fa18828cddca44a2befae84cfd67ad). 

No matter what you will have to program the copy / paste functionality yourself. "
10,"You want a list out? You'll need a for loop. Using list comprehension you can do it on one line:

    [FeetToMiles(x) for x in feet_list]"
10,That looks interesting but this sub is for questions only. Please do not promote your book here.
10,Please don't promote your repository here either. Thanks. 
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,"With tcl that's ok, but for python in general it's best to be explicit. "
10,"When a user clicks cancel, `askopenfilename` returns `""""`, not `None`. You need to change the check to 

        if file != """":
"
10,"That's `ctl`, ending in a lowercase ""L"", not a numeral 1. You'll have to show us some more of your html, because your example works fine with my code: 

    >>> import bs4
    >>> import re
    >>> d = '<span id=""LV_CardRepeater_ctl00_card_ctl00_listingBathroomCount"" class=""tmp-search-card-list-view__attribute-value"">2</span>'
    >>> div = bs4.BeautifulSoup(d)
    >>> id_search = re.compile(r'LV_CardRepeater_ctl\d+_card_ctl\d+_listingBathroomCount')    
    >>> bedrooms = [x.text.strip() for x in div.find_all('span', {'id': id_search})]
    >>> bedrooms
    ['2']
    
Note that you gave us an example of BATHroom line, and I made my regex for bathrooms, even though the variables is named BEDrooms. "
10,"You mean the number in the id behind `ctl` that is 00 right now? Yes, regex is the best way to handle that. I think you can just give BS the regex object. Try this

    import re
    
    id_search = re.compile(r'LV_CardRepeater_ctl\d+_card_ctl\d+_listingBathroomCount')    
    bedrooms = [x.text.strip() for x in div.find_all('span', {'id': id_search})]
"
10,"Please edit your post to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like github or pastebin. Your code is hard to read and test otherwise.

---

When you use the command ` serial.Serial` that has the same effect as pushing the reset button on the arduino. I'll bet that you are sending the command before the arduino has had a chance to finish rebooting. Try adding a delay: 

    import serial
    import time
    
    def light_led():
        port = serial.Serial('COM5', 9600)
        time.sleep(1) # pause for 1 second
        port.write('s'.encode())
        print('Test')
    
    light_led()
"
10,"You mean calling gimp from a python program? Just like calling any other program, use the subprocess module. 

What's the big picture here? What can gimp do that PIL or imagemagic can't? "
10,You mean [batch mode](https://www.gimp.org/tutorials/Basic_Batch/)? 
10,"FWIW I agree with /u/A_History_of_Silence 

You seem to think short one-line code is better, faster, efficient, more elegant. It's none of those. "
10,"edited. ""iterable"" just means list or tuple or some data type you can loop over. "
10,"Return an iterable and use it in another loop? 

    def goodKey(key):
        # does some regex stuff to the string and returns it
        return 'name 1', 'name 2'
    def concise(response):
        return {name: target['targetId'] for target in response for name in goodKey(target['name'])}"
10,"The default is to close the window when the program finishes. Once you enter the input, your program prints the output and closes the window, so fast that you never see the output printed. The normal way to deal with this is to use IDLE or a similar editor like Geany or pycharm that keeps the window open. Another way is to add something to prevent the program from being over, usually another input(). Try adding this to the bottom of your code: 

    input(""Done. Press enter to exit"")"
10,"> won't importing it once and not garbage collecting it consume more memory?

But how big is a module really? a few kilobytes usually. Python is a language that will happily sacrifice a tiny amount of memory for speed and program readability. 

> If i were to call an import within a function, and since python garbage collection will automatically remove the module once i'm done inside the function, wouldn't it be better as i'm using lesser memory?

Better in terms of keeping the memory footprint down, I suppose. But here's a mindtwister: what's the point of RAM? Why don't we just use the hard drive to store things? Answer: Because RAM is blazingly fast compared to the HDD. The entire point of RAM is to store things that we may need again so that the second, third, etc time we need it we don't need to wait for the HDD. Despite what a ton of memory clearing apps tell you, unused (""free"") RAM is not universally good. You need to use the RAM for it's intended purpose, like keeping modules for the next time the function runs. 

Edit: as /u/K900_ points out, python has a ""lazy importer"". Modules are not imported again on subsequent calls. You can test this yourself easily by importing a module that prints a message. "
10,"There is no max variable size. Other languages have a max size for various types, but python has built in code to manage that for you. However a variable is stored in memory, so if you load more data than the amount of physical memory (RAM) in your computer your OS will be forced to use virtual memory which will make your code very slow. 

How big of a file are we talking about? "
10,"That's right, it treats a string as a tuple of ascii / unicode code numbers for comparison purposes. Since the ascii letters were assigned number in alphabetical order, this means that strings are compared alphabetically. This extends to sorting, since that's just a bunch of comparisons. 

    >>> data = ['spam', 'and', 'eggs']
    >>> data.sort()
    >>> data
    ['and', 'eggs', 'spam']
    
    
"
10,"Technically there are 2 choices: an IDE or a code editor. An IDE is specific for one programming language, and a code editor is generalized and supports many languages. However colloquially people use the term IDE for all of them now. Most of the time a code editor is lightweight (fast) but limited features, and an IDE is feature rich but bloated. 

Notepad++ (Windows only), Geany, Atom, Sublime Text (not free, but practically), Thonny,  VS Code and vim are good code editors, PyCharm or Spyder are the best python IDEs. Personally, I use Geany for most of my coding.

Here's a long list of options: https://www.reddit.com/r/learnpython/wiki/ide. Wikipedia also has good lists of [code editors](https://en.wikipedia.org/wiki/Comparison_of_text_editors) and [IDEs](https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Python). "
10,I'm even more confused. Can you make a minimal example program that shows what you are trying to do? 
10,"    result = [funca(), funcb()] + funcc()
    
or
   
    result = [funca(), funcb(), *funcc()]

? "
10,"How to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like github or pastebin. 

---

Convert to lowercase first, then translate, then split the words. 

    # you'll probably want to expand this list, but you don't need to include whitespace
    PUNCTUATION = "",.'?!"" 

    with open('book.txt') as f:
        book_text = f.read()
        # we are done with the file now, so we exit the with block

    wordcount = {}
    book_text = book_text.lower()
    book_text = book_text.translate(str.maketrans('','',PUNCTUATION))
    words = book_text.split()
    for word in words:
        if word not in wordcount:
            wordcount[word] = 1
        else:
            wordcount[word] += 1
    print(wordcount)"
10,"""Expert"" is a flexible term, depends if you are the employer or employee, but for me about 3 years, with no real dedication, just side projects at work. But it was easier for me since python was not my first programming language. "
10,"You can just chain them. 

If you want more specific help you need to show your code and what you are trying to do. "
10,"lol no idea. If we added a flush argument to that it would make sense, because that would allow you to print something, do some other work, and then continue printing on the same line. 

    import time

    print(""working on it ..."", end="" "", flush=True)
    time.sleep(2) # pretend to do some hard caluculations
    print('done')
"
10,`translate`
10,That means you forgot the `return` in the `get_dirs_from_path` function. So python is returning None by default.
10,"/u/xKINGERx, your submission has been removed from r/learnpython for the following reason(s):

* Posting only assignment/project goal is not allowed. You need to post what you have tried so far. Please see subreddit rules in the sidebar.



____

If your submission was removed for lacking additional info you can edit your submission text and then notify moderators and ask for the submission to be re-approved.

If you have any additional questions either reply to this comment or [message the moderators](https://www.reddit.com/message/compose?to=/r/learnpython)."
10,"As a list? So in that case you should just use your previous function from a new function. Like this: 

    def myfunc_core(arg):
        result = ''
        i = 0
        for letter in arg:
            if i%2 == 0:
                result += letter.lower()
            else:
                result += letter.upper()
            i+=1
        return result

    def myfunc(*arg):
        result = []
        for word in arg:
            result.append(myfunc_core(word))
        return result

    print(myfunc(""apples"", ""oranges""))


"
10,"Thanks. What result do you want from myfunc(""apples"", ""oranges"")?

"
10,"Please edit your post to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like github or pastebin. Your code is hard to read and test otherwise.

---

What result do you want from `myfunc(""apples"", ""oranges"")`?"
10,"Because you put it in the main() function, but you never call the main function, so it's never defined. Typically we would lay out a Python program like this: 

    class Point:
        def __init__(self, x, y):
            self.x = x
            self.y = y
    
    def main():
        # Tests for point
        # ===================================
        p = Point(0, -1)
    
        p.move(2, 2)
    
        assert p.x == 2
        assert p.y == 1
    
        print 'Success! Point tests passed!'
    
    if __name__ == '__main__':
        main()

We nearly never have a function defined inside another function, and certainly never define a class inside a function. All function and class definitions should be on the global level. (ok, theres a couple very obscure exceptions)"
10,"json is a file standard, not a python object. The line `config.user_data = json.load(file)` converts all the text from the file into a python object, usually a list or dictionary (depending on how the data is structured). After that json is out of the picture. 

2,000 keys or even 200,000 keys are easy for a modern computer; the number of keys will only slow you down due to the time it takes to read / write from the disc. Because of that I'd recommend you move the read/write code outside of the loop. 
"
10,"You have to double quote it, once for python, once for Windows. You also need to include the actual binary name, and you need to remember that windows paths must always be raw strings (with a leading 'r'). try this: 

     os.system(r'""C:\Program Files\Epic Games\Fortnite\FortniteGame\Binaries\Win64\fortnite.exe""')



"
10,I have no way of knowing what you are creating with Windows Forms. However I can tell you that anything else will be different; you'll never find anything exactly like Windows Forms. 
10,"There is no best GUI library; if there was then everyone would use it and there would only be one.

There is only ""best for"" ... which means you need to tell us what you want from a GUI library before we can tell you what's best for you.

[Here's a short list of options](https://www.reddit.com/r/learnpython/wiki/faq#wiki_what_gui_should_i_use.3F). 

edit: FWIW I nearly always use tkinter because it's fast and easy to program, I rarely use animations and I don't care if the GUI looks 10 years old. And admittedly probably a lot of bias because I've been using it the longest. "
10,"Right, but for a beginner who needs to format the output using a separate print for each line is IMO the second easiest. The best would be a triple quoted f-string, but I don't know what version of python OP is using. "
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,What API are you using?
10,"I like how you think, but sadly python does not allow you to assign variables like that. You need to do it like this:

    def userInput(word):
        return input(""Type a "" + word + "": "")
    
    noun1 = userInput(""noun"")
    noun2 = userInput(""noun"")

Your print block won't work either. You need to use separate print statements for each line: 

    
    print(""Many people don't like "" + noun1 + "". However, I think they're immensly"")
    print(""better than "" + noun2 + "". The president of "" + noun1 + "" is "" + noun3 + ""."")

Or (better) use string formatting. 

Are you using python2 or python3? You've got code from both in there ... "
10,The buffer will flush on `f.close()` though. OP must have checked the file before running that line. 
10,"A lot of good answers here, but they all leave out one very important aspect of a python Queue: they implement a lock. 

What this means is that if you have several threads running at once and they all use the same object, you can have an error when 2 threads try to modify an object at the same time. For example if one thread is removing an element and halfway through that process another thread tries to append an element, you can be left with corrupted data. 

A Queue has some logic where before you can do any operation it checks to be sure no other thread is operating on it. If you want to make your own queue you would need to use [a Lock object](https://docs.python.org/3/library/threading.html#lock-objects) to ensure that only one thread at a time can use it.

All that said, cpython has something called the GIL, which essentially acts as a lock for all operations implemented in C. The effect is that lists and dictionaries are also thread safe, so you often don't need a Queue. "
10,"That's a novel way to make an expression non greedy, but you should probably just use the standard `?`: 

    \+(.+?):

https://regex101.com/r/90nwwQ/1"
10,"I agree with /u/crashfrog, and so does the Zen of Python. There is no line limit, and short code is not faster code or better code. "
10,"There is no `Path.iglob`, because `Path.glob` is a generator already. "
10,"The same thing in the modern way: 

    from pathlib import Path
    for photo in Path('Photos').glob('*.jpg'):
        bot.send_photo(chat_id, photo.read_bytes())"
10,"You are doing it all correctly. Where do you want to use the filename? For example if you want to add a method to simply print the name:

    def print_name(self):
        print(self.filename_var.get())

And then add a Button to call that:

        ttk.Button(self.frame_content, text='Print name', command=self.print_name).grid(row =5, column =    1, pady = 20, sticky = E)

Now that button will print out the filename currently stored in memory."
10,"This is fairly easy to do, but you will need to know exactly what kind of signal the gate needs to open / close and how it's connected to the Pi. I don't think you'll be able to get internet help to do that, you'll need someone that can physically inspect and test the gate and the RPi.  "
10,The 3 lines of code you posted are correct. The problem is in the print portion of your code. 
10,In python3 those are all equivalent. 
10,What have you tried? We will help you if you are stuck but we will not write code for you. 
10,"It's your type hint. It needs to be like this: 

    from typing import List
    def restriction_sites(strand: str, rsequence: str) -> List[int]:
"
10,What have you tried? We will help you if you are stuck but we will not write code for you. 
10,"Converts whatever you give it to a list. `list(user_input)` converts the user_list string to a list, and `list(reversed_input)` converts the reversed generator to a list. You don't have to convert them to lists to compare them, but they do need to be the same type. You can't compare a string and a generator. Another way to do this is to convert the generator to a string, so that you can compare it to the user_input string: 

    if user_input == ''.join(reversed_input):
"
10,"Yes, you can just move that code to a new computer and push up the processes number (or omit it to have it autoselect). The optimal build obviously depends on what your calculations are doing, but in general a fast processor and plenty of fast RAM are much more important than number of cores. Remember cores are not completely independent, so they will still have to queue for shared resources. 

Also, don't be tempted by ""hyperthreading"". It won't help you. 

BTW: multithreading is not a word we use in python. Your choices are multiprocessing and threading (and others like async). "
10,"a SyntaxError often means you forgot to close a parenthesis on the previous line.
If not, show us the complete code you are using and the complete error message. I don't see anything wrong with that snippet."
10,"This is correct. You need to resize the image *before* converting to a PhotoImage. 
    
    img = Image.open(""File.jpg"")  # PIL solution
    img = img.resize((250, 250), Image.ANTIALIAS) #The (250, 250) is (height, width)
    img = ImageTk.PhotoImage(img) # convert to PhotoImage
    image = C.create_image(1500,0, anchor = NE, image = img)
    # image.pack() # canvas objects do not use pack() or grid()"
10,"*Compared to other programming languages*, python is very easy. But programming as a whole is hard. It requires a whole new mindset and it takes a while to get comfortable with it. "
10,"list comprehension is known to be the fastest and most efficient if you want a list result, but an expert would use a generator such `itertools.chain_from_iterable` without the `list()` call. What's your use case? "
10,"First some terminology. A method IS an attribute. By ""attribute"" I assume you mean non-callable attributes, generally called ""data attributes"" or ""variables"". 

I don't understand what you are asking. You want to have one attribute that bundles the other 2? Generally we don't like to do that. We like to have a piece of data in a single place only. 

If your only objection is the extra effort of typing `()` you can use the `property` decorator to remove that requirement. "
10,"That's pretty much right. In fact many languages call them ""pointers"" instead of ""names"". They point to a location in your computer's RAM. So another way to say it would be ""x points to the RAM location where '123' is stored"". "
10,"Please don't post pictures of your code. It's hard to read and impossible to test (and against the sub's rules). Post the question and the code as text, [formatted for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F).

---"
10,You can do this if you use a real terminal / command line (not IDLE or a website or similar). How you do it depends on your OS. What OS and what version of python are you using? Also what format are you wanting? Can you give an example of user interaction? 
10,"First, there is no 100. Like most professions, people learn the basics and then they get specialized. For example using python for machine learning or web development or bioinformatics all require vastly different skill sets. No one knows them all. If your goal is to get a developer job you will need to make an early choice about what kind of developer you want to be. 

Second, everyone learns in different ways. I personally can not fathom how people learn anything from youtube, but many do. 

No matter what, you'll need to start with the basics of python. We have [a pretty long list of learning resources in the wiki](https://www.reddit.com/r/learnpython/wiki/index#wiki_new_to_programming.3F). Try a few of those and see what resonates. For a brand new programmer I'd recommend start with automate the boring stuff with python.

Also, if you don't have one already make sure you look for a project that interests you and start on it as soon as you can. Programming is a lot more fun if you have a goal. 

And of course feel free to ask us if you get stuck. "
10,Have you looked into Gooey?
10,"Ok, I assumed you meant you were writing your own context manager. The person that wrote `open()` allows it to raise errors; that was a choice the programmer made. That means when using `with open()` you will need to put it in a try block to catch errors. If you find it cleaner to use try ... except ... finally then by all means use that. 

However you don't HAVE to wrap it in a try block. In fact most of the time the try block should be a much higher level. Errors are useful since they can travel up the stack. 
"
10,Your post sounded very hypothetical; what is your current use case? 
10,"If you want to return something you have to use the `return` keyword. Otherwise python returns None by default. Also, don't name a variable with the same name as the function, and you don't need that second for loop in there. Try this: 

    def column(i):
        output = [row[i] for row in horizontal]
        return output
"
10,"I made these in tkinter / ttk a few years ago: 

https://github.com/novel-yet-trivial/XMLEdit  
https://github.com/novel-yet-trivial/HexView

Dunno if you would call it ""modern"" but it fits into the windows theme. "
10,"From the [docs](https://docs.python.org/3/reference/datamodel.html#object.__exit__):


> If an exception is supplied, and the method wishes to suppress the exception (i.e., prevent it from being propagated), it should return a true value.

In other words the context manager has the option to catch and deal with exceptions. "
10,"Every line has an invisible newline character on it, so every line is 17 characters. Also a kilobyte is 1024 bytes (not 1000), and a megabyte is 1024 kilobytes. So

     >>> 17*100000/1024/1024
    1.621246337890625

Your OS may report a slightly different ""size on disk"", due to how data is addressed on your hard drive. "
10,"Which line are you asking about? The longer line 

    clips[clip['book']][str(clip['position'])] = clip['content']

is adding data to a nested dictionary. It's equivalent to this: 

    # extract data from the clip dictionary
    title = clip['book']
    position = str(clip['position']) 
    content = clip['content']
    
    # extract the book dictionary from ""clips"", the dictionary holding all books
    book_dict = clips[title]
    
    # add the data to the book dictionary
    book_dict[position] = content
    
I have no idea why someone would convert position to a string first, especially since json will do that automatically. "
10,"> There are 100,000 lines each will be 16 characters long 

So 1.62 MB. Your computer has thousands of times more memory than that (most likely) so you can easily afford to be inefficient. "
10,"The way I used it with the splat makes it a transpose function. A file object is an iterator of lines, each of which is an iterator of characters, so it's a 2D iterator. `zip()` just transposes that. 

    >>> data = [[1, 2, 3], [4, 5, 6]]
    >>> print(list(zip(*data)))
    [(1, 4), (2, 5), (3, 6)]
    "
10,"What you are asking about is called a ""global variable"". Programmers avoid those if at all possible since they lead to messy and buggy code. Instead you should pass the data to the point where it is needed, like this: 


    def load_settings():
        """"""
        Read initial config
        """"""

        # read default api
        default_api = 'foo'

        # read key into config.json
        api_key = '1hgjd6Ahfu'

        return default_api, api_key

    if __name__ == '__main__':
        # load config
        api, key = load_settings()

        print(api)
        print(key)"
10,"Files simply don't work that way. A file is a long string of characters with the rows marked by a special character. The only way to find a new row in a file is to search for the end of line character. Your question is very similar to asking someone for the first letter of every sentence in a book. There's no easy way to do that; you have to read the entire book and extract the information. 

The good news is that even though it's not efficient, python makes it easy to get columns with the zip() function. 

    with open(text_file) as f:
        columns = zip(*f)
    
HOWEVER, your example seems to have a file where all the rows are the same length. If that's true for your real data then you could do some math to efficiently read a column of data out, although you'd have to program that yourself. 

How big is the file you are working with? "
10,"As a complete beginner I recommend you stick with Geany for now. Pycharm tends to confuse beginners because it assumes you know about PEP8 and virtual environments and tests etc etc. Once you have a grip on vanilla python give Pycharm or similar a try.

Geany (which is a lightweight code editor, not an IDE) and pycharm are very different, and it wouldn't be unusual to use both. "
10,"You mean pipe it? You can but as a rule it's better to use python modules instead of calling external programs, if possible. To replicate your bash DNS lookup: 


    import socket

    HOST = ""reddit.com""
    PORT = 80

    ip_addresses = {x[4][0] for x in socket.getaddrinfo(HOST, PORT)}
    for ip in ip_addresses:
        print(HOST, ip)

Edit: better, more pythonic version: 

    import socket

    HOST = ""reddit.com""
    PORT = 80

    ip_addresses = socket.getaddrinfo(HOST, PORT,
        type=socket.SOCK_STREAM,
        family=socket.AF_INET) 

    for ip in ip_addresses:
        print(HOST, ip[4][0])
"
10,"I see, it's an indentation error. That last print statement needs to be unindented once. Also you don't need the print around the call at the end. Try it like this: 

    def eat_out():
        base_cost = int(input(""base_cost:""))
        tip_amount = input(""tip type:"")
        if tip_amount == ""traditional"":
            full_cost = (base_cost + (base_cost * .15) + base_cost * .06)
        elif tip_amount == ""regular"":
            full_cost = (base_cost + (base_cost * .18) + base_cost * .06)
        elif tip_amount == ""generous"":
            full_cost = (base_cost + (base_cost * .2) + base_cost * .06)
        print(full_cost)


    eat_out()
"
10,"Python is not a replacement for bash ... did someone tell you it was? 

I don't understand your post. Did you have a question about that bash snippet? "
10,"Please edit your post to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like github or pastebin. Your code is hard to read and test otherwise.

---

Your code looks ok. Can you give an example of what you input, what you get and what you expected to get? "
10,"And you want to do that in python? Will you be using a linux machine? What version of python are you using? 
"
10,"It's just tradition to have one at the end of any text file. Its a tradition from the old days when that character made the typewriter advance to the next line, so you would be leaving the typewriter in a state ready for the next guy. If you don't then using a reader like `cat` in linux will produce strange output but no, it does not do anything for the code."
10,"Your mac ships with a lot, for example `ls` (to see files in a directory), `chmod` and `chown` (to change permissions), `cat` (to see file contents), `tar` (to make archives), and thousands more. Then you can download and install programs like `ffmpeg` (for manipulating videos), `rsync` (for transferring data), `vim` (a text / code editor), `git` (for version control), and hundreds of thousands more. Also you generally use the CLI to start daemons such as webservers. In addition many GUI programs also have a CLI interface, for example libreoffice has a command that will convert a file into a pdf without ever opening the GUI (often called ""headless"" mode). 

Start with a few bash tutorials and go from there. "
10,"I have not seen that before, but googling the error tells me that you need to install root certificates. I'm not sure how to do that, maybe someone else will jump in. "
10,"There are broadly 2 types of programs: CLI (""command line interface"") and GUI (""graphical user interface""). GUI programs are what you are used to: they open a pretty window that you can click on. A CLI program is (usually) keyboard only interface. These are generally designed to be fast and powerful, not pretty or easy to use. 

A terminal is a GUI program that gives you an access point to use CLI programs. Your terminal does this with a program called ""bash"", which is a type of shell. bash uses the `$` prompt to tell you it's ready for a new command, generally the name of the CLI program you want to run. If you google ""bash tutorial"" you will learn a lot about your terminal. 

The program you are trying to use is a CLI program, as you can see from the demo video. "
10,"1. To use without git you would use the ""download zip"" option on github. 

2. After you clone you have to cd to the correct directory. So the instructions really should be like this: 
    
        $ git clone https://github.com/sdushantha/vsco-dl.git
        $ cd vsco-dl
        $ pip3 install -r requirements.txt"
10,Some of us do. For me I am very rarely at my computer without several terminal windows open. It's not required. However that program you linked has formatted output that will look terrible in IDLE. It's designed to be run from the terminal. 
10,"Those instructions assume you are using linux and assume you have the program git installed and know how to use it. 

What OS are you using, and do you have git? You don't need git to use this repo, you only need git if you want to follow these instructions. "
10,"Note IDLE calls the REPL the ""python shell"", so be very careful with that word. 

OP, /u/crashfrog means the command line (on windows) or terminal (on mac/linux). "
10,Did you remember that to launch python3 in linux you have to use the command `python3`? 
10,"AFAIK it's shipped with python3 for a few years now. 

How are you installing it? "
10,">  installed python on a fresh build of ubuntu.

Ubuntu comes with python. How / why are you installing it? "
10,"I can't think of a popular package that does that. As a counterpoint here are some examples of breaking things: 

    >>> df = pd.DataFrame([[1],[2],[3],[4]])
    >>> df[0].sum()
    10
    >>> df[0].sum = 42
    >>> df[0].sum()
    Traceback (most recent call last):
      File ""<stdin>"", line 1, in <module>
    TypeError: 'int' object is not callable
    
-

    >>> import tkinter as tk
    >>> root = tk.Tk()
    >>> tk.Label(text=""works well"").pack()
    >>> root.tk = 42
    >>> tk.Label(text=""won't work"").pack()
    Traceback (most recent call last):
      File ""<stdin>"", line 1, in <module>
      File ""/usr/lib/python3.6/tkinter/__init__.py"", line 2766, in __init__
        Widget.__init__(self, master, 'label', cnf, kw)
      File ""/usr/lib/python3.6/tkinter/__init__.py"", line 2298, in __init__
        self.tk.call(
    AttributeError: 'int' object has no attribute 'call'
"
10,"Very true, but if you homebrew it in cython you will certainly beat it. "
10,"This method loops through the entire list to find the max, and then again to count the number of times it appears. You could homebrew a function to do both of those things in a single pass. "
10,"Sounds like you want to follow it up with a `count()` call. 
    
    >>> num_list = [ 1, 2, 3, 4, 4]
    >>> biggest = max(num_list)
    >>> how_many = num_list.count(biggest)
    >>> print(f""The max is {biggest}, and it shows up {how_many} times"")
    The max is 4, and it shows up 2 times

This isn't the most efficient way, but it's the easiest.
    "
10,The [simple crypt](https://pypi.org/project/simple-crypt/) module makes that very easy. 
10,"You can use `list()` to convert a bytes object to a list of integers: 

    >>> data = b'\x94\x06\x92\x06\x91\x06\x8f\x06\x8d\x06\x8a'
    >>> list(data)
    [148, 6, 146, 6, 145, 6, 143, 6, 141, 6, 138]

But the conversion is generally not needed, you can treat the bytes as a list of integers directly for most things. 

What's the big picture here? What are you trying to accomplish? "
10,"`object.__init__()` happens to do nothing, which is why we never bother with `super().__init__()` on a class without explicit inheritance."
10,"So you want it to be read only? Then say that in the documentation. Don't try to police your users. 

> Also, should I use 'self._a' or 'A._a' here?

`self.a`. To be dynamic try to hardcode names in your code as little as possible. In good code I should be able to rename your class with a single change. It also allows subclassing. 
"
10,"It should be indented like this: 

    num = 0
    while num < 30:
        ts = 0
        for x in range(1, num):
            if num % x == 0:
                ts = ts + x
        if (ts == num):
            print(num)
        num = num + 1
"
10,"No, you can't modify an object without a method. However several operators exist as shortcuts to methods, most notably augmented assignment operators. For instance using `+=` on a list is a shortcut to the `.extend()` method. 

I don't understand your second question. Can you give an example? "
10,"In python3, a class with no explicit inheritance inherits from `object` by default."
10,"That's not mutation, that's reassignment. You are reassigning the name ""list2"" to a new list. To mutate you nearly never use an `=` operator, you use a method. For instance `append()`: 

    >>> list_2= list(xrange(5,14))
    >>> names =('Sam', 'esmail',14,8,67.908, list_2)
    >>> names
    ('Sam', 'esmail', 14, 8, 67.908, [5, 6, 7, 8, 9, 10, 11, 12, 13])
    >>> names[5].append(42)
    >>> names
    ('Sam', 'esmail', 14, 8, 67.908, [5, 6, 7, 8, 9, 10, 11, 12, 13, 42])
    
Edit: Just because you can does not mean you should. All of the advantages of a tuple vs a list are thrown out when you put a mutable object in a tuple. For example you can no longer use this tuple as a dictionary key: 

    >>> data = {names: 'spam'}
    Traceback (most recent call last):
      File ""<stdin>"", line 1, in <module>
    TypeError: unhashable type: 'list'
    "
10,"I don't understand what you are trying to do. Can you show us an example of the output you want? 

15 is an odd number, so like all the other odd numbers it's printed in line 5. "
10,"You need to install the package separately for every copy of python; they won't share. TBH you probably should have only one version of python on your computer, it would avoid a lot of confusion. I'd recommend removing all but one unless you have a reason to keep multiples. 

To use in anaconda just follow the same instructions, starting in spyder. The returned path will be something like C:\Anaconda3\python.exe (I think; i haven't used it in a long time) so just use that path to install: 

    C:\Anaconda3\python.exe -m pip install myPackage

Doesn't anaconda have a graphical package manager? "
10,"When that problem comes up it's usually because you've installed more than one copy of python, and you are installing myPackage to one copy but you are using another. Use this code in python IDE (I assume you mean IDLE?) and spyder to find what copy of python each of those is using

    import sys
    print(sys.executable)

then use that location to install libraries. For instance if the above command returns ""C:\Python27\python.exe"" then

    C:\Python27\python.exe -m pip install myPackage

If the executable is ""pythonw.exe"" change it to ""python.exe"".
"
10,You'll have to show us all your code for help with that. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like github or pastebin. An example use would be helpful too. 
10,"You can't launch a module, you can only launch a function in the module. You need to move all the code in the tkinter_module into a function, for example `main()`, and then: 

    t1 = threading.Thread(target=tkinter_module.main)

(it's for reasons like this that in professional code you will never see any code that's not in a function). 

That said, tkinter really hate being in a thread that's not the main thread. You really should restructure this so that your API ends up in the child thread. "
10,In the same folder that your .py file is in. 
10,"In python functions return None when there is no data to return. This is default behavior if you don't include a return statement, so we usually leave it out. "
10,"Your link requires a login, but I think it's just the standard random module? 

To make the random iterator I think you will need to make a copy of your list and randomly pop from the copy. So that means you need to start by making a pop method. "
10,"FWIW you could hack a solution by testing if the argument is a function or not, provided of course that you would never use a function as the argument on purpose. 

    DEFAULT = ""foo""
    def validate(test=DEFAULT):
        def outer(func):
            def wrapper(*args, **kwargs):
                print(""test:"", data)
                func(*args, **kwargs)
            return wrapper
        if callable(test): # check if the argument is a function
            data = DEFAULT
            return outer(test)
        else:
            data = test
            return outer

Using `@validate()` is a much better solution. "
10,`@validate` and `@validate()` are completely different shortcuts. 
10,Is fields[1] a path or filename? Because that's what os.path.getsize expects. 
10,"Just so you know: A numpy array is not made to be appended to like a list is. In the background of np.append an entire new array has to be created, so it's expensive (slow). It's much better to use lists if you need to append data. "
10," `sum()` sums the columns by default, OP wants to sum the rows (although in this example the result is the same). You want

    df['sum'] = df.sum(axis=1)

"
10,"First, as /u/woooee pointed out, multithreading is not a thing. To run asynchronously your options are multiprocessing or threading (or a few other things like async). 

**Multiprocessing is used to allow CPU bound applications access to more processing power. **

Modern computers have several processors, usually between 4 and 8 (quadcore, hexcore, etc). However a program can generally only use one, the other processors run other programs. If your program is ""CPU bound"", that is if it is maxing out the processor's capabilities, then you can use the multiprocessing module to split your program into 2 or more programs, and run each on it's own processor. Then (if you engineer it right) you can have one of your splits compute half the data, the other split compute the other half, and since they work at the same time you get done twice as fast. 

**Threading is used to allow IO bound applications to do things in otherwise idle time.** 

If your program is ""IO bound"", that is if your program spends a lot of time waiting for a response from a website, user, USB device, etcr, you can use the threading module to use the idle time to do something else. This is often used if you need to download 6 things from the web. The computer makes a request and then, instead of idling while the request is processed, it prepares and makes the 2nd request, and the 3rd, etc. 

So you see threading and multiprocessing are not used for the same applications. So what is your program hung up on? "
10,"That's plain wrong. 

"
10,"http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html

http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.itertuples.html"
10,"I am the mod of this subreddit, and I want to keep this subreddit as a place for questions only. No promotional posts here.

Your post has been deleted. "
10,"Ok, don't promote your tutorials here either. "
10,That looks interesting but this sub is for questions only. Please do not promote your blog here.
10,"> and threading would be more efficient than multi-processing.

Why do you think that? "
10,"The wrapper function is what replaces the original function. It's the entire point of a decorator. 

Remember the decorator syntax 

    @my_decorator
    def func():
        return 42
    
Is just syntactic sugar for this long form

    def func():
        return 42
    func = my_decorator(func)
    
You can see in the long form that whatever the decorator function returns replaces the original function. Normally the decorator creates and returns a wrapper function, which contains some extra code and calls the original function. The original function is now encased in the wrapper and inaccessible any other way. "
10,"Not sure what you are trying to do, but I suspect you need to strip first, then split. 

    new_line = line.strip().split()"
10,"Which output exactly do you want to change? What terminal program are you using? 

The joy of open source is that you can always much about with the pip source code. [This looks promising](https://github.com/pypa/pip/blob/467ee29625e9a037ffcd966724c739d38656c805/src/pip/_vendor/colorama/winterm.py#L6). "
10,"Some udemy content is good and original, some of it is hyped up garbage, and some is ripped off of free youtube channels and the ""author"" offers no support. Sadly there's no good way to tell them apart unless you know someone who can personally recommend a course. 

Since you are at the very start of learning python I'd recommend you stick to the many free resources. If you really want to burn some cash, put up a flyer to hire a local tutor. In the beginning stages meeting someone face to face at starbucks is much more helpful than a online video. Python is extremely popular; you will have no problems finding someone near you that can teach you. "
10,"um ... you don't seem to understand what a priority queue is. The order of the heap is dependent on the order of the input. 
    
    >>> data
    [8, 7, 2, 0, 6, 5, 9, 4, 1, 3]
    >>> heapq.heapify(data)
    >>> data
    [0, 1, 2, 4, 3, 5, 9, 8, 7, 6]
    

Or in your terms, try this: 

    import heapq
    names = [('zappa', 'moon'), ('davis', 'betty'), ('aaron', 'hank'), ('zappa', 'dweezil')]
    priority_queue = []
    for name in names:
        heapq.heappush(priority_queue, name)
    print(priority_queue)

You are right: you **can** use a priority queue to sort. That's called a heapsort. But it requires popping the elements off in order. 

    >>> data = [heapq.heappop(data) for _ in range(len(data))]
    >>> data
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    
"
10,Then why would you equate them? You can't use one in place of the other. Unless you are suggesting to implement a heapsort? 
10,"> But if your only goal is to sort by last, first, there are much easier ways to do it than this.

A priority queue is completely different from a sort. 
"
10,"Line 11 is unpacking. We could also write it like this: 

    for pair in heap:
        key = pair[0]
        name = pair[1]
        print(name)

If you print heap you will see that it's a list of tuples. By unpacking we assign the values inside the tuples to separate variable names. "
10,"The built in heapq does not have a key argument, so you will need to supply your data as a tuple of (key value, actual value). To sort like you want you need to turn ""John Smith"" into the key ""SmithJohn"". Then use indexing or unpacking when it's time to use the values to get only the original value back. 


    from heapq import heappush

    data = [""John Smith"", ""Joe Smith"", ""Dolly Parton""]

    heap = []
    for name in data:
        first, last = name.split()
        key = last+first
        heappush(heap, (key, name))

    for key, name in heap:
        print(name)
"
10,You want to use python's built in heapq or do you want to make your own? 
10,"GUIs, web frameworks, machine learning, bioinformatics, GIS, big data, network management, white hat hacking, etc, etc. Python packages have been developed for countless specialized tasks. I'm saying that free resources are very good to learn basic python, but many of these specialized tasks require learning specialized packages, which is basically a new programming language. If you want to learn qiime, for example, I'd recommend a book. "
10,"If you are brand new to python the free resources are just as good, often better, than the paid resources. Once you need a specialty it's often worth it to invest in a structured book or course since the free resources will be somewhat piecemeal. IMO of course. "
10,"Try it like this:

    wb.save('destination file name.xlsx') "
10,"pyperclip is not part of the standard installation, you have to install it separately. Use this command from the command line (not from IDLE): 

    py -m pip install pyperclip"
10,"Many people have already written python interfaces to Gaussian files, and Gaussian even provides a link to the program directly (no file).  http://gaussian.com/interfacing/

That said it would help your learning of python to write your own parser for this that extracts exactly the data you want and puts it into the format you want. There's no trick to it, just search for what in the file and write it to a new file. "
10,"That has nothing to do with python; all those things are under the control of your terminal emulator program. You could download and use any terminal emulator, and some of them are very customizable. 
"
10,"There's many ways to do this. An advanced exercise would be to make objects for every card with a method to move. However your method works too, once you fix a few things. 

First, game killer: you cannot combine conditionals like `elif chance_cards[0] == 4 or 5:`  You have to test each condition individually like `elif chance_cards[0] == 4 or chance_cards[0] == 5:`

That said why bother with 2 numbers? Just put 4 in the list twice. 

To make a deck where you send the card to the back you can use `itertools.cycle` or `collections.deque`. Then you can just use `next()` to get the next card and send it to the bottom at the same time. 

When you have some code that you have in every single case, then you don't need it in the case structure. Move it outside of the if block and it will run every time. 

Semicolons are not needed in python

All that together: 

    chance_cards = [0,1,2,3,4,4,6,7,8,9,10,11,12,13,14,15]
    random.shuffle(chance_cards)
    chance_deck = cycle(chance_cards)

    pos_list = []
    position = 7
    print(chance_cards)
    while True:
        current = next(chance_deck) # draw a card
        if current == 0:
            position = 0
        elif current == 1:
            position = 24
        elif current == 2:
            position = 11
        elif current == 3:
            if position == 22:
                position = 28
            else:
                position = 12
        elif current == 4:
            if position == 7:
                position = 15
            elif position == 22:
                position = 25
            elif position == 36:
                position = 15
        elif current == 8:
            position = position-3
        elif current == 9:
            position = 10
        elif current == 12:
            position = 5
        elif current == 13:
            position = 39
        else:
            continue

        pos_list.append(position)
        break

    print(pos_list)



Although I don't really understand what this is doing since you can't land on another Chance from a Chance. So pos_list is always 1 long. "
10,"Yes, like this: 

    count=f""You now have {i} i's""

Note you need the `f` in front of the quotes for the `{}` to be treated as code. "
10,"That's not an error, it's a warning that you named a variable the same name as one of python's built in functions. In your case you named your variable ""list"", which means you can no longer use the built-in ""list"" function. "
10,"In python3 you have to use print as a function, with parenthesis: 

    print(mult(m,p))

"
10,"That's one way, yes. ""best"" is kinda relative. Personally I'd use an index but that adds another layer of complexity for little gain, so it's probably not ""best"" for you. "
10,Your original code removes the whitespace from the line before displaying it. Therefore it's not going to match the line in the file anymore. 
10,Hmm are you still mangleing the display text? If so it won't match the read text in the delete function. You need to remangle or use line numbers or keep the unmangled data. 
10,This format is [markdown](https://daringfireball.net/projects/markdown/syntax) which many sites including [reddit](https://www.reddit.com/r/tabled/wiki/table-format) use.
10,"If you want to do it the opposite way where a user clicks a line first to select it and then clicks delete, you may be interested in the Listbox widget which has the click-to-select functionality prebaked for you. "
10,"Bind a method in the Label to run when the label is clicked. When it's run it first checks if the delete flag is active, if not it just exits (`return`) right away. If true it passes it's own content or line number to a delete function, which rewrites the file minus that content. It then deletes the Label. Easy :). 


    import tkinter as tk

    class HoverLabel(tk.Label):
        """"""A Label that changes the background color when the mouse hovers""""""
        def __init__(self, master=None, highlight='yellow', lowlight=None, **kwargs):
            super().__init__(master, **kwargs)
            if lowlight is None:
                # get the default background color if lowlight was not specified
                lowlight = self['bg']
            self.config(bg=lowlight)
            self.bind('<Enter>', lambda *args: self.config(bg=highlight))
            self.bind('<Leave>', lambda *args: self.config(bg=lowlight))
            self.bind('<Button-1>', self._on_click)

        def _on_click(self, *args):
            if not delete_button_active:
                return # abort

            delete_line(self['text']) # a Label sends its own content to be deleted

            self.destroy() # remove the label from the GUI

    delete_button_active = True # make this controlled by a button

    def delete_line(delete_this):
        print('deleteing the line:', delete_this)
        return # remove when you finish the function

        # read the file (unless you have the data in memory somewhere already)
        with open(filename) as f:
            old_file = f.readlines()

        # overwrite the file
        with open(filename, 'w') as f:
            for line in old_file:
                if line != delete_this:
                    f.write(line)

    ### DEMO:
    root = tk.Tk()
    for data in ""Spam and Eggs"".split():
        #~ lbl = HoverLabel(root, highlight='red', lowlight='blue', text=data, width=20, anchor='w')
        lbl = HoverLabel(root, text=data, width=20, anchor='w')
        lbl.pack()
    root.mainloop()
"
10,"Probably better to `split(' | ')` or map it through `str.strip` to remove the whitespace from the individual elements. 

    entries = [Pokemon(*line.strip(""|\r\n "").split("" | "")) for line in f]
"
10,"There's many ways to skin that cat, depending how you want it to look and act. No matter what you'll need to rewrite the file. So I'd say find a way to keep track of the displayed line number, then just use an `if` block in the rewrite code to decide if the line needs to be written or not. "
10,"OK, here's an example of using a subclass. 

    import tkinter as tk

    class HoverLabel(tk.Label):
        """"""A Label that changes the background color when the mouse hovers""""""
        def __init__(self, master=None, highlight='yellow', lowlight=None, **kwargs):
            super().__init__(master, **kwargs)
            if lowlight is None:
                # get the default background color if lowlight was not specified
                lowlight = self['bg']
            self.config(bg=lowlight)
            self.bind('<Enter>', lambda *args: self.config(bg=highlight))
            self.bind('<Leave>', lambda *args: self.config(bg=lowlight))

    ### DEMO:
    root = tk.Tk()
    for data in ""Spam and Eggs"".split():
        lbl = HoverLabel(root, text=data, width=20, anchor='w')
        lbl.pack()
    root.mainloop()

you can set the colors with the arguments highlight and lowlight:

    lbl = HoverLabel(root, text=data, highlight='red', lowlight='blue', width=20, anchor='w')

Much neater, right? Especially since the subclass can be tucked away in a file somewhere and imported. "
10,"`dateutil.parser` can do that: 

    >>> from dateutil.parser import parse
    >>> parse('2019-02-13T00:30Z')
    datetime.datetime(2019, 2, 13, 0, 30, tzinfo=tzutc())
"
10,"That's called a firewall. Just google ""python firewall"" and you'll find lots of resources. "
10,"For what it's worth there's a much easier and faster way to convert to grayscale: Let PIL do it. The code for grayscale is ""L"": 

    im = im.convert(""L"")
"
10,"A comma makes a tuple. In this case the trailing comma makes a tuple with only one element. 

    >>> d = 4, 
    >>> d
    (4,)
    >>> type(d)
    <class 'tuple'>


An RGB image has 3 channels: red green and blue. To make it grayscale all three channels need to be the same. That code makes a tuple with one element and then multiplies it by 3 to make a tuple with 3 identical elements. For example: 

    >>> (4,) * 3
    (4, 4, 4)

When you remove the comma it becomes a normal integer, and multiplication means something completely different now: 

    >>> (4) * 3
    12
    "
10,"Try using `functools.partial` to make closures instead of lambda. For example (plus several other common mistakes fixed):


    from functools import partial

    def highlightBtn(customerData, *args):
        customerData.config(bg='grey')

    def populate(frame2):
        removeLbl = Label(frame2,text='Select customer to remove and press confirm:',bg='#333333',fg='#CCCCCC')
        removeLbl.grid(row=0,column=0)
        with open('Customer.txt') as f:
            customers = [line.strip().split() for line in f]
        for rowCount, customer in enumerate(customers, start=3):
            customerData = Label(frame2,text="""".join(customer),width = 60,anchor='w',bg='#333333',fg='#CCCCCC')
            customerData.grid(row=rowCount,column=2)
            customerData.bind(""<Enter>"", partial(highlightBtn, customerData))

Not sure what you are trying to do here ... is it making a label that highlights when you hover over it? You really should make a subclass to do that; it would be much neater. "
10,Hmm show us the full error message. 
10,"Because you have a naked except on line 64, *any* error will cause the ""can't find the file"" error message. First, lets add a print statement so we can see what the actual error message is: 

        except Exception as e:
            tkinter.messagebox.showerror('file not found','Melody could not find the file. Please check again.')
            print(e)

Run that, and let us know what error is printed in the terminal. 

I'm guessing it's actually a NameError, because I don't see a variable named ""text"" anywhere. Did you mean to use ""statusbar"" on line 43? "
10,I don't want to register for kaggle ... please use pastebin or similar code sharing site to share your data. 
10,You will need a motor driver - a small circuit that takes commands from the Pi and turns them into high power for the motor. What kind of driver will depend on the kind of motor. How you control it from python will depend on the kind of driver. The GoPiGo kit will include all the hardware and code you need. 
10,"I get the feeling you need to know that you can use `range()` to count by steps. Try this: 
    
    timestampCurrent = 1549400400
    timestampOneYearAgo = 1517864400
    oneDay = 86400

    for timestamp in range(timestampCurrent, timestampOneYearAgo, -oneDay):
        # loops 365 times        
        print(timestamp) "
10,"    csvwriter.writerow(time[0].values())

That 0 means the first element. You probably want 

    csvwriter.writerow(year.values())
"
10,"You can concat strings with a comma in the print function, but nowhere else. That's a feature of the print function, not python in general. Other places you need to use `+` or string formatting. "
10,"Please edit your post to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like github or pastebin. Your code is hard to read and test otherwise.

---

There's a number of ways to get that output. IMO the easiest is to just add a newline character to the data that gets sent to the file: 

    program_file.write(grade + '\n')
"
10,"    myNameList = myNameList + [employeeName]

Don't do that. Do this instead: 

    myNameList.append(employeeName)


Why are you using python2? 
"
10,"Sorry I didn't mean the windows command line. Look for a program called ""IDLE"" in the start menu. It should be in a folder python3 folder. That program is the python shell and allows you to open a editor window. "
10,"Yes, but this is a huge red flag that there's something very wrong in your program structure. You should never have dynamic variable names. Show us your code. You probably want a dictionary instead. "
